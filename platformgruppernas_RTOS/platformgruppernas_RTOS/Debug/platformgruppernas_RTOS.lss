
platformgruppernas_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00008c88  00080000  00080000  00008000  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .ARM.exidx    00000008  00088c88  00088c88  00010c88  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  2 .relocate     000009ec  20070000  00088c90  00018000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  3 .bss          0000a2cc  200709f0  00089680  000189ec  2**3
                  ALLOC
  4 .stack        00002004  2007acbc  0009394c  000189ec  2**0
                  ALLOC
  5 .ARM.attributes 00000029  00000000  00000000  000189ec  2**0
                  CONTENTS, READONLY
  6 .comment      0000005b  00000000  00000000  00018a15  2**0
                  CONTENTS, READONLY
  7 .debug_info   000111e8  00000000  00000000  00018a70  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_abbrev 00003407  00000000  00000000  00029c58  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d70  00000000  00000000  0002d05f  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000c90  00000000  00000000  0002ddcf  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a539  00000000  00000000  0002ea5f  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   000141b5  00000000  00000000  00048f98  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00067694  00000000  00000000  0005d14d  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00002ca0  00000000  00000000  000c47e4  2**2
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_loc    000077d7  00000000  00000000  000c7484  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007ccc0 	.word	0x2007ccc0
   80004:	00080a5d 	.word	0x00080a5d
   80008:	00080a59 	.word	0x00080a59
   8000c:	00080a59 	.word	0x00080a59
   80010:	00080a59 	.word	0x00080a59
   80014:	00080a59 	.word	0x00080a59
   80018:	00080a59 	.word	0x00080a59
	...
   8002c:	00080d49 	.word	0x00080d49
   80030:	00080a59 	.word	0x00080a59
   80034:	00000000 	.word	0x00000000
   80038:	00080dc5 	.word	0x00080dc5
   8003c:	00080e01 	.word	0x00080e01
   80040:	00080a59 	.word	0x00080a59
   80044:	00080a59 	.word	0x00080a59
   80048:	00080a59 	.word	0x00080a59
   8004c:	00080a59 	.word	0x00080a59
   80050:	00080a59 	.word	0x00080a59
   80054:	00080a59 	.word	0x00080a59
   80058:	00080a59 	.word	0x00080a59
   8005c:	00080a59 	.word	0x00080a59
   80060:	00080a59 	.word	0x00080a59
   80064:	00080a59 	.word	0x00080a59
   80068:	00000000 	.word	0x00000000
   8006c:	000808c9 	.word	0x000808c9
   80070:	000808dd 	.word	0x000808dd
   80074:	000808f1 	.word	0x000808f1
   80078:	00080905 	.word	0x00080905
	...
   80084:	00080419 	.word	0x00080419
   80088:	0008242d 	.word	0x0008242d
   8008c:	00080a59 	.word	0x00080a59
   80090:	00080a59 	.word	0x00080a59
   80094:	00080a59 	.word	0x00080a59
   80098:	00080a59 	.word	0x00080a59
   8009c:	00080a59 	.word	0x00080a59
   800a0:	00080a59 	.word	0x00080a59
   800a4:	00000000 	.word	0x00000000
   800a8:	00080a59 	.word	0x00080a59
   800ac:	00080a59 	.word	0x00080a59
   800b0:	00080a59 	.word	0x00080a59
   800b4:	00080a59 	.word	0x00080a59
   800b8:	00080a59 	.word	0x00080a59
   800bc:	00080a59 	.word	0x00080a59
   800c0:	00080a59 	.word	0x00080a59
   800c4:	00080a59 	.word	0x00080a59
   800c8:	00080a59 	.word	0x00080a59
   800cc:	00080a59 	.word	0x00080a59
   800d0:	00080a59 	.word	0x00080a59
   800d4:	00080a59 	.word	0x00080a59
   800d8:	00080a59 	.word	0x00080a59
   800dc:	00080a59 	.word	0x00080a59
   800e0:	00080a59 	.word	0x00080a59
   800e4:	00080a59 	.word	0x00080a59
   800e8:	00080a59 	.word	0x00080a59
   800ec:	00080a59 	.word	0x00080a59
   800f0:	00080a59 	.word	0x00080a59

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	200709f0 	.word	0x200709f0
   80110:	00000000 	.word	0x00000000
   80114:	00088c90 	.word	0x00088c90

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00088c90 	.word	0x00088c90
   8013c:	200709f4 	.word	0x200709f4
   80140:	00088c90 	.word	0x00088c90
   80144:	00000000 	.word	0x00000000

00080148 <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   80148:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8014c:	b083      	sub	sp, #12
   8014e:	4605      	mov	r5, r0
	while (len) {
   80150:	4690      	mov	r8, r2
   80152:	2a00      	cmp	r2, #0
   80154:	d047      	beq.n	801e6 <usart_serial_read_packet+0x9e>
   80156:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   80158:	4f25      	ldr	r7, [pc, #148]	; (801f0 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   8015a:	4c26      	ldr	r4, [pc, #152]	; (801f4 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8015c:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 80208 <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   80160:	f8df b094 	ldr.w	fp, [pc, #148]	; 801f8 <usart_serial_read_packet+0xb0>
   80164:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   80168:	2300      	movs	r3, #0
   8016a:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   8016c:	4b22      	ldr	r3, [pc, #136]	; (801f8 <usart_serial_read_packet+0xb0>)
   8016e:	429d      	cmp	r5, r3
   80170:	d106      	bne.n	80180 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   80172:	4658      	mov	r0, fp
   80174:	4649      	mov	r1, r9
   80176:	4b21      	ldr	r3, [pc, #132]	; (801fc <usart_serial_read_packet+0xb4>)
   80178:	4798      	blx	r3
   8017a:	2800      	cmp	r0, #0
   8017c:	d1f9      	bne.n	80172 <usart_serial_read_packet+0x2a>
   8017e:	e019      	b.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   80180:	4b1f      	ldr	r3, [pc, #124]	; (80200 <usart_serial_read_packet+0xb8>)
   80182:	429d      	cmp	r5, r3
   80184:	d109      	bne.n	8019a <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   80186:	4699      	mov	r9, r3
   80188:	4648      	mov	r0, r9
   8018a:	a901      	add	r1, sp, #4
   8018c:	47a0      	blx	r4
   8018e:	2800      	cmp	r0, #0
   80190:	d1fa      	bne.n	80188 <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   80192:	9b01      	ldr	r3, [sp, #4]
   80194:	f806 3c01 	strb.w	r3, [r6, #-1]
   80198:	e017      	b.n	801ca <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   8019a:	4b1a      	ldr	r3, [pc, #104]	; (80204 <usart_serial_read_packet+0xbc>)
   8019c:	429d      	cmp	r5, r3
   8019e:	d109      	bne.n	801b4 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   801a0:	4699      	mov	r9, r3
   801a2:	4648      	mov	r0, r9
   801a4:	a901      	add	r1, sp, #4
   801a6:	47a0      	blx	r4
   801a8:	2800      	cmp	r0, #0
   801aa:	d1fa      	bne.n	801a2 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   801ac:	9b01      	ldr	r3, [sp, #4]
   801ae:	f806 3c01 	strb.w	r3, [r6, #-1]
   801b2:	e014      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801b4:	4555      	cmp	r5, sl
   801b6:	d108      	bne.n	801ca <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   801b8:	4650      	mov	r0, sl
   801ba:	a901      	add	r1, sp, #4
   801bc:	47a0      	blx	r4
   801be:	2800      	cmp	r0, #0
   801c0:	d1fa      	bne.n	801b8 <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   801c2:	9b01      	ldr	r3, [sp, #4]
   801c4:	f806 3c01 	strb.w	r3, [r6, #-1]
   801c8:	e009      	b.n	801de <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801ca:	42bd      	cmp	r5, r7
   801cc:	d107      	bne.n	801de <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   801ce:	4638      	mov	r0, r7
   801d0:	a901      	add	r1, sp, #4
   801d2:	47a0      	blx	r4
   801d4:	2800      	cmp	r0, #0
   801d6:	d1fa      	bne.n	801ce <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   801d8:	9b01      	ldr	r3, [sp, #4]
   801da:	f806 3c01 	strb.w	r3, [r6, #-1]
   801de:	3601      	adds	r6, #1
   801e0:	f1b8 0801 	subs.w	r8, r8, #1
   801e4:	d1be      	bne.n	80164 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   801e6:	2000      	movs	r0, #0
   801e8:	b003      	add	sp, #12
   801ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   801ee:	bf00      	nop
   801f0:	400a4000 	.word	0x400a4000
   801f4:	00080401 	.word	0x00080401
   801f8:	400e0800 	.word	0x400e0800
   801fc:	000802e9 	.word	0x000802e9
   80200:	40098000 	.word	0x40098000
   80204:	4009c000 	.word	0x4009c000
   80208:	400a0000 	.word	0x400a0000

0008020c <_read>:
int __attribute__((weak))
_read (int file, char * ptr, int len); // Remove GCC compiler warning

int __attribute__((weak))
_read (int file, char * ptr, int len)
{
   8020c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80210:	460c      	mov	r4, r1
   80212:	4690      	mov	r8, r2
	int nChars = 0;

	if (file != 0) {
   80214:	b960      	cbnz	r0, 80230 <_read+0x24>
		return -1;
	}

	for (; len > 0; --len) {
   80216:	2a00      	cmp	r2, #0
   80218:	dd0e      	ble.n	80238 <_read+0x2c>
   8021a:	188f      	adds	r7, r1, r2
		ptr_get(stdio_base, ptr);
   8021c:	4e09      	ldr	r6, [pc, #36]	; (80244 <_read+0x38>)
   8021e:	4d0a      	ldr	r5, [pc, #40]	; (80248 <_read+0x3c>)
   80220:	6830      	ldr	r0, [r6, #0]
   80222:	4621      	mov	r1, r4
   80224:	682b      	ldr	r3, [r5, #0]
   80226:	4798      	blx	r3
		ptr++;
   80228:	3401      	adds	r4, #1

	if (file != 0) {
		return -1;
	}

	for (; len > 0; --len) {
   8022a:	42bc      	cmp	r4, r7
   8022c:	d1f8      	bne.n	80220 <_read+0x14>
   8022e:	e006      	b.n	8023e <_read+0x32>
_read (int file, char * ptr, int len)
{
	int nChars = 0;

	if (file != 0) {
		return -1;
   80230:	f04f 30ff 	mov.w	r0, #4294967295
   80234:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len > 0; --len) {
   80238:	2000      	movs	r0, #0
   8023a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		ptr_get(stdio_base, ptr);
		ptr++;
		nChars++;
   8023e:	4640      	mov	r0, r8
	}
	return nChars;
}
   80240:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80244:	2007acac 	.word	0x2007acac
   80248:	2007aca4 	.word	0x2007aca4

0008024c <_write>:
int __attribute__((weak))
_write (int file, const char *ptr, int len);

int __attribute__((weak))
_write (int file, const char *ptr, int len)
{
   8024c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80250:	460e      	mov	r6, r1
   80252:	4615      	mov	r5, r2
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
   80254:	3801      	subs	r0, #1
   80256:	2802      	cmp	r0, #2
   80258:	d80f      	bhi.n	8027a <_write+0x2e>
		return -1;
	}

	for (; len != 0; --len) {
   8025a:	b192      	cbz	r2, 80282 <_write+0x36>
   8025c:	2400      	movs	r4, #0
		if (ptr_put(stdio_base, *ptr++) < 0) {
   8025e:	f8df 803c 	ldr.w	r8, [pc, #60]	; 8029c <_write+0x50>
   80262:	4f0d      	ldr	r7, [pc, #52]	; (80298 <_write+0x4c>)
   80264:	f8d8 0000 	ldr.w	r0, [r8]
   80268:	5d31      	ldrb	r1, [r6, r4]
   8026a:	683b      	ldr	r3, [r7, #0]
   8026c:	4798      	blx	r3
   8026e:	2800      	cmp	r0, #0
   80270:	db0a      	blt.n	80288 <_write+0x3c>
			return -1;
		}
		++nChars;
   80272:	3401      	adds	r4, #1

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
	}

	for (; len != 0; --len) {
   80274:	42a5      	cmp	r5, r4
   80276:	d1f5      	bne.n	80264 <_write+0x18>
   80278:	e00a      	b.n	80290 <_write+0x44>
_write (int file, const char *ptr, int len)
{
	int nChars = 0;

	if ((file != 1) && (file != 2) && (file!=3)) {
		return -1;
   8027a:	f04f 30ff 	mov.w	r0, #4294967295
   8027e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
	}

	for (; len != 0; --len) {
   80282:	2000      	movs	r0, #0
   80284:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		if (ptr_put(stdio_base, *ptr++) < 0) {
			return -1;
   80288:	f04f 30ff 	mov.w	r0, #4294967295
   8028c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
		}
		++nChars;
   80290:	4620      	mov	r0, r4
	}
	return nChars;
}
   80292:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80296:	bf00      	nop
   80298:	2007aca8 	.word	0x2007aca8
   8029c:	2007acac 	.word	0x2007acac

000802a0 <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   802a0:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   802a2:	23ac      	movs	r3, #172	; 0xac
   802a4:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   802a6:	680a      	ldr	r2, [r1, #0]
   802a8:	684b      	ldr	r3, [r1, #4]
   802aa:	fbb2 f3f3 	udiv	r3, r2, r3
   802ae:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   802b0:	1e5c      	subs	r4, r3, #1
   802b2:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   802b6:	4294      	cmp	r4, r2
   802b8:	d80a      	bhi.n	802d0 <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   802ba:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   802bc:	688b      	ldr	r3, [r1, #8]
   802be:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   802c0:	f240 2302 	movw	r3, #514	; 0x202
   802c4:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   802c8:	2350      	movs	r3, #80	; 0x50
   802ca:	6003      	str	r3, [r0, #0]

	return 0;
   802cc:	2000      	movs	r0, #0
   802ce:	e000      	b.n	802d2 <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   802d0:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   802d2:	f85d 4b04 	ldr.w	r4, [sp], #4
   802d6:	4770      	bx	lr

000802d8 <uart_write>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
   802d8:	6943      	ldr	r3, [r0, #20]
   802da:	f013 0f02 	tst.w	r3, #2
		return 1;

	/* Send character */
	p_uart->UART_THR = uc_data;
   802de:	bf1a      	itte	ne
   802e0:	61c1      	strne	r1, [r0, #28]
	return 0;
   802e2:	2000      	movne	r0, #0
 */
uint32_t uart_write(Uart *p_uart, const uint8_t uc_data)
{
	/* Check if the transmitter is ready */
	if (!(p_uart->UART_SR & UART_SR_TXRDY))
		return 1;
   802e4:	2001      	moveq	r0, #1

	/* Send character */
	p_uart->UART_THR = uc_data;
	return 0;
}
   802e6:	4770      	bx	lr

000802e8 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   802e8:	6943      	ldr	r3, [r0, #20]
   802ea:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   802ee:	bf1d      	ittte	ne
   802f0:	6983      	ldrne	r3, [r0, #24]
   802f2:	700b      	strbne	r3, [r1, #0]
	return 0;
   802f4:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   802f6:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   802f8:	4770      	bx	lr
   802fa:	bf00      	nop

000802fc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   802fc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   802fe:	010b      	lsls	r3, r1, #4
   80300:	4293      	cmp	r3, r2
   80302:	d90d      	bls.n	80320 <usart_set_async_baudrate+0x24>
   80304:	e01a      	b.n	8033c <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   80306:	6841      	ldr	r1, [r0, #4]
   80308:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8030c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8030e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   80312:	6203      	str	r3, [r0, #32]

	return 0;
   80314:	2000      	movs	r0, #0
   80316:	e020      	b.n	8035a <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   80318:	2001      	movs	r0, #1
   8031a:	e01e      	b.n	8035a <usart_set_async_baudrate+0x5e>
   8031c:	2001      	movs	r0, #1
   8031e:	e01c      	b.n	8035a <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   80320:	00d2      	lsls	r2, r2, #3
   80322:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   80326:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   8032a:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   8032c:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   80330:	1e54      	subs	r4, r2, #1
   80332:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80336:	428c      	cmp	r4, r1
   80338:	d9e9      	bls.n	8030e <usart_set_async_baudrate+0x12>
   8033a:	e7ed      	b.n	80318 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8033c:	00c9      	lsls	r1, r1, #3
   8033e:	00d3      	lsls	r3, r2, #3
   80340:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   80344:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   80348:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   8034a:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8034e:	1e54      	subs	r4, r2, #1
   80350:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80354:	428c      	cmp	r4, r1
   80356:	d9d6      	bls.n	80306 <usart_set_async_baudrate+0xa>
   80358:	e7e0      	b.n	8031c <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   8035a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8035e:	4770      	bx	lr

00080360 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   80360:	4b08      	ldr	r3, [pc, #32]	; (80384 <usart_reset+0x24>)
   80362:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   80366:	2300      	movs	r3, #0
   80368:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   8036a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8036c:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8036e:	2388      	movs	r3, #136	; 0x88
   80370:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   80372:	2324      	movs	r3, #36	; 0x24
   80374:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   80376:	f44f 7380 	mov.w	r3, #256	; 0x100
   8037a:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   8037c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   80380:	6003      	str	r3, [r0, #0]
   80382:	4770      	bx	lr
   80384:	55534100 	.word	0x55534100

00080388 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80388:	b570      	push	{r4, r5, r6, lr}
   8038a:	4605      	mov	r5, r0
   8038c:	460c      	mov	r4, r1
   8038e:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   80390:	4b0f      	ldr	r3, [pc, #60]	; (803d0 <usart_init_rs232+0x48>)
   80392:	4798      	blx	r3

	ul_reg_val = 0;
   80394:	2100      	movs	r1, #0
   80396:	4b0f      	ldr	r3, [pc, #60]	; (803d4 <usart_init_rs232+0x4c>)
   80398:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8039a:	b19c      	cbz	r4, 803c4 <usart_init_rs232+0x3c>
   8039c:	4628      	mov	r0, r5
   8039e:	6821      	ldr	r1, [r4, #0]
   803a0:	4632      	mov	r2, r6
   803a2:	4b0d      	ldr	r3, [pc, #52]	; (803d8 <usart_init_rs232+0x50>)
   803a4:	4798      	blx	r3
   803a6:	4603      	mov	r3, r0
   803a8:	b970      	cbnz	r0, 803c8 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   803aa:	68a1      	ldr	r1, [r4, #8]
   803ac:	6862      	ldr	r2, [r4, #4]
   803ae:	430a      	orrs	r2, r1
   803b0:	6921      	ldr	r1, [r4, #16]
   803b2:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   803b4:	68e0      	ldr	r0, [r4, #12]
   803b6:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   803b8:	4906      	ldr	r1, [pc, #24]	; (803d4 <usart_init_rs232+0x4c>)
   803ba:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   803bc:	6869      	ldr	r1, [r5, #4]
   803be:	430a      	orrs	r2, r1
   803c0:	606a      	str	r2, [r5, #4]

	return 0;
   803c2:	e002      	b.n	803ca <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   803c4:	2301      	movs	r3, #1
   803c6:	e000      	b.n	803ca <usart_init_rs232+0x42>
   803c8:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   803ca:	4618      	mov	r0, r3
   803cc:	bd70      	pop	{r4, r5, r6, pc}
   803ce:	bf00      	nop
   803d0:	00080361 	.word	0x00080361
   803d4:	20070a0c 	.word	0x20070a0c
   803d8:	000802fd 	.word	0x000802fd

000803dc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   803dc:	2340      	movs	r3, #64	; 0x40
   803de:	6003      	str	r3, [r0, #0]
   803e0:	4770      	bx	lr
   803e2:	bf00      	nop

000803e4 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   803e4:	2310      	movs	r3, #16
   803e6:	6003      	str	r3, [r0, #0]
   803e8:	4770      	bx	lr
   803ea:	bf00      	nop

000803ec <usart_write>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
   803ec:	6943      	ldr	r3, [r0, #20]
   803ee:	f013 0f02 	tst.w	r3, #2
		return 1;
	}

	p_usart->US_THR = US_THR_TXCHR(c);
   803f2:	bf1d      	ittte	ne
   803f4:	f3c1 0108 	ubfxne	r1, r1, #0, #9
   803f8:	61c1      	strne	r1, [r0, #28]
	return 0;
   803fa:	2000      	movne	r0, #0
 * \retval 1 on failure.
 */
uint32_t usart_write(Usart *p_usart, uint32_t c)
{
	if (!(p_usart->US_CSR & US_CSR_TXRDY)) {
		return 1;
   803fc:	2001      	moveq	r0, #1
	}

	p_usart->US_THR = US_THR_TXCHR(c);
	return 0;
}
   803fe:	4770      	bx	lr

00080400 <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   80400:	6943      	ldr	r3, [r0, #20]
   80402:	f013 0f01 	tst.w	r3, #1
   80406:	d005      	beq.n	80414 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   80408:	6983      	ldr	r3, [r0, #24]
   8040a:	f3c3 0308 	ubfx	r3, r3, #0, #9
   8040e:	600b      	str	r3, [r1, #0]

	return 0;
   80410:	2000      	movs	r0, #0
   80412:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   80414:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   80416:	4770      	bx	lr

00080418 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   80418:	b500      	push	{lr}
   8041a:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   8041c:	4813      	ldr	r0, [pc, #76]	; (8046c <USART0_Handler+0x54>)
   8041e:	f10d 0107 	add.w	r1, sp, #7
   80422:	2201      	movs	r2, #1
   80424:	4b12      	ldr	r3, [pc, #72]	; (80470 <USART0_Handler+0x58>)
   80426:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   80428:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   8042a:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   8042e:	2200      	movs	r2, #0
   80430:	4b10      	ldr	r3, [pc, #64]	; (80474 <USART0_Handler+0x5c>)
   80432:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   80434:	4b10      	ldr	r3, [pc, #64]	; (80478 <USART0_Handler+0x60>)
   80436:	781a      	ldrb	r2, [r3, #0]
   80438:	3201      	adds	r2, #1
   8043a:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   8043c:	4b0f      	ldr	r3, [pc, #60]	; (8047c <USART0_Handler+0x64>)
   8043e:	781b      	ldrb	r3, [r3, #0]
   80440:	f89d 1007 	ldrb.w	r1, [sp, #7]
   80444:	4a0e      	ldr	r2, [pc, #56]	; (80480 <USART0_Handler+0x68>)
   80446:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   80448:	2b9b      	cmp	r3, #155	; 0x9b
   8044a:	d103      	bne.n	80454 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   8044c:	2200      	movs	r2, #0
   8044e:	4b0b      	ldr	r3, [pc, #44]	; (8047c <USART0_Handler+0x64>)
   80450:	701a      	strb	r2, [r3, #0]
   80452:	e002      	b.n	8045a <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   80454:	3301      	adds	r3, #1
   80456:	4a09      	ldr	r2, [pc, #36]	; (8047c <USART0_Handler+0x64>)
   80458:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   8045a:	2201      	movs	r2, #1
   8045c:	4b05      	ldr	r3, [pc, #20]	; (80474 <USART0_Handler+0x5c>)
   8045e:	701a      	strb	r2, [r3, #0]
   80460:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80464:	b662      	cpsie	i
}
   80466:	b003      	add	sp, #12
   80468:	f85d fb04 	ldr.w	pc, [sp], #4
   8046c:	40098000 	.word	0x40098000
   80470:	00080149 	.word	0x00080149
   80474:	20070138 	.word	0x20070138
   80478:	20070aad 	.word	0x20070aad
   8047c:	20070aac 	.word	0x20070aac
   80480:	20070a10 	.word	0x20070a10

00080484 <task_dummy1>:
#include "asf.h"
#include "dummyTask1.h"


void task_dummy1(void *pvParameters)
{
   80484:	b570      	push	{r4, r5, r6, lr}
   80486:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	
	xLastWakeTime = xTaskGetTickCount();
   80488:	4b05      	ldr	r3, [pc, #20]	; (804a0 <task_dummy1+0x1c>)
   8048a:	4798      	blx	r3
   8048c:	ac02      	add	r4, sp, #8
   8048e:	f844 0d04 	str.w	r0, [r4, #-4]!
	
	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   80492:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   80496:	4d03      	ldr	r5, [pc, #12]	; (804a4 <task_dummy1+0x20>)
   80498:	4620      	mov	r0, r4
   8049a:	4631      	mov	r1, r6
   8049c:	47a8      	blx	r5
   8049e:	e7fb      	b.n	80498 <task_dummy1+0x14>
   804a0:	000817e5 	.word	0x000817e5
   804a4:	00081a2d 	.word	0x00081a2d

000804a8 <task_dummy2>:
#include "asf.h"
#include "dummyTask2.h"


void task_dummy2(void *pvParameters)
{
   804a8:	b570      	push	{r4, r5, r6, lr}
   804aa:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	
	xLastWakeTime = xTaskGetTickCount();
   804ac:	4b05      	ldr	r3, [pc, #20]	; (804c4 <task_dummy2+0x1c>)
   804ae:	4798      	blx	r3
   804b0:	ac02      	add	r4, sp, #8
   804b2:	f844 0d04 	str.w	r0, [r4, #-4]!
	
	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   804b6:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   804ba:	4d03      	ldr	r5, [pc, #12]	; (804c8 <task_dummy2+0x20>)
   804bc:	4620      	mov	r0, r4
   804be:	4631      	mov	r1, r6
   804c0:	47a8      	blx	r5
   804c2:	e7fb      	b.n	804bc <task_dummy2+0x14>
   804c4:	000817e5 	.word	0x000817e5
   804c8:	00081a2d 	.word	0x00081a2d

000804cc <task_uart>:
#include "asf.h"
#include "task1.h"
#include "stdio.h"

void task_uart(void *pvParameters)
{
   804cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   804d0:	b084      	sub	sp, #16
	
	uint8_t req[] = "r";
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	xLastWakeTime = xTaskGetTickCount();
   804d2:	4b1a      	ldr	r3, [pc, #104]	; (8053c <task_uart+0x70>)
   804d4:	4798      	blx	r3
   804d6:	9003      	str	r0, [sp, #12]
	char sy2[4];
	
	while(1)
	{
		//printf("data stuff\n");
		if ((CONF_UART_ESP->US_CSR & US_CSR_TXRDY)) {
   804d8:	4d19      	ldr	r5, [pc, #100]	; (80540 <task_uart+0x74>)
			CONF_UART_ESP->US_THR = US_THR_TXCHR('r');
		}
		//usart_serial_read_packet(CONF_UART_ESP, &rx, 1);
		//printf("read");
		while(1) {
			delay_us(10);
   804da:	f8df 807c 	ldr.w	r8, [pc, #124]	; 80558 <task_uart+0x8c>
	char sy2[4];
	
	while(1)
	{
		//printf("data stuff\n");
		if ((CONF_UART_ESP->US_CSR & US_CSR_TXRDY)) {
   804de:	696b      	ldr	r3, [r5, #20]
   804e0:	f013 0f02 	tst.w	r3, #2
			CONF_UART_ESP->US_THR = US_THR_TXCHR('r');
   804e4:	bf1c      	itt	ne
   804e6:	2372      	movne	r3, #114	; 0x72
   804e8:	61eb      	strne	r3, [r5, #28]
			if (!(CONF_UART_ESP->US_CSR & US_CSR_RXRDY)) {
				counter++;
			}
			else {
				rx[char_counter++] = CONF_UART_ESP->US_RHR & 0xFF;//US_RHR_RXCHR_Msk;
				counter = 0;
   804ea:	2400      	movs	r4, #0
   804ec:	4626      	mov	r6, r4
			CONF_UART_ESP->US_THR = US_THR_TXCHR('r');
		}
		//usart_serial_read_packet(CONF_UART_ESP, &rx, 1);
		//printf("read");
		while(1) {
			delay_us(10);
   804ee:	273c      	movs	r7, #60	; 0x3c
   804f0:	4638      	mov	r0, r7
   804f2:	47c0      	blx	r8
			if (!(CONF_UART_ESP->US_CSR & US_CSR_RXRDY)) {
   804f4:	696b      	ldr	r3, [r5, #20]
   804f6:	f013 0f01 	tst.w	r3, #1
   804fa:	d105      	bne.n	80508 <task_uart+0x3c>
				counter++;
   804fc:	3401      	adds	r4, #1
			}
			else {
				rx[char_counter++] = CONF_UART_ESP->US_RHR & 0xFF;//US_RHR_RXCHR_Msk;
				counter = 0;
			}
			if(counter > 10000){
   804fe:	f242 7310 	movw	r3, #10000	; 0x2710
   80502:	429c      	cmp	r4, r3
   80504:	d9f4      	bls.n	804f0 <task_uart+0x24>
   80506:	e008      	b.n	8051a <task_uart+0x4e>
			delay_us(10);
			if (!(CONF_UART_ESP->US_CSR & US_CSR_RXRDY)) {
				counter++;
			}
			else {
				rx[char_counter++] = CONF_UART_ESP->US_RHR & 0xFF;//US_RHR_RXCHR_Msk;
   80508:	1c73      	adds	r3, r6, #1
   8050a:	69aa      	ldr	r2, [r5, #24]
   8050c:	a904      	add	r1, sp, #16
   8050e:	440e      	add	r6, r1
   80510:	f806 2c0c 	strb.w	r2, [r6, #-12]
   80514:	b2de      	uxtb	r6, r3
				counter = 0;
   80516:	2400      	movs	r4, #0
   80518:	e7ea      	b.n	804f0 <task_uart+0x24>
		/*y1 = (rx[2] << 8) | (rx[3] << 0);
		x2 = (rx[4] << 8) | (rx[5] << 0);
		y2 = (rx[6] << 8) | (rx[7] << 0);*/
		
		
 		sprintf(sx1, "%d", rx[0]);
   8051a:	4668      	mov	r0, sp
   8051c:	4909      	ldr	r1, [pc, #36]	; (80544 <task_uart+0x78>)
   8051e:	f89d 2004 	ldrb.w	r2, [sp, #4]
   80522:	4b09      	ldr	r3, [pc, #36]	; (80548 <task_uart+0x7c>)
   80524:	4798      	blx	r3
// // 		sprintf(sy1, "%d", y1);
// // 		sprintf(sx2, "%d", x2);
// // 		sprintf(sy2, "%d", y2);
// // 		
   		printf("1: %s\n", sx1);
   80526:	4809      	ldr	r0, [pc, #36]	; (8054c <task_uart+0x80>)
   80528:	4669      	mov	r1, sp
   8052a:	4b09      	ldr	r3, [pc, #36]	; (80550 <task_uart+0x84>)
   8052c:	4798      	blx	r3
// //  		printf("2: %s\n", sy1);
// //  		printf("3: %s\n", sx2);
// //  		printf("4: %s\n", sy2);
		
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   8052e:	a803      	add	r0, sp, #12
   80530:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   80534:	4b07      	ldr	r3, [pc, #28]	; (80554 <task_uart+0x88>)
   80536:	4798      	blx	r3
	}
   80538:	e7d1      	b.n	804de <task_uart+0x12>
   8053a:	bf00      	nop
   8053c:	000817e5 	.word	0x000817e5
   80540:	4009c000 	.word	0x4009c000
   80544:	00088a60 	.word	0x00088a60
   80548:	00082815 	.word	0x00082815
   8054c:	00088a64 	.word	0x00088a64
   80550:	0008255d 	.word	0x0008255d
   80554:	00081a2d 	.word	0x00081a2d
   80558:	20070001 	.word	0x20070001

0008055c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8055c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8055e:	480e      	ldr	r0, [pc, #56]	; (80598 <sysclk_init+0x3c>)
   80560:	4b0e      	ldr	r3, [pc, #56]	; (8059c <sysclk_init+0x40>)
   80562:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80564:	2000      	movs	r0, #0
   80566:	213e      	movs	r1, #62	; 0x3e
   80568:	4b0d      	ldr	r3, [pc, #52]	; (805a0 <sysclk_init+0x44>)
   8056a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8056c:	4c0d      	ldr	r4, [pc, #52]	; (805a4 <sysclk_init+0x48>)
   8056e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80570:	2800      	cmp	r0, #0
   80572:	d0fc      	beq.n	8056e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80574:	4b0c      	ldr	r3, [pc, #48]	; (805a8 <sysclk_init+0x4c>)
   80576:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80578:	4a0c      	ldr	r2, [pc, #48]	; (805ac <sysclk_init+0x50>)
   8057a:	4b0d      	ldr	r3, [pc, #52]	; (805b0 <sysclk_init+0x54>)
   8057c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8057e:	4c0d      	ldr	r4, [pc, #52]	; (805b4 <sysclk_init+0x58>)
   80580:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80582:	2800      	cmp	r0, #0
   80584:	d0fc      	beq.n	80580 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80586:	2010      	movs	r0, #16
   80588:	4b0b      	ldr	r3, [pc, #44]	; (805b8 <sysclk_init+0x5c>)
   8058a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8058c:	4b0b      	ldr	r3, [pc, #44]	; (805bc <sysclk_init+0x60>)
   8058e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80590:	4801      	ldr	r0, [pc, #4]	; (80598 <sysclk_init+0x3c>)
   80592:	4b02      	ldr	r3, [pc, #8]	; (8059c <sysclk_init+0x40>)
   80594:	4798      	blx	r3
   80596:	bd10      	pop	{r4, pc}
   80598:	0501bd00 	.word	0x0501bd00
   8059c:	200700b1 	.word	0x200700b1
   805a0:	0008097d 	.word	0x0008097d
   805a4:	000809d1 	.word	0x000809d1
   805a8:	000809e1 	.word	0x000809e1
   805ac:	200d3f01 	.word	0x200d3f01
   805b0:	400e0600 	.word	0x400e0600
   805b4:	000809f1 	.word	0x000809f1
   805b8:	00080919 	.word	0x00080919
   805bc:	00080b0d 	.word	0x00080b0d

000805c0 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   805c0:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   805c2:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   805c6:	4b1d      	ldr	r3, [pc, #116]	; (8063c <board_init+0x7c>)
   805c8:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   805ca:	200b      	movs	r0, #11
   805cc:	4c1c      	ldr	r4, [pc, #112]	; (80640 <board_init+0x80>)
   805ce:	47a0      	blx	r4
   805d0:	200c      	movs	r0, #12
   805d2:	47a0      	blx	r4
   805d4:	200d      	movs	r0, #13
   805d6:	47a0      	blx	r4
   805d8:	200e      	movs	r0, #14
   805da:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   805dc:	203b      	movs	r0, #59	; 0x3b
   805de:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805e2:	4c18      	ldr	r4, [pc, #96]	; (80644 <board_init+0x84>)
   805e4:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   805e6:	2055      	movs	r0, #85	; 0x55
   805e8:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805ec:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   805ee:	2056      	movs	r0, #86	; 0x56
   805f0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   805f4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   805f6:	2068      	movs	r0, #104	; 0x68
   805f8:	4913      	ldr	r1, [pc, #76]	; (80648 <board_init+0x88>)
   805fa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   805fc:	205c      	movs	r0, #92	; 0x5c
   805fe:	4913      	ldr	r1, [pc, #76]	; (8064c <board_init+0x8c>)
   80600:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   80602:	4813      	ldr	r0, [pc, #76]	; (80650 <board_init+0x90>)
   80604:	f44f 5340 	mov.w	r3, #12288	; 0x3000
   80608:	6603      	str	r3, [r0, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   8060a:	6543      	str	r3, [r0, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   8060c:	6243      	str	r3, [r0, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   8060e:	f8c0 3080 	str.w	r3, [r0, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80612:	6f02      	ldr	r2, [r0, #112]	; 0x70
   80614:	f422 5240 	bic.w	r2, r2, #12288	; 0x3000
   80618:	6702      	str	r2, [r0, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   8061a:	6043      	str	r3, [r0, #4]

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	ioport_set_port_mode(IOPORT_PIOA, PIO_PA12A_RXD1 | PIO_PA13A_TXD1, IOPORT_MODE_MUX_A);
	ioport_disable_port(IOPORT_PIOA, PIO_PA12A_RXD1 | PIO_PA13A_TXD1);
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   8061c:	f44f 7140 	mov.w	r1, #768	; 0x300
   80620:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   80624:	4b0b      	ldr	r3, [pc, #44]	; (80654 <board_init+0x94>)
   80626:	4798      	blx	r3
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80628:	202b      	movs	r0, #43	; 0x2b
   8062a:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8062e:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80630:	202a      	movs	r0, #42	; 0x2a
   80632:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80636:	47a0      	blx	r4
   80638:	bd10      	pop	{r4, pc}
   8063a:	bf00      	nop
   8063c:	400e1a50 	.word	0x400e1a50
   80640:	00080a01 	.word	0x00080a01
   80644:	000806fd 	.word	0x000806fd
   80648:	28000079 	.word	0x28000079
   8064c:	28000001 	.word	0x28000001
   80650:	400e0e00 	.word	0x400e0e00
   80654:	000807d1 	.word	0x000807d1

00080658 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   80658:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8065a:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   8065e:	d016      	beq.n	8068e <pio_set_peripheral+0x36>
   80660:	d804      	bhi.n	8066c <pio_set_peripheral+0x14>
   80662:	b1c1      	cbz	r1, 80696 <pio_set_peripheral+0x3e>
   80664:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80668:	d00a      	beq.n	80680 <pio_set_peripheral+0x28>
   8066a:	e013      	b.n	80694 <pio_set_peripheral+0x3c>
   8066c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80670:	d011      	beq.n	80696 <pio_set_peripheral+0x3e>
   80672:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80676:	d00e      	beq.n	80696 <pio_set_peripheral+0x3e>
   80678:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8067c:	d10a      	bne.n	80694 <pio_set_peripheral+0x3c>
   8067e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80680:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80682:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80684:	400b      	ands	r3, r1
   80686:	ea23 0302 	bic.w	r3, r3, r2
   8068a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8068c:	e002      	b.n	80694 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8068e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80690:	4313      	orrs	r3, r2
   80692:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80694:	6042      	str	r2, [r0, #4]
   80696:	4770      	bx	lr

00080698 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80698:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8069a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8069e:	bf14      	ite	ne
   806a0:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806a2:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   806a4:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   806a8:	bf14      	ite	ne
   806aa:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   806ac:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   806ae:	f012 0f02 	tst.w	r2, #2
   806b2:	d002      	beq.n	806ba <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   806b4:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   806b8:	e004      	b.n	806c4 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   806ba:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   806be:	bf18      	it	ne
   806c0:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   806c4:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   806c6:	6001      	str	r1, [r0, #0]
   806c8:	4770      	bx	lr
   806ca:	bf00      	nop

000806cc <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   806cc:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   806ce:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   806d0:	9c01      	ldr	r4, [sp, #4]
   806d2:	b10c      	cbz	r4, 806d8 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   806d4:	6641      	str	r1, [r0, #100]	; 0x64
   806d6:	e000      	b.n	806da <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   806d8:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   806da:	b10b      	cbz	r3, 806e0 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   806dc:	6501      	str	r1, [r0, #80]	; 0x50
   806de:	e000      	b.n	806e2 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   806e0:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   806e2:	b10a      	cbz	r2, 806e8 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   806e4:	6301      	str	r1, [r0, #48]	; 0x30
   806e6:	e000      	b.n	806ea <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   806e8:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   806ea:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   806ec:	6001      	str	r1, [r0, #0]
}
   806ee:	f85d 4b04 	ldr.w	r4, [sp], #4
   806f2:	4770      	bx	lr

000806f4 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   806f4:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   806f6:	4770      	bx	lr

000806f8 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   806f8:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   806fa:	4770      	bx	lr

000806fc <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   806fc:	b570      	push	{r4, r5, r6, lr}
   806fe:	b082      	sub	sp, #8
   80700:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   80702:	0944      	lsrs	r4, r0, #5
   80704:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   80708:	f204 7407 	addw	r4, r4, #1799	; 0x707
   8070c:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   8070e:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   80712:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   80716:	d030      	beq.n	8077a <pio_configure_pin+0x7e>
   80718:	d806      	bhi.n	80728 <pio_configure_pin+0x2c>
   8071a:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   8071e:	d00a      	beq.n	80736 <pio_configure_pin+0x3a>
   80720:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   80724:	d018      	beq.n	80758 <pio_configure_pin+0x5c>
   80726:	e049      	b.n	807bc <pio_configure_pin+0xc0>
   80728:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   8072c:	d030      	beq.n	80790 <pio_configure_pin+0x94>
   8072e:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80732:	d02d      	beq.n	80790 <pio_configure_pin+0x94>
   80734:	e042      	b.n	807bc <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   80736:	f000 001f 	and.w	r0, r0, #31
   8073a:	2401      	movs	r4, #1
   8073c:	4084      	lsls	r4, r0
   8073e:	4630      	mov	r0, r6
   80740:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80744:	4622      	mov	r2, r4
   80746:	4b1f      	ldr	r3, [pc, #124]	; (807c4 <pio_configure_pin+0xc8>)
   80748:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8074a:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   8074e:	bf14      	ite	ne
   80750:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80752:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80754:	2001      	movs	r0, #1
   80756:	e032      	b.n	807be <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   80758:	f000 001f 	and.w	r0, r0, #31
   8075c:	2401      	movs	r4, #1
   8075e:	4084      	lsls	r4, r0
   80760:	4630      	mov	r0, r6
   80762:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80766:	4622      	mov	r2, r4
   80768:	4b16      	ldr	r3, [pc, #88]	; (807c4 <pio_configure_pin+0xc8>)
   8076a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8076c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80770:	bf14      	ite	ne
   80772:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80774:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80776:	2001      	movs	r0, #1
   80778:	e021      	b.n	807be <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8077a:	f000 011f 	and.w	r1, r0, #31
   8077e:	2401      	movs	r4, #1
   80780:	4630      	mov	r0, r6
   80782:	fa04 f101 	lsl.w	r1, r4, r1
   80786:	462a      	mov	r2, r5
   80788:	4b0f      	ldr	r3, [pc, #60]	; (807c8 <pio_configure_pin+0xcc>)
   8078a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8078c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8078e:	e016      	b.n	807be <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80790:	f000 011f 	and.w	r1, r0, #31
   80794:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80796:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8079a:	ea05 0304 	and.w	r3, r5, r4
   8079e:	9300      	str	r3, [sp, #0]
   807a0:	4630      	mov	r0, r6
   807a2:	fa04 f101 	lsl.w	r1, r4, r1
   807a6:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   807aa:	bf14      	ite	ne
   807ac:	2200      	movne	r2, #0
   807ae:	2201      	moveq	r2, #1
   807b0:	f3c5 0380 	ubfx	r3, r5, #2, #1
   807b4:	4d05      	ldr	r5, [pc, #20]	; (807cc <pio_configure_pin+0xd0>)
   807b6:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   807b8:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   807ba:	e000      	b.n	807be <pio_configure_pin+0xc2>

	default:
		return 0;
   807bc:	2000      	movs	r0, #0
	}

	return 1;
}
   807be:	b002      	add	sp, #8
   807c0:	bd70      	pop	{r4, r5, r6, pc}
   807c2:	bf00      	nop
   807c4:	00080659 	.word	0x00080659
   807c8:	00080699 	.word	0x00080699
   807cc:	000806cd 	.word	0x000806cd

000807d0 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   807d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   807d2:	b083      	sub	sp, #12
   807d4:	4607      	mov	r7, r0
   807d6:	460e      	mov	r6, r1
   807d8:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   807da:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   807de:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   807e2:	d026      	beq.n	80832 <pio_configure_pin_group+0x62>
   807e4:	d806      	bhi.n	807f4 <pio_configure_pin_group+0x24>
   807e6:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   807ea:	d00a      	beq.n	80802 <pio_configure_pin_group+0x32>
   807ec:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   807f0:	d013      	beq.n	8081a <pio_configure_pin_group+0x4a>
   807f2:	e034      	b.n	8085e <pio_configure_pin_group+0x8e>
   807f4:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   807f8:	d01f      	beq.n	8083a <pio_configure_pin_group+0x6a>
   807fa:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   807fe:	d01c      	beq.n	8083a <pio_configure_pin_group+0x6a>
   80800:	e02d      	b.n	8085e <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   80802:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80806:	4632      	mov	r2, r6
   80808:	4b16      	ldr	r3, [pc, #88]	; (80864 <pio_configure_pin_group+0x94>)
   8080a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8080c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80810:	bf14      	ite	ne
   80812:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80814:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80816:	2001      	movs	r0, #1
   80818:	e022      	b.n	80860 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   8081a:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8081e:	4632      	mov	r2, r6
   80820:	4b10      	ldr	r3, [pc, #64]	; (80864 <pio_configure_pin_group+0x94>)
   80822:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80824:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80828:	bf14      	ite	ne
   8082a:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   8082c:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8082e:	2001      	movs	r0, #1
   80830:	e016      	b.n	80860 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80832:	4b0d      	ldr	r3, [pc, #52]	; (80868 <pio_configure_pin_group+0x98>)
   80834:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80836:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   80838:	e012      	b.n	80860 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8083a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   8083e:	f005 0301 	and.w	r3, r5, #1
   80842:	9300      	str	r3, [sp, #0]
   80844:	4638      	mov	r0, r7
   80846:	4631      	mov	r1, r6
   80848:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8084c:	bf14      	ite	ne
   8084e:	2200      	movne	r2, #0
   80850:	2201      	moveq	r2, #1
   80852:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80856:	4c05      	ldr	r4, [pc, #20]	; (8086c <pio_configure_pin_group+0x9c>)
   80858:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8085a:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8085c:	e000      	b.n	80860 <pio_configure_pin_group+0x90>

	default:
		return 0;
   8085e:	2000      	movs	r0, #0
	}

	return 1;
}
   80860:	b003      	add	sp, #12
   80862:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80864:	00080659 	.word	0x00080659
   80868:	00080699 	.word	0x00080699
   8086c:	000806cd 	.word	0x000806cd

00080870 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80870:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80874:	4604      	mov	r4, r0
   80876:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80878:	4b10      	ldr	r3, [pc, #64]	; (808bc <pio_handler_process+0x4c>)
   8087a:	4798      	blx	r3
   8087c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8087e:	4620      	mov	r0, r4
   80880:	4b0f      	ldr	r3, [pc, #60]	; (808c0 <pio_handler_process+0x50>)
   80882:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80884:	4005      	ands	r5, r0
   80886:	d017      	beq.n	808b8 <pio_handler_process+0x48>
   80888:	4f0e      	ldr	r7, [pc, #56]	; (808c4 <pio_handler_process+0x54>)
   8088a:	f107 040c 	add.w	r4, r7, #12
   8088e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80890:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80894:	42b3      	cmp	r3, r6
   80896:	d10a      	bne.n	808ae <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80898:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8089c:	4229      	tst	r1, r5
   8089e:	d006      	beq.n	808ae <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   808a0:	6823      	ldr	r3, [r4, #0]
   808a2:	4630      	mov	r0, r6
   808a4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   808a6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   808aa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   808ae:	42bc      	cmp	r4, r7
   808b0:	d002      	beq.n	808b8 <pio_handler_process+0x48>
   808b2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   808b4:	2d00      	cmp	r5, #0
   808b6:	d1eb      	bne.n	80890 <pio_handler_process+0x20>
   808b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   808bc:	000806f5 	.word	0x000806f5
   808c0:	000806f9 	.word	0x000806f9
   808c4:	20070ab0 	.word	0x20070ab0

000808c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   808c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   808ca:	4802      	ldr	r0, [pc, #8]	; (808d4 <PIOA_Handler+0xc>)
   808cc:	210b      	movs	r1, #11
   808ce:	4b02      	ldr	r3, [pc, #8]	; (808d8 <PIOA_Handler+0x10>)
   808d0:	4798      	blx	r3
   808d2:	bd08      	pop	{r3, pc}
   808d4:	400e0e00 	.word	0x400e0e00
   808d8:	00080871 	.word	0x00080871

000808dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   808dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   808de:	4802      	ldr	r0, [pc, #8]	; (808e8 <PIOB_Handler+0xc>)
   808e0:	210c      	movs	r1, #12
   808e2:	4b02      	ldr	r3, [pc, #8]	; (808ec <PIOB_Handler+0x10>)
   808e4:	4798      	blx	r3
   808e6:	bd08      	pop	{r3, pc}
   808e8:	400e1000 	.word	0x400e1000
   808ec:	00080871 	.word	0x00080871

000808f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   808f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   808f2:	4802      	ldr	r0, [pc, #8]	; (808fc <PIOC_Handler+0xc>)
   808f4:	210d      	movs	r1, #13
   808f6:	4b02      	ldr	r3, [pc, #8]	; (80900 <PIOC_Handler+0x10>)
   808f8:	4798      	blx	r3
   808fa:	bd08      	pop	{r3, pc}
   808fc:	400e1200 	.word	0x400e1200
   80900:	00080871 	.word	0x00080871

00080904 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80904:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80906:	4802      	ldr	r0, [pc, #8]	; (80910 <PIOD_Handler+0xc>)
   80908:	210e      	movs	r1, #14
   8090a:	4b02      	ldr	r3, [pc, #8]	; (80914 <PIOD_Handler+0x10>)
   8090c:	4798      	blx	r3
   8090e:	bd08      	pop	{r3, pc}
   80910:	400e1400 	.word	0x400e1400
   80914:	00080871 	.word	0x00080871

00080918 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80918:	4b17      	ldr	r3, [pc, #92]	; (80978 <pmc_switch_mck_to_pllack+0x60>)
   8091a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8091c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80920:	4310      	orrs	r0, r2
   80922:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80924:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80926:	f013 0f08 	tst.w	r3, #8
   8092a:	d109      	bne.n	80940 <pmc_switch_mck_to_pllack+0x28>
   8092c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80930:	4911      	ldr	r1, [pc, #68]	; (80978 <pmc_switch_mck_to_pllack+0x60>)
   80932:	e001      	b.n	80938 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80934:	3b01      	subs	r3, #1
   80936:	d019      	beq.n	8096c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80938:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8093a:	f012 0f08 	tst.w	r2, #8
   8093e:	d0f9      	beq.n	80934 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80940:	4b0d      	ldr	r3, [pc, #52]	; (80978 <pmc_switch_mck_to_pllack+0x60>)
   80942:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80944:	f022 0203 	bic.w	r2, r2, #3
   80948:	f042 0202 	orr.w	r2, r2, #2
   8094c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8094e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80950:	f010 0008 	ands.w	r0, r0, #8
   80954:	d10c      	bne.n	80970 <pmc_switch_mck_to_pllack+0x58>
   80956:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8095a:	4907      	ldr	r1, [pc, #28]	; (80978 <pmc_switch_mck_to_pllack+0x60>)
   8095c:	e001      	b.n	80962 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8095e:	3b01      	subs	r3, #1
   80960:	d008      	beq.n	80974 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80962:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80964:	f012 0f08 	tst.w	r2, #8
   80968:	d0f9      	beq.n	8095e <pmc_switch_mck_to_pllack+0x46>
   8096a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8096c:	2001      	movs	r0, #1
   8096e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80970:	2000      	movs	r0, #0
   80972:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80974:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80976:	4770      	bx	lr
   80978:	400e0600 	.word	0x400e0600

0008097c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8097c:	b138      	cbz	r0, 8098e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8097e:	4911      	ldr	r1, [pc, #68]	; (809c4 <pmc_switch_mainck_to_xtal+0x48>)
   80980:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80982:	4a11      	ldr	r2, [pc, #68]	; (809c8 <pmc_switch_mainck_to_xtal+0x4c>)
   80984:	401a      	ands	r2, r3
   80986:	4b11      	ldr	r3, [pc, #68]	; (809cc <pmc_switch_mainck_to_xtal+0x50>)
   80988:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8098a:	620b      	str	r3, [r1, #32]
   8098c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8098e:	4a0d      	ldr	r2, [pc, #52]	; (809c4 <pmc_switch_mainck_to_xtal+0x48>)
   80990:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80992:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80996:	f023 0303 	bic.w	r3, r3, #3
   8099a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8099e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   809a2:	0209      	lsls	r1, r1, #8
   809a4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   809a6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   809a8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   809aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   809ac:	f013 0f01 	tst.w	r3, #1
   809b0:	d0fb      	beq.n	809aa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   809b2:	4a04      	ldr	r2, [pc, #16]	; (809c4 <pmc_switch_mainck_to_xtal+0x48>)
   809b4:	6a13      	ldr	r3, [r2, #32]
   809b6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   809ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   809be:	6213      	str	r3, [r2, #32]
   809c0:	4770      	bx	lr
   809c2:	bf00      	nop
   809c4:	400e0600 	.word	0x400e0600
   809c8:	fec8fffc 	.word	0xfec8fffc
   809cc:	01370002 	.word	0x01370002

000809d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   809d0:	4b02      	ldr	r3, [pc, #8]	; (809dc <pmc_osc_is_ready_mainck+0xc>)
   809d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   809d8:	4770      	bx	lr
   809da:	bf00      	nop
   809dc:	400e0600 	.word	0x400e0600

000809e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   809e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   809e4:	4b01      	ldr	r3, [pc, #4]	; (809ec <pmc_disable_pllack+0xc>)
   809e6:	629a      	str	r2, [r3, #40]	; 0x28
   809e8:	4770      	bx	lr
   809ea:	bf00      	nop
   809ec:	400e0600 	.word	0x400e0600

000809f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   809f0:	4b02      	ldr	r3, [pc, #8]	; (809fc <pmc_is_locked_pllack+0xc>)
   809f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   809f4:	f000 0002 	and.w	r0, r0, #2
   809f8:	4770      	bx	lr
   809fa:	bf00      	nop
   809fc:	400e0600 	.word	0x400e0600

00080a00 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80a00:	282c      	cmp	r0, #44	; 0x2c
   80a02:	d820      	bhi.n	80a46 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80a04:	281f      	cmp	r0, #31
   80a06:	d80d      	bhi.n	80a24 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80a08:	4b12      	ldr	r3, [pc, #72]	; (80a54 <pmc_enable_periph_clk+0x54>)
   80a0a:	699a      	ldr	r2, [r3, #24]
   80a0c:	2301      	movs	r3, #1
   80a0e:	4083      	lsls	r3, r0
   80a10:	401a      	ands	r2, r3
   80a12:	4293      	cmp	r3, r2
   80a14:	d019      	beq.n	80a4a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80a16:	2301      	movs	r3, #1
   80a18:	fa03 f000 	lsl.w	r0, r3, r0
   80a1c:	4b0d      	ldr	r3, [pc, #52]	; (80a54 <pmc_enable_periph_clk+0x54>)
   80a1e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a20:	2000      	movs	r0, #0
   80a22:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a24:	4b0b      	ldr	r3, [pc, #44]	; (80a54 <pmc_enable_periph_clk+0x54>)
   80a26:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   80a2a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80a2c:	2301      	movs	r3, #1
   80a2e:	4083      	lsls	r3, r0
   80a30:	401a      	ands	r2, r3
   80a32:	4293      	cmp	r3, r2
   80a34:	d00b      	beq.n	80a4e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80a36:	2301      	movs	r3, #1
   80a38:	fa03 f000 	lsl.w	r0, r3, r0
   80a3c:	4b05      	ldr	r3, [pc, #20]	; (80a54 <pmc_enable_periph_clk+0x54>)
   80a3e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80a42:	2000      	movs	r0, #0
   80a44:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80a46:	2001      	movs	r0, #1
   80a48:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80a4a:	2000      	movs	r0, #0
   80a4c:	4770      	bx	lr
   80a4e:	2000      	movs	r0, #0
}
   80a50:	4770      	bx	lr
   80a52:	bf00      	nop
   80a54:	400e0600 	.word	0x400e0600

00080a58 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80a58:	e7fe      	b.n	80a58 <Dummy_Handler>
   80a5a:	bf00      	nop

00080a5c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   80a5c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   80a5e:	4b1e      	ldr	r3, [pc, #120]	; (80ad8 <Reset_Handler+0x7c>)
   80a60:	4a1e      	ldr	r2, [pc, #120]	; (80adc <Reset_Handler+0x80>)
   80a62:	429a      	cmp	r2, r3
   80a64:	d003      	beq.n	80a6e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80a66:	4b1e      	ldr	r3, [pc, #120]	; (80ae0 <Reset_Handler+0x84>)
   80a68:	4a1b      	ldr	r2, [pc, #108]	; (80ad8 <Reset_Handler+0x7c>)
   80a6a:	429a      	cmp	r2, r3
   80a6c:	d304      	bcc.n	80a78 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80a6e:	4b1d      	ldr	r3, [pc, #116]	; (80ae4 <Reset_Handler+0x88>)
   80a70:	4a1d      	ldr	r2, [pc, #116]	; (80ae8 <Reset_Handler+0x8c>)
   80a72:	429a      	cmp	r2, r3
   80a74:	d30f      	bcc.n	80a96 <Reset_Handler+0x3a>
   80a76:	e01a      	b.n	80aae <Reset_Handler+0x52>
   80a78:	4b1c      	ldr	r3, [pc, #112]	; (80aec <Reset_Handler+0x90>)
   80a7a:	4c1d      	ldr	r4, [pc, #116]	; (80af0 <Reset_Handler+0x94>)
   80a7c:	1ae4      	subs	r4, r4, r3
   80a7e:	f024 0403 	bic.w	r4, r4, #3
   80a82:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a84:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80a86:	4814      	ldr	r0, [pc, #80]	; (80ad8 <Reset_Handler+0x7c>)
   80a88:	4914      	ldr	r1, [pc, #80]	; (80adc <Reset_Handler+0x80>)
   80a8a:	585a      	ldr	r2, [r3, r1]
   80a8c:	501a      	str	r2, [r3, r0]
   80a8e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80a90:	42a3      	cmp	r3, r4
   80a92:	d1fa      	bne.n	80a8a <Reset_Handler+0x2e>
   80a94:	e7eb      	b.n	80a6e <Reset_Handler+0x12>
   80a96:	4b17      	ldr	r3, [pc, #92]	; (80af4 <Reset_Handler+0x98>)
   80a98:	4917      	ldr	r1, [pc, #92]	; (80af8 <Reset_Handler+0x9c>)
   80a9a:	1ac9      	subs	r1, r1, r3
   80a9c:	f021 0103 	bic.w	r1, r1, #3
   80aa0:	1d1a      	adds	r2, r3, #4
   80aa2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80aa4:	2200      	movs	r2, #0
   80aa6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80aaa:	428b      	cmp	r3, r1
   80aac:	d1fb      	bne.n	80aa6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   80aae:	4a13      	ldr	r2, [pc, #76]	; (80afc <Reset_Handler+0xa0>)
   80ab0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80ab4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80ab8:	4911      	ldr	r1, [pc, #68]	; (80b00 <Reset_Handler+0xa4>)
   80aba:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80abc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   80ac0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80ac4:	d203      	bcs.n	80ace <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80ac6:	688a      	ldr	r2, [r1, #8]
   80ac8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80acc:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   80ace:	4b0d      	ldr	r3, [pc, #52]	; (80b04 <Reset_Handler+0xa8>)
   80ad0:	4798      	blx	r3

	/* Branch to main function */
	main();
   80ad2:	4b0d      	ldr	r3, [pc, #52]	; (80b08 <Reset_Handler+0xac>)
   80ad4:	4798      	blx	r3
   80ad6:	e7fe      	b.n	80ad6 <Reset_Handler+0x7a>
   80ad8:	20070000 	.word	0x20070000
   80adc:	00088c90 	.word	0x00088c90
   80ae0:	200709ec 	.word	0x200709ec
   80ae4:	2007acbc 	.word	0x2007acbc
   80ae8:	200709f0 	.word	0x200709f0
   80aec:	20070004 	.word	0x20070004
   80af0:	200709ef 	.word	0x200709ef
   80af4:	200709ec 	.word	0x200709ec
   80af8:	2007acb7 	.word	0x2007acb7
   80afc:	00080000 	.word	0x00080000
   80b00:	e000ed00 	.word	0xe000ed00
   80b04:	0008250d 	.word	0x0008250d
   80b08:	00082489 	.word	0x00082489

00080b0c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80b0c:	4b3e      	ldr	r3, [pc, #248]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80b0e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80b10:	f003 0303 	and.w	r3, r3, #3
   80b14:	2b03      	cmp	r3, #3
   80b16:	d85f      	bhi.n	80bd8 <SystemCoreClockUpdate+0xcc>
   80b18:	e8df f003 	tbb	[pc, r3]
   80b1c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80b20:	4b3a      	ldr	r3, [pc, #232]	; (80c0c <SystemCoreClockUpdate+0x100>)
   80b22:	695b      	ldr	r3, [r3, #20]
   80b24:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80b28:	bf14      	ite	ne
   80b2a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   80b2e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80b32:	4b37      	ldr	r3, [pc, #220]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b34:	601a      	str	r2, [r3, #0]
   80b36:	e04f      	b.n	80bd8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b38:	4b33      	ldr	r3, [pc, #204]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80b3a:	6a1b      	ldr	r3, [r3, #32]
   80b3c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b40:	d003      	beq.n	80b4a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b42:	4a34      	ldr	r2, [pc, #208]	; (80c14 <SystemCoreClockUpdate+0x108>)
   80b44:	4b32      	ldr	r3, [pc, #200]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b46:	601a      	str	r2, [r3, #0]
   80b48:	e046      	b.n	80bd8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b4a:	4a33      	ldr	r2, [pc, #204]	; (80c18 <SystemCoreClockUpdate+0x10c>)
   80b4c:	4b30      	ldr	r3, [pc, #192]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b4e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b50:	4b2d      	ldr	r3, [pc, #180]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80b52:	6a1b      	ldr	r3, [r3, #32]
   80b54:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b58:	2b10      	cmp	r3, #16
   80b5a:	d002      	beq.n	80b62 <SystemCoreClockUpdate+0x56>
   80b5c:	2b20      	cmp	r3, #32
   80b5e:	d004      	beq.n	80b6a <SystemCoreClockUpdate+0x5e>
   80b60:	e03a      	b.n	80bd8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b62:	4a2e      	ldr	r2, [pc, #184]	; (80c1c <SystemCoreClockUpdate+0x110>)
   80b64:	4b2a      	ldr	r3, [pc, #168]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b66:	601a      	str	r2, [r3, #0]
				break;
   80b68:	e036      	b.n	80bd8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80b6a:	4a2a      	ldr	r2, [pc, #168]	; (80c14 <SystemCoreClockUpdate+0x108>)
   80b6c:	4b28      	ldr	r3, [pc, #160]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b6e:	601a      	str	r2, [r3, #0]
				break;
   80b70:	e032      	b.n	80bd8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80b72:	4b25      	ldr	r3, [pc, #148]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80b74:	6a1b      	ldr	r3, [r3, #32]
   80b76:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80b7a:	d003      	beq.n	80b84 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80b7c:	4a25      	ldr	r2, [pc, #148]	; (80c14 <SystemCoreClockUpdate+0x108>)
   80b7e:	4b24      	ldr	r3, [pc, #144]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b80:	601a      	str	r2, [r3, #0]
   80b82:	e012      	b.n	80baa <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80b84:	4a24      	ldr	r2, [pc, #144]	; (80c18 <SystemCoreClockUpdate+0x10c>)
   80b86:	4b22      	ldr	r3, [pc, #136]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80b88:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80b8a:	4b1f      	ldr	r3, [pc, #124]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80b8c:	6a1b      	ldr	r3, [r3, #32]
   80b8e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80b92:	2b10      	cmp	r3, #16
   80b94:	d002      	beq.n	80b9c <SystemCoreClockUpdate+0x90>
   80b96:	2b20      	cmp	r3, #32
   80b98:	d004      	beq.n	80ba4 <SystemCoreClockUpdate+0x98>
   80b9a:	e006      	b.n	80baa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80b9c:	4a1f      	ldr	r2, [pc, #124]	; (80c1c <SystemCoreClockUpdate+0x110>)
   80b9e:	4b1c      	ldr	r3, [pc, #112]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80ba0:	601a      	str	r2, [r3, #0]
				break;
   80ba2:	e002      	b.n	80baa <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80ba4:	4a1b      	ldr	r2, [pc, #108]	; (80c14 <SystemCoreClockUpdate+0x108>)
   80ba6:	4b1a      	ldr	r3, [pc, #104]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80ba8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80baa:	4b17      	ldr	r3, [pc, #92]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bae:	f003 0303 	and.w	r3, r3, #3
   80bb2:	2b02      	cmp	r3, #2
   80bb4:	d10d      	bne.n	80bd2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bb6:	4b14      	ldr	r3, [pc, #80]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80bb8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80bba:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80bbc:	4b14      	ldr	r3, [pc, #80]	; (80c10 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80bbe:	f3c0 400a 	ubfx	r0, r0, #16, #11
   80bc2:	681a      	ldr	r2, [r3, #0]
   80bc4:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80bc8:	b2c9      	uxtb	r1, r1
   80bca:	fbb2 f2f1 	udiv	r2, r2, r1
   80bce:	601a      	str	r2, [r3, #0]
   80bd0:	e002      	b.n	80bd8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   80bd2:	4a13      	ldr	r2, [pc, #76]	; (80c20 <SystemCoreClockUpdate+0x114>)
   80bd4:	4b0e      	ldr	r3, [pc, #56]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80bd6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80bd8:	4b0b      	ldr	r3, [pc, #44]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80bda:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80bdc:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80be0:	2b70      	cmp	r3, #112	; 0x70
   80be2:	d107      	bne.n	80bf4 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80be4:	4b0a      	ldr	r3, [pc, #40]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80be6:	681a      	ldr	r2, [r3, #0]
   80be8:	490e      	ldr	r1, [pc, #56]	; (80c24 <SystemCoreClockUpdate+0x118>)
   80bea:	fba1 0202 	umull	r0, r2, r1, r2
   80bee:	0852      	lsrs	r2, r2, #1
   80bf0:	601a      	str	r2, [r3, #0]
   80bf2:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80bf4:	4b04      	ldr	r3, [pc, #16]	; (80c08 <SystemCoreClockUpdate+0xfc>)
   80bf6:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80bf8:	4b05      	ldr	r3, [pc, #20]	; (80c10 <SystemCoreClockUpdate+0x104>)
   80bfa:	f3c1 1102 	ubfx	r1, r1, #4, #3
   80bfe:	681a      	ldr	r2, [r3, #0]
   80c00:	40ca      	lsrs	r2, r1
   80c02:	601a      	str	r2, [r3, #0]
   80c04:	4770      	bx	lr
   80c06:	bf00      	nop
   80c08:	400e0600 	.word	0x400e0600
   80c0c:	400e1a10 	.word	0x400e1a10
   80c10:	2007013c 	.word	0x2007013c
   80c14:	00b71b00 	.word	0x00b71b00
   80c18:	003d0900 	.word	0x003d0900
   80c1c:	007a1200 	.word	0x007a1200
   80c20:	0e4e1c00 	.word	0x0e4e1c00
   80c24:	aaaaaaab 	.word	0xaaaaaaab

00080c28 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80c28:	4b09      	ldr	r3, [pc, #36]	; (80c50 <_sbrk+0x28>)
   80c2a:	681b      	ldr	r3, [r3, #0]
   80c2c:	b913      	cbnz	r3, 80c34 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   80c2e:	4a09      	ldr	r2, [pc, #36]	; (80c54 <_sbrk+0x2c>)
   80c30:	4b07      	ldr	r3, [pc, #28]	; (80c50 <_sbrk+0x28>)
   80c32:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80c34:	4b06      	ldr	r3, [pc, #24]	; (80c50 <_sbrk+0x28>)
   80c36:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80c38:	181a      	adds	r2, r3, r0
   80c3a:	4907      	ldr	r1, [pc, #28]	; (80c58 <_sbrk+0x30>)
   80c3c:	4291      	cmp	r1, r2
   80c3e:	db04      	blt.n	80c4a <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   80c40:	4610      	mov	r0, r2
   80c42:	4a03      	ldr	r2, [pc, #12]	; (80c50 <_sbrk+0x28>)
   80c44:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   80c46:	4618      	mov	r0, r3
   80c48:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   80c4a:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   80c4e:	4770      	bx	lr
   80c50:	20070b20 	.word	0x20070b20
   80c54:	2007ccc0 	.word	0x2007ccc0
   80c58:	20087ffc 	.word	0x20087ffc

00080c5c <_close>:
}

extern int _close(int file)
{
	return -1;
}
   80c5c:	f04f 30ff 	mov.w	r0, #4294967295
   80c60:	4770      	bx	lr
   80c62:	bf00      	nop

00080c64 <_fstat>:

extern int _fstat(int file, struct stat *st)
{
	st->st_mode = S_IFCHR;
   80c64:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80c68:	604b      	str	r3, [r1, #4]

	return 0;
}
   80c6a:	2000      	movs	r0, #0
   80c6c:	4770      	bx	lr
   80c6e:	bf00      	nop

00080c70 <_isatty>:

extern int _isatty(int file)
{
	return 1;
}
   80c70:	2001      	movs	r0, #1
   80c72:	4770      	bx	lr

00080c74 <_lseek>:

extern int _lseek(int file, int ptr, int dir)
{
	return 0;
}
   80c74:	2000      	movs	r0, #0
   80c76:	4770      	bx	lr

00080c78 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   80c78:	f100 0308 	add.w	r3, r0, #8
   80c7c:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   80c7e:	f04f 32ff 	mov.w	r2, #4294967295
   80c82:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   80c84:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   80c86:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   80c88:	2300      	movs	r3, #0
   80c8a:	6003      	str	r3, [r0, #0]
   80c8c:	4770      	bx	lr
   80c8e:	bf00      	nop

00080c90 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   80c90:	2300      	movs	r3, #0
   80c92:	6103      	str	r3, [r0, #16]
   80c94:	4770      	bx	lr
   80c96:	bf00      	nop

00080c98 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   80c98:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   80c9a:	685a      	ldr	r2, [r3, #4]
   80c9c:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   80c9e:	6842      	ldr	r2, [r0, #4]
   80ca0:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80ca2:	685a      	ldr	r2, [r3, #4]
   80ca4:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   80ca6:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   80ca8:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80caa:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80cac:	6803      	ldr	r3, [r0, #0]
   80cae:	3301      	adds	r3, #1
   80cb0:	6003      	str	r3, [r0, #0]
   80cb2:	4770      	bx	lr

00080cb4 <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   80cb4:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   80cb6:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   80cb8:	f1b4 3fff 	cmp.w	r4, #4294967295
   80cbc:	d101      	bne.n	80cc2 <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   80cbe:	6903      	ldr	r3, [r0, #16]
   80cc0:	e00a      	b.n	80cd8 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   80cc2:	f100 0308 	add.w	r3, r0, #8
   80cc6:	68c2      	ldr	r2, [r0, #12]
   80cc8:	6812      	ldr	r2, [r2, #0]
   80cca:	4294      	cmp	r4, r2
   80ccc:	d304      	bcc.n	80cd8 <vListInsert+0x24>
   80cce:	685b      	ldr	r3, [r3, #4]
   80cd0:	685a      	ldr	r2, [r3, #4]
   80cd2:	6812      	ldr	r2, [r2, #0]
   80cd4:	4294      	cmp	r4, r2
   80cd6:	d2fa      	bcs.n	80cce <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   80cd8:	685a      	ldr	r2, [r3, #4]
   80cda:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   80cdc:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   80cde:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   80ce0:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   80ce2:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   80ce4:	6803      	ldr	r3, [r0, #0]
   80ce6:	3301      	adds	r3, #1
   80ce8:	6003      	str	r3, [r0, #0]
}
   80cea:	f85d 4b04 	ldr.w	r4, [sp], #4
   80cee:	4770      	bx	lr

00080cf0 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   80cf0:	6843      	ldr	r3, [r0, #4]
   80cf2:	6882      	ldr	r2, [r0, #8]
   80cf4:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   80cf6:	6883      	ldr	r3, [r0, #8]
   80cf8:	6842      	ldr	r2, [r0, #4]
   80cfa:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   80cfc:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   80cfe:	685a      	ldr	r2, [r3, #4]
   80d00:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   80d02:	bf04      	itt	eq
   80d04:	6882      	ldreq	r2, [r0, #8]
   80d06:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   80d08:	2200      	movs	r2, #0
   80d0a:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   80d0c:	681a      	ldr	r2, [r3, #0]
   80d0e:	3a01      	subs	r2, #1
   80d10:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   80d12:	6818      	ldr	r0, [r3, #0]
}
   80d14:	4770      	bx	lr
   80d16:	bf00      	nop

00080d18 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   80d18:	4803      	ldr	r0, [pc, #12]	; (80d28 <prvPortStartFirstTask+0x10>)
   80d1a:	6800      	ldr	r0, [r0, #0]
   80d1c:	6800      	ldr	r0, [r0, #0]
   80d1e:	f380 8808 	msr	MSP, r0
   80d22:	b662      	cpsie	i
   80d24:	df00      	svc	0
   80d26:	bf00      	nop
   80d28:	e000ed08 	.word	0xe000ed08

00080d2c <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   80d2c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   80d30:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   80d34:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   80d38:	2300      	movs	r3, #0
   80d3a:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   80d3e:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   80d42:	3840      	subs	r0, #64	; 0x40
   80d44:	4770      	bx	lr
   80d46:	bf00      	nop

00080d48 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   80d48:	4b06      	ldr	r3, [pc, #24]	; (80d64 <pxCurrentTCBConst2>)
   80d4a:	6819      	ldr	r1, [r3, #0]
   80d4c:	6808      	ldr	r0, [r1, #0]
   80d4e:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80d52:	f380 8809 	msr	PSP, r0
   80d56:	f04f 0000 	mov.w	r0, #0
   80d5a:	f380 8811 	msr	BASEPRI, r0
   80d5e:	f04e 0e0d 	orr.w	lr, lr, #13
   80d62:	4770      	bx	lr

00080d64 <pxCurrentTCBConst2>:
   80d64:	2007abec 	.word	0x2007abec

00080d68 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80d68:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80d6c:	4b01      	ldr	r3, [pc, #4]	; (80d74 <vPortYieldFromISR+0xc>)
   80d6e:	601a      	str	r2, [r3, #0]
   80d70:	4770      	bx	lr
   80d72:	bf00      	nop
   80d74:	e000ed04 	.word	0xe000ed04

00080d78 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   80d78:	f3ef 8011 	mrs	r0, BASEPRI
   80d7c:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   80d80:	f381 8811 	msr	BASEPRI, r1
   80d84:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   80d86:	2000      	movs	r0, #0

00080d88 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   80d88:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   80d8a:	4b03      	ldr	r3, [pc, #12]	; (80d98 <vPortEnterCritical+0x10>)
   80d8c:	4798      	blx	r3
	uxCriticalNesting++;
   80d8e:	4b03      	ldr	r3, [pc, #12]	; (80d9c <vPortEnterCritical+0x14>)
   80d90:	681a      	ldr	r2, [r3, #0]
   80d92:	3201      	adds	r2, #1
   80d94:	601a      	str	r2, [r3, #0]
   80d96:	bd08      	pop	{r3, pc}
   80d98:	00080d79 	.word	0x00080d79
   80d9c:	20070140 	.word	0x20070140

00080da0 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   80da0:	f380 8811 	msr	BASEPRI, r0
   80da4:	4770      	bx	lr
   80da6:	bf00      	nop

00080da8 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   80da8:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   80daa:	4a04      	ldr	r2, [pc, #16]	; (80dbc <vPortExitCritical+0x14>)
   80dac:	6813      	ldr	r3, [r2, #0]
   80dae:	3b01      	subs	r3, #1
   80db0:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   80db2:	b913      	cbnz	r3, 80dba <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   80db4:	2000      	movs	r0, #0
   80db6:	4b02      	ldr	r3, [pc, #8]	; (80dc0 <vPortExitCritical+0x18>)
   80db8:	4798      	blx	r3
   80dba:	bd08      	pop	{r3, pc}
   80dbc:	20070140 	.word	0x20070140
   80dc0:	00080da1 	.word	0x00080da1

00080dc4 <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   80dc4:	f3ef 8009 	mrs	r0, PSP
   80dc8:	4b0c      	ldr	r3, [pc, #48]	; (80dfc <pxCurrentTCBConst>)
   80dca:	681a      	ldr	r2, [r3, #0]
   80dcc:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80dd0:	6010      	str	r0, [r2, #0]
   80dd2:	e92d 4008 	stmdb	sp!, {r3, lr}
   80dd6:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   80dda:	f380 8811 	msr	BASEPRI, r0
   80dde:	f000 feaf 	bl	81b40 <vTaskSwitchContext>
   80de2:	f04f 0000 	mov.w	r0, #0
   80de6:	f380 8811 	msr	BASEPRI, r0
   80dea:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   80dee:	6819      	ldr	r1, [r3, #0]
   80df0:	6808      	ldr	r0, [r1, #0]
   80df2:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   80df6:	f380 8809 	msr	PSP, r0
   80dfa:	4770      	bx	lr

00080dfc <pxCurrentTCBConst>:
   80dfc:	2007abec 	.word	0x2007abec

00080e00 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   80e00:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   80e02:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   80e06:	4b05      	ldr	r3, [pc, #20]	; (80e1c <SysTick_Handler+0x1c>)
   80e08:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   80e0a:	4b05      	ldr	r3, [pc, #20]	; (80e20 <SysTick_Handler+0x20>)
   80e0c:	4798      	blx	r3
	{
		vTaskIncrementTick();
   80e0e:	4b05      	ldr	r3, [pc, #20]	; (80e24 <SysTick_Handler+0x24>)
   80e10:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   80e12:	2000      	movs	r0, #0
   80e14:	4b04      	ldr	r3, [pc, #16]	; (80e28 <SysTick_Handler+0x28>)
   80e16:	4798      	blx	r3
   80e18:	bd08      	pop	{r3, pc}
   80e1a:	bf00      	nop
   80e1c:	e000ed04 	.word	0xe000ed04
   80e20:	00080d79 	.word	0x00080d79
   80e24:	00081805 	.word	0x00081805
   80e28:	00080da1 	.word	0x00080da1

00080e2c <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   80e2c:	4a03      	ldr	r2, [pc, #12]	; (80e3c <vPortSetupTimerInterrupt+0x10>)
   80e2e:	4b04      	ldr	r3, [pc, #16]	; (80e40 <vPortSetupTimerInterrupt+0x14>)
   80e30:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   80e32:	2207      	movs	r2, #7
   80e34:	3b04      	subs	r3, #4
   80e36:	601a      	str	r2, [r3, #0]
   80e38:	4770      	bx	lr
   80e3a:	bf00      	nop
   80e3c:	0001481f 	.word	0x0001481f
   80e40:	e000e014 	.word	0xe000e014

00080e44 <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   80e44:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   80e46:	4b09      	ldr	r3, [pc, #36]	; (80e6c <xPortStartScheduler+0x28>)
   80e48:	681a      	ldr	r2, [r3, #0]
   80e4a:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   80e4e:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   80e50:	681a      	ldr	r2, [r3, #0]
   80e52:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   80e56:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   80e58:	4b05      	ldr	r3, [pc, #20]	; (80e70 <xPortStartScheduler+0x2c>)
   80e5a:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   80e5c:	2400      	movs	r4, #0
   80e5e:	4b05      	ldr	r3, [pc, #20]	; (80e74 <xPortStartScheduler+0x30>)
   80e60:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   80e62:	4b05      	ldr	r3, [pc, #20]	; (80e78 <xPortStartScheduler+0x34>)
   80e64:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   80e66:	4620      	mov	r0, r4
   80e68:	bd10      	pop	{r4, pc}
   80e6a:	bf00      	nop
   80e6c:	e000ed20 	.word	0xe000ed20
   80e70:	00080e2d 	.word	0x00080e2d
   80e74:	20070140 	.word	0x20070140
   80e78:	00080d19 	.word	0x00080d19

00080e7c <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   80e7c:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   80e7e:	4a13      	ldr	r2, [pc, #76]	; (80ecc <prvInsertBlockIntoFreeList+0x50>)
   80e80:	6813      	ldr	r3, [r2, #0]
   80e82:	4283      	cmp	r3, r0
   80e84:	d201      	bcs.n	80e8a <prvInsertBlockIntoFreeList+0xe>
   80e86:	461a      	mov	r2, r3
   80e88:	e7fa      	b.n	80e80 <prvInsertBlockIntoFreeList+0x4>
   80e8a:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   80e8c:	6854      	ldr	r4, [r2, #4]
   80e8e:	1915      	adds	r5, r2, r4
   80e90:	4285      	cmp	r5, r0
   80e92:	d103      	bne.n	80e9c <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   80e94:	6868      	ldr	r0, [r5, #4]
   80e96:	4404      	add	r4, r0
   80e98:	6054      	str	r4, [r2, #4]
   80e9a:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   80e9c:	6842      	ldr	r2, [r0, #4]
   80e9e:	1884      	adds	r4, r0, r2
   80ea0:	42a3      	cmp	r3, r4
   80ea2:	d10c      	bne.n	80ebe <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   80ea4:	4c0a      	ldr	r4, [pc, #40]	; (80ed0 <prvInsertBlockIntoFreeList+0x54>)
   80ea6:	6824      	ldr	r4, [r4, #0]
   80ea8:	429c      	cmp	r4, r3
   80eaa:	d006      	beq.n	80eba <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   80eac:	685b      	ldr	r3, [r3, #4]
   80eae:	441a      	add	r2, r3
   80eb0:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   80eb2:	680b      	ldr	r3, [r1, #0]
   80eb4:	681b      	ldr	r3, [r3, #0]
   80eb6:	6003      	str	r3, [r0, #0]
   80eb8:	e002      	b.n	80ec0 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   80eba:	6003      	str	r3, [r0, #0]
   80ebc:	e000      	b.n	80ec0 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   80ebe:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   80ec0:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   80ec2:	bf18      	it	ne
   80ec4:	6008      	strne	r0, [r1, #0]
	}
}
   80ec6:	bc30      	pop	{r4, r5}
   80ec8:	4770      	bx	lr
   80eca:	bf00      	nop
   80ecc:	2007ab2c 	.word	0x2007ab2c
   80ed0:	2007ab28 	.word	0x2007ab28

00080ed4 <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   80ed4:	b538      	push	{r3, r4, r5, lr}
   80ed6:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   80ed8:	4b28      	ldr	r3, [pc, #160]	; (80f7c <pvPortMalloc+0xa8>)
   80eda:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   80edc:	4b28      	ldr	r3, [pc, #160]	; (80f80 <pvPortMalloc+0xac>)
   80ede:	681b      	ldr	r3, [r3, #0]
   80ee0:	b99b      	cbnz	r3, 80f0a <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   80ee2:	4a28      	ldr	r2, [pc, #160]	; (80f84 <pvPortMalloc+0xb0>)
   80ee4:	4b28      	ldr	r3, [pc, #160]	; (80f88 <pvPortMalloc+0xb4>)
   80ee6:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   80ee8:	2100      	movs	r1, #0
   80eea:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   80eec:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   80ef0:	1898      	adds	r0, r3, r2
   80ef2:	4d23      	ldr	r5, [pc, #140]	; (80f80 <pvPortMalloc+0xac>)
   80ef4:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   80ef6:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   80efa:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   80efc:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   80efe:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   80f00:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   80f02:	4b22      	ldr	r3, [pc, #136]	; (80f8c <pvPortMalloc+0xb8>)
   80f04:	681a      	ldr	r2, [r3, #0]
   80f06:	3a10      	subs	r2, #16
   80f08:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   80f0a:	2c00      	cmp	r4, #0
   80f0c:	d02d      	beq.n	80f6a <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   80f0e:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   80f12:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   80f16:	bf1c      	itt	ne
   80f18:	f022 0207 	bicne.w	r2, r2, #7
   80f1c:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   80f1e:	1e51      	subs	r1, r2, #1
   80f20:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   80f24:	4299      	cmp	r1, r3
   80f26:	d822      	bhi.n	80f6e <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   80f28:	4916      	ldr	r1, [pc, #88]	; (80f84 <pvPortMalloc+0xb0>)
   80f2a:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   80f2c:	6863      	ldr	r3, [r4, #4]
   80f2e:	429a      	cmp	r2, r3
   80f30:	d904      	bls.n	80f3c <pvPortMalloc+0x68>
   80f32:	6823      	ldr	r3, [r4, #0]
   80f34:	b113      	cbz	r3, 80f3c <pvPortMalloc+0x68>
   80f36:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   80f38:	461c      	mov	r4, r3
   80f3a:	e7f7      	b.n	80f2c <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   80f3c:	4b10      	ldr	r3, [pc, #64]	; (80f80 <pvPortMalloc+0xac>)
   80f3e:	681b      	ldr	r3, [r3, #0]
   80f40:	429c      	cmp	r4, r3
   80f42:	d016      	beq.n	80f72 <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   80f44:	680d      	ldr	r5, [r1, #0]
   80f46:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   80f48:	6823      	ldr	r3, [r4, #0]
   80f4a:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   80f4c:	6863      	ldr	r3, [r4, #4]
   80f4e:	1a9b      	subs	r3, r3, r2
   80f50:	2b20      	cmp	r3, #32
   80f52:	d904      	bls.n	80f5e <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   80f54:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   80f56:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   80f58:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   80f5a:	4b0d      	ldr	r3, [pc, #52]	; (80f90 <pvPortMalloc+0xbc>)
   80f5c:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   80f5e:	4b0b      	ldr	r3, [pc, #44]	; (80f8c <pvPortMalloc+0xb8>)
   80f60:	681a      	ldr	r2, [r3, #0]
   80f62:	6861      	ldr	r1, [r4, #4]
   80f64:	1a52      	subs	r2, r2, r1
   80f66:	601a      	str	r2, [r3, #0]
   80f68:	e004      	b.n	80f74 <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   80f6a:	2500      	movs	r5, #0
   80f6c:	e002      	b.n	80f74 <pvPortMalloc+0xa0>
   80f6e:	2500      	movs	r5, #0
   80f70:	e000      	b.n	80f74 <pvPortMalloc+0xa0>
   80f72:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   80f74:	4b07      	ldr	r3, [pc, #28]	; (80f94 <pvPortMalloc+0xc0>)
   80f76:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   80f78:	4628      	mov	r0, r5
   80f7a:	bd38      	pop	{r3, r4, r5, pc}
   80f7c:	000817d5 	.word	0x000817d5
   80f80:	2007ab28 	.word	0x2007ab28
   80f84:	2007ab2c 	.word	0x2007ab2c
   80f88:	20070b28 	.word	0x20070b28
   80f8c:	20070144 	.word	0x20070144
   80f90:	00080e7d 	.word	0x00080e7d
   80f94:	00081925 	.word	0x00081925

00080f98 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   80f98:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   80f9a:	4604      	mov	r4, r0
   80f9c:	b168      	cbz	r0, 80fba <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   80f9e:	4b07      	ldr	r3, [pc, #28]	; (80fbc <vPortFree+0x24>)
   80fa0:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   80fa2:	4b07      	ldr	r3, [pc, #28]	; (80fc0 <vPortFree+0x28>)
   80fa4:	6819      	ldr	r1, [r3, #0]
   80fa6:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   80faa:	440a      	add	r2, r1
   80fac:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   80fae:	f1a4 0010 	sub.w	r0, r4, #16
   80fb2:	4b04      	ldr	r3, [pc, #16]	; (80fc4 <vPortFree+0x2c>)
   80fb4:	4798      	blx	r3
		}
		xTaskResumeAll();
   80fb6:	4b04      	ldr	r3, [pc, #16]	; (80fc8 <vPortFree+0x30>)
   80fb8:	4798      	blx	r3
   80fba:	bd10      	pop	{r4, pc}
   80fbc:	000817d5 	.word	0x000817d5
   80fc0:	20070144 	.word	0x20070144
   80fc4:	00080e7d 	.word	0x00080e7d
   80fc8:	00081925 	.word	0x00081925

00080fcc <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   80fcc:	b510      	push	{r4, lr}
   80fce:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   80fd0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   80fd2:	b93b      	cbnz	r3, 80fe4 <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   80fd4:	6803      	ldr	r3, [r0, #0]
   80fd6:	bb1b      	cbnz	r3, 81020 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   80fd8:	6840      	ldr	r0, [r0, #4]
   80fda:	4b13      	ldr	r3, [pc, #76]	; (81028 <prvCopyDataToQueue+0x5c>)
   80fdc:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   80fde:	2300      	movs	r3, #0
   80fe0:	6063      	str	r3, [r4, #4]
   80fe2:	e01d      	b.n	81020 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   80fe4:	b96a      	cbnz	r2, 81002 <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   80fe6:	6880      	ldr	r0, [r0, #8]
   80fe8:	461a      	mov	r2, r3
   80fea:	4b10      	ldr	r3, [pc, #64]	; (8102c <prvCopyDataToQueue+0x60>)
   80fec:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   80fee:	68a2      	ldr	r2, [r4, #8]
   80ff0:	6c23      	ldr	r3, [r4, #64]	; 0x40
   80ff2:	4413      	add	r3, r2
   80ff4:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   80ff6:	6862      	ldr	r2, [r4, #4]
   80ff8:	4293      	cmp	r3, r2
   80ffa:	d311      	bcc.n	81020 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   80ffc:	6823      	ldr	r3, [r4, #0]
   80ffe:	60a3      	str	r3, [r4, #8]
   81000:	e00e      	b.n	81020 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81002:	68c0      	ldr	r0, [r0, #12]
   81004:	461a      	mov	r2, r3
   81006:	4b09      	ldr	r3, [pc, #36]	; (8102c <prvCopyDataToQueue+0x60>)
   81008:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   8100a:	6c22      	ldr	r2, [r4, #64]	; 0x40
   8100c:	4252      	negs	r2, r2
   8100e:	68e3      	ldr	r3, [r4, #12]
   81010:	4413      	add	r3, r2
   81012:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81014:	6821      	ldr	r1, [r4, #0]
   81016:	428b      	cmp	r3, r1
   81018:	d202      	bcs.n	81020 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   8101a:	6863      	ldr	r3, [r4, #4]
   8101c:	441a      	add	r2, r3
   8101e:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81020:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81022:	3301      	adds	r3, #1
   81024:	63a3      	str	r3, [r4, #56]	; 0x38
   81026:	bd10      	pop	{r4, pc}
   81028:	00081e59 	.word	0x00081e59
   8102c:	00082585 	.word	0x00082585

00081030 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81030:	b538      	push	{r3, r4, r5, lr}
   81032:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81034:	6805      	ldr	r5, [r0, #0]
   81036:	b15d      	cbz	r5, 81050 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81038:	6c02      	ldr	r2, [r0, #64]	; 0x40
   8103a:	68c4      	ldr	r4, [r0, #12]
   8103c:	4414      	add	r4, r2
   8103e:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81040:	6840      	ldr	r0, [r0, #4]
   81042:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81044:	bf28      	it	cs
   81046:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81048:	4608      	mov	r0, r1
   8104a:	68d9      	ldr	r1, [r3, #12]
   8104c:	4b01      	ldr	r3, [pc, #4]	; (81054 <prvCopyDataFromQueue+0x24>)
   8104e:	4798      	blx	r3
   81050:	bd38      	pop	{r3, r4, r5, pc}
   81052:	bf00      	nop
   81054:	00082585 	.word	0x00082585

00081058 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81058:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8105a:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   8105c:	4b1d      	ldr	r3, [pc, #116]	; (810d4 <prvUnlockQueue+0x7c>)
   8105e:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81060:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81062:	2b00      	cmp	r3, #0
   81064:	dd12      	ble.n	8108c <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81066:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81068:	b183      	cbz	r3, 8108c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8106a:	f104 0624 	add.w	r6, r4, #36	; 0x24
   8106e:	4d1a      	ldr	r5, [pc, #104]	; (810d8 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81070:	4f1a      	ldr	r7, [pc, #104]	; (810dc <prvUnlockQueue+0x84>)
   81072:	e001      	b.n	81078 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81074:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81076:	b14b      	cbz	r3, 8108c <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81078:	4630      	mov	r0, r6
   8107a:	47a8      	blx	r5
   8107c:	b100      	cbz	r0, 81080 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   8107e:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81080:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81082:	3b01      	subs	r3, #1
   81084:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81086:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81088:	2b00      	cmp	r3, #0
   8108a:	dcf3      	bgt.n	81074 <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   8108c:	f04f 33ff 	mov.w	r3, #4294967295
   81090:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81092:	4b13      	ldr	r3, [pc, #76]	; (810e0 <prvUnlockQueue+0x88>)
   81094:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81096:	4b0f      	ldr	r3, [pc, #60]	; (810d4 <prvUnlockQueue+0x7c>)
   81098:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   8109a:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8109c:	2b00      	cmp	r3, #0
   8109e:	dd12      	ble.n	810c6 <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   810a0:	6923      	ldr	r3, [r4, #16]
   810a2:	b183      	cbz	r3, 810c6 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   810a4:	f104 0610 	add.w	r6, r4, #16
   810a8:	4d0b      	ldr	r5, [pc, #44]	; (810d8 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   810aa:	4f0c      	ldr	r7, [pc, #48]	; (810dc <prvUnlockQueue+0x84>)
   810ac:	e001      	b.n	810b2 <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   810ae:	6923      	ldr	r3, [r4, #16]
   810b0:	b14b      	cbz	r3, 810c6 <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   810b2:	4630      	mov	r0, r6
   810b4:	47a8      	blx	r5
   810b6:	b100      	cbz	r0, 810ba <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   810b8:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   810ba:	6c63      	ldr	r3, [r4, #68]	; 0x44
   810bc:	3b01      	subs	r3, #1
   810be:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   810c0:	6c63      	ldr	r3, [r4, #68]	; 0x44
   810c2:	2b00      	cmp	r3, #0
   810c4:	dcf3      	bgt.n	810ae <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   810c6:	f04f 33ff 	mov.w	r3, #4294967295
   810ca:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   810cc:	4b04      	ldr	r3, [pc, #16]	; (810e0 <prvUnlockQueue+0x88>)
   810ce:	4798      	blx	r3
   810d0:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   810d2:	bf00      	nop
   810d4:	00080d89 	.word	0x00080d89
   810d8:	00081c75 	.word	0x00081c75
   810dc:	00081da5 	.word	0x00081da5
   810e0:	00080da9 	.word	0x00080da9

000810e4 <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   810e4:	b538      	push	{r3, r4, r5, lr}
   810e6:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   810e8:	4604      	mov	r4, r0
   810ea:	b918      	cbnz	r0, 810f4 <xQueueGenericReset+0x10>
   810ec:	4b16      	ldr	r3, [pc, #88]	; (81148 <xQueueGenericReset+0x64>)
   810ee:	4798      	blx	r3
   810f0:	bf00      	nop
   810f2:	e7fd      	b.n	810f0 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   810f4:	4b15      	ldr	r3, [pc, #84]	; (8114c <xQueueGenericReset+0x68>)
   810f6:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   810f8:	6823      	ldr	r3, [r4, #0]
   810fa:	6c22      	ldr	r2, [r4, #64]	; 0x40
   810fc:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   810fe:	fb00 f002 	mul.w	r0, r0, r2
   81102:	1819      	adds	r1, r3, r0
   81104:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81106:	2100      	movs	r1, #0
   81108:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   8110a:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   8110c:	1a82      	subs	r2, r0, r2
   8110e:	4413      	add	r3, r2
   81110:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81112:	f04f 33ff 	mov.w	r3, #4294967295
   81116:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81118:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   8111a:	b955      	cbnz	r5, 81132 <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   8111c:	6923      	ldr	r3, [r4, #16]
   8111e:	b17b      	cbz	r3, 81140 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81120:	f104 0010 	add.w	r0, r4, #16
   81124:	4b0a      	ldr	r3, [pc, #40]	; (81150 <xQueueGenericReset+0x6c>)
   81126:	4798      	blx	r3
   81128:	2801      	cmp	r0, #1
   8112a:	d109      	bne.n	81140 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   8112c:	4b09      	ldr	r3, [pc, #36]	; (81154 <xQueueGenericReset+0x70>)
   8112e:	4798      	blx	r3
   81130:	e006      	b.n	81140 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81132:	f104 0010 	add.w	r0, r4, #16
   81136:	4d08      	ldr	r5, [pc, #32]	; (81158 <xQueueGenericReset+0x74>)
   81138:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   8113a:	f104 0024 	add.w	r0, r4, #36	; 0x24
   8113e:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81140:	4b06      	ldr	r3, [pc, #24]	; (8115c <xQueueGenericReset+0x78>)
   81142:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81144:	2001      	movs	r0, #1
   81146:	bd38      	pop	{r3, r4, r5, pc}
   81148:	00080d79 	.word	0x00080d79
   8114c:	00080d89 	.word	0x00080d89
   81150:	00081c75 	.word	0x00081c75
   81154:	00080d69 	.word	0x00080d69
   81158:	00080c79 	.word	0x00080c79
   8115c:	00080da9 	.word	0x00080da9

00081160 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81160:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81162:	460d      	mov	r5, r1
   81164:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81166:	4606      	mov	r6, r0
   81168:	b188      	cbz	r0, 8118e <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   8116a:	2050      	movs	r0, #80	; 0x50
   8116c:	4b0e      	ldr	r3, [pc, #56]	; (811a8 <xQueueGenericCreate+0x48>)
   8116e:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81170:	4604      	mov	r4, r0
   81172:	b160      	cbz	r0, 8118e <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81174:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81178:	3001      	adds	r0, #1
   8117a:	4b0b      	ldr	r3, [pc, #44]	; (811a8 <xQueueGenericCreate+0x48>)
   8117c:	4798      	blx	r3
   8117e:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81180:	b940      	cbnz	r0, 81194 <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81182:	4620      	mov	r0, r4
   81184:	4b09      	ldr	r3, [pc, #36]	; (811ac <xQueueGenericCreate+0x4c>)
   81186:	4798      	blx	r3
   81188:	e001      	b.n	8118e <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   8118a:	bf00      	nop
   8118c:	e7fd      	b.n	8118a <xQueueGenericCreate+0x2a>
   8118e:	4b08      	ldr	r3, [pc, #32]	; (811b0 <xQueueGenericCreate+0x50>)
   81190:	4798      	blx	r3
   81192:	e7fa      	b.n	8118a <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81194:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81196:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81198:	4620      	mov	r0, r4
   8119a:	2101      	movs	r1, #1
   8119c:	4b05      	ldr	r3, [pc, #20]	; (811b4 <xQueueGenericCreate+0x54>)
   8119e:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   811a0:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   811a4:	4620      	mov	r0, r4
   811a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   811a8:	00080ed5 	.word	0x00080ed5
   811ac:	00080f99 	.word	0x00080f99
   811b0:	00080d79 	.word	0x00080d79
   811b4:	000810e5 	.word	0x000810e5

000811b8 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   811b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   811bc:	b085      	sub	sp, #20
   811be:	468a      	mov	sl, r1
   811c0:	9201      	str	r2, [sp, #4]
   811c2:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   811c4:	4604      	mov	r4, r0
   811c6:	b918      	cbnz	r0, 811d0 <xQueueGenericSend+0x18>
   811c8:	4b36      	ldr	r3, [pc, #216]	; (812a4 <xQueueGenericSend+0xec>)
   811ca:	4798      	blx	r3
   811cc:	bf00      	nop
   811ce:	e7fd      	b.n	811cc <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   811d0:	b909      	cbnz	r1, 811d6 <xQueueGenericSend+0x1e>
   811d2:	6c03      	ldr	r3, [r0, #64]	; 0x40
   811d4:	b91b      	cbnz	r3, 811de <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   811d6:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   811d8:	4e33      	ldr	r6, [pc, #204]	; (812a8 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   811da:	4d34      	ldr	r5, [pc, #208]	; (812ac <xQueueGenericSend+0xf4>)
   811dc:	e003      	b.n	811e6 <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   811de:	4b31      	ldr	r3, [pc, #196]	; (812a4 <xQueueGenericSend+0xec>)
   811e0:	4798      	blx	r3
   811e2:	bf00      	nop
   811e4:	e7fd      	b.n	811e2 <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   811e6:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   811e8:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   811ea:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   811ec:	429a      	cmp	r2, r3
   811ee:	d212      	bcs.n	81216 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   811f0:	4620      	mov	r0, r4
   811f2:	4651      	mov	r1, sl
   811f4:	465a      	mov	r2, fp
   811f6:	4b2e      	ldr	r3, [pc, #184]	; (812b0 <xQueueGenericSend+0xf8>)
   811f8:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   811fa:	6a63      	ldr	r3, [r4, #36]	; 0x24
   811fc:	b13b      	cbz	r3, 8120e <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   811fe:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81202:	4b2c      	ldr	r3, [pc, #176]	; (812b4 <xQueueGenericSend+0xfc>)
   81204:	4798      	blx	r3
   81206:	2801      	cmp	r0, #1
   81208:	d101      	bne.n	8120e <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   8120a:	4b2b      	ldr	r3, [pc, #172]	; (812b8 <xQueueGenericSend+0x100>)
   8120c:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   8120e:	4b27      	ldr	r3, [pc, #156]	; (812ac <xQueueGenericSend+0xf4>)
   81210:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81212:	2001      	movs	r0, #1
   81214:	e043      	b.n	8129e <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81216:	9b01      	ldr	r3, [sp, #4]
   81218:	b91b      	cbnz	r3, 81222 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   8121a:	4b24      	ldr	r3, [pc, #144]	; (812ac <xQueueGenericSend+0xf4>)
   8121c:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   8121e:	2000      	movs	r0, #0
   81220:	e03d      	b.n	8129e <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   81222:	b91f      	cbnz	r7, 8122c <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81224:	a802      	add	r0, sp, #8
   81226:	4b25      	ldr	r3, [pc, #148]	; (812bc <xQueueGenericSend+0x104>)
   81228:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   8122a:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   8122c:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   8122e:	4b24      	ldr	r3, [pc, #144]	; (812c0 <xQueueGenericSend+0x108>)
   81230:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81232:	47b0      	blx	r6
   81234:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81236:	f1b3 3fff 	cmp.w	r3, #4294967295
   8123a:	bf04      	itt	eq
   8123c:	2300      	moveq	r3, #0
   8123e:	6463      	streq	r3, [r4, #68]	; 0x44
   81240:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81242:	f1b3 3fff 	cmp.w	r3, #4294967295
   81246:	bf04      	itt	eq
   81248:	2300      	moveq	r3, #0
   8124a:	64a3      	streq	r3, [r4, #72]	; 0x48
   8124c:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   8124e:	a802      	add	r0, sp, #8
   81250:	a901      	add	r1, sp, #4
   81252:	4b1c      	ldr	r3, [pc, #112]	; (812c4 <xQueueGenericSend+0x10c>)
   81254:	4798      	blx	r3
   81256:	b9e0      	cbnz	r0, 81292 <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81258:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   8125a:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   8125e:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81262:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81264:	45c1      	cmp	r9, r8
   81266:	d10e      	bne.n	81286 <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81268:	f104 0010 	add.w	r0, r4, #16
   8126c:	9901      	ldr	r1, [sp, #4]
   8126e:	4b16      	ldr	r3, [pc, #88]	; (812c8 <xQueueGenericSend+0x110>)
   81270:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81272:	4620      	mov	r0, r4
   81274:	4b15      	ldr	r3, [pc, #84]	; (812cc <xQueueGenericSend+0x114>)
   81276:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81278:	4b15      	ldr	r3, [pc, #84]	; (812d0 <xQueueGenericSend+0x118>)
   8127a:	4798      	blx	r3
   8127c:	2800      	cmp	r0, #0
   8127e:	d1b2      	bne.n	811e6 <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   81280:	4b0d      	ldr	r3, [pc, #52]	; (812b8 <xQueueGenericSend+0x100>)
   81282:	4798      	blx	r3
   81284:	e7af      	b.n	811e6 <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81286:	4620      	mov	r0, r4
   81288:	4b10      	ldr	r3, [pc, #64]	; (812cc <xQueueGenericSend+0x114>)
   8128a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   8128c:	4b10      	ldr	r3, [pc, #64]	; (812d0 <xQueueGenericSend+0x118>)
   8128e:	4798      	blx	r3
   81290:	e7a9      	b.n	811e6 <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81292:	4620      	mov	r0, r4
   81294:	4b0d      	ldr	r3, [pc, #52]	; (812cc <xQueueGenericSend+0x114>)
   81296:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81298:	4b0d      	ldr	r3, [pc, #52]	; (812d0 <xQueueGenericSend+0x118>)
   8129a:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   8129c:	2000      	movs	r0, #0
		}
	}
}
   8129e:	b005      	add	sp, #20
   812a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   812a4:	00080d79 	.word	0x00080d79
   812a8:	00080d89 	.word	0x00080d89
   812ac:	00080da9 	.word	0x00080da9
   812b0:	00080fcd 	.word	0x00080fcd
   812b4:	00081c75 	.word	0x00081c75
   812b8:	00080d69 	.word	0x00080d69
   812bc:	00081cf9 	.word	0x00081cf9
   812c0:	000817d5 	.word	0x000817d5
   812c4:	00081d21 	.word	0x00081d21
   812c8:	00081bd1 	.word	0x00081bd1
   812cc:	00081059 	.word	0x00081059
   812d0:	00081925 	.word	0x00081925

000812d4 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   812d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   812d8:	460e      	mov	r6, r1
   812da:	4615      	mov	r5, r2
   812dc:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   812de:	4604      	mov	r4, r0
   812e0:	b918      	cbnz	r0, 812ea <xQueueGenericSendFromISR+0x16>
   812e2:	4b1c      	ldr	r3, [pc, #112]	; (81354 <xQueueGenericSendFromISR+0x80>)
   812e4:	4798      	blx	r3
   812e6:	bf00      	nop
   812e8:	e7fd      	b.n	812e6 <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   812ea:	b929      	cbnz	r1, 812f8 <xQueueGenericSendFromISR+0x24>
   812ec:	6c03      	ldr	r3, [r0, #64]	; 0x40
   812ee:	b11b      	cbz	r3, 812f8 <xQueueGenericSendFromISR+0x24>
   812f0:	4b18      	ldr	r3, [pc, #96]	; (81354 <xQueueGenericSendFromISR+0x80>)
   812f2:	4798      	blx	r3
   812f4:	bf00      	nop
   812f6:	e7fd      	b.n	812f4 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   812f8:	4b16      	ldr	r3, [pc, #88]	; (81354 <xQueueGenericSendFromISR+0x80>)
   812fa:	4798      	blx	r3
   812fc:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   812fe:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81300:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81302:	429a      	cmp	r2, r3
   81304:	d218      	bcs.n	81338 <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81306:	4620      	mov	r0, r4
   81308:	4631      	mov	r1, r6
   8130a:	4642      	mov	r2, r8
   8130c:	4b12      	ldr	r3, [pc, #72]	; (81358 <xQueueGenericSendFromISR+0x84>)
   8130e:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81310:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81312:	f1b3 3fff 	cmp.w	r3, #4294967295
   81316:	d10a      	bne.n	8132e <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81318:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8131a:	b17b      	cbz	r3, 8133c <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   8131c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81320:	4b0e      	ldr	r3, [pc, #56]	; (8135c <xQueueGenericSendFromISR+0x88>)
   81322:	4798      	blx	r3
   81324:	b160      	cbz	r0, 81340 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81326:	b16d      	cbz	r5, 81344 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81328:	2401      	movs	r4, #1
   8132a:	602c      	str	r4, [r5, #0]
   8132c:	e00b      	b.n	81346 <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   8132e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81330:	3301      	adds	r3, #1
   81332:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81334:	2401      	movs	r4, #1
   81336:	e006      	b.n	81346 <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81338:	2400      	movs	r4, #0
   8133a:	e004      	b.n	81346 <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   8133c:	2401      	movs	r4, #1
   8133e:	e002      	b.n	81346 <xQueueGenericSendFromISR+0x72>
   81340:	2401      	movs	r4, #1
   81342:	e000      	b.n	81346 <xQueueGenericSendFromISR+0x72>
   81344:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81346:	4638      	mov	r0, r7
   81348:	4b05      	ldr	r3, [pc, #20]	; (81360 <xQueueGenericSendFromISR+0x8c>)
   8134a:	4798      	blx	r3

	return xReturn;
}
   8134c:	4620      	mov	r0, r4
   8134e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81352:	bf00      	nop
   81354:	00080d79 	.word	0x00080d79
   81358:	00080fcd 	.word	0x00080fcd
   8135c:	00081c75 	.word	0x00081c75
   81360:	00080da1 	.word	0x00080da1

00081364 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81364:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81368:	b085      	sub	sp, #20
   8136a:	4689      	mov	r9, r1
   8136c:	9201      	str	r2, [sp, #4]
   8136e:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81370:	4604      	mov	r4, r0
   81372:	b918      	cbnz	r0, 8137c <xQueueGenericReceive+0x18>
   81374:	4b44      	ldr	r3, [pc, #272]	; (81488 <xQueueGenericReceive+0x124>)
   81376:	4798      	blx	r3
   81378:	bf00      	nop
   8137a:	e7fd      	b.n	81378 <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8137c:	b909      	cbnz	r1, 81382 <xQueueGenericReceive+0x1e>
   8137e:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81380:	b92b      	cbnz	r3, 8138e <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81382:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81384:	4e41      	ldr	r6, [pc, #260]	; (8148c <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81386:	f8df b134 	ldr.w	fp, [pc, #308]	; 814bc <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   8138a:	4d41      	ldr	r5, [pc, #260]	; (81490 <xQueueGenericReceive+0x12c>)
   8138c:	e003      	b.n	81396 <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   8138e:	4b3e      	ldr	r3, [pc, #248]	; (81488 <xQueueGenericReceive+0x124>)
   81390:	4798      	blx	r3
   81392:	bf00      	nop
   81394:	e7fd      	b.n	81392 <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81396:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81398:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   8139a:	2b00      	cmp	r3, #0
   8139c:	d028      	beq.n	813f0 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   8139e:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   813a0:	4620      	mov	r0, r4
   813a2:	4649      	mov	r1, r9
   813a4:	4b3b      	ldr	r3, [pc, #236]	; (81494 <xQueueGenericReceive+0x130>)
   813a6:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   813a8:	f1ba 0f00 	cmp.w	sl, #0
   813ac:	d112      	bne.n	813d4 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   813ae:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   813b0:	3b01      	subs	r3, #1
   813b2:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   813b4:	6823      	ldr	r3, [r4, #0]
   813b6:	b913      	cbnz	r3, 813be <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   813b8:	4b37      	ldr	r3, [pc, #220]	; (81498 <xQueueGenericReceive+0x134>)
   813ba:	4798      	blx	r3
   813bc:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   813be:	6923      	ldr	r3, [r4, #16]
   813c0:	b193      	cbz	r3, 813e8 <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   813c2:	f104 0010 	add.w	r0, r4, #16
   813c6:	4b35      	ldr	r3, [pc, #212]	; (8149c <xQueueGenericReceive+0x138>)
   813c8:	4798      	blx	r3
   813ca:	2801      	cmp	r0, #1
   813cc:	d10c      	bne.n	813e8 <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   813ce:	4b34      	ldr	r3, [pc, #208]	; (814a0 <xQueueGenericReceive+0x13c>)
   813d0:	4798      	blx	r3
   813d2:	e009      	b.n	813e8 <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   813d4:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   813d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
   813d8:	b133      	cbz	r3, 813e8 <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   813da:	f104 0024 	add.w	r0, r4, #36	; 0x24
   813de:	4b2f      	ldr	r3, [pc, #188]	; (8149c <xQueueGenericReceive+0x138>)
   813e0:	4798      	blx	r3
   813e2:	b108      	cbz	r0, 813e8 <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   813e4:	4b2e      	ldr	r3, [pc, #184]	; (814a0 <xQueueGenericReceive+0x13c>)
   813e6:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   813e8:	4b29      	ldr	r3, [pc, #164]	; (81490 <xQueueGenericReceive+0x12c>)
   813ea:	4798      	blx	r3
				return pdPASS;
   813ec:	2001      	movs	r0, #1
   813ee:	e048      	b.n	81482 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   813f0:	9b01      	ldr	r3, [sp, #4]
   813f2:	b91b      	cbnz	r3, 813fc <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   813f4:	4b26      	ldr	r3, [pc, #152]	; (81490 <xQueueGenericReceive+0x12c>)
   813f6:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   813f8:	2000      	movs	r0, #0
   813fa:	e042      	b.n	81482 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   813fc:	b917      	cbnz	r7, 81404 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   813fe:	a802      	add	r0, sp, #8
   81400:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81402:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81404:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81406:	4b27      	ldr	r3, [pc, #156]	; (814a4 <xQueueGenericReceive+0x140>)
   81408:	4798      	blx	r3
		prvLockQueue( pxQueue );
   8140a:	47b0      	blx	r6
   8140c:	6c63      	ldr	r3, [r4, #68]	; 0x44
   8140e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81412:	bf04      	itt	eq
   81414:	2300      	moveq	r3, #0
   81416:	6463      	streq	r3, [r4, #68]	; 0x44
   81418:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   8141a:	f1b3 3fff 	cmp.w	r3, #4294967295
   8141e:	bf04      	itt	eq
   81420:	2300      	moveq	r3, #0
   81422:	64a3      	streq	r3, [r4, #72]	; 0x48
   81424:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81426:	a802      	add	r0, sp, #8
   81428:	a901      	add	r1, sp, #4
   8142a:	4b1f      	ldr	r3, [pc, #124]	; (814a8 <xQueueGenericReceive+0x144>)
   8142c:	4798      	blx	r3
   8142e:	bb10      	cbnz	r0, 81476 <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81430:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81432:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81436:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81438:	f1b8 0f00 	cmp.w	r8, #0
   8143c:	d115      	bne.n	8146a <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   8143e:	6823      	ldr	r3, [r4, #0]
   81440:	b923      	cbnz	r3, 8144c <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   81442:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81444:	6860      	ldr	r0, [r4, #4]
   81446:	4b19      	ldr	r3, [pc, #100]	; (814ac <xQueueGenericReceive+0x148>)
   81448:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   8144a:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   8144c:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81450:	9901      	ldr	r1, [sp, #4]
   81452:	4b17      	ldr	r3, [pc, #92]	; (814b0 <xQueueGenericReceive+0x14c>)
   81454:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81456:	4620      	mov	r0, r4
   81458:	4b16      	ldr	r3, [pc, #88]	; (814b4 <xQueueGenericReceive+0x150>)
   8145a:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   8145c:	4b16      	ldr	r3, [pc, #88]	; (814b8 <xQueueGenericReceive+0x154>)
   8145e:	4798      	blx	r3
   81460:	2800      	cmp	r0, #0
   81462:	d198      	bne.n	81396 <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   81464:	4b0e      	ldr	r3, [pc, #56]	; (814a0 <xQueueGenericReceive+0x13c>)
   81466:	4798      	blx	r3
   81468:	e795      	b.n	81396 <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   8146a:	4620      	mov	r0, r4
   8146c:	4b11      	ldr	r3, [pc, #68]	; (814b4 <xQueueGenericReceive+0x150>)
   8146e:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81470:	4b11      	ldr	r3, [pc, #68]	; (814b8 <xQueueGenericReceive+0x154>)
   81472:	4798      	blx	r3
   81474:	e78f      	b.n	81396 <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81476:	4620      	mov	r0, r4
   81478:	4b0e      	ldr	r3, [pc, #56]	; (814b4 <xQueueGenericReceive+0x150>)
   8147a:	4798      	blx	r3
			( void ) xTaskResumeAll();
   8147c:	4b0e      	ldr	r3, [pc, #56]	; (814b8 <xQueueGenericReceive+0x154>)
   8147e:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81480:	2000      	movs	r0, #0
		}
	}
}
   81482:	b005      	add	sp, #20
   81484:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81488:	00080d79 	.word	0x00080d79
   8148c:	00080d89 	.word	0x00080d89
   81490:	00080da9 	.word	0x00080da9
   81494:	00081031 	.word	0x00081031
   81498:	00081db1 	.word	0x00081db1
   8149c:	00081c75 	.word	0x00081c75
   814a0:	00080d69 	.word	0x00080d69
   814a4:	000817d5 	.word	0x000817d5
   814a8:	00081d21 	.word	0x00081d21
   814ac:	00081ddd 	.word	0x00081ddd
   814b0:	00081bd1 	.word	0x00081bd1
   814b4:	00081059 	.word	0x00081059
   814b8:	00081925 	.word	0x00081925
   814bc:	00081cf9 	.word	0x00081cf9

000814c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   814c0:	b538      	push	{r3, r4, r5, lr}
   814c2:	4604      	mov	r4, r0
   814c4:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   814c6:	4b0d      	ldr	r3, [pc, #52]	; (814fc <vQueueWaitForMessageRestricted+0x3c>)
   814c8:	4798      	blx	r3
   814ca:	6c63      	ldr	r3, [r4, #68]	; 0x44
   814cc:	f1b3 3fff 	cmp.w	r3, #4294967295
   814d0:	bf04      	itt	eq
   814d2:	2300      	moveq	r3, #0
   814d4:	6463      	streq	r3, [r4, #68]	; 0x44
   814d6:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   814d8:	f1b3 3fff 	cmp.w	r3, #4294967295
   814dc:	bf04      	itt	eq
   814de:	2300      	moveq	r3, #0
   814e0:	64a3      	streq	r3, [r4, #72]	; 0x48
   814e2:	4b07      	ldr	r3, [pc, #28]	; (81500 <vQueueWaitForMessageRestricted+0x40>)
   814e4:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   814e6:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   814e8:	b923      	cbnz	r3, 814f4 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   814ea:	f104 0024 	add.w	r0, r4, #36	; 0x24
   814ee:	4629      	mov	r1, r5
   814f0:	4b04      	ldr	r3, [pc, #16]	; (81504 <vQueueWaitForMessageRestricted+0x44>)
   814f2:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   814f4:	4620      	mov	r0, r4
   814f6:	4b04      	ldr	r3, [pc, #16]	; (81508 <vQueueWaitForMessageRestricted+0x48>)
   814f8:	4798      	blx	r3
   814fa:	bd38      	pop	{r3, r4, r5, pc}
   814fc:	00080d89 	.word	0x00080d89
   81500:	00080da9 	.word	0x00080da9
   81504:	00081c31 	.word	0x00081c31
   81508:	00081059 	.word	0x00081059

0008150c <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   8150c:	b510      	push	{r4, lr}
   8150e:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   81510:	4b0e      	ldr	r3, [pc, #56]	; (8154c <prvAddCurrentTaskToDelayedList+0x40>)
   81512:	681b      	ldr	r3, [r3, #0]
   81514:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   81516:	4b0e      	ldr	r3, [pc, #56]	; (81550 <prvAddCurrentTaskToDelayedList+0x44>)
   81518:	681b      	ldr	r3, [r3, #0]
   8151a:	4298      	cmp	r0, r3
   8151c:	d207      	bcs.n	8152e <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8151e:	4b0d      	ldr	r3, [pc, #52]	; (81554 <prvAddCurrentTaskToDelayedList+0x48>)
   81520:	6818      	ldr	r0, [r3, #0]
   81522:	4b0a      	ldr	r3, [pc, #40]	; (8154c <prvAddCurrentTaskToDelayedList+0x40>)
   81524:	6819      	ldr	r1, [r3, #0]
   81526:	3104      	adds	r1, #4
   81528:	4b0b      	ldr	r3, [pc, #44]	; (81558 <prvAddCurrentTaskToDelayedList+0x4c>)
   8152a:	4798      	blx	r3
   8152c:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   8152e:	4b0b      	ldr	r3, [pc, #44]	; (8155c <prvAddCurrentTaskToDelayedList+0x50>)
   81530:	6818      	ldr	r0, [r3, #0]
   81532:	4b06      	ldr	r3, [pc, #24]	; (8154c <prvAddCurrentTaskToDelayedList+0x40>)
   81534:	6819      	ldr	r1, [r3, #0]
   81536:	3104      	adds	r1, #4
   81538:	4b07      	ldr	r3, [pc, #28]	; (81558 <prvAddCurrentTaskToDelayedList+0x4c>)
   8153a:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   8153c:	4b08      	ldr	r3, [pc, #32]	; (81560 <prvAddCurrentTaskToDelayedList+0x54>)
   8153e:	681b      	ldr	r3, [r3, #0]
   81540:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   81542:	bf3c      	itt	cc
   81544:	4b06      	ldrcc	r3, [pc, #24]	; (81560 <prvAddCurrentTaskToDelayedList+0x54>)
   81546:	601c      	strcc	r4, [r3, #0]
   81548:	bd10      	pop	{r4, pc}
   8154a:	bf00      	nop
   8154c:	2007abec 	.word	0x2007abec
   81550:	2007ac08 	.word	0x2007ac08
   81554:	2007ac0c 	.word	0x2007ac0c
   81558:	00080cb5 	.word	0x00080cb5
   8155c:	2007ab4c 	.word	0x2007ab4c
   81560:	20070148 	.word	0x20070148

00081564 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   81564:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81568:	460e      	mov	r6, r1
   8156a:	4617      	mov	r7, r2
   8156c:	469a      	mov	sl, r3
   8156e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   81570:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   81574:	4681      	mov	r9, r0
   81576:	b918      	cbnz	r0, 81580 <xTaskGenericCreate+0x1c>
   81578:	4b62      	ldr	r3, [pc, #392]	; (81704 <xTaskGenericCreate+0x1a0>)
   8157a:	4798      	blx	r3
   8157c:	bf00      	nop
   8157e:	e7fd      	b.n	8157c <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   81580:	2d04      	cmp	r5, #4
   81582:	d903      	bls.n	8158c <xTaskGenericCreate+0x28>
   81584:	4b5f      	ldr	r3, [pc, #380]	; (81704 <xTaskGenericCreate+0x1a0>)
   81586:	4798      	blx	r3
   81588:	bf00      	nop
   8158a:	e7fd      	b.n	81588 <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   8158c:	204c      	movs	r0, #76	; 0x4c
   8158e:	4b5e      	ldr	r3, [pc, #376]	; (81708 <xTaskGenericCreate+0x1a4>)
   81590:	4798      	blx	r3

	if( pxNewTCB != NULL )
   81592:	4604      	mov	r4, r0
   81594:	2800      	cmp	r0, #0
   81596:	f000 80b1 	beq.w	816fc <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8159a:	f1b8 0f00 	cmp.w	r8, #0
   8159e:	f040 80a9 	bne.w	816f4 <xTaskGenericCreate+0x190>
   815a2:	00b8      	lsls	r0, r7, #2
   815a4:	4b58      	ldr	r3, [pc, #352]	; (81708 <xTaskGenericCreate+0x1a4>)
   815a6:	4798      	blx	r3
   815a8:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   815aa:	b918      	cbnz	r0, 815b4 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   815ac:	4620      	mov	r0, r4
   815ae:	4b57      	ldr	r3, [pc, #348]	; (8170c <xTaskGenericCreate+0x1a8>)
   815b0:	4798      	blx	r3
   815b2:	e0a3      	b.n	816fc <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   815b4:	21a5      	movs	r1, #165	; 0xa5
   815b6:	00ba      	lsls	r2, r7, #2
   815b8:	4b55      	ldr	r3, [pc, #340]	; (81710 <xTaskGenericCreate+0x1ac>)
   815ba:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   815bc:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   815c0:	3f01      	subs	r7, #1
   815c2:	6b23      	ldr	r3, [r4, #48]	; 0x30
   815c4:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   815c8:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   815cc:	f104 0034 	add.w	r0, r4, #52	; 0x34
   815d0:	4631      	mov	r1, r6
   815d2:	220a      	movs	r2, #10
   815d4:	4b4f      	ldr	r3, [pc, #316]	; (81714 <xTaskGenericCreate+0x1b0>)
   815d6:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   815d8:	2300      	movs	r3, #0
   815da:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   815de:	2d04      	cmp	r5, #4
   815e0:	bf34      	ite	cc
   815e2:	462e      	movcc	r6, r5
   815e4:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   815e6:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   815e8:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   815ea:	1d27      	adds	r7, r4, #4
   815ec:	4638      	mov	r0, r7
   815ee:	f8df 8170 	ldr.w	r8, [pc, #368]	; 81760 <xTaskGenericCreate+0x1fc>
   815f2:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   815f4:	f104 0018 	add.w	r0, r4, #24
   815f8:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   815fa:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   815fc:	f1c6 0605 	rsb	r6, r6, #5
   81600:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   81602:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   81604:	4658      	mov	r0, fp
   81606:	4649      	mov	r1, r9
   81608:	4652      	mov	r2, sl
   8160a:	4b43      	ldr	r3, [pc, #268]	; (81718 <xTaskGenericCreate+0x1b4>)
   8160c:	4798      	blx	r3
   8160e:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   81610:	f010 0f07 	tst.w	r0, #7
   81614:	d003      	beq.n	8161e <xTaskGenericCreate+0xba>
   81616:	4b3b      	ldr	r3, [pc, #236]	; (81704 <xTaskGenericCreate+0x1a0>)
   81618:	4798      	blx	r3
   8161a:	bf00      	nop
   8161c:	e7fd      	b.n	8161a <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   8161e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   81620:	b103      	cbz	r3, 81624 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   81622:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   81624:	4b3d      	ldr	r3, [pc, #244]	; (8171c <xTaskGenericCreate+0x1b8>)
   81626:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   81628:	4b3d      	ldr	r3, [pc, #244]	; (81720 <xTaskGenericCreate+0x1bc>)
   8162a:	681a      	ldr	r2, [r3, #0]
   8162c:	3201      	adds	r2, #1
   8162e:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   81630:	4b3c      	ldr	r3, [pc, #240]	; (81724 <xTaskGenericCreate+0x1c0>)
   81632:	681b      	ldr	r3, [r3, #0]
   81634:	bb2b      	cbnz	r3, 81682 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   81636:	4b3b      	ldr	r3, [pc, #236]	; (81724 <xTaskGenericCreate+0x1c0>)
   81638:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8163a:	4b39      	ldr	r3, [pc, #228]	; (81720 <xTaskGenericCreate+0x1bc>)
   8163c:	681b      	ldr	r3, [r3, #0]
   8163e:	2b01      	cmp	r3, #1
   81640:	d129      	bne.n	81696 <xTaskGenericCreate+0x132>
   81642:	4e39      	ldr	r6, [pc, #228]	; (81728 <xTaskGenericCreate+0x1c4>)
   81644:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   81648:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 8172c <xTaskGenericCreate+0x1c8>
   8164c:	4630      	mov	r0, r6
   8164e:	47c0      	blx	r8
   81650:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   81652:	454e      	cmp	r6, r9
   81654:	d1fa      	bne.n	8164c <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   81656:	f8df 910c 	ldr.w	r9, [pc, #268]	; 81764 <xTaskGenericCreate+0x200>
   8165a:	4648      	mov	r0, r9
   8165c:	4e33      	ldr	r6, [pc, #204]	; (8172c <xTaskGenericCreate+0x1c8>)
   8165e:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   81660:	f8df 8104 	ldr.w	r8, [pc, #260]	; 81768 <xTaskGenericCreate+0x204>
   81664:	4640      	mov	r0, r8
   81666:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   81668:	4831      	ldr	r0, [pc, #196]	; (81730 <xTaskGenericCreate+0x1cc>)
   8166a:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   8166c:	4831      	ldr	r0, [pc, #196]	; (81734 <xTaskGenericCreate+0x1d0>)
   8166e:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   81670:	4831      	ldr	r0, [pc, #196]	; (81738 <xTaskGenericCreate+0x1d4>)
   81672:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   81674:	4b31      	ldr	r3, [pc, #196]	; (8173c <xTaskGenericCreate+0x1d8>)
   81676:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8167a:	4b31      	ldr	r3, [pc, #196]	; (81740 <xTaskGenericCreate+0x1dc>)
   8167c:	f8c3 8000 	str.w	r8, [r3]
   81680:	e009      	b.n	81696 <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   81682:	4b30      	ldr	r3, [pc, #192]	; (81744 <xTaskGenericCreate+0x1e0>)
   81684:	681b      	ldr	r3, [r3, #0]
   81686:	b933      	cbnz	r3, 81696 <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   81688:	4b26      	ldr	r3, [pc, #152]	; (81724 <xTaskGenericCreate+0x1c0>)
   8168a:	681b      	ldr	r3, [r3, #0]
   8168c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8168e:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   81690:	bf24      	itt	cs
   81692:	4b24      	ldrcs	r3, [pc, #144]	; (81724 <xTaskGenericCreate+0x1c0>)
   81694:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   81696:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81698:	4a2b      	ldr	r2, [pc, #172]	; (81748 <xTaskGenericCreate+0x1e4>)
   8169a:	6812      	ldr	r2, [r2, #0]
   8169c:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   8169e:	bf84      	itt	hi
   816a0:	4a29      	ldrhi	r2, [pc, #164]	; (81748 <xTaskGenericCreate+0x1e4>)
   816a2:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   816a4:	4a29      	ldr	r2, [pc, #164]	; (8174c <xTaskGenericCreate+0x1e8>)
   816a6:	6811      	ldr	r1, [r2, #0]
   816a8:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   816aa:	3101      	adds	r1, #1
   816ac:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   816ae:	4a28      	ldr	r2, [pc, #160]	; (81750 <xTaskGenericCreate+0x1ec>)
   816b0:	6812      	ldr	r2, [r2, #0]
   816b2:	4293      	cmp	r3, r2
   816b4:	bf84      	itt	hi
   816b6:	4a26      	ldrhi	r2, [pc, #152]	; (81750 <xTaskGenericCreate+0x1ec>)
   816b8:	6013      	strhi	r3, [r2, #0]
   816ba:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   816be:	481a      	ldr	r0, [pc, #104]	; (81728 <xTaskGenericCreate+0x1c4>)
   816c0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   816c4:	4639      	mov	r1, r7
   816c6:	4b23      	ldr	r3, [pc, #140]	; (81754 <xTaskGenericCreate+0x1f0>)
   816c8:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   816ca:	4b23      	ldr	r3, [pc, #140]	; (81758 <xTaskGenericCreate+0x1f4>)
   816cc:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   816ce:	4b1d      	ldr	r3, [pc, #116]	; (81744 <xTaskGenericCreate+0x1e0>)
   816d0:	681b      	ldr	r3, [r3, #0]
   816d2:	b14b      	cbz	r3, 816e8 <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   816d4:	4b13      	ldr	r3, [pc, #76]	; (81724 <xTaskGenericCreate+0x1c0>)
   816d6:	681b      	ldr	r3, [r3, #0]
   816d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   816da:	429d      	cmp	r5, r3
   816dc:	d907      	bls.n	816ee <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   816de:	4b1f      	ldr	r3, [pc, #124]	; (8175c <xTaskGenericCreate+0x1f8>)
   816e0:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   816e2:	2001      	movs	r0, #1
   816e4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816e8:	2001      	movs	r0, #1
   816ea:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   816ee:	2001      	movs	r0, #1
   816f0:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   816f4:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   816f8:	4640      	mov	r0, r8
   816fa:	e75b      	b.n	815b4 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   816fc:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   81700:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81704:	00080d79 	.word	0x00080d79
   81708:	00080ed5 	.word	0x00080ed5
   8170c:	00080f99 	.word	0x00080f99
   81710:	00082671 	.word	0x00082671
   81714:	000828c1 	.word	0x000828c1
   81718:	00080d2d 	.word	0x00080d2d
   8171c:	00080d89 	.word	0x00080d89
   81720:	2007ac2c 	.word	0x2007ac2c
   81724:	2007abec 	.word	0x2007abec
   81728:	2007ab84 	.word	0x2007ab84
   8172c:	00080c79 	.word	0x00080c79
   81730:	2007abf0 	.word	0x2007abf0
   81734:	2007ab58 	.word	0x2007ab58
   81738:	2007ab38 	.word	0x2007ab38
   8173c:	2007ab4c 	.word	0x2007ab4c
   81740:	2007ac0c 	.word	0x2007ac0c
   81744:	2007ab50 	.word	0x2007ab50
   81748:	2007ac30 	.word	0x2007ac30
   8174c:	2007ac10 	.word	0x2007ac10
   81750:	2007ab80 	.word	0x2007ab80
   81754:	00080c99 	.word	0x00080c99
   81758:	00080da9 	.word	0x00080da9
   8175c:	00080d69 	.word	0x00080d69
   81760:	00080c91 	.word	0x00080c91
   81764:	2007ac14 	.word	0x2007ac14
   81768:	2007ab6c 	.word	0x2007ab6c

0008176c <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   8176c:	b510      	push	{r4, lr}
   8176e:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   81770:	2300      	movs	r3, #0
   81772:	9300      	str	r3, [sp, #0]
   81774:	9301      	str	r3, [sp, #4]
   81776:	9302      	str	r3, [sp, #8]
   81778:	9303      	str	r3, [sp, #12]
   8177a:	480e      	ldr	r0, [pc, #56]	; (817b4 <vTaskStartScheduler+0x48>)
   8177c:	490e      	ldr	r1, [pc, #56]	; (817b8 <vTaskStartScheduler+0x4c>)
   8177e:	2282      	movs	r2, #130	; 0x82
   81780:	4c0e      	ldr	r4, [pc, #56]	; (817bc <vTaskStartScheduler+0x50>)
   81782:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   81784:	2801      	cmp	r0, #1
   81786:	d10e      	bne.n	817a6 <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   81788:	4b0d      	ldr	r3, [pc, #52]	; (817c0 <vTaskStartScheduler+0x54>)
   8178a:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   8178c:	2801      	cmp	r0, #1
   8178e:	d10a      	bne.n	817a6 <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   81790:	4b0c      	ldr	r3, [pc, #48]	; (817c4 <vTaskStartScheduler+0x58>)
   81792:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   81794:	2201      	movs	r2, #1
   81796:	4b0c      	ldr	r3, [pc, #48]	; (817c8 <vTaskStartScheduler+0x5c>)
   81798:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8179a:	2200      	movs	r2, #0
   8179c:	4b0b      	ldr	r3, [pc, #44]	; (817cc <vTaskStartScheduler+0x60>)
   8179e:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   817a0:	4b0b      	ldr	r3, [pc, #44]	; (817d0 <vTaskStartScheduler+0x64>)
   817a2:	4798      	blx	r3
   817a4:	e004      	b.n	817b0 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   817a6:	b918      	cbnz	r0, 817b0 <vTaskStartScheduler+0x44>
   817a8:	4b06      	ldr	r3, [pc, #24]	; (817c4 <vTaskStartScheduler+0x58>)
   817aa:	4798      	blx	r3
   817ac:	bf00      	nop
   817ae:	e7fd      	b.n	817ac <vTaskStartScheduler+0x40>
}
   817b0:	b004      	add	sp, #16
   817b2:	bd10      	pop	{r4, pc}
   817b4:	00081abd 	.word	0x00081abd
   817b8:	00088a80 	.word	0x00088a80
   817bc:	00081565 	.word	0x00081565
   817c0:	00081f51 	.word	0x00081f51
   817c4:	00080d79 	.word	0x00080d79
   817c8:	2007ab50 	.word	0x2007ab50
   817cc:	2007ac08 	.word	0x2007ac08
   817d0:	00080e45 	.word	0x00080e45

000817d4 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   817d4:	4b02      	ldr	r3, [pc, #8]	; (817e0 <vTaskSuspendAll+0xc>)
   817d6:	681a      	ldr	r2, [r3, #0]
   817d8:	3201      	adds	r2, #1
   817da:	601a      	str	r2, [r3, #0]
   817dc:	4770      	bx	lr
   817de:	bf00      	nop
   817e0:	2007abe8 	.word	0x2007abe8

000817e4 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   817e4:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   817e6:	4b04      	ldr	r3, [pc, #16]	; (817f8 <xTaskGetTickCount+0x14>)
   817e8:	4798      	blx	r3
	{
		xTicks = xTickCount;
   817ea:	4b04      	ldr	r3, [pc, #16]	; (817fc <xTaskGetTickCount+0x18>)
   817ec:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   817ee:	4b04      	ldr	r3, [pc, #16]	; (81800 <xTaskGetTickCount+0x1c>)
   817f0:	4798      	blx	r3

	return xTicks;
}
   817f2:	4620      	mov	r0, r4
   817f4:	bd10      	pop	{r4, pc}
   817f6:	bf00      	nop
   817f8:	00080d89 	.word	0x00080d89
   817fc:	2007ac08 	.word	0x2007ac08
   81800:	00080da9 	.word	0x00080da9

00081804 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   81804:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81808:	4b3a      	ldr	r3, [pc, #232]	; (818f4 <vTaskIncrementTick+0xf0>)
   8180a:	681b      	ldr	r3, [r3, #0]
   8180c:	2b00      	cmp	r3, #0
   8180e:	d16b      	bne.n	818e8 <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   81810:	4b39      	ldr	r3, [pc, #228]	; (818f8 <vTaskIncrementTick+0xf4>)
   81812:	681a      	ldr	r2, [r3, #0]
   81814:	3201      	adds	r2, #1
   81816:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   81818:	681b      	ldr	r3, [r3, #0]
   8181a:	bb03      	cbnz	r3, 8185e <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   8181c:	4b37      	ldr	r3, [pc, #220]	; (818fc <vTaskIncrementTick+0xf8>)
   8181e:	681b      	ldr	r3, [r3, #0]
   81820:	681b      	ldr	r3, [r3, #0]
   81822:	b11b      	cbz	r3, 8182c <vTaskIncrementTick+0x28>
   81824:	4b36      	ldr	r3, [pc, #216]	; (81900 <vTaskIncrementTick+0xfc>)
   81826:	4798      	blx	r3
   81828:	bf00      	nop
   8182a:	e7fd      	b.n	81828 <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   8182c:	4b33      	ldr	r3, [pc, #204]	; (818fc <vTaskIncrementTick+0xf8>)
   8182e:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   81830:	4a34      	ldr	r2, [pc, #208]	; (81904 <vTaskIncrementTick+0x100>)
   81832:	6810      	ldr	r0, [r2, #0]
   81834:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   81836:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   81838:	4a33      	ldr	r2, [pc, #204]	; (81908 <vTaskIncrementTick+0x104>)
   8183a:	6811      	ldr	r1, [r2, #0]
   8183c:	3101      	adds	r1, #1
   8183e:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   81840:	681b      	ldr	r3, [r3, #0]
   81842:	681b      	ldr	r3, [r3, #0]
   81844:	b923      	cbnz	r3, 81850 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   81846:	f04f 32ff 	mov.w	r2, #4294967295
   8184a:	4b30      	ldr	r3, [pc, #192]	; (8190c <vTaskIncrementTick+0x108>)
   8184c:	601a      	str	r2, [r3, #0]
   8184e:	e006      	b.n	8185e <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   81850:	4b2a      	ldr	r3, [pc, #168]	; (818fc <vTaskIncrementTick+0xf8>)
   81852:	681b      	ldr	r3, [r3, #0]
   81854:	68db      	ldr	r3, [r3, #12]
   81856:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   81858:	685a      	ldr	r2, [r3, #4]
   8185a:	4b2c      	ldr	r3, [pc, #176]	; (8190c <vTaskIncrementTick+0x108>)
   8185c:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   8185e:	4b26      	ldr	r3, [pc, #152]	; (818f8 <vTaskIncrementTick+0xf4>)
   81860:	681a      	ldr	r2, [r3, #0]
   81862:	4b2a      	ldr	r3, [pc, #168]	; (8190c <vTaskIncrementTick+0x108>)
   81864:	681b      	ldr	r3, [r3, #0]
   81866:	429a      	cmp	r2, r3
   81868:	d342      	bcc.n	818f0 <vTaskIncrementTick+0xec>
   8186a:	4b24      	ldr	r3, [pc, #144]	; (818fc <vTaskIncrementTick+0xf8>)
   8186c:	681b      	ldr	r3, [r3, #0]
   8186e:	681b      	ldr	r3, [r3, #0]
   81870:	b14b      	cbz	r3, 81886 <vTaskIncrementTick+0x82>
   81872:	4b22      	ldr	r3, [pc, #136]	; (818fc <vTaskIncrementTick+0xf8>)
   81874:	681b      	ldr	r3, [r3, #0]
   81876:	68db      	ldr	r3, [r3, #12]
   81878:	68dc      	ldr	r4, [r3, #12]
   8187a:	6863      	ldr	r3, [r4, #4]
   8187c:	4a1e      	ldr	r2, [pc, #120]	; (818f8 <vTaskIncrementTick+0xf4>)
   8187e:	6812      	ldr	r2, [r2, #0]
   81880:	4293      	cmp	r3, r2
   81882:	d913      	bls.n	818ac <vTaskIncrementTick+0xa8>
   81884:	e00e      	b.n	818a4 <vTaskIncrementTick+0xa0>
   81886:	f04f 32ff 	mov.w	r2, #4294967295
   8188a:	4b20      	ldr	r3, [pc, #128]	; (8190c <vTaskIncrementTick+0x108>)
   8188c:	601a      	str	r2, [r3, #0]
   8188e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81892:	4b1a      	ldr	r3, [pc, #104]	; (818fc <vTaskIncrementTick+0xf8>)
   81894:	681b      	ldr	r3, [r3, #0]
   81896:	68db      	ldr	r3, [r3, #12]
   81898:	68dc      	ldr	r4, [r3, #12]
   8189a:	6863      	ldr	r3, [r4, #4]
   8189c:	4a16      	ldr	r2, [pc, #88]	; (818f8 <vTaskIncrementTick+0xf4>)
   8189e:	6812      	ldr	r2, [r2, #0]
   818a0:	4293      	cmp	r3, r2
   818a2:	d907      	bls.n	818b4 <vTaskIncrementTick+0xb0>
   818a4:	4a19      	ldr	r2, [pc, #100]	; (8190c <vTaskIncrementTick+0x108>)
   818a6:	6013      	str	r3, [r2, #0]
   818a8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818ac:	4e18      	ldr	r6, [pc, #96]	; (81910 <vTaskIncrementTick+0x10c>)
   818ae:	4f19      	ldr	r7, [pc, #100]	; (81914 <vTaskIncrementTick+0x110>)
   818b0:	f8df 806c 	ldr.w	r8, [pc, #108]	; 81920 <vTaskIncrementTick+0x11c>
   818b4:	1d25      	adds	r5, r4, #4
   818b6:	4628      	mov	r0, r5
   818b8:	47b0      	blx	r6
   818ba:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   818bc:	b113      	cbz	r3, 818c4 <vTaskIncrementTick+0xc0>
   818be:	f104 0018 	add.w	r0, r4, #24
   818c2:	47b0      	blx	r6
   818c4:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   818c6:	683a      	ldr	r2, [r7, #0]
   818c8:	4293      	cmp	r3, r2
   818ca:	bf88      	it	hi
   818cc:	603b      	strhi	r3, [r7, #0]
   818ce:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   818d2:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   818d6:	4629      	mov	r1, r5
   818d8:	4b0f      	ldr	r3, [pc, #60]	; (81918 <vTaskIncrementTick+0x114>)
   818da:	4798      	blx	r3
   818dc:	4b07      	ldr	r3, [pc, #28]	; (818fc <vTaskIncrementTick+0xf8>)
   818de:	681b      	ldr	r3, [r3, #0]
   818e0:	681b      	ldr	r3, [r3, #0]
   818e2:	2b00      	cmp	r3, #0
   818e4:	d1d5      	bne.n	81892 <vTaskIncrementTick+0x8e>
   818e6:	e7ce      	b.n	81886 <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   818e8:	4b0c      	ldr	r3, [pc, #48]	; (8191c <vTaskIncrementTick+0x118>)
   818ea:	681a      	ldr	r2, [r3, #0]
   818ec:	3201      	adds	r2, #1
   818ee:	601a      	str	r2, [r3, #0]
   818f0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   818f4:	2007abe8 	.word	0x2007abe8
   818f8:	2007ac08 	.word	0x2007ac08
   818fc:	2007ab4c 	.word	0x2007ab4c
   81900:	00080d79 	.word	0x00080d79
   81904:	2007ac0c 	.word	0x2007ac0c
   81908:	2007ac04 	.word	0x2007ac04
   8190c:	20070148 	.word	0x20070148
   81910:	00080cf1 	.word	0x00080cf1
   81914:	2007ab80 	.word	0x2007ab80
   81918:	00080c99 	.word	0x00080c99
   8191c:	2007ab34 	.word	0x2007ab34
   81920:	2007ab84 	.word	0x2007ab84

00081924 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   81924:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   81928:	4b31      	ldr	r3, [pc, #196]	; (819f0 <xTaskResumeAll+0xcc>)
   8192a:	681b      	ldr	r3, [r3, #0]
   8192c:	b91b      	cbnz	r3, 81936 <xTaskResumeAll+0x12>
   8192e:	4b31      	ldr	r3, [pc, #196]	; (819f4 <xTaskResumeAll+0xd0>)
   81930:	4798      	blx	r3
   81932:	bf00      	nop
   81934:	e7fd      	b.n	81932 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   81936:	4b30      	ldr	r3, [pc, #192]	; (819f8 <xTaskResumeAll+0xd4>)
   81938:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8193a:	4b2d      	ldr	r3, [pc, #180]	; (819f0 <xTaskResumeAll+0xcc>)
   8193c:	681a      	ldr	r2, [r3, #0]
   8193e:	3a01      	subs	r2, #1
   81940:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81942:	681b      	ldr	r3, [r3, #0]
   81944:	2b00      	cmp	r3, #0
   81946:	d148      	bne.n	819da <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   81948:	4b2c      	ldr	r3, [pc, #176]	; (819fc <xTaskResumeAll+0xd8>)
   8194a:	681b      	ldr	r3, [r3, #0]
   8194c:	2b00      	cmp	r3, #0
   8194e:	d046      	beq.n	819de <xTaskResumeAll+0xba>
   81950:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81952:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 81a28 <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   81956:	4f2a      	ldr	r7, [pc, #168]	; (81a00 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   81958:	4e2a      	ldr	r6, [pc, #168]	; (81a04 <xTaskResumeAll+0xe0>)
   8195a:	e01d      	b.n	81998 <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   8195c:	f8d8 300c 	ldr.w	r3, [r8, #12]
   81960:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   81962:	f104 0018 	add.w	r0, r4, #24
   81966:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81968:	f104 0904 	add.w	r9, r4, #4
   8196c:	4648      	mov	r0, r9
   8196e:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   81970:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81972:	6832      	ldr	r2, [r6, #0]
   81974:	4293      	cmp	r3, r2
   81976:	bf88      	it	hi
   81978:	6033      	strhi	r3, [r6, #0]
   8197a:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8197e:	4822      	ldr	r0, [pc, #136]	; (81a08 <xTaskResumeAll+0xe4>)
   81980:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81984:	4649      	mov	r1, r9
   81986:	4b21      	ldr	r3, [pc, #132]	; (81a0c <xTaskResumeAll+0xe8>)
   81988:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8198a:	4b21      	ldr	r3, [pc, #132]	; (81a10 <xTaskResumeAll+0xec>)
   8198c:	681b      	ldr	r3, [r3, #0]
   8198e:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   81990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   81992:	429a      	cmp	r2, r3
   81994:	bf28      	it	cs
   81996:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   81998:	f8d8 3000 	ldr.w	r3, [r8]
   8199c:	2b00      	cmp	r3, #0
   8199e:	d1dd      	bne.n	8195c <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   819a0:	4b1c      	ldr	r3, [pc, #112]	; (81a14 <xTaskResumeAll+0xf0>)
   819a2:	681b      	ldr	r3, [r3, #0]
   819a4:	b163      	cbz	r3, 819c0 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   819a6:	4b1b      	ldr	r3, [pc, #108]	; (81a14 <xTaskResumeAll+0xf0>)
   819a8:	681b      	ldr	r3, [r3, #0]
   819aa:	b17b      	cbz	r3, 819cc <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   819ac:	4d1a      	ldr	r5, [pc, #104]	; (81a18 <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   819ae:	4c19      	ldr	r4, [pc, #100]	; (81a14 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   819b0:	47a8      	blx	r5
						--uxMissedTicks;
   819b2:	6823      	ldr	r3, [r4, #0]
   819b4:	3b01      	subs	r3, #1
   819b6:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   819b8:	6823      	ldr	r3, [r4, #0]
   819ba:	2b00      	cmp	r3, #0
   819bc:	d1f8      	bne.n	819b0 <xTaskResumeAll+0x8c>
   819be:	e005      	b.n	819cc <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   819c0:	2d01      	cmp	r5, #1
   819c2:	d003      	beq.n	819cc <xTaskResumeAll+0xa8>
   819c4:	4b15      	ldr	r3, [pc, #84]	; (81a1c <xTaskResumeAll+0xf8>)
   819c6:	681b      	ldr	r3, [r3, #0]
   819c8:	2b01      	cmp	r3, #1
   819ca:	d10a      	bne.n	819e2 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   819cc:	2200      	movs	r2, #0
   819ce:	4b13      	ldr	r3, [pc, #76]	; (81a1c <xTaskResumeAll+0xf8>)
   819d0:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   819d2:	4b13      	ldr	r3, [pc, #76]	; (81a20 <xTaskResumeAll+0xfc>)
   819d4:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   819d6:	2401      	movs	r4, #1
   819d8:	e004      	b.n	819e4 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   819da:	2400      	movs	r4, #0
   819dc:	e002      	b.n	819e4 <xTaskResumeAll+0xc0>
   819de:	2400      	movs	r4, #0
   819e0:	e000      	b.n	819e4 <xTaskResumeAll+0xc0>
   819e2:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   819e4:	4b0f      	ldr	r3, [pc, #60]	; (81a24 <xTaskResumeAll+0x100>)
   819e6:	4798      	blx	r3

	return xAlreadyYielded;
}
   819e8:	4620      	mov	r0, r4
   819ea:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   819ee:	bf00      	nop
   819f0:	2007abe8 	.word	0x2007abe8
   819f4:	00080d79 	.word	0x00080d79
   819f8:	00080d89 	.word	0x00080d89
   819fc:	2007ac2c 	.word	0x2007ac2c
   81a00:	00080cf1 	.word	0x00080cf1
   81a04:	2007ab80 	.word	0x2007ab80
   81a08:	2007ab84 	.word	0x2007ab84
   81a0c:	00080c99 	.word	0x00080c99
   81a10:	2007abec 	.word	0x2007abec
   81a14:	2007ab34 	.word	0x2007ab34
   81a18:	00081805 	.word	0x00081805
   81a1c:	2007ac28 	.word	0x2007ac28
   81a20:	00080d69 	.word	0x00080d69
   81a24:	00080da9 	.word	0x00080da9
   81a28:	2007abf0 	.word	0x2007abf0

00081a2c <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   81a2c:	b538      	push	{r3, r4, r5, lr}
   81a2e:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   81a30:	4605      	mov	r5, r0
   81a32:	b918      	cbnz	r0, 81a3c <vTaskDelayUntil+0x10>
   81a34:	4b19      	ldr	r3, [pc, #100]	; (81a9c <vTaskDelayUntil+0x70>)
   81a36:	4798      	blx	r3
   81a38:	bf00      	nop
   81a3a:	e7fd      	b.n	81a38 <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   81a3c:	b919      	cbnz	r1, 81a46 <vTaskDelayUntil+0x1a>
   81a3e:	4b17      	ldr	r3, [pc, #92]	; (81a9c <vTaskDelayUntil+0x70>)
   81a40:	4798      	blx	r3
   81a42:	bf00      	nop
   81a44:	e7fd      	b.n	81a42 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   81a46:	4b16      	ldr	r3, [pc, #88]	; (81aa0 <vTaskDelayUntil+0x74>)
   81a48:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   81a4a:	682b      	ldr	r3, [r5, #0]
   81a4c:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   81a4e:	4a15      	ldr	r2, [pc, #84]	; (81aa4 <vTaskDelayUntil+0x78>)
   81a50:	6812      	ldr	r2, [r2, #0]
   81a52:	4293      	cmp	r3, r2
   81a54:	d907      	bls.n	81a66 <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   81a56:	42a3      	cmp	r3, r4
   81a58:	d91c      	bls.n	81a94 <vTaskDelayUntil+0x68>
   81a5a:	4b12      	ldr	r3, [pc, #72]	; (81aa4 <vTaskDelayUntil+0x78>)
   81a5c:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81a5e:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   81a60:	429c      	cmp	r4, r3
   81a62:	d90f      	bls.n	81a84 <vTaskDelayUntil+0x58>
   81a64:	e006      	b.n	81a74 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   81a66:	42a3      	cmp	r3, r4
   81a68:	d812      	bhi.n	81a90 <vTaskDelayUntil+0x64>
   81a6a:	4b0e      	ldr	r3, [pc, #56]	; (81aa4 <vTaskDelayUntil+0x78>)
   81a6c:	681b      	ldr	r3, [r3, #0]
   81a6e:	429c      	cmp	r4, r3
   81a70:	d80e      	bhi.n	81a90 <vTaskDelayUntil+0x64>
   81a72:	e00f      	b.n	81a94 <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81a74:	4b0c      	ldr	r3, [pc, #48]	; (81aa8 <vTaskDelayUntil+0x7c>)
   81a76:	6818      	ldr	r0, [r3, #0]
   81a78:	3004      	adds	r0, #4
   81a7a:	4b0c      	ldr	r3, [pc, #48]	; (81aac <vTaskDelayUntil+0x80>)
   81a7c:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   81a7e:	4620      	mov	r0, r4
   81a80:	4b0b      	ldr	r3, [pc, #44]	; (81ab0 <vTaskDelayUntil+0x84>)
   81a82:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   81a84:	4b0b      	ldr	r3, [pc, #44]	; (81ab4 <vTaskDelayUntil+0x88>)
   81a86:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   81a88:	b930      	cbnz	r0, 81a98 <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   81a8a:	4b0b      	ldr	r3, [pc, #44]	; (81ab8 <vTaskDelayUntil+0x8c>)
   81a8c:	4798      	blx	r3
   81a8e:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   81a90:	602c      	str	r4, [r5, #0]
   81a92:	e7ef      	b.n	81a74 <vTaskDelayUntil+0x48>
   81a94:	602c      	str	r4, [r5, #0]
   81a96:	e7f5      	b.n	81a84 <vTaskDelayUntil+0x58>
   81a98:	bd38      	pop	{r3, r4, r5, pc}
   81a9a:	bf00      	nop
   81a9c:	00080d79 	.word	0x00080d79
   81aa0:	000817d5 	.word	0x000817d5
   81aa4:	2007ac08 	.word	0x2007ac08
   81aa8:	2007abec 	.word	0x2007abec
   81aac:	00080cf1 	.word	0x00080cf1
   81ab0:	0008150d 	.word	0x0008150d
   81ab4:	00081925 	.word	0x00081925
   81ab8:	00080d69 	.word	0x00080d69

00081abc <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   81abc:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81abe:	4d15      	ldr	r5, [pc, #84]	; (81b14 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81ac0:	4e15      	ldr	r6, [pc, #84]	; (81b18 <prvIdleTask+0x5c>)
			{
				taskYIELD();
   81ac2:	f8df 8078 	ldr.w	r8, [pc, #120]	; 81b3c <prvIdleTask+0x80>
   81ac6:	e01c      	b.n	81b02 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   81ac8:	4b14      	ldr	r3, [pc, #80]	; (81b1c <prvIdleTask+0x60>)
   81aca:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   81acc:	4b14      	ldr	r3, [pc, #80]	; (81b20 <prvIdleTask+0x64>)
   81ace:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   81ad0:	4b14      	ldr	r3, [pc, #80]	; (81b24 <prvIdleTask+0x68>)
   81ad2:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   81ad4:	b1ac      	cbz	r4, 81b02 <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   81ad6:	4b14      	ldr	r3, [pc, #80]	; (81b28 <prvIdleTask+0x6c>)
   81ad8:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   81ada:	4b11      	ldr	r3, [pc, #68]	; (81b20 <prvIdleTask+0x64>)
   81adc:	68db      	ldr	r3, [r3, #12]
   81ade:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   81ae0:	1d20      	adds	r0, r4, #4
   81ae2:	4b12      	ldr	r3, [pc, #72]	; (81b2c <prvIdleTask+0x70>)
   81ae4:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   81ae6:	4b12      	ldr	r3, [pc, #72]	; (81b30 <prvIdleTask+0x74>)
   81ae8:	681a      	ldr	r2, [r3, #0]
   81aea:	3a01      	subs	r2, #1
   81aec:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   81aee:	682b      	ldr	r3, [r5, #0]
   81af0:	3b01      	subs	r3, #1
   81af2:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   81af4:	4b0f      	ldr	r3, [pc, #60]	; (81b34 <prvIdleTask+0x78>)
   81af6:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   81af8:	6b20      	ldr	r0, [r4, #48]	; 0x30
   81afa:	4f0f      	ldr	r7, [pc, #60]	; (81b38 <prvIdleTask+0x7c>)
   81afc:	47b8      	blx	r7
		vPortFree( pxTCB );
   81afe:	4620      	mov	r0, r4
   81b00:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   81b02:	682b      	ldr	r3, [r5, #0]
   81b04:	2b00      	cmp	r3, #0
   81b06:	d1df      	bne.n	81ac8 <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   81b08:	6833      	ldr	r3, [r6, #0]
   81b0a:	2b01      	cmp	r3, #1
   81b0c:	d9f9      	bls.n	81b02 <prvIdleTask+0x46>
			{
				taskYIELD();
   81b0e:	47c0      	blx	r8
   81b10:	e7f7      	b.n	81b02 <prvIdleTask+0x46>
   81b12:	bf00      	nop
   81b14:	2007ab54 	.word	0x2007ab54
   81b18:	2007ab84 	.word	0x2007ab84
   81b1c:	000817d5 	.word	0x000817d5
   81b20:	2007ab58 	.word	0x2007ab58
   81b24:	00081925 	.word	0x00081925
   81b28:	00080d89 	.word	0x00080d89
   81b2c:	00080cf1 	.word	0x00080cf1
   81b30:	2007ac2c 	.word	0x2007ac2c
   81b34:	00080da9 	.word	0x00080da9
   81b38:	00080f99 	.word	0x00080f99
   81b3c:	00080d69 	.word	0x00080d69

00081b40 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   81b40:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   81b42:	4b1d      	ldr	r3, [pc, #116]	; (81bb8 <vTaskSwitchContext+0x78>)
   81b44:	681b      	ldr	r3, [r3, #0]
   81b46:	b95b      	cbnz	r3, 81b60 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81b48:	4b1c      	ldr	r3, [pc, #112]	; (81bbc <vTaskSwitchContext+0x7c>)
   81b4a:	681b      	ldr	r3, [r3, #0]
   81b4c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b50:	009b      	lsls	r3, r3, #2
   81b52:	4a1b      	ldr	r2, [pc, #108]	; (81bc0 <vTaskSwitchContext+0x80>)
   81b54:	58d3      	ldr	r3, [r2, r3]
   81b56:	b9cb      	cbnz	r3, 81b8c <vTaskSwitchContext+0x4c>
   81b58:	4b18      	ldr	r3, [pc, #96]	; (81bbc <vTaskSwitchContext+0x7c>)
   81b5a:	681b      	ldr	r3, [r3, #0]
   81b5c:	b953      	cbnz	r3, 81b74 <vTaskSwitchContext+0x34>
   81b5e:	e005      	b.n	81b6c <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   81b60:	2201      	movs	r2, #1
   81b62:	4b18      	ldr	r3, [pc, #96]	; (81bc4 <vTaskSwitchContext+0x84>)
   81b64:	601a      	str	r2, [r3, #0]
   81b66:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   81b68:	681a      	ldr	r2, [r3, #0]
   81b6a:	b92a      	cbnz	r2, 81b78 <vTaskSwitchContext+0x38>
   81b6c:	4b16      	ldr	r3, [pc, #88]	; (81bc8 <vTaskSwitchContext+0x88>)
   81b6e:	4798      	blx	r3
   81b70:	bf00      	nop
   81b72:	e7fd      	b.n	81b70 <vTaskSwitchContext+0x30>
   81b74:	4b11      	ldr	r3, [pc, #68]	; (81bbc <vTaskSwitchContext+0x7c>)
   81b76:	4912      	ldr	r1, [pc, #72]	; (81bc0 <vTaskSwitchContext+0x80>)
   81b78:	681a      	ldr	r2, [r3, #0]
   81b7a:	3a01      	subs	r2, #1
   81b7c:	601a      	str	r2, [r3, #0]
   81b7e:	681a      	ldr	r2, [r3, #0]
   81b80:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   81b84:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   81b88:	2a00      	cmp	r2, #0
   81b8a:	d0ed      	beq.n	81b68 <vTaskSwitchContext+0x28>
   81b8c:	4b0b      	ldr	r3, [pc, #44]	; (81bbc <vTaskSwitchContext+0x7c>)
   81b8e:	681b      	ldr	r3, [r3, #0]
   81b90:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81b94:	4a0a      	ldr	r2, [pc, #40]	; (81bc0 <vTaskSwitchContext+0x80>)
   81b96:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81b9a:	685a      	ldr	r2, [r3, #4]
   81b9c:	6852      	ldr	r2, [r2, #4]
   81b9e:	605a      	str	r2, [r3, #4]
   81ba0:	f103 0108 	add.w	r1, r3, #8
   81ba4:	428a      	cmp	r2, r1
   81ba6:	bf04      	itt	eq
   81ba8:	6852      	ldreq	r2, [r2, #4]
   81baa:	605a      	streq	r2, [r3, #4]
   81bac:	685b      	ldr	r3, [r3, #4]
   81bae:	68da      	ldr	r2, [r3, #12]
   81bb0:	4b06      	ldr	r3, [pc, #24]	; (81bcc <vTaskSwitchContext+0x8c>)
   81bb2:	601a      	str	r2, [r3, #0]
   81bb4:	bd08      	pop	{r3, pc}
   81bb6:	bf00      	nop
   81bb8:	2007abe8 	.word	0x2007abe8
   81bbc:	2007ab80 	.word	0x2007ab80
   81bc0:	2007ab84 	.word	0x2007ab84
   81bc4:	2007ac28 	.word	0x2007ac28
   81bc8:	00080d79 	.word	0x00080d79
   81bcc:	2007abec 	.word	0x2007abec

00081bd0 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   81bd0:	b538      	push	{r3, r4, r5, lr}
   81bd2:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   81bd4:	b918      	cbnz	r0, 81bde <vTaskPlaceOnEventList+0xe>
   81bd6:	4b0e      	ldr	r3, [pc, #56]	; (81c10 <vTaskPlaceOnEventList+0x40>)
   81bd8:	4798      	blx	r3
   81bda:	bf00      	nop
   81bdc:	e7fd      	b.n	81bda <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81bde:	4d0d      	ldr	r5, [pc, #52]	; (81c14 <vTaskPlaceOnEventList+0x44>)
   81be0:	6829      	ldr	r1, [r5, #0]
   81be2:	3118      	adds	r1, #24
   81be4:	4b0c      	ldr	r3, [pc, #48]	; (81c18 <vTaskPlaceOnEventList+0x48>)
   81be6:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81be8:	6828      	ldr	r0, [r5, #0]
   81bea:	3004      	adds	r0, #4
   81bec:	4b0b      	ldr	r3, [pc, #44]	; (81c1c <vTaskPlaceOnEventList+0x4c>)
   81bee:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   81bf0:	f1b4 3fff 	cmp.w	r4, #4294967295
   81bf4:	d105      	bne.n	81c02 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   81bf6:	6829      	ldr	r1, [r5, #0]
   81bf8:	4809      	ldr	r0, [pc, #36]	; (81c20 <vTaskPlaceOnEventList+0x50>)
   81bfa:	3104      	adds	r1, #4
   81bfc:	4b09      	ldr	r3, [pc, #36]	; (81c24 <vTaskPlaceOnEventList+0x54>)
   81bfe:	4798      	blx	r3
   81c00:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   81c02:	4b09      	ldr	r3, [pc, #36]	; (81c28 <vTaskPlaceOnEventList+0x58>)
   81c04:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   81c06:	4420      	add	r0, r4
   81c08:	4b08      	ldr	r3, [pc, #32]	; (81c2c <vTaskPlaceOnEventList+0x5c>)
   81c0a:	4798      	blx	r3
   81c0c:	bd38      	pop	{r3, r4, r5, pc}
   81c0e:	bf00      	nop
   81c10:	00080d79 	.word	0x00080d79
   81c14:	2007abec 	.word	0x2007abec
   81c18:	00080cb5 	.word	0x00080cb5
   81c1c:	00080cf1 	.word	0x00080cf1
   81c20:	2007ab38 	.word	0x2007ab38
   81c24:	00080c99 	.word	0x00080c99
   81c28:	2007ac08 	.word	0x2007ac08
   81c2c:	0008150d 	.word	0x0008150d

00081c30 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   81c30:	b538      	push	{r3, r4, r5, lr}
   81c32:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   81c34:	b918      	cbnz	r0, 81c3e <vTaskPlaceOnEventListRestricted+0xe>
   81c36:	4b09      	ldr	r3, [pc, #36]	; (81c5c <vTaskPlaceOnEventListRestricted+0x2c>)
   81c38:	4798      	blx	r3
   81c3a:	bf00      	nop
   81c3c:	e7fd      	b.n	81c3a <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   81c3e:	4c08      	ldr	r4, [pc, #32]	; (81c60 <vTaskPlaceOnEventListRestricted+0x30>)
   81c40:	6821      	ldr	r1, [r4, #0]
   81c42:	3118      	adds	r1, #24
   81c44:	4b07      	ldr	r3, [pc, #28]	; (81c64 <vTaskPlaceOnEventListRestricted+0x34>)
   81c46:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   81c48:	6820      	ldr	r0, [r4, #0]
   81c4a:	3004      	adds	r0, #4
   81c4c:	4b06      	ldr	r3, [pc, #24]	; (81c68 <vTaskPlaceOnEventListRestricted+0x38>)
   81c4e:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   81c50:	4b06      	ldr	r3, [pc, #24]	; (81c6c <vTaskPlaceOnEventListRestricted+0x3c>)
   81c52:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   81c54:	4428      	add	r0, r5
   81c56:	4b06      	ldr	r3, [pc, #24]	; (81c70 <vTaskPlaceOnEventListRestricted+0x40>)
   81c58:	4798      	blx	r3
   81c5a:	bd38      	pop	{r3, r4, r5, pc}
   81c5c:	00080d79 	.word	0x00080d79
   81c60:	2007abec 	.word	0x2007abec
   81c64:	00080c99 	.word	0x00080c99
   81c68:	00080cf1 	.word	0x00080cf1
   81c6c:	2007ac08 	.word	0x2007ac08
   81c70:	0008150d 	.word	0x0008150d

00081c74 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   81c74:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   81c76:	68c3      	ldr	r3, [r0, #12]
   81c78:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   81c7a:	b91c      	cbnz	r4, 81c84 <xTaskRemoveFromEventList+0x10>
   81c7c:	4b16      	ldr	r3, [pc, #88]	; (81cd8 <xTaskRemoveFromEventList+0x64>)
   81c7e:	4798      	blx	r3
   81c80:	bf00      	nop
   81c82:	e7fd      	b.n	81c80 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   81c84:	f104 0518 	add.w	r5, r4, #24
   81c88:	4628      	mov	r0, r5
   81c8a:	4b14      	ldr	r3, [pc, #80]	; (81cdc <xTaskRemoveFromEventList+0x68>)
   81c8c:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81c8e:	4b14      	ldr	r3, [pc, #80]	; (81ce0 <xTaskRemoveFromEventList+0x6c>)
   81c90:	681b      	ldr	r3, [r3, #0]
   81c92:	b99b      	cbnz	r3, 81cbc <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   81c94:	1d25      	adds	r5, r4, #4
   81c96:	4628      	mov	r0, r5
   81c98:	4b10      	ldr	r3, [pc, #64]	; (81cdc <xTaskRemoveFromEventList+0x68>)
   81c9a:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   81c9c:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   81c9e:	4a11      	ldr	r2, [pc, #68]	; (81ce4 <xTaskRemoveFromEventList+0x70>)
   81ca0:	6812      	ldr	r2, [r2, #0]
   81ca2:	4293      	cmp	r3, r2
   81ca4:	bf84      	itt	hi
   81ca6:	4a0f      	ldrhi	r2, [pc, #60]	; (81ce4 <xTaskRemoveFromEventList+0x70>)
   81ca8:	6013      	strhi	r3, [r2, #0]
   81caa:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81cae:	480e      	ldr	r0, [pc, #56]	; (81ce8 <xTaskRemoveFromEventList+0x74>)
   81cb0:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81cb4:	4629      	mov	r1, r5
   81cb6:	4b0d      	ldr	r3, [pc, #52]	; (81cec <xTaskRemoveFromEventList+0x78>)
   81cb8:	4798      	blx	r3
   81cba:	e003      	b.n	81cc4 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   81cbc:	480c      	ldr	r0, [pc, #48]	; (81cf0 <xTaskRemoveFromEventList+0x7c>)
   81cbe:	4629      	mov	r1, r5
   81cc0:	4b0a      	ldr	r3, [pc, #40]	; (81cec <xTaskRemoveFromEventList+0x78>)
   81cc2:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   81cc4:	4b0b      	ldr	r3, [pc, #44]	; (81cf4 <xTaskRemoveFromEventList+0x80>)
   81cc6:	681b      	ldr	r3, [r3, #0]
   81cc8:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   81cca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   81ccc:	4298      	cmp	r0, r3
   81cce:	bf34      	ite	cc
   81cd0:	2000      	movcc	r0, #0
   81cd2:	2001      	movcs	r0, #1
   81cd4:	bd38      	pop	{r3, r4, r5, pc}
   81cd6:	bf00      	nop
   81cd8:	00080d79 	.word	0x00080d79
   81cdc:	00080cf1 	.word	0x00080cf1
   81ce0:	2007abe8 	.word	0x2007abe8
   81ce4:	2007ab80 	.word	0x2007ab80
   81ce8:	2007ab84 	.word	0x2007ab84
   81cec:	00080c99 	.word	0x00080c99
   81cf0:	2007abf0 	.word	0x2007abf0
   81cf4:	2007abec 	.word	0x2007abec

00081cf8 <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   81cf8:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   81cfa:	b918      	cbnz	r0, 81d04 <vTaskSetTimeOutState+0xc>
   81cfc:	4b05      	ldr	r3, [pc, #20]	; (81d14 <vTaskSetTimeOutState+0x1c>)
   81cfe:	4798      	blx	r3
   81d00:	bf00      	nop
   81d02:	e7fd      	b.n	81d00 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   81d04:	4a04      	ldr	r2, [pc, #16]	; (81d18 <vTaskSetTimeOutState+0x20>)
   81d06:	6812      	ldr	r2, [r2, #0]
   81d08:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   81d0a:	4a04      	ldr	r2, [pc, #16]	; (81d1c <vTaskSetTimeOutState+0x24>)
   81d0c:	6812      	ldr	r2, [r2, #0]
   81d0e:	6042      	str	r2, [r0, #4]
   81d10:	bd08      	pop	{r3, pc}
   81d12:	bf00      	nop
   81d14:	00080d79 	.word	0x00080d79
   81d18:	2007ac04 	.word	0x2007ac04
   81d1c:	2007ac08 	.word	0x2007ac08

00081d20 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   81d20:	b538      	push	{r3, r4, r5, lr}
   81d22:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   81d24:	4604      	mov	r4, r0
   81d26:	b918      	cbnz	r0, 81d30 <xTaskCheckForTimeOut+0x10>
   81d28:	4b18      	ldr	r3, [pc, #96]	; (81d8c <xTaskCheckForTimeOut+0x6c>)
   81d2a:	4798      	blx	r3
   81d2c:	bf00      	nop
   81d2e:	e7fd      	b.n	81d2c <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   81d30:	b919      	cbnz	r1, 81d3a <xTaskCheckForTimeOut+0x1a>
   81d32:	4b16      	ldr	r3, [pc, #88]	; (81d8c <xTaskCheckForTimeOut+0x6c>)
   81d34:	4798      	blx	r3
   81d36:	bf00      	nop
   81d38:	e7fd      	b.n	81d36 <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   81d3a:	4b15      	ldr	r3, [pc, #84]	; (81d90 <xTaskCheckForTimeOut+0x70>)
   81d3c:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   81d3e:	682b      	ldr	r3, [r5, #0]
   81d40:	f1b3 3fff 	cmp.w	r3, #4294967295
   81d44:	d019      	beq.n	81d7a <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   81d46:	4a13      	ldr	r2, [pc, #76]	; (81d94 <xTaskCheckForTimeOut+0x74>)
   81d48:	6811      	ldr	r1, [r2, #0]
   81d4a:	6822      	ldr	r2, [r4, #0]
   81d4c:	428a      	cmp	r2, r1
   81d4e:	d004      	beq.n	81d5a <xTaskCheckForTimeOut+0x3a>
   81d50:	4a11      	ldr	r2, [pc, #68]	; (81d98 <xTaskCheckForTimeOut+0x78>)
   81d52:	6811      	ldr	r1, [r2, #0]
   81d54:	6862      	ldr	r2, [r4, #4]
   81d56:	428a      	cmp	r2, r1
   81d58:	d911      	bls.n	81d7e <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   81d5a:	4a0f      	ldr	r2, [pc, #60]	; (81d98 <xTaskCheckForTimeOut+0x78>)
   81d5c:	6811      	ldr	r1, [r2, #0]
   81d5e:	6862      	ldr	r2, [r4, #4]
   81d60:	1a89      	subs	r1, r1, r2
   81d62:	428b      	cmp	r3, r1
   81d64:	d90d      	bls.n	81d82 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   81d66:	490c      	ldr	r1, [pc, #48]	; (81d98 <xTaskCheckForTimeOut+0x78>)
   81d68:	6809      	ldr	r1, [r1, #0]
   81d6a:	1a52      	subs	r2, r2, r1
   81d6c:	4413      	add	r3, r2
   81d6e:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   81d70:	4620      	mov	r0, r4
   81d72:	4b0a      	ldr	r3, [pc, #40]	; (81d9c <xTaskCheckForTimeOut+0x7c>)
   81d74:	4798      	blx	r3
			xReturn = pdFALSE;
   81d76:	2400      	movs	r4, #0
   81d78:	e004      	b.n	81d84 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   81d7a:	2400      	movs	r4, #0
   81d7c:	e002      	b.n	81d84 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   81d7e:	2401      	movs	r4, #1
   81d80:	e000      	b.n	81d84 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   81d82:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   81d84:	4b06      	ldr	r3, [pc, #24]	; (81da0 <xTaskCheckForTimeOut+0x80>)
   81d86:	4798      	blx	r3

	return xReturn;
}
   81d88:	4620      	mov	r0, r4
   81d8a:	bd38      	pop	{r3, r4, r5, pc}
   81d8c:	00080d79 	.word	0x00080d79
   81d90:	00080d89 	.word	0x00080d89
   81d94:	2007ac04 	.word	0x2007ac04
   81d98:	2007ac08 	.word	0x2007ac08
   81d9c:	00081cf9 	.word	0x00081cf9
   81da0:	00080da9 	.word	0x00080da9

00081da4 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   81da4:	2201      	movs	r2, #1
   81da6:	4b01      	ldr	r3, [pc, #4]	; (81dac <vTaskMissedYield+0x8>)
   81da8:	601a      	str	r2, [r3, #0]
   81daa:	4770      	bx	lr
   81dac:	2007ac28 	.word	0x2007ac28

00081db0 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   81db0:	4b01      	ldr	r3, [pc, #4]	; (81db8 <xTaskGetCurrentTaskHandle+0x8>)
   81db2:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   81db4:	4770      	bx	lr
   81db6:	bf00      	nop
   81db8:	2007abec 	.word	0x2007abec

00081dbc <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   81dbc:	4b05      	ldr	r3, [pc, #20]	; (81dd4 <xTaskGetSchedulerState+0x18>)
   81dbe:	681b      	ldr	r3, [r3, #0]
   81dc0:	b133      	cbz	r3, 81dd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   81dc2:	4b05      	ldr	r3, [pc, #20]	; (81dd8 <xTaskGetSchedulerState+0x1c>)
   81dc4:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   81dc6:	2b00      	cmp	r3, #0
   81dc8:	bf14      	ite	ne
   81dca:	2002      	movne	r0, #2
   81dcc:	2001      	moveq	r0, #1
   81dce:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   81dd0:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   81dd2:	4770      	bx	lr
   81dd4:	2007ab50 	.word	0x2007ab50
   81dd8:	2007abe8 	.word	0x2007abe8

00081ddc <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   81ddc:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   81dde:	4604      	mov	r4, r0
   81de0:	2800      	cmp	r0, #0
   81de2:	d02e      	beq.n	81e42 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   81de4:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   81de6:	4a17      	ldr	r2, [pc, #92]	; (81e44 <vTaskPriorityInherit+0x68>)
   81de8:	6812      	ldr	r2, [r2, #0]
   81dea:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81dec:	4293      	cmp	r3, r2
   81dee:	d228      	bcs.n	81e42 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   81df0:	4a14      	ldr	r2, [pc, #80]	; (81e44 <vTaskPriorityInherit+0x68>)
   81df2:	6812      	ldr	r2, [r2, #0]
   81df4:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   81df6:	f1c2 0205 	rsb	r2, r2, #5
   81dfa:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   81dfc:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81e00:	4a11      	ldr	r2, [pc, #68]	; (81e48 <vTaskPriorityInherit+0x6c>)
   81e02:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   81e06:	6942      	ldr	r2, [r0, #20]
   81e08:	429a      	cmp	r2, r3
   81e0a:	d116      	bne.n	81e3a <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81e0c:	1d05      	adds	r5, r0, #4
   81e0e:	4628      	mov	r0, r5
   81e10:	4b0e      	ldr	r3, [pc, #56]	; (81e4c <vTaskPriorityInherit+0x70>)
   81e12:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81e14:	4b0b      	ldr	r3, [pc, #44]	; (81e44 <vTaskPriorityInherit+0x68>)
   81e16:	681b      	ldr	r3, [r3, #0]
   81e18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   81e1c:	4a0c      	ldr	r2, [pc, #48]	; (81e50 <vTaskPriorityInherit+0x74>)
   81e1e:	6812      	ldr	r2, [r2, #0]
   81e20:	4293      	cmp	r3, r2
   81e22:	bf84      	itt	hi
   81e24:	4a0a      	ldrhi	r2, [pc, #40]	; (81e50 <vTaskPriorityInherit+0x74>)
   81e26:	6013      	strhi	r3, [r2, #0]
   81e28:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81e2c:	4806      	ldr	r0, [pc, #24]	; (81e48 <vTaskPriorityInherit+0x6c>)
   81e2e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81e32:	4629      	mov	r1, r5
   81e34:	4b07      	ldr	r3, [pc, #28]	; (81e54 <vTaskPriorityInherit+0x78>)
   81e36:	4798      	blx	r3
   81e38:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   81e3a:	4b02      	ldr	r3, [pc, #8]	; (81e44 <vTaskPriorityInherit+0x68>)
   81e3c:	681b      	ldr	r3, [r3, #0]
   81e3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   81e40:	62c3      	str	r3, [r0, #44]	; 0x2c
   81e42:	bd38      	pop	{r3, r4, r5, pc}
   81e44:	2007abec 	.word	0x2007abec
   81e48:	2007ab84 	.word	0x2007ab84
   81e4c:	00080cf1 	.word	0x00080cf1
   81e50:	2007ab80 	.word	0x2007ab80
   81e54:	00080c99 	.word	0x00080c99

00081e58 <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   81e58:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   81e5a:	4604      	mov	r4, r0
   81e5c:	b1d0      	cbz	r0, 81e94 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   81e5e:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   81e60:	6c83      	ldr	r3, [r0, #72]	; 0x48
   81e62:	429a      	cmp	r2, r3
   81e64:	d016      	beq.n	81e94 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   81e66:	1d05      	adds	r5, r0, #4
   81e68:	4628      	mov	r0, r5
   81e6a:	4b0b      	ldr	r3, [pc, #44]	; (81e98 <vTaskPriorityDisinherit+0x40>)
   81e6c:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   81e6e:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81e70:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   81e72:	f1c3 0205 	rsb	r2, r3, #5
   81e76:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   81e78:	4a08      	ldr	r2, [pc, #32]	; (81e9c <vTaskPriorityDisinherit+0x44>)
   81e7a:	6812      	ldr	r2, [r2, #0]
   81e7c:	4293      	cmp	r3, r2
   81e7e:	bf84      	itt	hi
   81e80:	4a06      	ldrhi	r2, [pc, #24]	; (81e9c <vTaskPriorityDisinherit+0x44>)
   81e82:	6013      	strhi	r3, [r2, #0]
   81e84:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   81e88:	4805      	ldr	r0, [pc, #20]	; (81ea0 <vTaskPriorityDisinherit+0x48>)
   81e8a:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   81e8e:	4629      	mov	r1, r5
   81e90:	4b04      	ldr	r3, [pc, #16]	; (81ea4 <vTaskPriorityDisinherit+0x4c>)
   81e92:	4798      	blx	r3
   81e94:	bd38      	pop	{r3, r4, r5, pc}
   81e96:	bf00      	nop
   81e98:	00080cf1 	.word	0x00080cf1
   81e9c:	2007ab80 	.word	0x2007ab80
   81ea0:	2007ab84 	.word	0x2007ab84
   81ea4:	00080c99 	.word	0x00080c99

00081ea8 <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   81ea8:	b510      	push	{r4, lr}
   81eaa:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   81eac:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   81eae:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   81eb0:	4291      	cmp	r1, r2
   81eb2:	d80a      	bhi.n	81eca <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   81eb4:	1ad2      	subs	r2, r2, r3
   81eb6:	6981      	ldr	r1, [r0, #24]
   81eb8:	428a      	cmp	r2, r1
   81eba:	d211      	bcs.n	81ee0 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   81ebc:	4b0a      	ldr	r3, [pc, #40]	; (81ee8 <prvInsertTimerInActiveList+0x40>)
   81ebe:	6818      	ldr	r0, [r3, #0]
   81ec0:	1d21      	adds	r1, r4, #4
   81ec2:	4b0a      	ldr	r3, [pc, #40]	; (81eec <prvInsertTimerInActiveList+0x44>)
   81ec4:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81ec6:	2000      	movs	r0, #0
   81ec8:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   81eca:	429a      	cmp	r2, r3
   81ecc:	d201      	bcs.n	81ed2 <prvInsertTimerInActiveList+0x2a>
   81ece:	4299      	cmp	r1, r3
   81ed0:	d208      	bcs.n	81ee4 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   81ed2:	4b07      	ldr	r3, [pc, #28]	; (81ef0 <prvInsertTimerInActiveList+0x48>)
   81ed4:	6818      	ldr	r0, [r3, #0]
   81ed6:	1d21      	adds	r1, r4, #4
   81ed8:	4b04      	ldr	r3, [pc, #16]	; (81eec <prvInsertTimerInActiveList+0x44>)
   81eda:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   81edc:	2000      	movs	r0, #0
   81ede:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   81ee0:	2001      	movs	r0, #1
   81ee2:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   81ee4:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   81ee6:	bd10      	pop	{r4, pc}
   81ee8:	2007ac68 	.word	0x2007ac68
   81eec:	00080cb5 	.word	0x00080cb5
   81ef0:	2007ac34 	.word	0x2007ac34

00081ef4 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   81ef4:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   81ef6:	4b0d      	ldr	r3, [pc, #52]	; (81f2c <prvCheckForValidListAndQueue+0x38>)
   81ef8:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   81efa:	4b0d      	ldr	r3, [pc, #52]	; (81f30 <prvCheckForValidListAndQueue+0x3c>)
   81efc:	681b      	ldr	r3, [r3, #0]
   81efe:	b98b      	cbnz	r3, 81f24 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   81f00:	4d0c      	ldr	r5, [pc, #48]	; (81f34 <prvCheckForValidListAndQueue+0x40>)
   81f02:	4628      	mov	r0, r5
   81f04:	4e0c      	ldr	r6, [pc, #48]	; (81f38 <prvCheckForValidListAndQueue+0x44>)
   81f06:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   81f08:	4c0c      	ldr	r4, [pc, #48]	; (81f3c <prvCheckForValidListAndQueue+0x48>)
   81f0a:	4620      	mov	r0, r4
   81f0c:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   81f0e:	4b0c      	ldr	r3, [pc, #48]	; (81f40 <prvCheckForValidListAndQueue+0x4c>)
   81f10:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   81f12:	4b0c      	ldr	r3, [pc, #48]	; (81f44 <prvCheckForValidListAndQueue+0x50>)
   81f14:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   81f16:	2005      	movs	r0, #5
   81f18:	210c      	movs	r1, #12
   81f1a:	2200      	movs	r2, #0
   81f1c:	4b0a      	ldr	r3, [pc, #40]	; (81f48 <prvCheckForValidListAndQueue+0x54>)
   81f1e:	4798      	blx	r3
   81f20:	4b03      	ldr	r3, [pc, #12]	; (81f30 <prvCheckForValidListAndQueue+0x3c>)
   81f22:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   81f24:	4b09      	ldr	r3, [pc, #36]	; (81f4c <prvCheckForValidListAndQueue+0x58>)
   81f26:	4798      	blx	r3
   81f28:	bd70      	pop	{r4, r5, r6, pc}
   81f2a:	bf00      	nop
   81f2c:	00080d89 	.word	0x00080d89
   81f30:	2007ac64 	.word	0x2007ac64
   81f34:	2007ac38 	.word	0x2007ac38
   81f38:	00080c79 	.word	0x00080c79
   81f3c:	2007ac4c 	.word	0x2007ac4c
   81f40:	2007ac34 	.word	0x2007ac34
   81f44:	2007ac68 	.word	0x2007ac68
   81f48:	00081161 	.word	0x00081161
   81f4c:	00080da9 	.word	0x00080da9

00081f50 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   81f50:	b510      	push	{r4, lr}
   81f52:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   81f54:	4b0b      	ldr	r3, [pc, #44]	; (81f84 <xTimerCreateTimerTask+0x34>)
   81f56:	4798      	blx	r3

	if( xTimerQueue != NULL )
   81f58:	4b0b      	ldr	r3, [pc, #44]	; (81f88 <xTimerCreateTimerTask+0x38>)
   81f5a:	681b      	ldr	r3, [r3, #0]
   81f5c:	b163      	cbz	r3, 81f78 <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   81f5e:	2304      	movs	r3, #4
   81f60:	9300      	str	r3, [sp, #0]
   81f62:	2300      	movs	r3, #0
   81f64:	9301      	str	r3, [sp, #4]
   81f66:	9302      	str	r3, [sp, #8]
   81f68:	9303      	str	r3, [sp, #12]
   81f6a:	4808      	ldr	r0, [pc, #32]	; (81f8c <xTimerCreateTimerTask+0x3c>)
   81f6c:	4908      	ldr	r1, [pc, #32]	; (81f90 <xTimerCreateTimerTask+0x40>)
   81f6e:	f44f 7282 	mov.w	r2, #260	; 0x104
   81f72:	4c08      	ldr	r4, [pc, #32]	; (81f94 <xTimerCreateTimerTask+0x44>)
   81f74:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   81f76:	b918      	cbnz	r0, 81f80 <xTimerCreateTimerTask+0x30>
   81f78:	4b07      	ldr	r3, [pc, #28]	; (81f98 <xTimerCreateTimerTask+0x48>)
   81f7a:	4798      	blx	r3
   81f7c:	bf00      	nop
   81f7e:	e7fd      	b.n	81f7c <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   81f80:	b004      	add	sp, #16
   81f82:	bd10      	pop	{r4, pc}
   81f84:	00081ef5 	.word	0x00081ef5
   81f88:	2007ac64 	.word	0x2007ac64
   81f8c:	000820a5 	.word	0x000820a5
   81f90:	00088a8c 	.word	0x00088a8c
   81f94:	00081565 	.word	0x00081565
   81f98:	00080d79 	.word	0x00080d79

00081f9c <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   81f9c:	b510      	push	{r4, lr}
   81f9e:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   81fa0:	4c0f      	ldr	r4, [pc, #60]	; (81fe0 <xTimerGenericCommand+0x44>)
   81fa2:	6824      	ldr	r4, [r4, #0]
   81fa4:	b1c4      	cbz	r4, 81fd8 <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   81fa6:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   81fa8:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   81faa:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   81fac:	b96b      	cbnz	r3, 81fca <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   81fae:	4b0d      	ldr	r3, [pc, #52]	; (81fe4 <xTimerGenericCommand+0x48>)
   81fb0:	4798      	blx	r3
   81fb2:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   81fb4:	4b0a      	ldr	r3, [pc, #40]	; (81fe0 <xTimerGenericCommand+0x44>)
   81fb6:	6818      	ldr	r0, [r3, #0]
   81fb8:	a901      	add	r1, sp, #4
   81fba:	bf07      	ittee	eq
   81fbc:	9a06      	ldreq	r2, [sp, #24]
   81fbe:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   81fc0:	2200      	movne	r2, #0
   81fc2:	4613      	movne	r3, r2
   81fc4:	4c08      	ldr	r4, [pc, #32]	; (81fe8 <xTimerGenericCommand+0x4c>)
   81fc6:	47a0      	blx	r4
   81fc8:	e007      	b.n	81fda <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   81fca:	4620      	mov	r0, r4
   81fcc:	a901      	add	r1, sp, #4
   81fce:	461a      	mov	r2, r3
   81fd0:	2300      	movs	r3, #0
   81fd2:	4c06      	ldr	r4, [pc, #24]	; (81fec <xTimerGenericCommand+0x50>)
   81fd4:	47a0      	blx	r4
   81fd6:	e000      	b.n	81fda <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   81fd8:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   81fda:	b004      	add	sp, #16
   81fdc:	bd10      	pop	{r4, pc}
   81fde:	bf00      	nop
   81fe0:	2007ac64 	.word	0x2007ac64
   81fe4:	00081dbd 	.word	0x00081dbd
   81fe8:	000811b9 	.word	0x000811b9
   81fec:	000812d5 	.word	0x000812d5

00081ff0 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   81ff0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   81ff4:	b082      	sub	sp, #8
   81ff6:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   81ff8:	4b22      	ldr	r3, [pc, #136]	; (82084 <prvSampleTimeNow+0x94>)
   81ffa:	4798      	blx	r3
   81ffc:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   81ffe:	4b22      	ldr	r3, [pc, #136]	; (82088 <prvSampleTimeNow+0x98>)
   82000:	681b      	ldr	r3, [r3, #0]
   82002:	4298      	cmp	r0, r3
   82004:	d234      	bcs.n	82070 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82006:	4e21      	ldr	r6, [pc, #132]	; (8208c <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82008:	4f21      	ldr	r7, [pc, #132]	; (82090 <prvSampleTimeNow+0xa0>)
   8200a:	e024      	b.n	82056 <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   8200c:	68da      	ldr	r2, [r3, #12]
   8200e:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82012:	68db      	ldr	r3, [r3, #12]
   82014:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82016:	1d25      	adds	r5, r4, #4
   82018:	4628      	mov	r0, r5
   8201a:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   8201c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   8201e:	4620      	mov	r0, r4
   82020:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82022:	69e3      	ldr	r3, [r4, #28]
   82024:	2b01      	cmp	r3, #1
   82026:	d116      	bne.n	82056 <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82028:	69a3      	ldr	r3, [r4, #24]
   8202a:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   8202c:	4553      	cmp	r3, sl
   8202e:	d906      	bls.n	8203e <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82030:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82032:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82034:	6830      	ldr	r0, [r6, #0]
   82036:	4629      	mov	r1, r5
   82038:	4b16      	ldr	r3, [pc, #88]	; (82094 <prvSampleTimeNow+0xa4>)
   8203a:	4798      	blx	r3
   8203c:	e00b      	b.n	82056 <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   8203e:	2300      	movs	r3, #0
   82040:	9300      	str	r3, [sp, #0]
   82042:	4620      	mov	r0, r4
   82044:	4619      	mov	r1, r3
   82046:	4652      	mov	r2, sl
   82048:	4c13      	ldr	r4, [pc, #76]	; (82098 <prvSampleTimeNow+0xa8>)
   8204a:	47a0      	blx	r4
				configASSERT( xResult );
   8204c:	b918      	cbnz	r0, 82056 <prvSampleTimeNow+0x66>
   8204e:	4b13      	ldr	r3, [pc, #76]	; (8209c <prvSampleTimeNow+0xac>)
   82050:	4798      	blx	r3
   82052:	bf00      	nop
   82054:	e7fd      	b.n	82052 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82056:	6833      	ldr	r3, [r6, #0]
   82058:	681a      	ldr	r2, [r3, #0]
   8205a:	2a00      	cmp	r2, #0
   8205c:	d1d6      	bne.n	8200c <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   8205e:	4a10      	ldr	r2, [pc, #64]	; (820a0 <prvSampleTimeNow+0xb0>)
   82060:	6811      	ldr	r1, [r2, #0]
   82062:	480a      	ldr	r0, [pc, #40]	; (8208c <prvSampleTimeNow+0x9c>)
   82064:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82066:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82068:	2301      	movs	r3, #1
   8206a:	f8c9 3000 	str.w	r3, [r9]
   8206e:	e002      	b.n	82076 <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82070:	2300      	movs	r3, #0
   82072:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82076:	4b04      	ldr	r3, [pc, #16]	; (82088 <prvSampleTimeNow+0x98>)
   82078:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   8207c:	4640      	mov	r0, r8
   8207e:	b002      	add	sp, #8
   82080:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82084:	000817e5 	.word	0x000817e5
   82088:	2007ac60 	.word	0x2007ac60
   8208c:	2007ac34 	.word	0x2007ac34
   82090:	00080cf1 	.word	0x00080cf1
   82094:	00080cb5 	.word	0x00080cb5
   82098:	00081f9d 	.word	0x00081f9d
   8209c:	00080d79 	.word	0x00080d79
   820a0:	2007ac68 	.word	0x2007ac68

000820a4 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   820a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   820a8:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   820aa:	4d4d      	ldr	r5, [pc, #308]	; (821e0 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   820ac:	f8df 8160 	ldr.w	r8, [pc, #352]	; 82210 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   820b0:	4b4c      	ldr	r3, [pc, #304]	; (821e4 <prvTimerTask+0x140>)
   820b2:	681b      	ldr	r3, [r3, #0]
   820b4:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   820b6:	2a00      	cmp	r2, #0
   820b8:	f000 8087 	beq.w	821ca <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   820bc:	68db      	ldr	r3, [r3, #12]
   820be:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   820c0:	4b49      	ldr	r3, [pc, #292]	; (821e8 <prvTimerTask+0x144>)
   820c2:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   820c4:	a803      	add	r0, sp, #12
   820c6:	4b49      	ldr	r3, [pc, #292]	; (821ec <prvTimerTask+0x148>)
   820c8:	4798      	blx	r3
   820ca:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   820cc:	9b03      	ldr	r3, [sp, #12]
   820ce:	2b00      	cmp	r3, #0
   820d0:	d130      	bne.n	82134 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   820d2:	4286      	cmp	r6, r0
   820d4:	d824      	bhi.n	82120 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   820d6:	4b46      	ldr	r3, [pc, #280]	; (821f0 <prvTimerTask+0x14c>)
   820d8:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   820da:	4b42      	ldr	r3, [pc, #264]	; (821e4 <prvTimerTask+0x140>)
   820dc:	681b      	ldr	r3, [r3, #0]
   820de:	68db      	ldr	r3, [r3, #12]
   820e0:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   820e2:	1d20      	adds	r0, r4, #4
   820e4:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   820e6:	69e3      	ldr	r3, [r4, #28]
   820e8:	2b01      	cmp	r3, #1
   820ea:	d114      	bne.n	82116 <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   820ec:	69a1      	ldr	r1, [r4, #24]
   820ee:	4620      	mov	r0, r4
   820f0:	4431      	add	r1, r6
   820f2:	463a      	mov	r2, r7
   820f4:	4633      	mov	r3, r6
   820f6:	4f3f      	ldr	r7, [pc, #252]	; (821f4 <prvTimerTask+0x150>)
   820f8:	47b8      	blx	r7
   820fa:	2801      	cmp	r0, #1
   820fc:	d10b      	bne.n	82116 <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   820fe:	2300      	movs	r3, #0
   82100:	9300      	str	r3, [sp, #0]
   82102:	4620      	mov	r0, r4
   82104:	4619      	mov	r1, r3
   82106:	4632      	mov	r2, r6
   82108:	4e3b      	ldr	r6, [pc, #236]	; (821f8 <prvTimerTask+0x154>)
   8210a:	47b0      	blx	r6
			configASSERT( xResult );
   8210c:	b918      	cbnz	r0, 82116 <prvTimerTask+0x72>
   8210e:	4b3b      	ldr	r3, [pc, #236]	; (821fc <prvTimerTask+0x158>)
   82110:	4798      	blx	r3
   82112:	bf00      	nop
   82114:	e7fd      	b.n	82112 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82116:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82118:	4620      	mov	r0, r4
   8211a:	4798      	blx	r3
   8211c:	e00c      	b.n	82138 <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   8211e:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82120:	6828      	ldr	r0, [r5, #0]
   82122:	1bf1      	subs	r1, r6, r7
   82124:	4b36      	ldr	r3, [pc, #216]	; (82200 <prvTimerTask+0x15c>)
   82126:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82128:	4b31      	ldr	r3, [pc, #196]	; (821f0 <prvTimerTask+0x14c>)
   8212a:	4798      	blx	r3
   8212c:	b920      	cbnz	r0, 82138 <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   8212e:	4b35      	ldr	r3, [pc, #212]	; (82204 <prvTimerTask+0x160>)
   82130:	4798      	blx	r3
   82132:	e001      	b.n	82138 <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82134:	4b2e      	ldr	r3, [pc, #184]	; (821f0 <prvTimerTask+0x14c>)
   82136:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82138:	a802      	add	r0, sp, #8
   8213a:	4b2c      	ldr	r3, [pc, #176]	; (821ec <prvTimerTask+0x148>)
   8213c:	4798      	blx	r3
   8213e:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82140:	4e31      	ldr	r6, [pc, #196]	; (82208 <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82142:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 821f4 <prvTimerTask+0x150>
   82146:	e038      	b.n	821ba <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82148:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   8214a:	b11c      	cbz	r4, 82154 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   8214c:	6961      	ldr	r1, [r4, #20]
   8214e:	b109      	cbz	r1, 82154 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82150:	1d20      	adds	r0, r4, #4
   82152:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82154:	9903      	ldr	r1, [sp, #12]
   82156:	2902      	cmp	r1, #2
   82158:	d01f      	beq.n	8219a <prvTimerTask+0xf6>
   8215a:	2903      	cmp	r1, #3
   8215c:	d02a      	beq.n	821b4 <prvTimerTask+0x110>
   8215e:	2900      	cmp	r1, #0
   82160:	d12b      	bne.n	821ba <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82162:	9b04      	ldr	r3, [sp, #16]
   82164:	69a1      	ldr	r1, [r4, #24]
   82166:	4620      	mov	r0, r4
   82168:	4419      	add	r1, r3
   8216a:	463a      	mov	r2, r7
   8216c:	47c8      	blx	r9
   8216e:	2801      	cmp	r0, #1
   82170:	d123      	bne.n	821ba <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82172:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82174:	4620      	mov	r0, r4
   82176:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82178:	69e3      	ldr	r3, [r4, #28]
   8217a:	2b01      	cmp	r3, #1
   8217c:	d11d      	bne.n	821ba <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   8217e:	69a2      	ldr	r2, [r4, #24]
   82180:	2300      	movs	r3, #0
   82182:	9300      	str	r3, [sp, #0]
   82184:	4620      	mov	r0, r4
   82186:	4619      	mov	r1, r3
   82188:	9c04      	ldr	r4, [sp, #16]
   8218a:	4422      	add	r2, r4
   8218c:	4c1a      	ldr	r4, [pc, #104]	; (821f8 <prvTimerTask+0x154>)
   8218e:	47a0      	blx	r4
						configASSERT( xResult );
   82190:	b998      	cbnz	r0, 821ba <prvTimerTask+0x116>
   82192:	4b1a      	ldr	r3, [pc, #104]	; (821fc <prvTimerTask+0x158>)
   82194:	4798      	blx	r3
   82196:	bf00      	nop
   82198:	e7fd      	b.n	82196 <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   8219a:	9904      	ldr	r1, [sp, #16]
   8219c:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   8219e:	b919      	cbnz	r1, 821a8 <prvTimerTask+0x104>
   821a0:	4b16      	ldr	r3, [pc, #88]	; (821fc <prvTimerTask+0x158>)
   821a2:	4798      	blx	r3
   821a4:	bf00      	nop
   821a6:	e7fd      	b.n	821a4 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   821a8:	4620      	mov	r0, r4
   821aa:	4439      	add	r1, r7
   821ac:	463a      	mov	r2, r7
   821ae:	463b      	mov	r3, r7
   821b0:	47c8      	blx	r9
   821b2:	e002      	b.n	821ba <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   821b4:	4620      	mov	r0, r4
   821b6:	4b15      	ldr	r3, [pc, #84]	; (8220c <prvTimerTask+0x168>)
   821b8:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   821ba:	6828      	ldr	r0, [r5, #0]
   821bc:	a903      	add	r1, sp, #12
   821be:	2200      	movs	r2, #0
   821c0:	4613      	mov	r3, r2
   821c2:	47b0      	blx	r6
   821c4:	2800      	cmp	r0, #0
   821c6:	d1bf      	bne.n	82148 <prvTimerTask+0xa4>
   821c8:	e772      	b.n	820b0 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   821ca:	4b07      	ldr	r3, [pc, #28]	; (821e8 <prvTimerTask+0x144>)
   821cc:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   821ce:	a803      	add	r0, sp, #12
   821d0:	4b06      	ldr	r3, [pc, #24]	; (821ec <prvTimerTask+0x148>)
   821d2:	4798      	blx	r3
   821d4:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   821d6:	9b03      	ldr	r3, [sp, #12]
   821d8:	2b00      	cmp	r3, #0
   821da:	d0a0      	beq.n	8211e <prvTimerTask+0x7a>
   821dc:	e7aa      	b.n	82134 <prvTimerTask+0x90>
   821de:	bf00      	nop
   821e0:	2007ac64 	.word	0x2007ac64
   821e4:	2007ac34 	.word	0x2007ac34
   821e8:	000817d5 	.word	0x000817d5
   821ec:	00081ff1 	.word	0x00081ff1
   821f0:	00081925 	.word	0x00081925
   821f4:	00081ea9 	.word	0x00081ea9
   821f8:	00081f9d 	.word	0x00081f9d
   821fc:	00080d79 	.word	0x00080d79
   82200:	000814c1 	.word	0x000814c1
   82204:	00080d69 	.word	0x00080d69
   82208:	00081365 	.word	0x00081365
   8220c:	00080f99 	.word	0x00080f99
   82210:	00080cf1 	.word	0x00080cf1

00082214 <usart_serial_getchar>:
 * \param p_usart   Base address of the USART instance.
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
   82214:	b5f0      	push	{r4, r5, r6, r7, lr}
   82216:	b083      	sub	sp, #12
   82218:	4604      	mov	r4, r0
   8221a:	460d      	mov	r5, r1
	uint32_t val = 0;
   8221c:	2300      	movs	r3, #0
   8221e:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   82220:	4b1f      	ldr	r3, [pc, #124]	; (822a0 <usart_serial_getchar+0x8c>)
   82222:	4298      	cmp	r0, r3
   82224:	d107      	bne.n	82236 <usart_serial_getchar+0x22>
		while (uart_read((Uart*)p_usart, data));
   82226:	461f      	mov	r7, r3
   82228:	4e1e      	ldr	r6, [pc, #120]	; (822a4 <usart_serial_getchar+0x90>)
   8222a:	4638      	mov	r0, r7
   8222c:	4629      	mov	r1, r5
   8222e:	47b0      	blx	r6
   82230:	2800      	cmp	r0, #0
   82232:	d1fa      	bne.n	8222a <usart_serial_getchar+0x16>
   82234:	e019      	b.n	8226a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   82236:	4b1c      	ldr	r3, [pc, #112]	; (822a8 <usart_serial_getchar+0x94>)
   82238:	4298      	cmp	r0, r3
   8223a:	d109      	bne.n	82250 <usart_serial_getchar+0x3c>
		while (usart_read(p_usart, &val));
   8223c:	461f      	mov	r7, r3
   8223e:	4e1b      	ldr	r6, [pc, #108]	; (822ac <usart_serial_getchar+0x98>)
   82240:	4638      	mov	r0, r7
   82242:	a901      	add	r1, sp, #4
   82244:	47b0      	blx	r6
   82246:	2800      	cmp	r0, #0
   82248:	d1fa      	bne.n	82240 <usart_serial_getchar+0x2c>
		*data = (uint8_t)(val & 0xFF);
   8224a:	9b01      	ldr	r3, [sp, #4]
   8224c:	702b      	strb	r3, [r5, #0]
   8224e:	e019      	b.n	82284 <usart_serial_getchar+0x70>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   82250:	4b17      	ldr	r3, [pc, #92]	; (822b0 <usart_serial_getchar+0x9c>)
   82252:	4298      	cmp	r0, r3
   82254:	d109      	bne.n	8226a <usart_serial_getchar+0x56>
		while (usart_read(p_usart, &val));
   82256:	461e      	mov	r6, r3
   82258:	4c14      	ldr	r4, [pc, #80]	; (822ac <usart_serial_getchar+0x98>)
   8225a:	4630      	mov	r0, r6
   8225c:	a901      	add	r1, sp, #4
   8225e:	47a0      	blx	r4
   82260:	2800      	cmp	r0, #0
   82262:	d1fa      	bne.n	8225a <usart_serial_getchar+0x46>
		*data = (uint8_t)(val & 0xFF);
   82264:	9b01      	ldr	r3, [sp, #4]
   82266:	702b      	strb	r3, [r5, #0]
   82268:	e018      	b.n	8229c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   8226a:	4b12      	ldr	r3, [pc, #72]	; (822b4 <usart_serial_getchar+0xa0>)
   8226c:	429c      	cmp	r4, r3
   8226e:	d109      	bne.n	82284 <usart_serial_getchar+0x70>
		while (usart_read(p_usart, &val));
   82270:	461e      	mov	r6, r3
   82272:	4c0e      	ldr	r4, [pc, #56]	; (822ac <usart_serial_getchar+0x98>)
   82274:	4630      	mov	r0, r6
   82276:	a901      	add	r1, sp, #4
   82278:	47a0      	blx	r4
   8227a:	2800      	cmp	r0, #0
   8227c:	d1fa      	bne.n	82274 <usart_serial_getchar+0x60>
		*data = (uint8_t)(val & 0xFF);
   8227e:	9b01      	ldr	r3, [sp, #4]
   82280:	702b      	strb	r3, [r5, #0]
   82282:	e00b      	b.n	8229c <usart_serial_getchar+0x88>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82284:	4b0c      	ldr	r3, [pc, #48]	; (822b8 <usart_serial_getchar+0xa4>)
   82286:	429c      	cmp	r4, r3
   82288:	d108      	bne.n	8229c <usart_serial_getchar+0x88>
		while (usart_read(p_usart, &val));
   8228a:	461e      	mov	r6, r3
   8228c:	4c07      	ldr	r4, [pc, #28]	; (822ac <usart_serial_getchar+0x98>)
   8228e:	4630      	mov	r0, r6
   82290:	a901      	add	r1, sp, #4
   82292:	47a0      	blx	r4
   82294:	2800      	cmp	r0, #0
   82296:	d1fa      	bne.n	8228e <usart_serial_getchar+0x7a>
		*data = (uint8_t)(val & 0xFF);
   82298:	9b01      	ldr	r3, [sp, #4]
   8229a:	702b      	strb	r3, [r5, #0]
		*data = (uint8_t)(val & 0xFF);
	}
# endif
#endif /* ifdef USART */

}
   8229c:	b003      	add	sp, #12
   8229e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   822a0:	400e0800 	.word	0x400e0800
   822a4:	000802e9 	.word	0x000802e9
   822a8:	40098000 	.word	0x40098000
   822ac:	00080401 	.word	0x00080401
   822b0:	4009c000 	.word	0x4009c000
   822b4:	400a0000 	.word	0x400a0000
   822b8:	400a4000 	.word	0x400a4000

000822bc <usart_serial_putchar>:
 *   \retval 1  The character was written.
 *   \retval 0  The function timed out before the USART transmitter became
 * ready to send.
 */
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
   822bc:	b570      	push	{r4, r5, r6, lr}
   822be:	460c      	mov	r4, r1
#ifdef UART
	if (UART == (Uart*)p_usart) {
   822c0:	4b21      	ldr	r3, [pc, #132]	; (82348 <usart_serial_putchar+0x8c>)
   822c2:	4298      	cmp	r0, r3
   822c4:	d107      	bne.n	822d6 <usart_serial_putchar+0x1a>
		while (uart_write((Uart*)p_usart, c)!=0);
   822c6:	461e      	mov	r6, r3
   822c8:	4d20      	ldr	r5, [pc, #128]	; (8234c <usart_serial_putchar+0x90>)
   822ca:	4630      	mov	r0, r6
   822cc:	4621      	mov	r1, r4
   822ce:	47a8      	blx	r5
   822d0:	2800      	cmp	r0, #0
   822d2:	d1fa      	bne.n	822ca <usart_serial_putchar+0xe>
   822d4:	e02b      	b.n	8232e <usart_serial_putchar+0x72>
		while (usart_write(p_usart, c)!=0);
		return 1;
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   822d6:	4b1e      	ldr	r3, [pc, #120]	; (82350 <usart_serial_putchar+0x94>)
   822d8:	4298      	cmp	r0, r3
   822da:	d107      	bne.n	822ec <usart_serial_putchar+0x30>
		while (usart_write(p_usart, c)!=0);
   822dc:	461e      	mov	r6, r3
   822de:	4d1d      	ldr	r5, [pc, #116]	; (82354 <usart_serial_putchar+0x98>)
   822e0:	4630      	mov	r0, r6
   822e2:	4621      	mov	r1, r4
   822e4:	47a8      	blx	r5
   822e6:	2800      	cmp	r0, #0
   822e8:	d1fa      	bne.n	822e0 <usart_serial_putchar+0x24>
   822ea:	e022      	b.n	82332 <usart_serial_putchar+0x76>
		return 1;
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   822ec:	4b1a      	ldr	r3, [pc, #104]	; (82358 <usart_serial_putchar+0x9c>)
   822ee:	4298      	cmp	r0, r3
   822f0:	d107      	bne.n	82302 <usart_serial_putchar+0x46>
		while (usart_write(p_usart, c)!=0);
   822f2:	461e      	mov	r6, r3
   822f4:	4d17      	ldr	r5, [pc, #92]	; (82354 <usart_serial_putchar+0x98>)
   822f6:	4630      	mov	r0, r6
   822f8:	4621      	mov	r1, r4
   822fa:	47a8      	blx	r5
   822fc:	2800      	cmp	r0, #0
   822fe:	d1fa      	bne.n	822f6 <usart_serial_putchar+0x3a>
   82300:	e019      	b.n	82336 <usart_serial_putchar+0x7a>
		return 1;
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   82302:	4b16      	ldr	r3, [pc, #88]	; (8235c <usart_serial_putchar+0xa0>)
   82304:	4298      	cmp	r0, r3
   82306:	d107      	bne.n	82318 <usart_serial_putchar+0x5c>
		while (usart_write(p_usart, c)!=0);
   82308:	461e      	mov	r6, r3
   8230a:	4d12      	ldr	r5, [pc, #72]	; (82354 <usart_serial_putchar+0x98>)
   8230c:	4630      	mov	r0, r6
   8230e:	4621      	mov	r1, r4
   82310:	47a8      	blx	r5
   82312:	2800      	cmp	r0, #0
   82314:	d1fa      	bne.n	8230c <usart_serial_putchar+0x50>
   82316:	e010      	b.n	8233a <usart_serial_putchar+0x7e>
		return 1;
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   82318:	4b11      	ldr	r3, [pc, #68]	; (82360 <usart_serial_putchar+0xa4>)
   8231a:	4298      	cmp	r0, r3
   8231c:	d10f      	bne.n	8233e <usart_serial_putchar+0x82>
		while (usart_write(p_usart, c)!=0);
   8231e:	461e      	mov	r6, r3
   82320:	4d0c      	ldr	r5, [pc, #48]	; (82354 <usart_serial_putchar+0x98>)
   82322:	4630      	mov	r0, r6
   82324:	4621      	mov	r1, r4
   82326:	47a8      	blx	r5
   82328:	2800      	cmp	r0, #0
   8232a:	d1fa      	bne.n	82322 <usart_serial_putchar+0x66>
   8232c:	e009      	b.n	82342 <usart_serial_putchar+0x86>
static inline int usart_serial_putchar(usart_if p_usart, const uint8_t c)
{
#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_write((Uart*)p_usart, c)!=0);
		return 1;
   8232e:	2001      	movs	r0, #1
   82330:	bd70      	pop	{r4, r5, r6, pc}
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82332:	2001      	movs	r0, #1
   82334:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82336:	2001      	movs	r0, #1
   82338:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   8233a:	2001      	movs	r0, #1
   8233c:	bd70      	pop	{r4, r5, r6, pc}
		return 1;
	}
# endif
#endif /* ifdef USART */

	return 0;
   8233e:	2000      	movs	r0, #0
   82340:	bd70      	pop	{r4, r5, r6, pc}
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
		while (usart_write(p_usart, c)!=0);
		return 1;
   82342:	2001      	movs	r0, #1
	}
# endif
#endif /* ifdef USART */

	return 0;
}
   82344:	bd70      	pop	{r4, r5, r6, pc}
   82346:	bf00      	nop
   82348:	400e0800 	.word	0x400e0800
   8234c:	000802d9 	.word	0x000802d9
   82350:	40098000 	.word	0x40098000
   82354:	000803ed 	.word	0x000803ed
   82358:	4009c000 	.word	0x4009c000
   8235c:	400a0000 	.word	0x400a0000
   82360:	400a4000 	.word	0x400a4000

00082364 <configure_console>:
#define CONF_UART_ESP_STOP_BITS		US_MR_NBSTOP_1_BIT

uint8_t rx[8];
uint8_t c_counter = 0;

void configure_console(void) {
   82364:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82368:	b086      	sub	sp, #24
   8236a:	2008      	movs	r0, #8
   8236c:	4d20      	ldr	r5, [pc, #128]	; (823f0 <configure_console+0x8c>)
   8236e:	47a8      	blx	r5
 * \param opt         Options needed to set up RS232 communication (see \ref usart_options_t).
 *
 */
static inline void stdio_serial_init(volatile void *usart, const usart_serial_options_t *opt)
{
	stdio_base = (void *)usart;
   82370:	4c20      	ldr	r4, [pc, #128]	; (823f4 <configure_console+0x90>)
   82372:	4b21      	ldr	r3, [pc, #132]	; (823f8 <configure_console+0x94>)
   82374:	601c      	str	r4, [r3, #0]
	ptr_put = (int (*)(void volatile*,char))&usart_serial_putchar;
   82376:	4a21      	ldr	r2, [pc, #132]	; (823fc <configure_console+0x98>)
   82378:	4b21      	ldr	r3, [pc, #132]	; (82400 <configure_console+0x9c>)
   8237a:	601a      	str	r2, [r3, #0]
	ptr_get = (void (*)(void volatile*,char*))&usart_serial_getchar;
   8237c:	4a21      	ldr	r2, [pc, #132]	; (82404 <configure_console+0xa0>)
   8237e:	4b22      	ldr	r3, [pc, #136]	; (82408 <configure_console+0xa4>)
   82380:	601a      	str	r2, [r3, #0]
static inline void usart_serial_init(usart_if p_usart,
		usart_serial_options_t *opt)
{
#if ((!SAM4L) && (!SAMG55))
	sam_uart_opt_t uart_settings;
	uart_settings.ul_mck = sysclk_get_peripheral_hz();
   82382:	4e22      	ldr	r6, [pc, #136]	; (8240c <configure_console+0xa8>)
   82384:	9600      	str	r6, [sp, #0]
	uart_settings.ul_baudrate = opt->baudrate;
   82386:	f44f 33e1 	mov.w	r3, #115200	; 0x1c200
   8238a:	9301      	str	r3, [sp, #4]
	uart_settings.ul_mode = opt->paritytype;
   8238c:	f44f 6700 	mov.w	r7, #2048	; 0x800
   82390:	9702      	str	r7, [sp, #8]
   82392:	2008      	movs	r0, #8
   82394:	47a8      	blx	r5
	
#ifdef UART
	if (UART == (Uart*)p_usart) {
		sysclk_enable_peripheral_clock(ID_UART);
		/* Configure UART */
		uart_init((Uart*)p_usart, &uart_settings);
   82396:	4620      	mov	r0, r4
   82398:	4669      	mov	r1, sp
   8239a:	4b1d      	ldr	r3, [pc, #116]	; (82410 <configure_console+0xac>)
   8239c:	4798      	blx	r3
	fdevopen((int (*)(char, FILE*))(_write),(int (*)(FILE*))(_read));
#  endif
#  if UC3 || SAM
	// For AVR32 and SAM GCC
	// Specify that stdout and stdin should not be buffered.
	setbuf(stdout, NULL);
   8239e:	f8df 8088 	ldr.w	r8, [pc, #136]	; 82428 <configure_console+0xc4>
   823a2:	f8d8 3000 	ldr.w	r3, [r8]
   823a6:	6898      	ldr	r0, [r3, #8]
   823a8:	2100      	movs	r1, #0
   823aa:	4c1a      	ldr	r4, [pc, #104]	; (82414 <configure_console+0xb0>)
   823ac:	47a0      	blx	r4
	setbuf(stdin, NULL);
   823ae:	f8d8 3000 	ldr.w	r3, [r8]
   823b2:	6858      	ldr	r0, [r3, #4]
   823b4:	2100      	movs	r1, #0
   823b6:	47a0      	blx	r4
   823b8:	4c17      	ldr	r4, [pc, #92]	; (82418 <configure_console+0xb4>)
   823ba:	4620      	mov	r0, r4
   823bc:	47a8      	blx	r5
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   823be:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   823c2:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
   823c4:	2309      	movs	r3, #9
   823c6:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
   823c8:	9702      	str	r7, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
   823ca:	2300      	movs	r3, #0
   823cc:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   823ce:	9304      	str	r3, [sp, #16]
   823d0:	2012      	movs	r0, #18
   823d2:	47a8      	blx	r5
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   823d4:	4620      	mov	r0, r4
   823d6:	4669      	mov	r1, sp
   823d8:	4632      	mov	r2, r6
   823da:	4b10      	ldr	r3, [pc, #64]	; (8241c <configure_console+0xb8>)
   823dc:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   823de:	4620      	mov	r0, r4
   823e0:	4b0f      	ldr	r3, [pc, #60]	; (82420 <configure_console+0xbc>)
   823e2:	4798      	blx	r3
		usart_enable_rx(p_usart);
   823e4:	4620      	mov	r0, r4
   823e6:	4b0f      	ldr	r3, [pc, #60]	; (82424 <configure_console+0xc0>)
   823e8:	4798      	blx	r3
	usart_serial_init(CONF_UART_ESP, &uart_serial_options_esp);
	
	//CONF_UART_ESP->US_MR &= ~(0xF << 0);
	//CONF_UART_ESP->US_MR |= (0x3 << 6);
	//CONF_UART_ESP->US_MR |= (1 << 20);
}
   823ea:	b006      	add	sp, #24
   823ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823f0:	00080a01 	.word	0x00080a01
   823f4:	400e0800 	.word	0x400e0800
   823f8:	2007acac 	.word	0x2007acac
   823fc:	000822bd 	.word	0x000822bd
   82400:	2007aca8 	.word	0x2007aca8
   82404:	00082215 	.word	0x00082215
   82408:	2007aca4 	.word	0x2007aca4
   8240c:	0501bd00 	.word	0x0501bd00
   82410:	000802a1 	.word	0x000802a1
   82414:	00082705 	.word	0x00082705
   82418:	4009c000 	.word	0x4009c000
   8241c:	00080389 	.word	0x00080389
   82420:	000803dd 	.word	0x000803dd
   82424:	000803e5 	.word	0x000803e5
   82428:	20070578 	.word	0x20070578

0008242c <USART1_Handler>:

void USART1_Handler() {
   8242c:	b510      	push	{r4, lr}
   8242e:	b082      	sub	sp, #8
	CONF_UART_ESP->US_CR |= (1 << US_CR_RSTRX);
   82430:	4b0e      	ldr	r3, [pc, #56]	; (8246c <USART1_Handler+0x40>)
   82432:	681a      	ldr	r2, [r3, #0]
   82434:	f042 0210 	orr.w	r2, r2, #16
   82438:	601a      	str	r2, [r3, #0]
	rx[c_counter++] = CONF_UART_ESP->US_RHR & US_RHR_RXCHR_Msk;
   8243a:	4c0d      	ldr	r4, [pc, #52]	; (82470 <USART1_Handler+0x44>)
   8243c:	7821      	ldrb	r1, [r4, #0]
   8243e:	1c4a      	adds	r2, r1, #1
   82440:	b2d2      	uxtb	r2, r2
   82442:	7022      	strb	r2, [r4, #0]
   82444:	6998      	ldr	r0, [r3, #24]
   82446:	4b0b      	ldr	r3, [pc, #44]	; (82474 <USART1_Handler+0x48>)
   82448:	5458      	strb	r0, [r3, r1]
	char a[1];
	sprintf(&a, "%d", rx[c_counter]);
   8244a:	a801      	add	r0, sp, #4
   8244c:	490a      	ldr	r1, [pc, #40]	; (82478 <USART1_Handler+0x4c>)
   8244e:	5c9a      	ldrb	r2, [r3, r2]
   82450:	4b0a      	ldr	r3, [pc, #40]	; (8247c <USART1_Handler+0x50>)
   82452:	4798      	blx	r3
	printf("%s\n", a);
   82454:	480a      	ldr	r0, [pc, #40]	; (82480 <USART1_Handler+0x54>)
   82456:	a901      	add	r1, sp, #4
   82458:	4b0a      	ldr	r3, [pc, #40]	; (82484 <USART1_Handler+0x58>)
   8245a:	4798      	blx	r3
	
	if (c_counter > 15)
   8245c:	7823      	ldrb	r3, [r4, #0]
   8245e:	2b0f      	cmp	r3, #15
   82460:	d901      	bls.n	82466 <USART1_Handler+0x3a>
	{
		c_counter = 0;
   82462:	2200      	movs	r2, #0
   82464:	7022      	strb	r2, [r4, #0]
	}
}
   82466:	b002      	add	sp, #8
   82468:	bd10      	pop	{r4, pc}
   8246a:	bf00      	nop
   8246c:	4009c000 	.word	0x4009c000
   82470:	2007ac6c 	.word	0x2007ac6c
   82474:	2007acb0 	.word	0x2007acb0
   82478:	00088a60 	.word	0x00088a60
   8247c:	00082815 	.word	0x00082815
   82480:	00088a94 	.word	0x00088a94
   82484:	0008255d 	.word	0x0008255d

00082488 <main>:

int main (void)
{
   82488:	b500      	push	{lr}
   8248a:	b085      	sub	sp, #20
	sysclk_init();
   8248c:	4b14      	ldr	r3, [pc, #80]	; (824e0 <main+0x58>)
   8248e:	4798      	blx	r3
	board_init();
   82490:	4b14      	ldr	r3, [pc, #80]	; (824e4 <main+0x5c>)
   82492:	4798      	blx	r3
	delay_init();
	configure_console();
   82494:	4b14      	ldr	r3, [pc, #80]	; (824e8 <main+0x60>)
   82496:	4798      	blx	r3
	/*NVIC_SetPriority((IRQn_Type) ID_USART1, 0x0e);
	usart_enable_interrupt(CONF_UART_ESP, UART_IER_RXRDY);
	NVIC_EnableIRQ((IRQn_Type) ID_USART1);*/
	
	if (xTaskCreate(task_dummy1, (const signed char * const) "task_dummy1", TASK_DUMMY1_STACK_SIZE, NULL, TASK_DUMMY1_STACK_PRIORITY, NULL) != pdPASS)
   82498:	2400      	movs	r4, #0
   8249a:	9400      	str	r4, [sp, #0]
   8249c:	9401      	str	r4, [sp, #4]
   8249e:	9402      	str	r4, [sp, #8]
   824a0:	9403      	str	r4, [sp, #12]
   824a2:	4812      	ldr	r0, [pc, #72]	; (824ec <main+0x64>)
   824a4:	4912      	ldr	r1, [pc, #72]	; (824f0 <main+0x68>)
   824a6:	f44f 7280 	mov.w	r2, #256	; 0x100
   824aa:	4623      	mov	r3, r4
   824ac:	4d11      	ldr	r5, [pc, #68]	; (824f4 <main+0x6c>)
   824ae:	47a8      	blx	r5
	{
	}
	if (xTaskCreate(task_dummy2, (const signed char * const) "task_dummy2", TASK_DUMMY2_STACK_SIZE, NULL, TASK_DUMMY2_STACK_PRIORITY, NULL) != pdPASS)
   824b0:	9400      	str	r4, [sp, #0]
   824b2:	9401      	str	r4, [sp, #4]
   824b4:	9402      	str	r4, [sp, #8]
   824b6:	9403      	str	r4, [sp, #12]
   824b8:	480f      	ldr	r0, [pc, #60]	; (824f8 <main+0x70>)
   824ba:	4910      	ldr	r1, [pc, #64]	; (824fc <main+0x74>)
   824bc:	f44f 7280 	mov.w	r2, #256	; 0x100
   824c0:	4623      	mov	r3, r4
   824c2:	47a8      	blx	r5
	{
	}
	if (xTaskCreate(task_uart, (const signed char * const) "task_uart", TASK_LED_STACK_SIZE, NULL, TASK_LED_STACK_PRIORITY, NULL) != pdPASS)
   824c4:	9400      	str	r4, [sp, #0]
   824c6:	9401      	str	r4, [sp, #4]
   824c8:	9402      	str	r4, [sp, #8]
   824ca:	9403      	str	r4, [sp, #12]
   824cc:	480c      	ldr	r0, [pc, #48]	; (82500 <main+0x78>)
   824ce:	490d      	ldr	r1, [pc, #52]	; (82504 <main+0x7c>)
   824d0:	f44f 7280 	mov.w	r2, #256	; 0x100
   824d4:	4623      	mov	r3, r4
   824d6:	47a8      	blx	r5
	{
	}
	vTaskStartScheduler();
   824d8:	4b0b      	ldr	r3, [pc, #44]	; (82508 <main+0x80>)
   824da:	4798      	blx	r3
   824dc:	e7fe      	b.n	824dc <main+0x54>
   824de:	bf00      	nop
   824e0:	0008055d 	.word	0x0008055d
   824e4:	000805c1 	.word	0x000805c1
   824e8:	00082365 	.word	0x00082365
   824ec:	00080485 	.word	0x00080485
   824f0:	00088a98 	.word	0x00088a98
   824f4:	00081565 	.word	0x00081565
   824f8:	000804a9 	.word	0x000804a9
   824fc:	00088aa4 	.word	0x00088aa4
   82500:	000804cd 	.word	0x000804cd
   82504:	00088ab0 	.word	0x00088ab0
   82508:	0008176d 	.word	0x0008176d

0008250c <__libc_init_array>:
   8250c:	b570      	push	{r4, r5, r6, lr}
   8250e:	4e0f      	ldr	r6, [pc, #60]	; (8254c <__libc_init_array+0x40>)
   82510:	4d0f      	ldr	r5, [pc, #60]	; (82550 <__libc_init_array+0x44>)
   82512:	1b76      	subs	r6, r6, r5
   82514:	10b6      	asrs	r6, r6, #2
   82516:	d007      	beq.n	82528 <__libc_init_array+0x1c>
   82518:	3d04      	subs	r5, #4
   8251a:	2400      	movs	r4, #0
   8251c:	3401      	adds	r4, #1
   8251e:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82522:	4798      	blx	r3
   82524:	42a6      	cmp	r6, r4
   82526:	d1f9      	bne.n	8251c <__libc_init_array+0x10>
   82528:	4e0a      	ldr	r6, [pc, #40]	; (82554 <__libc_init_array+0x48>)
   8252a:	4d0b      	ldr	r5, [pc, #44]	; (82558 <__libc_init_array+0x4c>)
   8252c:	f006 fb9a 	bl	88c64 <_init>
   82530:	1b76      	subs	r6, r6, r5
   82532:	10b6      	asrs	r6, r6, #2
   82534:	d008      	beq.n	82548 <__libc_init_array+0x3c>
   82536:	3d04      	subs	r5, #4
   82538:	2400      	movs	r4, #0
   8253a:	3401      	adds	r4, #1
   8253c:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82540:	4798      	blx	r3
   82542:	42a6      	cmp	r6, r4
   82544:	d1f9      	bne.n	8253a <__libc_init_array+0x2e>
   82546:	bd70      	pop	{r4, r5, r6, pc}
   82548:	bd70      	pop	{r4, r5, r6, pc}
   8254a:	bf00      	nop
   8254c:	00088c70 	.word	0x00088c70
   82550:	00088c70 	.word	0x00088c70
   82554:	00088c78 	.word	0x00088c78
   82558:	00088c70 	.word	0x00088c70

0008255c <iprintf>:
   8255c:	b40f      	push	{r0, r1, r2, r3}
   8255e:	b510      	push	{r4, lr}
   82560:	4b07      	ldr	r3, [pc, #28]	; (82580 <iprintf+0x24>)
   82562:	b082      	sub	sp, #8
   82564:	ac04      	add	r4, sp, #16
   82566:	f854 2b04 	ldr.w	r2, [r4], #4
   8256a:	6818      	ldr	r0, [r3, #0]
   8256c:	4623      	mov	r3, r4
   8256e:	6881      	ldr	r1, [r0, #8]
   82570:	9401      	str	r4, [sp, #4]
   82572:	f001 fc83 	bl	83e7c <_vfiprintf_r>
   82576:	b002      	add	sp, #8
   82578:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   8257c:	b004      	add	sp, #16
   8257e:	4770      	bx	lr
   82580:	20070578 	.word	0x20070578

00082584 <memcpy>:
   82584:	4684      	mov	ip, r0
   82586:	ea41 0300 	orr.w	r3, r1, r0
   8258a:	f013 0303 	ands.w	r3, r3, #3
   8258e:	d149      	bne.n	82624 <memcpy+0xa0>
   82590:	3a40      	subs	r2, #64	; 0x40
   82592:	d323      	bcc.n	825dc <memcpy+0x58>
   82594:	680b      	ldr	r3, [r1, #0]
   82596:	6003      	str	r3, [r0, #0]
   82598:	684b      	ldr	r3, [r1, #4]
   8259a:	6043      	str	r3, [r0, #4]
   8259c:	688b      	ldr	r3, [r1, #8]
   8259e:	6083      	str	r3, [r0, #8]
   825a0:	68cb      	ldr	r3, [r1, #12]
   825a2:	60c3      	str	r3, [r0, #12]
   825a4:	690b      	ldr	r3, [r1, #16]
   825a6:	6103      	str	r3, [r0, #16]
   825a8:	694b      	ldr	r3, [r1, #20]
   825aa:	6143      	str	r3, [r0, #20]
   825ac:	698b      	ldr	r3, [r1, #24]
   825ae:	6183      	str	r3, [r0, #24]
   825b0:	69cb      	ldr	r3, [r1, #28]
   825b2:	61c3      	str	r3, [r0, #28]
   825b4:	6a0b      	ldr	r3, [r1, #32]
   825b6:	6203      	str	r3, [r0, #32]
   825b8:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   825ba:	6243      	str	r3, [r0, #36]	; 0x24
   825bc:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   825be:	6283      	str	r3, [r0, #40]	; 0x28
   825c0:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   825c2:	62c3      	str	r3, [r0, #44]	; 0x2c
   825c4:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   825c6:	6303      	str	r3, [r0, #48]	; 0x30
   825c8:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   825ca:	6343      	str	r3, [r0, #52]	; 0x34
   825cc:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   825ce:	6383      	str	r3, [r0, #56]	; 0x38
   825d0:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   825d2:	63c3      	str	r3, [r0, #60]	; 0x3c
   825d4:	3040      	adds	r0, #64	; 0x40
   825d6:	3140      	adds	r1, #64	; 0x40
   825d8:	3a40      	subs	r2, #64	; 0x40
   825da:	d2db      	bcs.n	82594 <memcpy+0x10>
   825dc:	3230      	adds	r2, #48	; 0x30
   825de:	d30b      	bcc.n	825f8 <memcpy+0x74>
   825e0:	680b      	ldr	r3, [r1, #0]
   825e2:	6003      	str	r3, [r0, #0]
   825e4:	684b      	ldr	r3, [r1, #4]
   825e6:	6043      	str	r3, [r0, #4]
   825e8:	688b      	ldr	r3, [r1, #8]
   825ea:	6083      	str	r3, [r0, #8]
   825ec:	68cb      	ldr	r3, [r1, #12]
   825ee:	60c3      	str	r3, [r0, #12]
   825f0:	3010      	adds	r0, #16
   825f2:	3110      	adds	r1, #16
   825f4:	3a10      	subs	r2, #16
   825f6:	d2f3      	bcs.n	825e0 <memcpy+0x5c>
   825f8:	320c      	adds	r2, #12
   825fa:	d305      	bcc.n	82608 <memcpy+0x84>
   825fc:	f851 3b04 	ldr.w	r3, [r1], #4
   82600:	f840 3b04 	str.w	r3, [r0], #4
   82604:	3a04      	subs	r2, #4
   82606:	d2f9      	bcs.n	825fc <memcpy+0x78>
   82608:	3204      	adds	r2, #4
   8260a:	d008      	beq.n	8261e <memcpy+0x9a>
   8260c:	07d2      	lsls	r2, r2, #31
   8260e:	bf1c      	itt	ne
   82610:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82614:	f800 3b01 	strbne.w	r3, [r0], #1
   82618:	d301      	bcc.n	8261e <memcpy+0x9a>
   8261a:	880b      	ldrh	r3, [r1, #0]
   8261c:	8003      	strh	r3, [r0, #0]
   8261e:	4660      	mov	r0, ip
   82620:	4770      	bx	lr
   82622:	bf00      	nop
   82624:	2a08      	cmp	r2, #8
   82626:	d313      	bcc.n	82650 <memcpy+0xcc>
   82628:	078b      	lsls	r3, r1, #30
   8262a:	d0b1      	beq.n	82590 <memcpy+0xc>
   8262c:	f010 0303 	ands.w	r3, r0, #3
   82630:	d0ae      	beq.n	82590 <memcpy+0xc>
   82632:	f1c3 0304 	rsb	r3, r3, #4
   82636:	1ad2      	subs	r2, r2, r3
   82638:	07db      	lsls	r3, r3, #31
   8263a:	bf1c      	itt	ne
   8263c:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82640:	f800 3b01 	strbne.w	r3, [r0], #1
   82644:	d3a4      	bcc.n	82590 <memcpy+0xc>
   82646:	f831 3b02 	ldrh.w	r3, [r1], #2
   8264a:	f820 3b02 	strh.w	r3, [r0], #2
   8264e:	e79f      	b.n	82590 <memcpy+0xc>
   82650:	3a04      	subs	r2, #4
   82652:	d3d9      	bcc.n	82608 <memcpy+0x84>
   82654:	3a01      	subs	r2, #1
   82656:	f811 3b01 	ldrb.w	r3, [r1], #1
   8265a:	f800 3b01 	strb.w	r3, [r0], #1
   8265e:	d2f9      	bcs.n	82654 <memcpy+0xd0>
   82660:	780b      	ldrb	r3, [r1, #0]
   82662:	7003      	strb	r3, [r0, #0]
   82664:	784b      	ldrb	r3, [r1, #1]
   82666:	7043      	strb	r3, [r0, #1]
   82668:	788b      	ldrb	r3, [r1, #2]
   8266a:	7083      	strb	r3, [r0, #2]
   8266c:	4660      	mov	r0, ip
   8266e:	4770      	bx	lr

00082670 <memset>:
   82670:	b4f0      	push	{r4, r5, r6, r7}
   82672:	0784      	lsls	r4, r0, #30
   82674:	d043      	beq.n	826fe <memset+0x8e>
   82676:	1e54      	subs	r4, r2, #1
   82678:	2a00      	cmp	r2, #0
   8267a:	d03e      	beq.n	826fa <memset+0x8a>
   8267c:	b2cd      	uxtb	r5, r1
   8267e:	4603      	mov	r3, r0
   82680:	e003      	b.n	8268a <memset+0x1a>
   82682:	1e62      	subs	r2, r4, #1
   82684:	2c00      	cmp	r4, #0
   82686:	d038      	beq.n	826fa <memset+0x8a>
   82688:	4614      	mov	r4, r2
   8268a:	f803 5b01 	strb.w	r5, [r3], #1
   8268e:	079a      	lsls	r2, r3, #30
   82690:	d1f7      	bne.n	82682 <memset+0x12>
   82692:	2c03      	cmp	r4, #3
   82694:	d92a      	bls.n	826ec <memset+0x7c>
   82696:	b2cd      	uxtb	r5, r1
   82698:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   8269c:	2c0f      	cmp	r4, #15
   8269e:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   826a2:	d915      	bls.n	826d0 <memset+0x60>
   826a4:	f1a4 0710 	sub.w	r7, r4, #16
   826a8:	093f      	lsrs	r7, r7, #4
   826aa:	f103 0610 	add.w	r6, r3, #16
   826ae:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   826b2:	461a      	mov	r2, r3
   826b4:	6015      	str	r5, [r2, #0]
   826b6:	6055      	str	r5, [r2, #4]
   826b8:	6095      	str	r5, [r2, #8]
   826ba:	60d5      	str	r5, [r2, #12]
   826bc:	3210      	adds	r2, #16
   826be:	42b2      	cmp	r2, r6
   826c0:	d1f8      	bne.n	826b4 <memset+0x44>
   826c2:	f004 040f 	and.w	r4, r4, #15
   826c6:	3701      	adds	r7, #1
   826c8:	2c03      	cmp	r4, #3
   826ca:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   826ce:	d90d      	bls.n	826ec <memset+0x7c>
   826d0:	461e      	mov	r6, r3
   826d2:	4622      	mov	r2, r4
   826d4:	3a04      	subs	r2, #4
   826d6:	2a03      	cmp	r2, #3
   826d8:	f846 5b04 	str.w	r5, [r6], #4
   826dc:	d8fa      	bhi.n	826d4 <memset+0x64>
   826de:	1f22      	subs	r2, r4, #4
   826e0:	f022 0203 	bic.w	r2, r2, #3
   826e4:	3204      	adds	r2, #4
   826e6:	4413      	add	r3, r2
   826e8:	f004 0403 	and.w	r4, r4, #3
   826ec:	b12c      	cbz	r4, 826fa <memset+0x8a>
   826ee:	b2c9      	uxtb	r1, r1
   826f0:	441c      	add	r4, r3
   826f2:	f803 1b01 	strb.w	r1, [r3], #1
   826f6:	42a3      	cmp	r3, r4
   826f8:	d1fb      	bne.n	826f2 <memset+0x82>
   826fa:	bcf0      	pop	{r4, r5, r6, r7}
   826fc:	4770      	bx	lr
   826fe:	4614      	mov	r4, r2
   82700:	4603      	mov	r3, r0
   82702:	e7c6      	b.n	82692 <memset+0x22>

00082704 <setbuf>:
   82704:	2900      	cmp	r1, #0
   82706:	bf0c      	ite	eq
   82708:	2202      	moveq	r2, #2
   8270a:	2200      	movne	r2, #0
   8270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
   82710:	f000 b800 	b.w	82714 <setvbuf>

00082714 <setvbuf>:
   82714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   82718:	4d3c      	ldr	r5, [pc, #240]	; (8280c <setvbuf+0xf8>)
   8271a:	4604      	mov	r4, r0
   8271c:	682d      	ldr	r5, [r5, #0]
   8271e:	4688      	mov	r8, r1
   82720:	4616      	mov	r6, r2
   82722:	461f      	mov	r7, r3
   82724:	b115      	cbz	r5, 8272c <setvbuf+0x18>
   82726:	6bab      	ldr	r3, [r5, #56]	; 0x38
   82728:	2b00      	cmp	r3, #0
   8272a:	d04f      	beq.n	827cc <setvbuf+0xb8>
   8272c:	2e02      	cmp	r6, #2
   8272e:	d830      	bhi.n	82792 <setvbuf+0x7e>
   82730:	2f00      	cmp	r7, #0
   82732:	db2e      	blt.n	82792 <setvbuf+0x7e>
   82734:	4628      	mov	r0, r5
   82736:	4621      	mov	r1, r4
   82738:	f003 fad6 	bl	85ce8 <_fflush_r>
   8273c:	89a3      	ldrh	r3, [r4, #12]
   8273e:	2200      	movs	r2, #0
   82740:	6062      	str	r2, [r4, #4]
   82742:	61a2      	str	r2, [r4, #24]
   82744:	061a      	lsls	r2, r3, #24
   82746:	d428      	bmi.n	8279a <setvbuf+0x86>
   82748:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   8274c:	b29b      	uxth	r3, r3
   8274e:	2e02      	cmp	r6, #2
   82750:	81a3      	strh	r3, [r4, #12]
   82752:	d02d      	beq.n	827b0 <setvbuf+0x9c>
   82754:	f1b8 0f00 	cmp.w	r8, #0
   82758:	d03c      	beq.n	827d4 <setvbuf+0xc0>
   8275a:	2e01      	cmp	r6, #1
   8275c:	d013      	beq.n	82786 <setvbuf+0x72>
   8275e:	b29b      	uxth	r3, r3
   82760:	f003 0008 	and.w	r0, r3, #8
   82764:	4a2a      	ldr	r2, [pc, #168]	; (82810 <setvbuf+0xfc>)
   82766:	b280      	uxth	r0, r0
   82768:	63ea      	str	r2, [r5, #60]	; 0x3c
   8276a:	f8c4 8000 	str.w	r8, [r4]
   8276e:	f8c4 8010 	str.w	r8, [r4, #16]
   82772:	6167      	str	r7, [r4, #20]
   82774:	b178      	cbz	r0, 82796 <setvbuf+0x82>
   82776:	f013 0f03 	tst.w	r3, #3
   8277a:	bf18      	it	ne
   8277c:	2700      	movne	r7, #0
   8277e:	60a7      	str	r7, [r4, #8]
   82780:	2000      	movs	r0, #0
   82782:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82786:	f043 0301 	orr.w	r3, r3, #1
   8278a:	427a      	negs	r2, r7
   8278c:	81a3      	strh	r3, [r4, #12]
   8278e:	61a2      	str	r2, [r4, #24]
   82790:	e7e5      	b.n	8275e <setvbuf+0x4a>
   82792:	f04f 30ff 	mov.w	r0, #4294967295
   82796:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   8279a:	4628      	mov	r0, r5
   8279c:	6921      	ldr	r1, [r4, #16]
   8279e:	f003 fc03 	bl	85fa8 <_free_r>
   827a2:	89a3      	ldrh	r3, [r4, #12]
   827a4:	2e02      	cmp	r6, #2
   827a6:	f023 0383 	bic.w	r3, r3, #131	; 0x83
   827aa:	b29b      	uxth	r3, r3
   827ac:	81a3      	strh	r3, [r4, #12]
   827ae:	d1d1      	bne.n	82754 <setvbuf+0x40>
   827b0:	2000      	movs	r0, #0
   827b2:	f104 0243 	add.w	r2, r4, #67	; 0x43
   827b6:	f043 0302 	orr.w	r3, r3, #2
   827ba:	2500      	movs	r5, #0
   827bc:	2101      	movs	r1, #1
   827be:	81a3      	strh	r3, [r4, #12]
   827c0:	60a5      	str	r5, [r4, #8]
   827c2:	6022      	str	r2, [r4, #0]
   827c4:	6122      	str	r2, [r4, #16]
   827c6:	6161      	str	r1, [r4, #20]
   827c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   827cc:	4628      	mov	r0, r5
   827ce:	f003 faa7 	bl	85d20 <__sinit>
   827d2:	e7ab      	b.n	8272c <setvbuf+0x18>
   827d4:	2f00      	cmp	r7, #0
   827d6:	bf08      	it	eq
   827d8:	f44f 6780 	moveq.w	r7, #1024	; 0x400
   827dc:	4638      	mov	r0, r7
   827de:	f003 fedd 	bl	8659c <malloc>
   827e2:	4680      	mov	r8, r0
   827e4:	b128      	cbz	r0, 827f2 <setvbuf+0xde>
   827e6:	89a3      	ldrh	r3, [r4, #12]
   827e8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   827ec:	b29b      	uxth	r3, r3
   827ee:	81a3      	strh	r3, [r4, #12]
   827f0:	e7b3      	b.n	8275a <setvbuf+0x46>
   827f2:	f44f 6080 	mov.w	r0, #1024	; 0x400
   827f6:	f003 fed1 	bl	8659c <malloc>
   827fa:	4680      	mov	r8, r0
   827fc:	b918      	cbnz	r0, 82806 <setvbuf+0xf2>
   827fe:	89a3      	ldrh	r3, [r4, #12]
   82800:	f04f 30ff 	mov.w	r0, #4294967295
   82804:	e7d5      	b.n	827b2 <setvbuf+0x9e>
   82806:	f44f 6780 	mov.w	r7, #1024	; 0x400
   8280a:	e7ec      	b.n	827e6 <setvbuf+0xd2>
   8280c:	20070578 	.word	0x20070578
   82810:	00085d15 	.word	0x00085d15

00082814 <sprintf>:
   82814:	b40e      	push	{r1, r2, r3}
   82816:	b5f0      	push	{r4, r5, r6, r7, lr}
   82818:	b09c      	sub	sp, #112	; 0x70
   8281a:	ac21      	add	r4, sp, #132	; 0x84
   8281c:	f854 2b04 	ldr.w	r2, [r4], #4
   82820:	490e      	ldr	r1, [pc, #56]	; (8285c <sprintf+0x48>)
   82822:	4606      	mov	r6, r0
   82824:	4623      	mov	r3, r4
   82826:	f44f 7e02 	mov.w	lr, #520	; 0x208
   8282a:	f06f 4500 	mvn.w	r5, #2147483648	; 0x80000000
   8282e:	6808      	ldr	r0, [r1, #0]
   82830:	f64f 77ff 	movw	r7, #65535	; 0xffff
   82834:	a902      	add	r1, sp, #8
   82836:	9602      	str	r6, [sp, #8]
   82838:	9606      	str	r6, [sp, #24]
   8283a:	9401      	str	r4, [sp, #4]
   8283c:	f8ad e014 	strh.w	lr, [sp, #20]
   82840:	9504      	str	r5, [sp, #16]
   82842:	9507      	str	r5, [sp, #28]
   82844:	f8ad 7016 	strh.w	r7, [sp, #22]
   82848:	f000 f86c 	bl	82924 <_svfprintf_r>
   8284c:	9b02      	ldr	r3, [sp, #8]
   8284e:	2200      	movs	r2, #0
   82850:	701a      	strb	r2, [r3, #0]
   82852:	b01c      	add	sp, #112	; 0x70
   82854:	e8bd 40f0 	ldmia.w	sp!, {r4, r5, r6, r7, lr}
   82858:	b003      	add	sp, #12
   8285a:	4770      	bx	lr
   8285c:	20070578 	.word	0x20070578

00082860 <strlen>:
   82860:	f020 0103 	bic.w	r1, r0, #3
   82864:	f010 0003 	ands.w	r0, r0, #3
   82868:	f1c0 0000 	rsb	r0, r0, #0
   8286c:	f851 3b04 	ldr.w	r3, [r1], #4
   82870:	f100 0c04 	add.w	ip, r0, #4
   82874:	ea4f 0ccc 	mov.w	ip, ip, lsl #3
   82878:	f06f 0200 	mvn.w	r2, #0
   8287c:	bf1c      	itt	ne
   8287e:	fa22 f20c 	lsrne.w	r2, r2, ip
   82882:	4313      	orrne	r3, r2
   82884:	f04f 0c01 	mov.w	ip, #1
   82888:	ea4c 2c0c 	orr.w	ip, ip, ip, lsl #8
   8288c:	ea4c 4c0c 	orr.w	ip, ip, ip, lsl #16
   82890:	eba3 020c 	sub.w	r2, r3, ip
   82894:	ea22 0203 	bic.w	r2, r2, r3
   82898:	ea12 12cc 	ands.w	r2, r2, ip, lsl #7
   8289c:	bf04      	itt	eq
   8289e:	f851 3b04 	ldreq.w	r3, [r1], #4
   828a2:	3004      	addeq	r0, #4
   828a4:	d0f4      	beq.n	82890 <strlen+0x30>
   828a6:	f013 0fff 	tst.w	r3, #255	; 0xff
   828aa:	bf1f      	itttt	ne
   828ac:	3001      	addne	r0, #1
   828ae:	f413 4f7f 	tstne.w	r3, #65280	; 0xff00
   828b2:	3001      	addne	r0, #1
   828b4:	f413 0f7f 	tstne.w	r3, #16711680	; 0xff0000
   828b8:	bf18      	it	ne
   828ba:	3001      	addne	r0, #1
   828bc:	4770      	bx	lr
   828be:	bf00      	nop

000828c0 <strncpy>:
   828c0:	ea40 0301 	orr.w	r3, r0, r1
   828c4:	079b      	lsls	r3, r3, #30
   828c6:	b470      	push	{r4, r5, r6}
   828c8:	d12a      	bne.n	82920 <strncpy+0x60>
   828ca:	2a03      	cmp	r2, #3
   828cc:	d928      	bls.n	82920 <strncpy+0x60>
   828ce:	460c      	mov	r4, r1
   828d0:	4603      	mov	r3, r0
   828d2:	4621      	mov	r1, r4
   828d4:	f854 5b04 	ldr.w	r5, [r4], #4
   828d8:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   828dc:	ea26 0605 	bic.w	r6, r6, r5
   828e0:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   828e4:	d105      	bne.n	828f2 <strncpy+0x32>
   828e6:	3a04      	subs	r2, #4
   828e8:	2a03      	cmp	r2, #3
   828ea:	f843 5b04 	str.w	r5, [r3], #4
   828ee:	4621      	mov	r1, r4
   828f0:	d8ef      	bhi.n	828d2 <strncpy+0x12>
   828f2:	b19a      	cbz	r2, 8291c <strncpy+0x5c>
   828f4:	780c      	ldrb	r4, [r1, #0]
   828f6:	3a01      	subs	r2, #1
   828f8:	701c      	strb	r4, [r3, #0]
   828fa:	3301      	adds	r3, #1
   828fc:	b13c      	cbz	r4, 8290e <strncpy+0x4e>
   828fe:	b16a      	cbz	r2, 8291c <strncpy+0x5c>
   82900:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   82904:	3a01      	subs	r2, #1
   82906:	f803 4b01 	strb.w	r4, [r3], #1
   8290a:	2c00      	cmp	r4, #0
   8290c:	d1f7      	bne.n	828fe <strncpy+0x3e>
   8290e:	b12a      	cbz	r2, 8291c <strncpy+0x5c>
   82910:	441a      	add	r2, r3
   82912:	2100      	movs	r1, #0
   82914:	f803 1b01 	strb.w	r1, [r3], #1
   82918:	4293      	cmp	r3, r2
   8291a:	d1fb      	bne.n	82914 <strncpy+0x54>
   8291c:	bc70      	pop	{r4, r5, r6}
   8291e:	4770      	bx	lr
   82920:	4603      	mov	r3, r0
   82922:	e7e6      	b.n	828f2 <strncpy+0x32>

00082924 <_svfprintf_r>:
   82924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   82928:	b0c9      	sub	sp, #292	; 0x124
   8292a:	9310      	str	r3, [sp, #64]	; 0x40
   8292c:	910c      	str	r1, [sp, #48]	; 0x30
   8292e:	4691      	mov	r9, r2
   82930:	900d      	str	r0, [sp, #52]	; 0x34
   82932:	f003 fdbf 	bl	864b4 <_localeconv_r>
   82936:	6800      	ldr	r0, [r0, #0]
   82938:	9015      	str	r0, [sp, #84]	; 0x54
   8293a:	f7ff ff91 	bl	82860 <strlen>
   8293e:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82940:	9018      	str	r0, [sp, #96]	; 0x60
   82942:	89a3      	ldrh	r3, [r4, #12]
   82944:	061e      	lsls	r6, r3, #24
   82946:	d503      	bpl.n	82950 <_svfprintf_r+0x2c>
   82948:	6923      	ldr	r3, [r4, #16]
   8294a:	2b00      	cmp	r3, #0
   8294c:	f001 8081 	beq.w	83a52 <_svfprintf_r+0x112e>
   82950:	ac38      	add	r4, sp, #224	; 0xe0
   82952:	46a4      	mov	ip, r4
   82954:	9408      	str	r4, [sp, #32]
   82956:	942b      	str	r4, [sp, #172]	; 0xac
   82958:	2500      	movs	r5, #0
   8295a:	2400      	movs	r4, #0
   8295c:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   82960:	2300      	movs	r3, #0
   82962:	9311      	str	r3, [sp, #68]	; 0x44
   82964:	932d      	str	r3, [sp, #180]	; 0xb4
   82966:	932c      	str	r3, [sp, #176]	; 0xb0
   82968:	931a      	str	r3, [sp, #104]	; 0x68
   8296a:	9319      	str	r3, [sp, #100]	; 0x64
   8296c:	930e      	str	r3, [sp, #56]	; 0x38
   8296e:	4666      	mov	r6, ip
   82970:	f899 3000 	ldrb.w	r3, [r9]
   82974:	2b00      	cmp	r3, #0
   82976:	f000 80f8 	beq.w	82b6a <_svfprintf_r+0x246>
   8297a:	2b25      	cmp	r3, #37	; 0x25
   8297c:	f000 80f5 	beq.w	82b6a <_svfprintf_r+0x246>
   82980:	f109 0201 	add.w	r2, r9, #1
   82984:	e001      	b.n	8298a <_svfprintf_r+0x66>
   82986:	2b25      	cmp	r3, #37	; 0x25
   82988:	d004      	beq.n	82994 <_svfprintf_r+0x70>
   8298a:	7813      	ldrb	r3, [r2, #0]
   8298c:	4614      	mov	r4, r2
   8298e:	3201      	adds	r2, #1
   82990:	2b00      	cmp	r3, #0
   82992:	d1f8      	bne.n	82986 <_svfprintf_r+0x62>
   82994:	ebc9 0504 	rsb	r5, r9, r4
   82998:	b17d      	cbz	r5, 829ba <_svfprintf_r+0x96>
   8299a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8299c:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   8299e:	3301      	adds	r3, #1
   829a0:	442a      	add	r2, r5
   829a2:	2b07      	cmp	r3, #7
   829a4:	f8c6 9000 	str.w	r9, [r6]
   829a8:	6075      	str	r5, [r6, #4]
   829aa:	922d      	str	r2, [sp, #180]	; 0xb4
   829ac:	932c      	str	r3, [sp, #176]	; 0xb0
   829ae:	f300 80c2 	bgt.w	82b36 <_svfprintf_r+0x212>
   829b2:	3608      	adds	r6, #8
   829b4:	980e      	ldr	r0, [sp, #56]	; 0x38
   829b6:	4428      	add	r0, r5
   829b8:	900e      	str	r0, [sp, #56]	; 0x38
   829ba:	7823      	ldrb	r3, [r4, #0]
   829bc:	2b00      	cmp	r3, #0
   829be:	f000 80c2 	beq.w	82b46 <_svfprintf_r+0x222>
   829c2:	2300      	movs	r3, #0
   829c4:	f894 8001 	ldrb.w	r8, [r4, #1]
   829c8:	461a      	mov	r2, r3
   829ca:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   829ce:	930f      	str	r3, [sp, #60]	; 0x3c
   829d0:	9309      	str	r3, [sp, #36]	; 0x24
   829d2:	f104 0901 	add.w	r9, r4, #1
   829d6:	f04f 34ff 	mov.w	r4, #4294967295
   829da:	940a      	str	r4, [sp, #40]	; 0x28
   829dc:	f109 0901 	add.w	r9, r9, #1
   829e0:	f1a8 0320 	sub.w	r3, r8, #32
   829e4:	2b58      	cmp	r3, #88	; 0x58
   829e6:	f200 83c5 	bhi.w	83174 <_svfprintf_r+0x850>
   829ea:	e8df f013 	tbh	[pc, r3, lsl #1]
   829ee:	026a      	.short	0x026a
   829f0:	03c303c3 	.word	0x03c303c3
   829f4:	03c30271 	.word	0x03c30271
   829f8:	03c303c3 	.word	0x03c303c3
   829fc:	03c303c3 	.word	0x03c303c3
   82a00:	031403c3 	.word	0x031403c3
   82a04:	03c30366 	.word	0x03c30366
   82a08:	00c0009d 	.word	0x00c0009d
   82a0c:	027803c3 	.word	0x027803c3
   82a10:	027f027f 	.word	0x027f027f
   82a14:	027f027f 	.word	0x027f027f
   82a18:	027f027f 	.word	0x027f027f
   82a1c:	027f027f 	.word	0x027f027f
   82a20:	03c3027f 	.word	0x03c3027f
   82a24:	03c303c3 	.word	0x03c303c3
   82a28:	03c303c3 	.word	0x03c303c3
   82a2c:	03c303c3 	.word	0x03c303c3
   82a30:	03c303c3 	.word	0x03c303c3
   82a34:	029003c3 	.word	0x029003c3
   82a38:	03c30371 	.word	0x03c30371
   82a3c:	03c30371 	.word	0x03c30371
   82a40:	03c303c3 	.word	0x03c303c3
   82a44:	036a03c3 	.word	0x036a03c3
   82a48:	03c303c3 	.word	0x03c303c3
   82a4c:	03c30078 	.word	0x03c30078
   82a50:	03c303c3 	.word	0x03c303c3
   82a54:	03c303c3 	.word	0x03c303c3
   82a58:	03c30059 	.word	0x03c30059
   82a5c:	02af03c3 	.word	0x02af03c3
   82a60:	03c303c3 	.word	0x03c303c3
   82a64:	03c303c3 	.word	0x03c303c3
   82a68:	03c303c3 	.word	0x03c303c3
   82a6c:	03c303c3 	.word	0x03c303c3
   82a70:	03c303c3 	.word	0x03c303c3
   82a74:	03480337 	.word	0x03480337
   82a78:	03710371 	.word	0x03710371
   82a7c:	02ff0371 	.word	0x02ff0371
   82a80:	03c30348 	.word	0x03c30348
   82a84:	030803c3 	.word	0x030803c3
   82a88:	02c503c3 	.word	0x02c503c3
   82a8c:	0320007c 	.word	0x0320007c
   82a90:	03c303a3 	.word	0x03c303a3
   82a94:	03c302d9 	.word	0x03c302d9
   82a98:	03c3005f 	.word	0x03c3005f
   82a9c:	00de03c3 	.word	0x00de03c3
   82aa0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82aa4:	f04c 0c10 	orr.w	ip, ip, #16
   82aa8:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   82aac:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82aae:	06a2      	lsls	r2, r4, #26
   82ab0:	f100 8354 	bmi.w	8315c <_svfprintf_r+0x838>
   82ab4:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82ab6:	06e3      	lsls	r3, r4, #27
   82ab8:	f100 85bd 	bmi.w	83636 <_svfprintf_r+0xd12>
   82abc:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82ac0:	f01c 0f40 	tst.w	ip, #64	; 0x40
   82ac4:	f000 85b7 	beq.w	83636 <_svfprintf_r+0xd12>
   82ac8:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82acc:	2500      	movs	r5, #0
   82ace:	f8bc 4000 	ldrh.w	r4, [ip]
   82ad2:	f10c 0c04 	add.w	ip, ip, #4
   82ad6:	2301      	movs	r3, #1
   82ad8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   82adc:	e08c      	b.n	82bf8 <_svfprintf_r+0x2d4>
   82ade:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82ae0:	f045 0510 	orr.w	r5, r5, #16
   82ae4:	9509      	str	r5, [sp, #36]	; 0x24
   82ae6:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82aea:	f01c 0320 	ands.w	r3, ip, #32
   82aee:	f040 832a 	bne.w	83146 <_svfprintf_r+0x822>
   82af2:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82af6:	f01c 0210 	ands.w	r2, ip, #16
   82afa:	f040 85a4 	bne.w	83646 <_svfprintf_r+0xd22>
   82afe:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82b02:	f01c 0340 	ands.w	r3, ip, #64	; 0x40
   82b06:	f000 859e 	beq.w	83646 <_svfprintf_r+0xd22>
   82b0a:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82b0e:	4613      	mov	r3, r2
   82b10:	f8bc 4000 	ldrh.w	r4, [ip]
   82b14:	f10c 0c04 	add.w	ip, ip, #4
   82b18:	2500      	movs	r5, #0
   82b1a:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   82b1e:	e06b      	b.n	82bf8 <_svfprintf_r+0x2d4>
   82b20:	9c0f      	ldr	r4, [sp, #60]	; 0x3c
   82b22:	9310      	str	r3, [sp, #64]	; 0x40
   82b24:	4264      	negs	r4, r4
   82b26:	940f      	str	r4, [sp, #60]	; 0x3c
   82b28:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82b2a:	f045 0504 	orr.w	r5, r5, #4
   82b2e:	9509      	str	r5, [sp, #36]	; 0x24
   82b30:	f899 8000 	ldrb.w	r8, [r9]
   82b34:	e752      	b.n	829dc <_svfprintf_r+0xb8>
   82b36:	980d      	ldr	r0, [sp, #52]	; 0x34
   82b38:	990c      	ldr	r1, [sp, #48]	; 0x30
   82b3a:	aa2b      	add	r2, sp, #172	; 0xac
   82b3c:	f004 fdec 	bl	87718 <__ssprint_r>
   82b40:	b940      	cbnz	r0, 82b54 <_svfprintf_r+0x230>
   82b42:	ae38      	add	r6, sp, #224	; 0xe0
   82b44:	e736      	b.n	829b4 <_svfprintf_r+0x90>
   82b46:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   82b48:	b123      	cbz	r3, 82b54 <_svfprintf_r+0x230>
   82b4a:	980d      	ldr	r0, [sp, #52]	; 0x34
   82b4c:	990c      	ldr	r1, [sp, #48]	; 0x30
   82b4e:	aa2b      	add	r2, sp, #172	; 0xac
   82b50:	f004 fde2 	bl	87718 <__ssprint_r>
   82b54:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   82b56:	980e      	ldr	r0, [sp, #56]	; 0x38
   82b58:	89a3      	ldrh	r3, [r4, #12]
   82b5a:	f013 0f40 	tst.w	r3, #64	; 0x40
   82b5e:	bf18      	it	ne
   82b60:	f04f 30ff 	movne.w	r0, #4294967295
   82b64:	b049      	add	sp, #292	; 0x124
   82b66:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82b6a:	464c      	mov	r4, r9
   82b6c:	e725      	b.n	829ba <_svfprintf_r+0x96>
   82b6e:	f899 8000 	ldrb.w	r8, [r9]
   82b72:	f109 0001 	add.w	r0, r9, #1
   82b76:	f1b8 0f2a 	cmp.w	r8, #42	; 0x2a
   82b7a:	f001 810c 	beq.w	83d96 <_svfprintf_r+0x1472>
   82b7e:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   82b82:	2b09      	cmp	r3, #9
   82b84:	bf98      	it	ls
   82b86:	2100      	movls	r1, #0
   82b88:	f201 806b 	bhi.w	83c62 <_svfprintf_r+0x133e>
   82b8c:	f810 8b01 	ldrb.w	r8, [r0], #1
   82b90:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82b94:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   82b98:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   82b9c:	2b09      	cmp	r3, #9
   82b9e:	d9f5      	bls.n	82b8c <_svfprintf_r+0x268>
   82ba0:	ea41 71e1 	orr.w	r1, r1, r1, asr #31
   82ba4:	910a      	str	r1, [sp, #40]	; 0x28
   82ba6:	4681      	mov	r9, r0
   82ba8:	e71a      	b.n	829e0 <_svfprintf_r+0xbc>
   82baa:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82bac:	4ca1      	ldr	r4, [pc, #644]	; (82e34 <_svfprintf_r+0x510>)
   82bae:	06af      	lsls	r7, r5, #26
   82bb0:	941a      	str	r4, [sp, #104]	; 0x68
   82bb2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   82bb6:	f140 81d1 	bpl.w	82f5c <_svfprintf_r+0x638>
   82bba:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82bbe:	f10c 0307 	add.w	r3, ip, #7
   82bc2:	f023 0307 	bic.w	r3, r3, #7
   82bc6:	f103 0408 	add.w	r4, r3, #8
   82bca:	9410      	str	r4, [sp, #64]	; 0x40
   82bcc:	e9d3 4500 	ldrd	r4, r5, [r3]
   82bd0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82bd4:	f01c 0f01 	tst.w	ip, #1
   82bd8:	f000 8462 	beq.w	834a0 <_svfprintf_r+0xb7c>
   82bdc:	ea54 0005 	orrs.w	r0, r4, r5
   82be0:	f000 845e 	beq.w	834a0 <_svfprintf_r+0xb7c>
   82be4:	2330      	movs	r3, #48	; 0x30
   82be6:	f04c 0c02 	orr.w	ip, ip, #2
   82bea:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   82bee:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   82bf2:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   82bf6:	2302      	movs	r3, #2
   82bf8:	f04f 0a00 	mov.w	sl, #0
   82bfc:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   82c00:	990a      	ldr	r1, [sp, #40]	; 0x28
   82c02:	2900      	cmp	r1, #0
   82c04:	db05      	blt.n	82c12 <_svfprintf_r+0x2ee>
   82c06:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82c0a:	f02c 0c80 	bic.w	ip, ip, #128	; 0x80
   82c0e:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   82c12:	ea54 0005 	orrs.w	r0, r4, r5
   82c16:	f040 82c5 	bne.w	831a4 <_svfprintf_r+0x880>
   82c1a:	990a      	ldr	r1, [sp, #40]	; 0x28
   82c1c:	2900      	cmp	r1, #0
   82c1e:	f040 82c1 	bne.w	831a4 <_svfprintf_r+0x880>
   82c22:	2b00      	cmp	r3, #0
   82c24:	f040 8438 	bne.w	83498 <_svfprintf_r+0xb74>
   82c28:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82c2c:	f01c 0f01 	tst.w	ip, #1
   82c30:	f000 8432 	beq.w	83498 <_svfprintf_r+0xb74>
   82c34:	af48      	add	r7, sp, #288	; 0x120
   82c36:	2330      	movs	r3, #48	; 0x30
   82c38:	9d08      	ldr	r5, [sp, #32]
   82c3a:	f807 3d41 	strb.w	r3, [r7, #-65]!
   82c3e:	1bec      	subs	r4, r5, r7
   82c40:	f8dd c028 	ldr.w	ip, [sp, #40]	; 0x28
   82c44:	2500      	movs	r5, #0
   82c46:	4564      	cmp	r4, ip
   82c48:	bfa8      	it	ge
   82c4a:	46a4      	movge	ip, r4
   82c4c:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   82c50:	9514      	str	r5, [sp, #80]	; 0x50
   82c52:	f1ba 0f00 	cmp.w	sl, #0
   82c56:	d002      	beq.n	82c5e <_svfprintf_r+0x33a>
   82c58:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82c5a:	3501      	adds	r5, #1
   82c5c:	950b      	str	r5, [sp, #44]	; 0x2c
   82c5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
   82c60:	f013 0302 	ands.w	r3, r3, #2
   82c64:	9312      	str	r3, [sp, #72]	; 0x48
   82c66:	d002      	beq.n	82c6e <_svfprintf_r+0x34a>
   82c68:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   82c6a:	3502      	adds	r5, #2
   82c6c:	950b      	str	r5, [sp, #44]	; 0x2c
   82c6e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82c72:	f01c 0c84 	ands.w	ip, ip, #132	; 0x84
   82c76:	f8cd c04c 	str.w	ip, [sp, #76]	; 0x4c
   82c7a:	f040 8290 	bne.w	8319e <_svfprintf_r+0x87a>
   82c7e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   82c80:	f8dd c02c 	ldr.w	ip, [sp, #44]	; 0x2c
   82c84:	ebcc 0b05 	rsb	fp, ip, r5
   82c88:	f1bb 0f00 	cmp.w	fp, #0
   82c8c:	f340 8287 	ble.w	8319e <_svfprintf_r+0x87a>
   82c90:	f1bb 0f10 	cmp.w	fp, #16
   82c94:	992d      	ldr	r1, [sp, #180]	; 0xb4
   82c96:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   82c98:	f8df a1a0 	ldr.w	sl, [pc, #416]	; 82e3c <_svfprintf_r+0x518>
   82c9c:	dd2c      	ble.n	82cf8 <_svfprintf_r+0x3d4>
   82c9e:	971b      	str	r7, [sp, #108]	; 0x6c
   82ca0:	4630      	mov	r0, r6
   82ca2:	4657      	mov	r7, sl
   82ca4:	2510      	movs	r5, #16
   82ca6:	46ca      	mov	sl, r9
   82ca8:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   82caa:	46a1      	mov	r9, r4
   82cac:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   82cae:	e006      	b.n	82cbe <_svfprintf_r+0x39a>
   82cb0:	f1ab 0b10 	sub.w	fp, fp, #16
   82cb4:	f1bb 0f10 	cmp.w	fp, #16
   82cb8:	f100 0008 	add.w	r0, r0, #8
   82cbc:	dd17      	ble.n	82cee <_svfprintf_r+0x3ca>
   82cbe:	3201      	adds	r2, #1
   82cc0:	3110      	adds	r1, #16
   82cc2:	2a07      	cmp	r2, #7
   82cc4:	912d      	str	r1, [sp, #180]	; 0xb4
   82cc6:	922c      	str	r2, [sp, #176]	; 0xb0
   82cc8:	6007      	str	r7, [r0, #0]
   82cca:	6045      	str	r5, [r0, #4]
   82ccc:	ddf0      	ble.n	82cb0 <_svfprintf_r+0x38c>
   82cce:	4620      	mov	r0, r4
   82cd0:	4631      	mov	r1, r6
   82cd2:	aa2b      	add	r2, sp, #172	; 0xac
   82cd4:	f004 fd20 	bl	87718 <__ssprint_r>
   82cd8:	2800      	cmp	r0, #0
   82cda:	f47f af3b 	bne.w	82b54 <_svfprintf_r+0x230>
   82cde:	f1ab 0b10 	sub.w	fp, fp, #16
   82ce2:	f1bb 0f10 	cmp.w	fp, #16
   82ce6:	992d      	ldr	r1, [sp, #180]	; 0xb4
   82ce8:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   82cea:	a838      	add	r0, sp, #224	; 0xe0
   82cec:	dce7      	bgt.n	82cbe <_svfprintf_r+0x39a>
   82cee:	464c      	mov	r4, r9
   82cf0:	46d1      	mov	r9, sl
   82cf2:	46ba      	mov	sl, r7
   82cf4:	9f1b      	ldr	r7, [sp, #108]	; 0x6c
   82cf6:	4606      	mov	r6, r0
   82cf8:	3201      	adds	r2, #1
   82cfa:	eb0b 0c01 	add.w	ip, fp, r1
   82cfe:	2a07      	cmp	r2, #7
   82d00:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   82d04:	922c      	str	r2, [sp, #176]	; 0xb0
   82d06:	e886 0c00 	stmia.w	r6, {sl, fp}
   82d0a:	f300 841a 	bgt.w	83542 <_svfprintf_r+0xc1e>
   82d0e:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   82d12:	3608      	adds	r6, #8
   82d14:	f1ba 0f00 	cmp.w	sl, #0
   82d18:	d00f      	beq.n	82d3a <_svfprintf_r+0x416>
   82d1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82d1c:	f10c 0c01 	add.w	ip, ip, #1
   82d20:	3301      	adds	r3, #1
   82d22:	f10d 018f 	add.w	r1, sp, #143	; 0x8f
   82d26:	2201      	movs	r2, #1
   82d28:	2b07      	cmp	r3, #7
   82d2a:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   82d2e:	932c      	str	r3, [sp, #176]	; 0xb0
   82d30:	e886 0006 	stmia.w	r6, {r1, r2}
   82d34:	f300 83a4 	bgt.w	83480 <_svfprintf_r+0xb5c>
   82d38:	3608      	adds	r6, #8
   82d3a:	9b12      	ldr	r3, [sp, #72]	; 0x48
   82d3c:	b173      	cbz	r3, 82d5c <_svfprintf_r+0x438>
   82d3e:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82d40:	f10c 0c02 	add.w	ip, ip, #2
   82d44:	3301      	adds	r3, #1
   82d46:	a924      	add	r1, sp, #144	; 0x90
   82d48:	2202      	movs	r2, #2
   82d4a:	2b07      	cmp	r3, #7
   82d4c:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   82d50:	932c      	str	r3, [sp, #176]	; 0xb0
   82d52:	e886 0006 	stmia.w	r6, {r1, r2}
   82d56:	f300 8387 	bgt.w	83468 <_svfprintf_r+0xb44>
   82d5a:	3608      	adds	r6, #8
   82d5c:	9d13      	ldr	r5, [sp, #76]	; 0x4c
   82d5e:	2d80      	cmp	r5, #128	; 0x80
   82d60:	f000 82ca 	beq.w	832f8 <_svfprintf_r+0x9d4>
   82d64:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82d66:	ebc4 0a05 	rsb	sl, r4, r5
   82d6a:	f1ba 0f00 	cmp.w	sl, #0
   82d6e:	dd3b      	ble.n	82de8 <_svfprintf_r+0x4c4>
   82d70:	f1ba 0f10 	cmp.w	sl, #16
   82d74:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82d76:	4d30      	ldr	r5, [pc, #192]	; (82e38 <_svfprintf_r+0x514>)
   82d78:	dd2b      	ble.n	82dd2 <_svfprintf_r+0x4ae>
   82d7a:	940a      	str	r4, [sp, #40]	; 0x28
   82d7c:	4632      	mov	r2, r6
   82d7e:	f04f 0b10 	mov.w	fp, #16
   82d82:	462e      	mov	r6, r5
   82d84:	4661      	mov	r1, ip
   82d86:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   82d88:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   82d8a:	e006      	b.n	82d9a <_svfprintf_r+0x476>
   82d8c:	f1aa 0a10 	sub.w	sl, sl, #16
   82d90:	f1ba 0f10 	cmp.w	sl, #16
   82d94:	f102 0208 	add.w	r2, r2, #8
   82d98:	dd17      	ble.n	82dca <_svfprintf_r+0x4a6>
   82d9a:	3301      	adds	r3, #1
   82d9c:	3110      	adds	r1, #16
   82d9e:	2b07      	cmp	r3, #7
   82da0:	912d      	str	r1, [sp, #180]	; 0xb4
   82da2:	932c      	str	r3, [sp, #176]	; 0xb0
   82da4:	e882 0840 	stmia.w	r2, {r6, fp}
   82da8:	ddf0      	ble.n	82d8c <_svfprintf_r+0x468>
   82daa:	4620      	mov	r0, r4
   82dac:	4629      	mov	r1, r5
   82dae:	aa2b      	add	r2, sp, #172	; 0xac
   82db0:	f004 fcb2 	bl	87718 <__ssprint_r>
   82db4:	2800      	cmp	r0, #0
   82db6:	f47f aecd 	bne.w	82b54 <_svfprintf_r+0x230>
   82dba:	f1aa 0a10 	sub.w	sl, sl, #16
   82dbe:	f1ba 0f10 	cmp.w	sl, #16
   82dc2:	992d      	ldr	r1, [sp, #180]	; 0xb4
   82dc4:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82dc6:	aa38      	add	r2, sp, #224	; 0xe0
   82dc8:	dce7      	bgt.n	82d9a <_svfprintf_r+0x476>
   82dca:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   82dcc:	4635      	mov	r5, r6
   82dce:	468c      	mov	ip, r1
   82dd0:	4616      	mov	r6, r2
   82dd2:	3301      	adds	r3, #1
   82dd4:	44d4      	add	ip, sl
   82dd6:	2b07      	cmp	r3, #7
   82dd8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   82ddc:	932c      	str	r3, [sp, #176]	; 0xb0
   82dde:	e886 0420 	stmia.w	r6, {r5, sl}
   82de2:	f300 8335 	bgt.w	83450 <_svfprintf_r+0xb2c>
   82de6:	3608      	adds	r6, #8
   82de8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82dea:	05ed      	lsls	r5, r5, #23
   82dec:	f100 8224 	bmi.w	83238 <_svfprintf_r+0x914>
   82df0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82df2:	44a4      	add	ip, r4
   82df4:	3301      	adds	r3, #1
   82df6:	2b07      	cmp	r3, #7
   82df8:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   82dfc:	6037      	str	r7, [r6, #0]
   82dfe:	6074      	str	r4, [r6, #4]
   82e00:	932c      	str	r3, [sp, #176]	; 0xb0
   82e02:	f300 830f 	bgt.w	83424 <_svfprintf_r+0xb00>
   82e06:	3608      	adds	r6, #8
   82e08:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82e0a:	0763      	lsls	r3, r4, #29
   82e0c:	d549      	bpl.n	82ea2 <_svfprintf_r+0x57e>
   82e0e:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   82e10:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82e12:	1a2c      	subs	r4, r5, r0
   82e14:	2c00      	cmp	r4, #0
   82e16:	dd44      	ble.n	82ea2 <_svfprintf_r+0x57e>
   82e18:	2c10      	cmp	r4, #16
   82e1a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82e1c:	f8df a01c 	ldr.w	sl, [pc, #28]	; 82e3c <_svfprintf_r+0x518>
   82e20:	dd2b      	ble.n	82e7a <_svfprintf_r+0x556>
   82e22:	4657      	mov	r7, sl
   82e24:	2510      	movs	r5, #16
   82e26:	4662      	mov	r2, ip
   82e28:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
   82e2c:	f8dd a034 	ldr.w	sl, [sp, #52]	; 0x34
   82e30:	e00b      	b.n	82e4a <_svfprintf_r+0x526>
   82e32:	bf00      	nop
   82e34:	00088af8 	.word	0x00088af8
   82e38:	00088ac4 	.word	0x00088ac4
   82e3c:	00088b18 	.word	0x00088b18
   82e40:	3c10      	subs	r4, #16
   82e42:	2c10      	cmp	r4, #16
   82e44:	f106 0608 	add.w	r6, r6, #8
   82e48:	dd15      	ble.n	82e76 <_svfprintf_r+0x552>
   82e4a:	3301      	adds	r3, #1
   82e4c:	3210      	adds	r2, #16
   82e4e:	2b07      	cmp	r3, #7
   82e50:	922d      	str	r2, [sp, #180]	; 0xb4
   82e52:	932c      	str	r3, [sp, #176]	; 0xb0
   82e54:	6037      	str	r7, [r6, #0]
   82e56:	6075      	str	r5, [r6, #4]
   82e58:	ddf2      	ble.n	82e40 <_svfprintf_r+0x51c>
   82e5a:	4650      	mov	r0, sl
   82e5c:	4641      	mov	r1, r8
   82e5e:	aa2b      	add	r2, sp, #172	; 0xac
   82e60:	f004 fc5a 	bl	87718 <__ssprint_r>
   82e64:	2800      	cmp	r0, #0
   82e66:	f47f ae75 	bne.w	82b54 <_svfprintf_r+0x230>
   82e6a:	3c10      	subs	r4, #16
   82e6c:	2c10      	cmp	r4, #16
   82e6e:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   82e70:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   82e72:	ae38      	add	r6, sp, #224	; 0xe0
   82e74:	dce9      	bgt.n	82e4a <_svfprintf_r+0x526>
   82e76:	4694      	mov	ip, r2
   82e78:	46ba      	mov	sl, r7
   82e7a:	3301      	adds	r3, #1
   82e7c:	44a4      	add	ip, r4
   82e7e:	2b07      	cmp	r3, #7
   82e80:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   82e84:	932c      	str	r3, [sp, #176]	; 0xb0
   82e86:	f8c6 a000 	str.w	sl, [r6]
   82e8a:	6074      	str	r4, [r6, #4]
   82e8c:	dd09      	ble.n	82ea2 <_svfprintf_r+0x57e>
   82e8e:	980d      	ldr	r0, [sp, #52]	; 0x34
   82e90:	990c      	ldr	r1, [sp, #48]	; 0x30
   82e92:	aa2b      	add	r2, sp, #172	; 0xac
   82e94:	f004 fc40 	bl	87718 <__ssprint_r>
   82e98:	2800      	cmp	r0, #0
   82e9a:	f47f ae5b 	bne.w	82b54 <_svfprintf_r+0x230>
   82e9e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   82ea2:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   82ea4:	980b      	ldr	r0, [sp, #44]	; 0x2c
   82ea6:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   82ea8:	42a8      	cmp	r0, r5
   82eaa:	bfac      	ite	ge
   82eac:	1824      	addge	r4, r4, r0
   82eae:	1964      	addlt	r4, r4, r5
   82eb0:	940e      	str	r4, [sp, #56]	; 0x38
   82eb2:	f1bc 0f00 	cmp.w	ip, #0
   82eb6:	f040 82c1 	bne.w	8343c <_svfprintf_r+0xb18>
   82eba:	2300      	movs	r3, #0
   82ebc:	932c      	str	r3, [sp, #176]	; 0xb0
   82ebe:	ae38      	add	r6, sp, #224	; 0xe0
   82ec0:	e556      	b.n	82970 <_svfprintf_r+0x4c>
   82ec2:	f899 8000 	ldrb.w	r8, [r9]
   82ec6:	2a00      	cmp	r2, #0
   82ec8:	f47f ad88 	bne.w	829dc <_svfprintf_r+0xb8>
   82ecc:	2220      	movs	r2, #32
   82ece:	e585      	b.n	829dc <_svfprintf_r+0xb8>
   82ed0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82ed2:	f045 0501 	orr.w	r5, r5, #1
   82ed6:	9509      	str	r5, [sp, #36]	; 0x24
   82ed8:	f899 8000 	ldrb.w	r8, [r9]
   82edc:	e57e      	b.n	829dc <_svfprintf_r+0xb8>
   82ede:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82ee0:	f045 0580 	orr.w	r5, r5, #128	; 0x80
   82ee4:	9509      	str	r5, [sp, #36]	; 0x24
   82ee6:	f899 8000 	ldrb.w	r8, [r9]
   82eea:	e577      	b.n	829dc <_svfprintf_r+0xb8>
   82eec:	2400      	movs	r4, #0
   82eee:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   82ef2:	940f      	str	r4, [sp, #60]	; 0x3c
   82ef4:	4621      	mov	r1, r4
   82ef6:	f819 8b01 	ldrb.w	r8, [r9], #1
   82efa:	eb01 0181 	add.w	r1, r1, r1, lsl #2
   82efe:	eb03 0141 	add.w	r1, r3, r1, lsl #1
   82f02:	f1a8 0330 	sub.w	r3, r8, #48	; 0x30
   82f06:	2b09      	cmp	r3, #9
   82f08:	d9f5      	bls.n	82ef6 <_svfprintf_r+0x5d2>
   82f0a:	910f      	str	r1, [sp, #60]	; 0x3c
   82f0c:	e568      	b.n	829e0 <_svfprintf_r+0xbc>
   82f0e:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82f12:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   82f16:	f04c 0c10 	orr.w	ip, ip, #16
   82f1a:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   82f1e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   82f20:	06a5      	lsls	r5, r4, #26
   82f22:	f140 80b2 	bpl.w	8308a <_svfprintf_r+0x766>
   82f26:	9d10      	ldr	r5, [sp, #64]	; 0x40
   82f28:	1de9      	adds	r1, r5, #7
   82f2a:	f021 0107 	bic.w	r1, r1, #7
   82f2e:	e9d1 2300 	ldrd	r2, r3, [r1]
   82f32:	3108      	adds	r1, #8
   82f34:	9110      	str	r1, [sp, #64]	; 0x40
   82f36:	4614      	mov	r4, r2
   82f38:	461d      	mov	r5, r3
   82f3a:	2a00      	cmp	r2, #0
   82f3c:	f173 0c00 	sbcs.w	ip, r3, #0
   82f40:	f2c0 8394 	blt.w	8366c <_svfprintf_r+0xd48>
   82f44:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   82f48:	2301      	movs	r3, #1
   82f4a:	e659      	b.n	82c00 <_svfprintf_r+0x2dc>
   82f4c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82f4e:	4cb6      	ldr	r4, [pc, #728]	; (83228 <_svfprintf_r+0x904>)
   82f50:	06af      	lsls	r7, r5, #26
   82f52:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   82f56:	941a      	str	r4, [sp, #104]	; 0x68
   82f58:	f53f ae2f 	bmi.w	82bba <_svfprintf_r+0x296>
   82f5c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   82f5e:	06ed      	lsls	r5, r5, #27
   82f60:	f140 8443 	bpl.w	837ea <_svfprintf_r+0xec6>
   82f64:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   82f68:	2500      	movs	r5, #0
   82f6a:	f8dc 4000 	ldr.w	r4, [ip]
   82f6e:	f10c 0c04 	add.w	ip, ip, #4
   82f72:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   82f76:	e62b      	b.n	82bd0 <_svfprintf_r+0x2ac>
   82f78:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82f7c:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   82f80:	f01c 0f20 	tst.w	ip, #32
   82f84:	f000 8440 	beq.w	83808 <_svfprintf_r+0xee4>
   82f88:	9c10      	ldr	r4, [sp, #64]	; 0x40
   82f8a:	6821      	ldr	r1, [r4, #0]
   82f8c:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   82f8e:	17e5      	asrs	r5, r4, #31
   82f90:	462b      	mov	r3, r5
   82f92:	9d10      	ldr	r5, [sp, #64]	; 0x40
   82f94:	4622      	mov	r2, r4
   82f96:	3504      	adds	r5, #4
   82f98:	9510      	str	r5, [sp, #64]	; 0x40
   82f9a:	e9c1 2300 	strd	r2, r3, [r1]
   82f9e:	e4e7      	b.n	82970 <_svfprintf_r+0x4c>
   82fa0:	9c10      	ldr	r4, [sp, #64]	; 0x40
   82fa2:	f04f 0a00 	mov.w	sl, #0
   82fa6:	6827      	ldr	r7, [r4, #0]
   82fa8:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   82fac:	1d25      	adds	r5, r4, #4
   82fae:	2f00      	cmp	r7, #0
   82fb0:	f000 85e9 	beq.w	83b86 <_svfprintf_r+0x1262>
   82fb4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   82fb6:	4638      	mov	r0, r7
   82fb8:	2c00      	cmp	r4, #0
   82fba:	f2c0 859b 	blt.w	83af4 <_svfprintf_r+0x11d0>
   82fbe:	4651      	mov	r1, sl
   82fc0:	4622      	mov	r2, r4
   82fc2:	f003 fd8f 	bl	86ae4 <memchr>
   82fc6:	2800      	cmp	r0, #0
   82fc8:	f000 8613 	beq.w	83bf2 <_svfprintf_r+0x12ce>
   82fcc:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   82fce:	1bc0      	subs	r0, r0, r7
   82fd0:	42a0      	cmp	r0, r4
   82fd2:	bfb8      	it	lt
   82fd4:	4604      	movlt	r4, r0
   82fd6:	9510      	str	r5, [sp, #64]	; 0x40
   82fd8:	ea24 75e4 	bic.w	r5, r4, r4, asr #31
   82fdc:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   82fe0:	f8cd a050 	str.w	sl, [sp, #80]	; 0x50
   82fe4:	950b      	str	r5, [sp, #44]	; 0x2c
   82fe6:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   82fea:	e632      	b.n	82c52 <_svfprintf_r+0x32e>
   82fec:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   82ff0:	f04c 0c40 	orr.w	ip, ip, #64	; 0x40
   82ff4:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   82ff8:	f899 8000 	ldrb.w	r8, [r9]
   82ffc:	e4ee      	b.n	829dc <_svfprintf_r+0xb8>
   82ffe:	f899 8000 	ldrb.w	r8, [r9]
   83002:	464b      	mov	r3, r9
   83004:	f1b8 0f6c 	cmp.w	r8, #108	; 0x6c
   83008:	f000 847f 	beq.w	8390a <_svfprintf_r+0xfe6>
   8300c:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8300e:	f045 0510 	orr.w	r5, r5, #16
   83012:	9509      	str	r5, [sp, #36]	; 0x24
   83014:	e4e2      	b.n	829dc <_svfprintf_r+0xb8>
   83016:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83018:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8301a:	6824      	ldr	r4, [r4, #0]
   8301c:	1d2b      	adds	r3, r5, #4
   8301e:	2c00      	cmp	r4, #0
   83020:	940f      	str	r4, [sp, #60]	; 0x3c
   83022:	f6ff ad7d 	blt.w	82b20 <_svfprintf_r+0x1fc>
   83026:	9310      	str	r3, [sp, #64]	; 0x40
   83028:	f899 8000 	ldrb.w	r8, [r9]
   8302c:	e4d6      	b.n	829dc <_svfprintf_r+0xb8>
   8302e:	9b10      	ldr	r3, [sp, #64]	; 0x40
   83030:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83034:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83036:	487d      	ldr	r0, [pc, #500]	; (8322c <_svfprintf_r+0x908>)
   83038:	3504      	adds	r5, #4
   8303a:	681c      	ldr	r4, [r3, #0]
   8303c:	f04f 0878 	mov.w	r8, #120	; 0x78
   83040:	2330      	movs	r3, #48	; 0x30
   83042:	f04c 0c02 	orr.w	ip, ip, #2
   83046:	9510      	str	r5, [sp, #64]	; 0x40
   83048:	f88d 3090 	strb.w	r3, [sp, #144]	; 0x90
   8304c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83050:	2500      	movs	r5, #0
   83052:	f88d 8091 	strb.w	r8, [sp, #145]	; 0x91
   83056:	901a      	str	r0, [sp, #104]	; 0x68
   83058:	2302      	movs	r3, #2
   8305a:	e5cd      	b.n	82bf8 <_svfprintf_r+0x2d4>
   8305c:	9b10      	ldr	r3, [sp, #64]	; 0x40
   8305e:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83060:	681a      	ldr	r2, [r3, #0]
   83062:	2401      	movs	r4, #1
   83064:	2300      	movs	r3, #0
   83066:	3504      	adds	r5, #4
   83068:	469a      	mov	sl, r3
   8306a:	940b      	str	r4, [sp, #44]	; 0x2c
   8306c:	f88d 20b8 	strb.w	r2, [sp, #184]	; 0xb8
   83070:	9510      	str	r5, [sp, #64]	; 0x40
   83072:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   83076:	930a      	str	r3, [sp, #40]	; 0x28
   83078:	9314      	str	r3, [sp, #80]	; 0x50
   8307a:	af2e      	add	r7, sp, #184	; 0xb8
   8307c:	e5ef      	b.n	82c5e <_svfprintf_r+0x33a>
   8307e:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83080:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83084:	06a5      	lsls	r5, r4, #26
   83086:	f53f af4e 	bmi.w	82f26 <_svfprintf_r+0x602>
   8308a:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8308e:	f01c 0f10 	tst.w	ip, #16
   83092:	f040 82df 	bne.w	83654 <_svfprintf_r+0xd30>
   83096:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8309a:	f01c 0f40 	tst.w	ip, #64	; 0x40
   8309e:	f000 82d9 	beq.w	83654 <_svfprintf_r+0xd30>
   830a2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   830a6:	f9bc 4000 	ldrsh.w	r4, [ip]
   830aa:	f10c 0c04 	add.w	ip, ip, #4
   830ae:	17e5      	asrs	r5, r4, #31
   830b0:	4622      	mov	r2, r4
   830b2:	462b      	mov	r3, r5
   830b4:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   830b8:	e73f      	b.n	82f3a <_svfprintf_r+0x616>
   830ba:	f899 8000 	ldrb.w	r8, [r9]
   830be:	222b      	movs	r2, #43	; 0x2b
   830c0:	e48c      	b.n	829dc <_svfprintf_r+0xb8>
   830c2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   830c4:	f045 0508 	orr.w	r5, r5, #8
   830c8:	9509      	str	r5, [sp, #36]	; 0x24
   830ca:	f899 8000 	ldrb.w	r8, [r9]
   830ce:	e485      	b.n	829dc <_svfprintf_r+0xb8>
   830d0:	9d10      	ldr	r5, [sp, #64]	; 0x40
   830d2:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   830d6:	1deb      	adds	r3, r5, #7
   830d8:	f023 0307 	bic.w	r3, r3, #7
   830dc:	f103 0c08 	add.w	ip, r3, #8
   830e0:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   830e4:	e9d3 4500 	ldrd	r4, r5, [r3]
   830e8:	e9cd 4516 	strd	r4, r5, [sp, #88]	; 0x58
   830ec:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   830f0:	f004 fa96 	bl	87620 <__fpclassifyd>
   830f4:	2801      	cmp	r0, #1
   830f6:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   830fa:	f040 835c 	bne.w	837b6 <_svfprintf_r+0xe92>
   830fe:	2200      	movs	r2, #0
   83100:	2300      	movs	r3, #0
   83102:	f005 f97d 	bl	88400 <__aeabi_dcmplt>
   83106:	2800      	cmp	r0, #0
   83108:	f040 8563 	bne.w	83bd2 <_svfprintf_r+0x12ae>
   8310c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83110:	2503      	movs	r5, #3
   83112:	950b      	str	r5, [sp, #44]	; 0x2c
   83114:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83116:	4f46      	ldr	r7, [pc, #280]	; (83230 <_svfprintf_r+0x90c>)
   83118:	f025 0580 	bic.w	r5, r5, #128	; 0x80
   8311c:	4b45      	ldr	r3, [pc, #276]	; (83234 <_svfprintf_r+0x910>)
   8311e:	2400      	movs	r4, #0
   83120:	9509      	str	r5, [sp, #36]	; 0x24
   83122:	2500      	movs	r5, #0
   83124:	940a      	str	r4, [sp, #40]	; 0x28
   83126:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   8312a:	bfd8      	it	le
   8312c:	461f      	movle	r7, r3
   8312e:	2403      	movs	r4, #3
   83130:	9514      	str	r5, [sp, #80]	; 0x50
   83132:	e58e      	b.n	82c52 <_svfprintf_r+0x32e>
   83134:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83138:	f04c 0c20 	orr.w	ip, ip, #32
   8313c:	f8cd c024 	str.w	ip, [sp, #36]	; 0x24
   83140:	f899 8000 	ldrb.w	r8, [r9]
   83144:	e44a      	b.n	829dc <_svfprintf_r+0xb8>
   83146:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83148:	1de3      	adds	r3, r4, #7
   8314a:	f023 0307 	bic.w	r3, r3, #7
   8314e:	f103 0508 	add.w	r5, r3, #8
   83152:	9510      	str	r5, [sp, #64]	; 0x40
   83154:	e9d3 4500 	ldrd	r4, r5, [r3]
   83158:	2300      	movs	r3, #0
   8315a:	e54d      	b.n	82bf8 <_svfprintf_r+0x2d4>
   8315c:	9d10      	ldr	r5, [sp, #64]	; 0x40
   8315e:	1deb      	adds	r3, r5, #7
   83160:	f023 0307 	bic.w	r3, r3, #7
   83164:	f103 0c08 	add.w	ip, r3, #8
   83168:	e9d3 4500 	ldrd	r4, r5, [r3]
   8316c:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83170:	2301      	movs	r3, #1
   83172:	e541      	b.n	82bf8 <_svfprintf_r+0x2d4>
   83174:	f88d 208f 	strb.w	r2, [sp, #143]	; 0x8f
   83178:	f1b8 0f00 	cmp.w	r8, #0
   8317c:	f43f ace3 	beq.w	82b46 <_svfprintf_r+0x222>
   83180:	2300      	movs	r3, #0
   83182:	f04f 0c01 	mov.w	ip, #1
   83186:	469a      	mov	sl, r3
   83188:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   8318c:	f88d 80b8 	strb.w	r8, [sp, #184]	; 0xb8
   83190:	f88d 308f 	strb.w	r3, [sp, #143]	; 0x8f
   83194:	930a      	str	r3, [sp, #40]	; 0x28
   83196:	9314      	str	r3, [sp, #80]	; 0x50
   83198:	4664      	mov	r4, ip
   8319a:	af2e      	add	r7, sp, #184	; 0xb8
   8319c:	e55f      	b.n	82c5e <_svfprintf_r+0x33a>
   8319e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   831a2:	e5b7      	b.n	82d14 <_svfprintf_r+0x3f0>
   831a4:	2b01      	cmp	r3, #1
   831a6:	f000 80ec 	beq.w	83382 <_svfprintf_r+0xa5e>
   831aa:	2b02      	cmp	r3, #2
   831ac:	f10d 03df 	add.w	r3, sp, #223	; 0xdf
   831b0:	d118      	bne.n	831e4 <_svfprintf_r+0x8c0>
   831b2:	f8dd c068 	ldr.w	ip, [sp, #104]	; 0x68
   831b6:	4619      	mov	r1, r3
   831b8:	f004 000f 	and.w	r0, r4, #15
   831bc:	0922      	lsrs	r2, r4, #4
   831be:	f81c 0000 	ldrb.w	r0, [ip, r0]
   831c2:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   831c6:	092b      	lsrs	r3, r5, #4
   831c8:	7008      	strb	r0, [r1, #0]
   831ca:	ea52 0003 	orrs.w	r0, r2, r3
   831ce:	460f      	mov	r7, r1
   831d0:	4614      	mov	r4, r2
   831d2:	461d      	mov	r5, r3
   831d4:	f101 31ff 	add.w	r1, r1, #4294967295
   831d8:	d1ee      	bne.n	831b8 <_svfprintf_r+0x894>
   831da:	9d08      	ldr	r5, [sp, #32]
   831dc:	e9cd 231e 	strd	r2, r3, [sp, #120]	; 0x78
   831e0:	1bec      	subs	r4, r5, r7
   831e2:	e52d      	b.n	82c40 <_svfprintf_r+0x31c>
   831e4:	08e0      	lsrs	r0, r4, #3
   831e6:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   831ea:	f004 0207 	and.w	r2, r4, #7
   831ee:	08e9      	lsrs	r1, r5, #3
   831f0:	3230      	adds	r2, #48	; 0x30
   831f2:	ea50 0c01 	orrs.w	ip, r0, r1
   831f6:	461f      	mov	r7, r3
   831f8:	701a      	strb	r2, [r3, #0]
   831fa:	4604      	mov	r4, r0
   831fc:	460d      	mov	r5, r1
   831fe:	f103 33ff 	add.w	r3, r3, #4294967295
   83202:	d1ef      	bne.n	831e4 <_svfprintf_r+0x8c0>
   83204:	9c09      	ldr	r4, [sp, #36]	; 0x24
   83206:	e9cd 011c 	strd	r0, r1, [sp, #112]	; 0x70
   8320a:	07e0      	lsls	r0, r4, #31
   8320c:	4639      	mov	r1, r7
   8320e:	f140 80c1 	bpl.w	83394 <_svfprintf_r+0xa70>
   83212:	2a30      	cmp	r2, #48	; 0x30
   83214:	f000 80be 	beq.w	83394 <_svfprintf_r+0xa70>
   83218:	9d08      	ldr	r5, [sp, #32]
   8321a:	461f      	mov	r7, r3
   8321c:	2330      	movs	r3, #48	; 0x30
   8321e:	1bec      	subs	r4, r5, r7
   83220:	f801 3c01 	strb.w	r3, [r1, #-1]
   83224:	e50c      	b.n	82c40 <_svfprintf_r+0x31c>
   83226:	bf00      	nop
   83228:	00088ae4 	.word	0x00088ae4
   8322c:	00088af8 	.word	0x00088af8
   83230:	00088ad8 	.word	0x00088ad8
   83234:	00088ad4 	.word	0x00088ad4
   83238:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   8323c:	f340 80ad 	ble.w	8339a <_svfprintf_r+0xa76>
   83240:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   83244:	2200      	movs	r2, #0
   83246:	2300      	movs	r3, #0
   83248:	f8cd c01c 	str.w	ip, [sp, #28]
   8324c:	f005 f8ce 	bl	883ec <__aeabi_dcmpeq>
   83250:	f8dd c01c 	ldr.w	ip, [sp, #28]
   83254:	2800      	cmp	r0, #0
   83256:	f000 8126 	beq.w	834a6 <_svfprintf_r+0xb82>
   8325a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8325c:	49aa      	ldr	r1, [pc, #680]	; (83508 <_svfprintf_r+0xbe4>)
   8325e:	3301      	adds	r3, #1
   83260:	f10c 0c01 	add.w	ip, ip, #1
   83264:	2201      	movs	r2, #1
   83266:	2b07      	cmp	r3, #7
   83268:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8326c:	932c      	str	r3, [sp, #176]	; 0xb0
   8326e:	e886 0006 	stmia.w	r6, {r1, r2}
   83272:	f300 82ed 	bgt.w	83850 <_svfprintf_r+0xf2c>
   83276:	3608      	adds	r6, #8
   83278:	9b25      	ldr	r3, [sp, #148]	; 0x94
   8327a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8327c:	42a3      	cmp	r3, r4
   8327e:	db03      	blt.n	83288 <_svfprintf_r+0x964>
   83280:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83282:	07ec      	lsls	r4, r5, #31
   83284:	f57f adc0 	bpl.w	82e08 <_svfprintf_r+0x4e4>
   83288:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8328a:	9c18      	ldr	r4, [sp, #96]	; 0x60
   8328c:	3301      	adds	r3, #1
   8328e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83290:	44a4      	add	ip, r4
   83292:	2b07      	cmp	r3, #7
   83294:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83298:	6035      	str	r5, [r6, #0]
   8329a:	6074      	str	r4, [r6, #4]
   8329c:	932c      	str	r3, [sp, #176]	; 0xb0
   8329e:	f300 833e 	bgt.w	8391e <_svfprintf_r+0xffa>
   832a2:	3608      	adds	r6, #8
   832a4:	9d11      	ldr	r5, [sp, #68]	; 0x44
   832a6:	1e6c      	subs	r4, r5, #1
   832a8:	2c00      	cmp	r4, #0
   832aa:	f77f adad 	ble.w	82e08 <_svfprintf_r+0x4e4>
   832ae:	2c10      	cmp	r4, #16
   832b0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   832b2:	4d96      	ldr	r5, [pc, #600]	; (8350c <_svfprintf_r+0xbe8>)
   832b4:	f340 8197 	ble.w	835e6 <_svfprintf_r+0xcc2>
   832b8:	2710      	movs	r7, #16
   832ba:	4662      	mov	r2, ip
   832bc:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   832c0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   832c4:	e004      	b.n	832d0 <_svfprintf_r+0x9ac>
   832c6:	3608      	adds	r6, #8
   832c8:	3c10      	subs	r4, #16
   832ca:	2c10      	cmp	r4, #16
   832cc:	f340 818a 	ble.w	835e4 <_svfprintf_r+0xcc0>
   832d0:	3301      	adds	r3, #1
   832d2:	3210      	adds	r2, #16
   832d4:	2b07      	cmp	r3, #7
   832d6:	922d      	str	r2, [sp, #180]	; 0xb4
   832d8:	932c      	str	r3, [sp, #176]	; 0xb0
   832da:	e886 00a0 	stmia.w	r6, {r5, r7}
   832de:	ddf2      	ble.n	832c6 <_svfprintf_r+0x9a2>
   832e0:	4640      	mov	r0, r8
   832e2:	4651      	mov	r1, sl
   832e4:	aa2b      	add	r2, sp, #172	; 0xac
   832e6:	f004 fa17 	bl	87718 <__ssprint_r>
   832ea:	2800      	cmp	r0, #0
   832ec:	f47f ac32 	bne.w	82b54 <_svfprintf_r+0x230>
   832f0:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   832f2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   832f4:	ae38      	add	r6, sp, #224	; 0xe0
   832f6:	e7e7      	b.n	832c8 <_svfprintf_r+0x9a4>
   832f8:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
   832fa:	980b      	ldr	r0, [sp, #44]	; 0x2c
   832fc:	ebc0 0a05 	rsb	sl, r0, r5
   83300:	f1ba 0f00 	cmp.w	sl, #0
   83304:	f77f ad2e 	ble.w	82d64 <_svfprintf_r+0x440>
   83308:	f1ba 0f10 	cmp.w	sl, #16
   8330c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8330e:	4d7f      	ldr	r5, [pc, #508]	; (8350c <_svfprintf_r+0xbe8>)
   83310:	dd2b      	ble.n	8336a <_svfprintf_r+0xa46>
   83312:	9412      	str	r4, [sp, #72]	; 0x48
   83314:	4632      	mov	r2, r6
   83316:	f04f 0b10 	mov.w	fp, #16
   8331a:	462e      	mov	r6, r5
   8331c:	4661      	mov	r1, ip
   8331e:	9c0d      	ldr	r4, [sp, #52]	; 0x34
   83320:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   83322:	e006      	b.n	83332 <_svfprintf_r+0xa0e>
   83324:	f1aa 0a10 	sub.w	sl, sl, #16
   83328:	f1ba 0f10 	cmp.w	sl, #16
   8332c:	f102 0208 	add.w	r2, r2, #8
   83330:	dd17      	ble.n	83362 <_svfprintf_r+0xa3e>
   83332:	3301      	adds	r3, #1
   83334:	3110      	adds	r1, #16
   83336:	2b07      	cmp	r3, #7
   83338:	912d      	str	r1, [sp, #180]	; 0xb4
   8333a:	932c      	str	r3, [sp, #176]	; 0xb0
   8333c:	e882 0840 	stmia.w	r2, {r6, fp}
   83340:	ddf0      	ble.n	83324 <_svfprintf_r+0xa00>
   83342:	4620      	mov	r0, r4
   83344:	4629      	mov	r1, r5
   83346:	aa2b      	add	r2, sp, #172	; 0xac
   83348:	f004 f9e6 	bl	87718 <__ssprint_r>
   8334c:	2800      	cmp	r0, #0
   8334e:	f47f ac01 	bne.w	82b54 <_svfprintf_r+0x230>
   83352:	f1aa 0a10 	sub.w	sl, sl, #16
   83356:	f1ba 0f10 	cmp.w	sl, #16
   8335a:	992d      	ldr	r1, [sp, #180]	; 0xb4
   8335c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8335e:	aa38      	add	r2, sp, #224	; 0xe0
   83360:	dce7      	bgt.n	83332 <_svfprintf_r+0xa0e>
   83362:	9c12      	ldr	r4, [sp, #72]	; 0x48
   83364:	4635      	mov	r5, r6
   83366:	468c      	mov	ip, r1
   83368:	4616      	mov	r6, r2
   8336a:	3301      	adds	r3, #1
   8336c:	44d4      	add	ip, sl
   8336e:	2b07      	cmp	r3, #7
   83370:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83374:	932c      	str	r3, [sp, #176]	; 0xb0
   83376:	e886 0420 	stmia.w	r6, {r5, sl}
   8337a:	f300 820f 	bgt.w	8379c <_svfprintf_r+0xe78>
   8337e:	3608      	adds	r6, #8
   83380:	e4f0      	b.n	82d64 <_svfprintf_r+0x440>
   83382:	2d00      	cmp	r5, #0
   83384:	bf08      	it	eq
   83386:	2c0a      	cmpeq	r4, #10
   83388:	f080 8138 	bcs.w	835fc <_svfprintf_r+0xcd8>
   8338c:	3430      	adds	r4, #48	; 0x30
   8338e:	af48      	add	r7, sp, #288	; 0x120
   83390:	f807 4d41 	strb.w	r4, [r7, #-65]!
   83394:	9d08      	ldr	r5, [sp, #32]
   83396:	1bec      	subs	r4, r5, r7
   83398:	e452      	b.n	82c40 <_svfprintf_r+0x31c>
   8339a:	9c11      	ldr	r4, [sp, #68]	; 0x44
   8339c:	2c01      	cmp	r4, #1
   8339e:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   833a0:	f340 81d2 	ble.w	83748 <_svfprintf_r+0xe24>
   833a4:	3401      	adds	r4, #1
   833a6:	f10c 0301 	add.w	r3, ip, #1
   833aa:	2201      	movs	r2, #1
   833ac:	2c07      	cmp	r4, #7
   833ae:	932d      	str	r3, [sp, #180]	; 0xb4
   833b0:	6037      	str	r7, [r6, #0]
   833b2:	942c      	str	r4, [sp, #176]	; 0xb0
   833b4:	6072      	str	r2, [r6, #4]
   833b6:	f300 81d8 	bgt.w	8376a <_svfprintf_r+0xe46>
   833ba:	3608      	adds	r6, #8
   833bc:	9d15      	ldr	r5, [sp, #84]	; 0x54
   833be:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   833c2:	3401      	adds	r4, #1
   833c4:	6035      	str	r5, [r6, #0]
   833c6:	9d18      	ldr	r5, [sp, #96]	; 0x60
   833c8:	4498      	add	r8, r3
   833ca:	2c07      	cmp	r4, #7
   833cc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   833d0:	942c      	str	r4, [sp, #176]	; 0xb0
   833d2:	6075      	str	r5, [r6, #4]
   833d4:	f300 81d5 	bgt.w	83782 <_svfprintf_r+0xe5e>
   833d8:	3608      	adds	r6, #8
   833da:	e9dd 0116 	ldrd	r0, r1, [sp, #88]	; 0x58
   833de:	2200      	movs	r2, #0
   833e0:	2300      	movs	r3, #0
   833e2:	f005 f803 	bl	883ec <__aeabi_dcmpeq>
   833e6:	9d11      	ldr	r5, [sp, #68]	; 0x44
   833e8:	2800      	cmp	r0, #0
   833ea:	f040 80b9 	bne.w	83560 <_svfprintf_r+0xc3c>
   833ee:	1e6b      	subs	r3, r5, #1
   833f0:	3401      	adds	r4, #1
   833f2:	3701      	adds	r7, #1
   833f4:	4498      	add	r8, r3
   833f6:	2c07      	cmp	r4, #7
   833f8:	942c      	str	r4, [sp, #176]	; 0xb0
   833fa:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   833fe:	6037      	str	r7, [r6, #0]
   83400:	6073      	str	r3, [r6, #4]
   83402:	f300 80e2 	bgt.w	835ca <_svfprintf_r+0xca6>
   83406:	3608      	adds	r6, #8
   83408:	f8dd c064 	ldr.w	ip, [sp, #100]	; 0x64
   8340c:	3401      	adds	r4, #1
   8340e:	9d19      	ldr	r5, [sp, #100]	; 0x64
   83410:	44c4      	add	ip, r8
   83412:	ab27      	add	r3, sp, #156	; 0x9c
   83414:	2c07      	cmp	r4, #7
   83416:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8341a:	942c      	str	r4, [sp, #176]	; 0xb0
   8341c:	e886 0028 	stmia.w	r6, {r3, r5}
   83420:	f77f acf1 	ble.w	82e06 <_svfprintf_r+0x4e2>
   83424:	980d      	ldr	r0, [sp, #52]	; 0x34
   83426:	990c      	ldr	r1, [sp, #48]	; 0x30
   83428:	aa2b      	add	r2, sp, #172	; 0xac
   8342a:	f004 f975 	bl	87718 <__ssprint_r>
   8342e:	2800      	cmp	r0, #0
   83430:	f47f ab90 	bne.w	82b54 <_svfprintf_r+0x230>
   83434:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83438:	ae38      	add	r6, sp, #224	; 0xe0
   8343a:	e4e5      	b.n	82e08 <_svfprintf_r+0x4e4>
   8343c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8343e:	990c      	ldr	r1, [sp, #48]	; 0x30
   83440:	aa2b      	add	r2, sp, #172	; 0xac
   83442:	f004 f969 	bl	87718 <__ssprint_r>
   83446:	2800      	cmp	r0, #0
   83448:	f43f ad37 	beq.w	82eba <_svfprintf_r+0x596>
   8344c:	f7ff bb82 	b.w	82b54 <_svfprintf_r+0x230>
   83450:	980d      	ldr	r0, [sp, #52]	; 0x34
   83452:	990c      	ldr	r1, [sp, #48]	; 0x30
   83454:	aa2b      	add	r2, sp, #172	; 0xac
   83456:	f004 f95f 	bl	87718 <__ssprint_r>
   8345a:	2800      	cmp	r0, #0
   8345c:	f47f ab7a 	bne.w	82b54 <_svfprintf_r+0x230>
   83460:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83464:	ae38      	add	r6, sp, #224	; 0xe0
   83466:	e4bf      	b.n	82de8 <_svfprintf_r+0x4c4>
   83468:	980d      	ldr	r0, [sp, #52]	; 0x34
   8346a:	990c      	ldr	r1, [sp, #48]	; 0x30
   8346c:	aa2b      	add	r2, sp, #172	; 0xac
   8346e:	f004 f953 	bl	87718 <__ssprint_r>
   83472:	2800      	cmp	r0, #0
   83474:	f47f ab6e 	bne.w	82b54 <_svfprintf_r+0x230>
   83478:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8347c:	ae38      	add	r6, sp, #224	; 0xe0
   8347e:	e46d      	b.n	82d5c <_svfprintf_r+0x438>
   83480:	980d      	ldr	r0, [sp, #52]	; 0x34
   83482:	990c      	ldr	r1, [sp, #48]	; 0x30
   83484:	aa2b      	add	r2, sp, #172	; 0xac
   83486:	f004 f947 	bl	87718 <__ssprint_r>
   8348a:	2800      	cmp	r0, #0
   8348c:	f47f ab62 	bne.w	82b54 <_svfprintf_r+0x230>
   83490:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83494:	ae38      	add	r6, sp, #224	; 0xe0
   83496:	e450      	b.n	82d3a <_svfprintf_r+0x416>
   83498:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   8349a:	af38      	add	r7, sp, #224	; 0xe0
   8349c:	f7ff bbd0 	b.w	82c40 <_svfprintf_r+0x31c>
   834a0:	2302      	movs	r3, #2
   834a2:	f7ff bba9 	b.w	82bf8 <_svfprintf_r+0x2d4>
   834a6:	9b25      	ldr	r3, [sp, #148]	; 0x94
   834a8:	2b00      	cmp	r3, #0
   834aa:	f340 81dd 	ble.w	83868 <_svfprintf_r+0xf44>
   834ae:	9c11      	ldr	r4, [sp, #68]	; 0x44
   834b0:	9d14      	ldr	r5, [sp, #80]	; 0x50
   834b2:	f8dd a044 	ldr.w	sl, [sp, #68]	; 0x44
   834b6:	42ac      	cmp	r4, r5
   834b8:	bfa8      	it	ge
   834ba:	462c      	movge	r4, r5
   834bc:	2c00      	cmp	r4, #0
   834be:	44ba      	add	sl, r7
   834c0:	dd0b      	ble.n	834da <_svfprintf_r+0xbb6>
   834c2:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   834c4:	44a4      	add	ip, r4
   834c6:	3301      	adds	r3, #1
   834c8:	2b07      	cmp	r3, #7
   834ca:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   834ce:	6037      	str	r7, [r6, #0]
   834d0:	6074      	str	r4, [r6, #4]
   834d2:	932c      	str	r3, [sp, #176]	; 0xb0
   834d4:	f300 831e 	bgt.w	83b14 <_svfprintf_r+0x11f0>
   834d8:	3608      	adds	r6, #8
   834da:	9d14      	ldr	r5, [sp, #80]	; 0x50
   834dc:	ea24 74e4 	bic.w	r4, r4, r4, asr #31
   834e0:	1b2c      	subs	r4, r5, r4
   834e2:	2c00      	cmp	r4, #0
   834e4:	f340 80d7 	ble.w	83696 <_svfprintf_r+0xd72>
   834e8:	2c10      	cmp	r4, #16
   834ea:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   834ec:	4d07      	ldr	r5, [pc, #28]	; (8350c <_svfprintf_r+0xbe8>)
   834ee:	f340 81a3 	ble.w	83838 <_svfprintf_r+0xf14>
   834f2:	970a      	str	r7, [sp, #40]	; 0x28
   834f4:	f04f 0810 	mov.w	r8, #16
   834f8:	462f      	mov	r7, r5
   834fa:	4662      	mov	r2, ip
   834fc:	4625      	mov	r5, r4
   834fe:	f8dd b034 	ldr.w	fp, [sp, #52]	; 0x34
   83502:	9c0c      	ldr	r4, [sp, #48]	; 0x30
   83504:	e009      	b.n	8351a <_svfprintf_r+0xbf6>
   83506:	bf00      	nop
   83508:	00088b14 	.word	0x00088b14
   8350c:	00088ac4 	.word	0x00088ac4
   83510:	3608      	adds	r6, #8
   83512:	3d10      	subs	r5, #16
   83514:	2d10      	cmp	r5, #16
   83516:	f340 818b 	ble.w	83830 <_svfprintf_r+0xf0c>
   8351a:	3301      	adds	r3, #1
   8351c:	3210      	adds	r2, #16
   8351e:	2b07      	cmp	r3, #7
   83520:	922d      	str	r2, [sp, #180]	; 0xb4
   83522:	932c      	str	r3, [sp, #176]	; 0xb0
   83524:	e886 0180 	stmia.w	r6, {r7, r8}
   83528:	ddf2      	ble.n	83510 <_svfprintf_r+0xbec>
   8352a:	4658      	mov	r0, fp
   8352c:	4621      	mov	r1, r4
   8352e:	aa2b      	add	r2, sp, #172	; 0xac
   83530:	f004 f8f2 	bl	87718 <__ssprint_r>
   83534:	2800      	cmp	r0, #0
   83536:	f47f ab0d 	bne.w	82b54 <_svfprintf_r+0x230>
   8353a:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   8353c:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8353e:	ae38      	add	r6, sp, #224	; 0xe0
   83540:	e7e7      	b.n	83512 <_svfprintf_r+0xbee>
   83542:	980d      	ldr	r0, [sp, #52]	; 0x34
   83544:	990c      	ldr	r1, [sp, #48]	; 0x30
   83546:	aa2b      	add	r2, sp, #172	; 0xac
   83548:	f004 f8e6 	bl	87718 <__ssprint_r>
   8354c:	2800      	cmp	r0, #0
   8354e:	f47f ab01 	bne.w	82b54 <_svfprintf_r+0x230>
   83552:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83556:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   8355a:	ae38      	add	r6, sp, #224	; 0xe0
   8355c:	f7ff bbda 	b.w	82d14 <_svfprintf_r+0x3f0>
   83560:	1e6f      	subs	r7, r5, #1
   83562:	2f00      	cmp	r7, #0
   83564:	f77f af50 	ble.w	83408 <_svfprintf_r+0xae4>
   83568:	2f10      	cmp	r7, #16
   8356a:	4dae      	ldr	r5, [pc, #696]	; (83824 <_svfprintf_r+0xf00>)
   8356c:	dd23      	ble.n	835b6 <_svfprintf_r+0xc92>
   8356e:	4643      	mov	r3, r8
   83570:	f04f 0a10 	mov.w	sl, #16
   83574:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   83578:	f8dd b030 	ldr.w	fp, [sp, #48]	; 0x30
   8357c:	e004      	b.n	83588 <_svfprintf_r+0xc64>
   8357e:	3f10      	subs	r7, #16
   83580:	2f10      	cmp	r7, #16
   83582:	f106 0608 	add.w	r6, r6, #8
   83586:	dd15      	ble.n	835b4 <_svfprintf_r+0xc90>
   83588:	3401      	adds	r4, #1
   8358a:	3310      	adds	r3, #16
   8358c:	2c07      	cmp	r4, #7
   8358e:	932d      	str	r3, [sp, #180]	; 0xb4
   83590:	942c      	str	r4, [sp, #176]	; 0xb0
   83592:	e886 0420 	stmia.w	r6, {r5, sl}
   83596:	ddf2      	ble.n	8357e <_svfprintf_r+0xc5a>
   83598:	4640      	mov	r0, r8
   8359a:	4659      	mov	r1, fp
   8359c:	aa2b      	add	r2, sp, #172	; 0xac
   8359e:	f004 f8bb 	bl	87718 <__ssprint_r>
   835a2:	2800      	cmp	r0, #0
   835a4:	f47f aad6 	bne.w	82b54 <_svfprintf_r+0x230>
   835a8:	3f10      	subs	r7, #16
   835aa:	2f10      	cmp	r7, #16
   835ac:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   835ae:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   835b0:	ae38      	add	r6, sp, #224	; 0xe0
   835b2:	dce9      	bgt.n	83588 <_svfprintf_r+0xc64>
   835b4:	4698      	mov	r8, r3
   835b6:	3401      	adds	r4, #1
   835b8:	44b8      	add	r8, r7
   835ba:	2c07      	cmp	r4, #7
   835bc:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   835c0:	942c      	str	r4, [sp, #176]	; 0xb0
   835c2:	e886 00a0 	stmia.w	r6, {r5, r7}
   835c6:	f77f af1e 	ble.w	83406 <_svfprintf_r+0xae2>
   835ca:	980d      	ldr	r0, [sp, #52]	; 0x34
   835cc:	990c      	ldr	r1, [sp, #48]	; 0x30
   835ce:	aa2b      	add	r2, sp, #172	; 0xac
   835d0:	f004 f8a2 	bl	87718 <__ssprint_r>
   835d4:	2800      	cmp	r0, #0
   835d6:	f47f aabd 	bne.w	82b54 <_svfprintf_r+0x230>
   835da:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   835de:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   835e0:	ae38      	add	r6, sp, #224	; 0xe0
   835e2:	e711      	b.n	83408 <_svfprintf_r+0xae4>
   835e4:	4694      	mov	ip, r2
   835e6:	3301      	adds	r3, #1
   835e8:	44a4      	add	ip, r4
   835ea:	2b07      	cmp	r3, #7
   835ec:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   835f0:	932c      	str	r3, [sp, #176]	; 0xb0
   835f2:	6035      	str	r5, [r6, #0]
   835f4:	6074      	str	r4, [r6, #4]
   835f6:	f77f ac06 	ble.w	82e06 <_svfprintf_r+0x4e2>
   835fa:	e713      	b.n	83424 <_svfprintf_r+0xb00>
   835fc:	f10d 0bdf 	add.w	fp, sp, #223	; 0xdf
   83600:	4620      	mov	r0, r4
   83602:	4629      	mov	r1, r5
   83604:	220a      	movs	r2, #10
   83606:	2300      	movs	r3, #0
   83608:	f004 ff4a 	bl	884a0 <__aeabi_uldivmod>
   8360c:	3230      	adds	r2, #48	; 0x30
   8360e:	f88b 2000 	strb.w	r2, [fp]
   83612:	4620      	mov	r0, r4
   83614:	4629      	mov	r1, r5
   83616:	220a      	movs	r2, #10
   83618:	2300      	movs	r3, #0
   8361a:	f004 ff41 	bl	884a0 <__aeabi_uldivmod>
   8361e:	4604      	mov	r4, r0
   83620:	460d      	mov	r5, r1
   83622:	ea54 0c05 	orrs.w	ip, r4, r5
   83626:	465f      	mov	r7, fp
   83628:	f10b 3bff 	add.w	fp, fp, #4294967295
   8362c:	d1e8      	bne.n	83600 <_svfprintf_r+0xcdc>
   8362e:	9d08      	ldr	r5, [sp, #32]
   83630:	1bec      	subs	r4, r5, r7
   83632:	f7ff bb05 	b.w	82c40 <_svfprintf_r+0x31c>
   83636:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83638:	2301      	movs	r3, #1
   8363a:	682c      	ldr	r4, [r5, #0]
   8363c:	3504      	adds	r5, #4
   8363e:	9510      	str	r5, [sp, #64]	; 0x40
   83640:	2500      	movs	r5, #0
   83642:	f7ff bad9 	b.w	82bf8 <_svfprintf_r+0x2d4>
   83646:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83648:	682c      	ldr	r4, [r5, #0]
   8364a:	3504      	adds	r5, #4
   8364c:	9510      	str	r5, [sp, #64]	; 0x40
   8364e:	2500      	movs	r5, #0
   83650:	f7ff bad2 	b.w	82bf8 <_svfprintf_r+0x2d4>
   83654:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83656:	682c      	ldr	r4, [r5, #0]
   83658:	3504      	adds	r5, #4
   8365a:	9510      	str	r5, [sp, #64]	; 0x40
   8365c:	17e5      	asrs	r5, r4, #31
   8365e:	4622      	mov	r2, r4
   83660:	462b      	mov	r3, r5
   83662:	2a00      	cmp	r2, #0
   83664:	f173 0c00 	sbcs.w	ip, r3, #0
   83668:	f6bf ac6c 	bge.w	82f44 <_svfprintf_r+0x620>
   8366c:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   83670:	4264      	negs	r4, r4
   83672:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   83676:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   8367a:	2301      	movs	r3, #1
   8367c:	f7ff bac0 	b.w	82c00 <_svfprintf_r+0x2dc>
   83680:	980d      	ldr	r0, [sp, #52]	; 0x34
   83682:	990c      	ldr	r1, [sp, #48]	; 0x30
   83684:	aa2b      	add	r2, sp, #172	; 0xac
   83686:	f004 f847 	bl	87718 <__ssprint_r>
   8368a:	2800      	cmp	r0, #0
   8368c:	f47f aa62 	bne.w	82b54 <_svfprintf_r+0x230>
   83690:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83694:	ae38      	add	r6, sp, #224	; 0xe0
   83696:	9d14      	ldr	r5, [sp, #80]	; 0x50
   83698:	9c25      	ldr	r4, [sp, #148]	; 0x94
   8369a:	442f      	add	r7, r5
   8369c:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8369e:	42ac      	cmp	r4, r5
   836a0:	db42      	blt.n	83728 <_svfprintf_r+0xe04>
   836a2:	9d09      	ldr	r5, [sp, #36]	; 0x24
   836a4:	07e9      	lsls	r1, r5, #31
   836a6:	d43f      	bmi.n	83728 <_svfprintf_r+0xe04>
   836a8:	9811      	ldr	r0, [sp, #68]	; 0x44
   836aa:	ebc7 050a 	rsb	r5, r7, sl
   836ae:	1b04      	subs	r4, r0, r4
   836b0:	42ac      	cmp	r4, r5
   836b2:	bfb8      	it	lt
   836b4:	4625      	movlt	r5, r4
   836b6:	2d00      	cmp	r5, #0
   836b8:	dd0b      	ble.n	836d2 <_svfprintf_r+0xdae>
   836ba:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   836bc:	44ac      	add	ip, r5
   836be:	3301      	adds	r3, #1
   836c0:	2b07      	cmp	r3, #7
   836c2:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   836c6:	6037      	str	r7, [r6, #0]
   836c8:	6075      	str	r5, [r6, #4]
   836ca:	932c      	str	r3, [sp, #176]	; 0xb0
   836cc:	f300 824c 	bgt.w	83b68 <_svfprintf_r+0x1244>
   836d0:	3608      	adds	r6, #8
   836d2:	ea25 75e5 	bic.w	r5, r5, r5, asr #31
   836d6:	1b64      	subs	r4, r4, r5
   836d8:	2c00      	cmp	r4, #0
   836da:	f77f ab95 	ble.w	82e08 <_svfprintf_r+0x4e4>
   836de:	2c10      	cmp	r4, #16
   836e0:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   836e2:	4d50      	ldr	r5, [pc, #320]	; (83824 <_svfprintf_r+0xf00>)
   836e4:	f77f af7f 	ble.w	835e6 <_svfprintf_r+0xcc2>
   836e8:	2710      	movs	r7, #16
   836ea:	4662      	mov	r2, ip
   836ec:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   836f0:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   836f4:	e004      	b.n	83700 <_svfprintf_r+0xddc>
   836f6:	3608      	adds	r6, #8
   836f8:	3c10      	subs	r4, #16
   836fa:	2c10      	cmp	r4, #16
   836fc:	f77f af72 	ble.w	835e4 <_svfprintf_r+0xcc0>
   83700:	3301      	adds	r3, #1
   83702:	3210      	adds	r2, #16
   83704:	2b07      	cmp	r3, #7
   83706:	922d      	str	r2, [sp, #180]	; 0xb4
   83708:	932c      	str	r3, [sp, #176]	; 0xb0
   8370a:	e886 00a0 	stmia.w	r6, {r5, r7}
   8370e:	ddf2      	ble.n	836f6 <_svfprintf_r+0xdd2>
   83710:	4640      	mov	r0, r8
   83712:	4651      	mov	r1, sl
   83714:	aa2b      	add	r2, sp, #172	; 0xac
   83716:	f003 ffff 	bl	87718 <__ssprint_r>
   8371a:	2800      	cmp	r0, #0
   8371c:	f47f aa1a 	bne.w	82b54 <_svfprintf_r+0x230>
   83720:	9a2d      	ldr	r2, [sp, #180]	; 0xb4
   83722:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83724:	ae38      	add	r6, sp, #224	; 0xe0
   83726:	e7e7      	b.n	836f8 <_svfprintf_r+0xdd4>
   83728:	9d18      	ldr	r5, [sp, #96]	; 0x60
   8372a:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   8372c:	44ac      	add	ip, r5
   8372e:	9d15      	ldr	r5, [sp, #84]	; 0x54
   83730:	3301      	adds	r3, #1
   83732:	6035      	str	r5, [r6, #0]
   83734:	9d18      	ldr	r5, [sp, #96]	; 0x60
   83736:	2b07      	cmp	r3, #7
   83738:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8373c:	6075      	str	r5, [r6, #4]
   8373e:	932c      	str	r3, [sp, #176]	; 0xb0
   83740:	f300 81f4 	bgt.w	83b2c <_svfprintf_r+0x1208>
   83744:	3608      	adds	r6, #8
   83746:	e7af      	b.n	836a8 <_svfprintf_r+0xd84>
   83748:	9d09      	ldr	r5, [sp, #36]	; 0x24
   8374a:	07ea      	lsls	r2, r5, #31
   8374c:	f53f ae2a 	bmi.w	833a4 <_svfprintf_r+0xa80>
   83750:	3401      	adds	r4, #1
   83752:	f10c 0801 	add.w	r8, ip, #1
   83756:	2301      	movs	r3, #1
   83758:	2c07      	cmp	r4, #7
   8375a:	f8cd 80b4 	str.w	r8, [sp, #180]	; 0xb4
   8375e:	942c      	str	r4, [sp, #176]	; 0xb0
   83760:	6037      	str	r7, [r6, #0]
   83762:	6073      	str	r3, [r6, #4]
   83764:	f77f ae4f 	ble.w	83406 <_svfprintf_r+0xae2>
   83768:	e72f      	b.n	835ca <_svfprintf_r+0xca6>
   8376a:	980d      	ldr	r0, [sp, #52]	; 0x34
   8376c:	990c      	ldr	r1, [sp, #48]	; 0x30
   8376e:	aa2b      	add	r2, sp, #172	; 0xac
   83770:	f003 ffd2 	bl	87718 <__ssprint_r>
   83774:	2800      	cmp	r0, #0
   83776:	f47f a9ed 	bne.w	82b54 <_svfprintf_r+0x230>
   8377a:	9b2d      	ldr	r3, [sp, #180]	; 0xb4
   8377c:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   8377e:	ae38      	add	r6, sp, #224	; 0xe0
   83780:	e61c      	b.n	833bc <_svfprintf_r+0xa98>
   83782:	980d      	ldr	r0, [sp, #52]	; 0x34
   83784:	990c      	ldr	r1, [sp, #48]	; 0x30
   83786:	aa2b      	add	r2, sp, #172	; 0xac
   83788:	f003 ffc6 	bl	87718 <__ssprint_r>
   8378c:	2800      	cmp	r0, #0
   8378e:	f47f a9e1 	bne.w	82b54 <_svfprintf_r+0x230>
   83792:	f8dd 80b4 	ldr.w	r8, [sp, #180]	; 0xb4
   83796:	9c2c      	ldr	r4, [sp, #176]	; 0xb0
   83798:	ae38      	add	r6, sp, #224	; 0xe0
   8379a:	e61e      	b.n	833da <_svfprintf_r+0xab6>
   8379c:	980d      	ldr	r0, [sp, #52]	; 0x34
   8379e:	990c      	ldr	r1, [sp, #48]	; 0x30
   837a0:	aa2b      	add	r2, sp, #172	; 0xac
   837a2:	f003 ffb9 	bl	87718 <__ssprint_r>
   837a6:	2800      	cmp	r0, #0
   837a8:	f47f a9d4 	bne.w	82b54 <_svfprintf_r+0x230>
   837ac:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   837b0:	ae38      	add	r6, sp, #224	; 0xe0
   837b2:	f7ff bad7 	b.w	82d64 <_svfprintf_r+0x440>
   837b6:	f003 ff33 	bl	87620 <__fpclassifyd>
   837ba:	2800      	cmp	r0, #0
   837bc:	f040 80bb 	bne.w	83936 <_svfprintf_r+0x1012>
   837c0:	9c09      	ldr	r4, [sp, #36]	; 0x24
   837c2:	4f19      	ldr	r7, [pc, #100]	; (83828 <_svfprintf_r+0xf04>)
   837c4:	4b19      	ldr	r3, [pc, #100]	; (8382c <_svfprintf_r+0xf08>)
   837c6:	f04f 0c03 	mov.w	ip, #3
   837ca:	f024 0480 	bic.w	r4, r4, #128	; 0x80
   837ce:	9409      	str	r4, [sp, #36]	; 0x24
   837d0:	900a      	str	r0, [sp, #40]	; 0x28
   837d2:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   837d6:	9014      	str	r0, [sp, #80]	; 0x50
   837d8:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   837dc:	bfd8      	it	le
   837de:	461f      	movle	r7, r3
   837e0:	4664      	mov	r4, ip
   837e2:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   837e6:	f7ff ba34 	b.w	82c52 <_svfprintf_r+0x32e>
   837ea:	9c09      	ldr	r4, [sp, #36]	; 0x24
   837ec:	0664      	lsls	r4, r4, #25
   837ee:	f140 8150 	bpl.w	83a92 <_svfprintf_r+0x116e>
   837f2:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   837f6:	2500      	movs	r5, #0
   837f8:	f8bc 4000 	ldrh.w	r4, [ip]
   837fc:	f10c 0c04 	add.w	ip, ip, #4
   83800:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83804:	f7ff b9e4 	b.w	82bd0 <_svfprintf_r+0x2ac>
   83808:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   8380c:	f01c 0f10 	tst.w	ip, #16
   83810:	f000 8146 	beq.w	83aa0 <_svfprintf_r+0x117c>
   83814:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83816:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   83818:	6823      	ldr	r3, [r4, #0]
   8381a:	3404      	adds	r4, #4
   8381c:	9410      	str	r4, [sp, #64]	; 0x40
   8381e:	601d      	str	r5, [r3, #0]
   83820:	f7ff b8a6 	b.w	82970 <_svfprintf_r+0x4c>
   83824:	00088ac4 	.word	0x00088ac4
   83828:	00088ae0 	.word	0x00088ae0
   8382c:	00088adc 	.word	0x00088adc
   83830:	462c      	mov	r4, r5
   83832:	463d      	mov	r5, r7
   83834:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   83836:	4694      	mov	ip, r2
   83838:	3301      	adds	r3, #1
   8383a:	44a4      	add	ip, r4
   8383c:	2b07      	cmp	r3, #7
   8383e:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83842:	932c      	str	r3, [sp, #176]	; 0xb0
   83844:	6035      	str	r5, [r6, #0]
   83846:	6074      	str	r4, [r6, #4]
   83848:	f73f af1a 	bgt.w	83680 <_svfprintf_r+0xd5c>
   8384c:	3608      	adds	r6, #8
   8384e:	e722      	b.n	83696 <_svfprintf_r+0xd72>
   83850:	980d      	ldr	r0, [sp, #52]	; 0x34
   83852:	990c      	ldr	r1, [sp, #48]	; 0x30
   83854:	aa2b      	add	r2, sp, #172	; 0xac
   83856:	f003 ff5f 	bl	87718 <__ssprint_r>
   8385a:	2800      	cmp	r0, #0
   8385c:	f47f a97a 	bne.w	82b54 <_svfprintf_r+0x230>
   83860:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83864:	ae38      	add	r6, sp, #224	; 0xe0
   83866:	e507      	b.n	83278 <_svfprintf_r+0x954>
   83868:	9a2c      	ldr	r2, [sp, #176]	; 0xb0
   8386a:	49b7      	ldr	r1, [pc, #732]	; (83b48 <_svfprintf_r+0x1224>)
   8386c:	3201      	adds	r2, #1
   8386e:	f10c 0c01 	add.w	ip, ip, #1
   83872:	2001      	movs	r0, #1
   83874:	2a07      	cmp	r2, #7
   83876:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   8387a:	922c      	str	r2, [sp, #176]	; 0xb0
   8387c:	6031      	str	r1, [r6, #0]
   8387e:	6070      	str	r0, [r6, #4]
   83880:	f300 80f7 	bgt.w	83a72 <_svfprintf_r+0x114e>
   83884:	3608      	adds	r6, #8
   83886:	461c      	mov	r4, r3
   83888:	b92c      	cbnz	r4, 83896 <_svfprintf_r+0xf72>
   8388a:	9d11      	ldr	r5, [sp, #68]	; 0x44
   8388c:	b91d      	cbnz	r5, 83896 <_svfprintf_r+0xf72>
   8388e:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83890:	07e8      	lsls	r0, r5, #31
   83892:	f57f aab9 	bpl.w	82e08 <_svfprintf_r+0x4e4>
   83896:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83898:	9d15      	ldr	r5, [sp, #84]	; 0x54
   8389a:	9918      	ldr	r1, [sp, #96]	; 0x60
   8389c:	3301      	adds	r3, #1
   8389e:	6035      	str	r5, [r6, #0]
   838a0:	9d18      	ldr	r5, [sp, #96]	; 0x60
   838a2:	4461      	add	r1, ip
   838a4:	2b07      	cmp	r3, #7
   838a6:	912d      	str	r1, [sp, #180]	; 0xb4
   838a8:	6075      	str	r5, [r6, #4]
   838aa:	932c      	str	r3, [sp, #176]	; 0xb0
   838ac:	f300 81de 	bgt.w	83c6c <_svfprintf_r+0x1348>
   838b0:	f106 0208 	add.w	r2, r6, #8
   838b4:	4264      	negs	r4, r4
   838b6:	2c00      	cmp	r4, #0
   838b8:	f340 810b 	ble.w	83ad2 <_svfprintf_r+0x11ae>
   838bc:	2c10      	cmp	r4, #16
   838be:	4da3      	ldr	r5, [pc, #652]	; (83b4c <_svfprintf_r+0x1228>)
   838c0:	f340 8148 	ble.w	83b54 <_svfprintf_r+0x1230>
   838c4:	46a3      	mov	fp, r4
   838c6:	2610      	movs	r6, #16
   838c8:	460c      	mov	r4, r1
   838ca:	f8dd 8034 	ldr.w	r8, [sp, #52]	; 0x34
   838ce:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
   838d2:	e006      	b.n	838e2 <_svfprintf_r+0xfbe>
   838d4:	3208      	adds	r2, #8
   838d6:	f1ab 0b10 	sub.w	fp, fp, #16
   838da:	f1bb 0f10 	cmp.w	fp, #16
   838de:	f340 8137 	ble.w	83b50 <_svfprintf_r+0x122c>
   838e2:	3301      	adds	r3, #1
   838e4:	3410      	adds	r4, #16
   838e6:	2b07      	cmp	r3, #7
   838e8:	942d      	str	r4, [sp, #180]	; 0xb4
   838ea:	932c      	str	r3, [sp, #176]	; 0xb0
   838ec:	e882 0060 	stmia.w	r2, {r5, r6}
   838f0:	ddf0      	ble.n	838d4 <_svfprintf_r+0xfb0>
   838f2:	4640      	mov	r0, r8
   838f4:	4651      	mov	r1, sl
   838f6:	aa2b      	add	r2, sp, #172	; 0xac
   838f8:	f003 ff0e 	bl	87718 <__ssprint_r>
   838fc:	2800      	cmp	r0, #0
   838fe:	f47f a929 	bne.w	82b54 <_svfprintf_r+0x230>
   83902:	9c2d      	ldr	r4, [sp, #180]	; 0xb4
   83904:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83906:	aa38      	add	r2, sp, #224	; 0xe0
   83908:	e7e5      	b.n	838d6 <_svfprintf_r+0xfb2>
   8390a:	9c09      	ldr	r4, [sp, #36]	; 0x24
   8390c:	f109 0901 	add.w	r9, r9, #1
   83910:	f044 0420 	orr.w	r4, r4, #32
   83914:	9409      	str	r4, [sp, #36]	; 0x24
   83916:	f893 8001 	ldrb.w	r8, [r3, #1]
   8391a:	f7ff b85f 	b.w	829dc <_svfprintf_r+0xb8>
   8391e:	980d      	ldr	r0, [sp, #52]	; 0x34
   83920:	990c      	ldr	r1, [sp, #48]	; 0x30
   83922:	aa2b      	add	r2, sp, #172	; 0xac
   83924:	f003 fef8 	bl	87718 <__ssprint_r>
   83928:	2800      	cmp	r0, #0
   8392a:	f47f a913 	bne.w	82b54 <_svfprintf_r+0x230>
   8392e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83932:	ae38      	add	r6, sp, #224	; 0xe0
   83934:	e4b6      	b.n	832a4 <_svfprintf_r+0x980>
   83936:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83938:	f028 0a20 	bic.w	sl, r8, #32
   8393c:	3501      	adds	r5, #1
   8393e:	f000 80a5 	beq.w	83a8c <_svfprintf_r+0x1168>
   83942:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   83946:	d104      	bne.n	83952 <_svfprintf_r+0x102e>
   83948:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   8394a:	2d00      	cmp	r5, #0
   8394c:	bf08      	it	eq
   8394e:	2501      	moveq	r5, #1
   83950:	950a      	str	r5, [sp, #40]	; 0x28
   83952:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83956:	e9dd 2316 	ldrd	r2, r3, [sp, #88]	; 0x58
   8395a:	f44c 7c80 	orr.w	ip, ip, #256	; 0x100
   8395e:	2b00      	cmp	r3, #0
   83960:	f8cd c048 	str.w	ip, [sp, #72]	; 0x48
   83964:	f2c0 819c 	blt.w	83ca0 <_svfprintf_r+0x137c>
   83968:	e9dd 4516 	ldrd	r4, r5, [sp, #88]	; 0x58
   8396c:	e9cd 4520 	strd	r4, r5, [sp, #128]	; 0x80
   83970:	f04f 0b00 	mov.w	fp, #0
   83974:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   83978:	f000 819b 	beq.w	83cb2 <_svfprintf_r+0x138e>
   8397c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
   83980:	f000 81a9 	beq.w	83cd6 <_svfprintf_r+0x13b2>
   83984:	f1ba 0f45 	cmp.w	sl, #69	; 0x45
   83988:	bf0a      	itet	eq
   8398a:	9c0a      	ldreq	r4, [sp, #40]	; 0x28
   8398c:	9d0a      	ldrne	r5, [sp, #40]	; 0x28
   8398e:	1c65      	addeq	r5, r4, #1
   83990:	2002      	movs	r0, #2
   83992:	a925      	add	r1, sp, #148	; 0x94
   83994:	aa26      	add	r2, sp, #152	; 0x98
   83996:	ab29      	add	r3, sp, #164	; 0xa4
   83998:	e88d 0021 	stmia.w	sp, {r0, r5}
   8399c:	9203      	str	r2, [sp, #12]
   8399e:	9304      	str	r3, [sp, #16]
   839a0:	9102      	str	r1, [sp, #8]
   839a2:	980d      	ldr	r0, [sp, #52]	; 0x34
   839a4:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   839a8:	f001 f9de 	bl	84d68 <_dtoa_r>
   839ac:	f1b8 0f67 	cmp.w	r8, #103	; 0x67
   839b0:	4607      	mov	r7, r0
   839b2:	d002      	beq.n	839ba <_svfprintf_r+0x1096>
   839b4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
   839b8:	d105      	bne.n	839c6 <_svfprintf_r+0x10a2>
   839ba:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   839be:	f01c 0f01 	tst.w	ip, #1
   839c2:	f000 819c 	beq.w	83cfe <_svfprintf_r+0x13da>
   839c6:	f1ba 0f46 	cmp.w	sl, #70	; 0x46
   839ca:	eb07 0405 	add.w	r4, r7, r5
   839ce:	f000 811c 	beq.w	83c0a <_svfprintf_r+0x12e6>
   839d2:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   839d6:	2200      	movs	r2, #0
   839d8:	2300      	movs	r3, #0
   839da:	f004 fd07 	bl	883ec <__aeabi_dcmpeq>
   839de:	2800      	cmp	r0, #0
   839e0:	f040 8105 	bne.w	83bee <_svfprintf_r+0x12ca>
   839e4:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   839e6:	429c      	cmp	r4, r3
   839e8:	d906      	bls.n	839f8 <_svfprintf_r+0x10d4>
   839ea:	2130      	movs	r1, #48	; 0x30
   839ec:	1c5a      	adds	r2, r3, #1
   839ee:	9229      	str	r2, [sp, #164]	; 0xa4
   839f0:	7019      	strb	r1, [r3, #0]
   839f2:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   839f4:	429c      	cmp	r4, r3
   839f6:	d8f9      	bhi.n	839ec <_svfprintf_r+0x10c8>
   839f8:	1bdb      	subs	r3, r3, r7
   839fa:	f1ba 0f47 	cmp.w	sl, #71	; 0x47
   839fe:	9311      	str	r3, [sp, #68]	; 0x44
   83a00:	f000 80ed 	beq.w	83bde <_svfprintf_r+0x12ba>
   83a04:	f1b8 0f65 	cmp.w	r8, #101	; 0x65
   83a08:	f340 81f2 	ble.w	83df0 <_svfprintf_r+0x14cc>
   83a0c:	f1b8 0f66 	cmp.w	r8, #102	; 0x66
   83a10:	f000 8168 	beq.w	83ce4 <_svfprintf_r+0x13c0>
   83a14:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83a16:	9414      	str	r4, [sp, #80]	; 0x50
   83a18:	9c11      	ldr	r4, [sp, #68]	; 0x44
   83a1a:	9d14      	ldr	r5, [sp, #80]	; 0x50
   83a1c:	42ac      	cmp	r4, r5
   83a1e:	f300 8132 	bgt.w	83c86 <_svfprintf_r+0x1362>
   83a22:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83a26:	f01c 0f01 	tst.w	ip, #1
   83a2a:	f040 81ad 	bne.w	83d88 <_svfprintf_r+0x1464>
   83a2e:	ea25 73e5 	bic.w	r3, r5, r5, asr #31
   83a32:	462c      	mov	r4, r5
   83a34:	f04f 0867 	mov.w	r8, #103	; 0x67
   83a38:	f1bb 0f00 	cmp.w	fp, #0
   83a3c:	f040 80b2 	bne.w	83ba4 <_svfprintf_r+0x1280>
   83a40:	9d12      	ldr	r5, [sp, #72]	; 0x48
   83a42:	930b      	str	r3, [sp, #44]	; 0x2c
   83a44:	9509      	str	r5, [sp, #36]	; 0x24
   83a46:	f8cd b028 	str.w	fp, [sp, #40]	; 0x28
   83a4a:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83a4e:	f7ff b900 	b.w	82c52 <_svfprintf_r+0x32e>
   83a52:	980d      	ldr	r0, [sp, #52]	; 0x34
   83a54:	2140      	movs	r1, #64	; 0x40
   83a56:	f002 fda9 	bl	865ac <_malloc_r>
   83a5a:	6020      	str	r0, [r4, #0]
   83a5c:	6120      	str	r0, [r4, #16]
   83a5e:	2800      	cmp	r0, #0
   83a60:	f000 81bf 	beq.w	83de2 <_svfprintf_r+0x14be>
   83a64:	f8dd c030 	ldr.w	ip, [sp, #48]	; 0x30
   83a68:	2340      	movs	r3, #64	; 0x40
   83a6a:	f8cc 3014 	str.w	r3, [ip, #20]
   83a6e:	f7fe bf6f 	b.w	82950 <_svfprintf_r+0x2c>
   83a72:	980d      	ldr	r0, [sp, #52]	; 0x34
   83a74:	990c      	ldr	r1, [sp, #48]	; 0x30
   83a76:	aa2b      	add	r2, sp, #172	; 0xac
   83a78:	f003 fe4e 	bl	87718 <__ssprint_r>
   83a7c:	2800      	cmp	r0, #0
   83a7e:	f47f a869 	bne.w	82b54 <_svfprintf_r+0x230>
   83a82:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83a84:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83a88:	ae38      	add	r6, sp, #224	; 0xe0
   83a8a:	e6fd      	b.n	83888 <_svfprintf_r+0xf64>
   83a8c:	2406      	movs	r4, #6
   83a8e:	940a      	str	r4, [sp, #40]	; 0x28
   83a90:	e75f      	b.n	83952 <_svfprintf_r+0x102e>
   83a92:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83a94:	682c      	ldr	r4, [r5, #0]
   83a96:	3504      	adds	r5, #4
   83a98:	9510      	str	r5, [sp, #64]	; 0x40
   83a9a:	2500      	movs	r5, #0
   83a9c:	f7ff b898 	b.w	82bd0 <_svfprintf_r+0x2ac>
   83aa0:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83aa4:	f01c 0f40 	tst.w	ip, #64	; 0x40
   83aa8:	f000 8087 	beq.w	83bba <_svfprintf_r+0x1296>
   83aac:	9c10      	ldr	r4, [sp, #64]	; 0x40
   83aae:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   83ab0:	6823      	ldr	r3, [r4, #0]
   83ab2:	3404      	adds	r4, #4
   83ab4:	9410      	str	r4, [sp, #64]	; 0x40
   83ab6:	801d      	strh	r5, [r3, #0]
   83ab8:	f7fe bf5a 	b.w	82970 <_svfprintf_r+0x4c>
   83abc:	980d      	ldr	r0, [sp, #52]	; 0x34
   83abe:	990c      	ldr	r1, [sp, #48]	; 0x30
   83ac0:	aa2b      	add	r2, sp, #172	; 0xac
   83ac2:	f003 fe29 	bl	87718 <__ssprint_r>
   83ac6:	2800      	cmp	r0, #0
   83ac8:	f47f a844 	bne.w	82b54 <_svfprintf_r+0x230>
   83acc:	992d      	ldr	r1, [sp, #180]	; 0xb4
   83ace:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83ad0:	aa38      	add	r2, sp, #224	; 0xe0
   83ad2:	f8dd c044 	ldr.w	ip, [sp, #68]	; 0x44
   83ad6:	3301      	adds	r3, #1
   83ad8:	9c11      	ldr	r4, [sp, #68]	; 0x44
   83ada:	448c      	add	ip, r1
   83adc:	2b07      	cmp	r3, #7
   83ade:	f8cd c0b4 	str.w	ip, [sp, #180]	; 0xb4
   83ae2:	932c      	str	r3, [sp, #176]	; 0xb0
   83ae4:	6017      	str	r7, [r2, #0]
   83ae6:	6054      	str	r4, [r2, #4]
   83ae8:	f73f ac9c 	bgt.w	83424 <_svfprintf_r+0xb00>
   83aec:	f102 0608 	add.w	r6, r2, #8
   83af0:	f7ff b98a 	b.w	82e08 <_svfprintf_r+0x4e4>
   83af4:	f8cd a028 	str.w	sl, [sp, #40]	; 0x28
   83af8:	f7fe feb2 	bl	82860 <strlen>
   83afc:	9510      	str	r5, [sp, #64]	; 0x40
   83afe:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83b00:	ea20 7ce0 	bic.w	ip, r0, r0, asr #31
   83b04:	4604      	mov	r4, r0
   83b06:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83b0a:	9514      	str	r5, [sp, #80]	; 0x50
   83b0c:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83b10:	f7ff b89f 	b.w	82c52 <_svfprintf_r+0x32e>
   83b14:	980d      	ldr	r0, [sp, #52]	; 0x34
   83b16:	990c      	ldr	r1, [sp, #48]	; 0x30
   83b18:	aa2b      	add	r2, sp, #172	; 0xac
   83b1a:	f003 fdfd 	bl	87718 <__ssprint_r>
   83b1e:	2800      	cmp	r0, #0
   83b20:	f47f a818 	bne.w	82b54 <_svfprintf_r+0x230>
   83b24:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83b28:	ae38      	add	r6, sp, #224	; 0xe0
   83b2a:	e4d6      	b.n	834da <_svfprintf_r+0xbb6>
   83b2c:	980d      	ldr	r0, [sp, #52]	; 0x34
   83b2e:	990c      	ldr	r1, [sp, #48]	; 0x30
   83b30:	aa2b      	add	r2, sp, #172	; 0xac
   83b32:	f003 fdf1 	bl	87718 <__ssprint_r>
   83b36:	2800      	cmp	r0, #0
   83b38:	f47f a80c 	bne.w	82b54 <_svfprintf_r+0x230>
   83b3c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83b3e:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83b42:	ae38      	add	r6, sp, #224	; 0xe0
   83b44:	e5b0      	b.n	836a8 <_svfprintf_r+0xd84>
   83b46:	bf00      	nop
   83b48:	00088b14 	.word	0x00088b14
   83b4c:	00088ac4 	.word	0x00088ac4
   83b50:	4621      	mov	r1, r4
   83b52:	465c      	mov	r4, fp
   83b54:	3301      	adds	r3, #1
   83b56:	4421      	add	r1, r4
   83b58:	2b07      	cmp	r3, #7
   83b5a:	912d      	str	r1, [sp, #180]	; 0xb4
   83b5c:	932c      	str	r3, [sp, #176]	; 0xb0
   83b5e:	6015      	str	r5, [r2, #0]
   83b60:	6054      	str	r4, [r2, #4]
   83b62:	dcab      	bgt.n	83abc <_svfprintf_r+0x1198>
   83b64:	3208      	adds	r2, #8
   83b66:	e7b4      	b.n	83ad2 <_svfprintf_r+0x11ae>
   83b68:	980d      	ldr	r0, [sp, #52]	; 0x34
   83b6a:	990c      	ldr	r1, [sp, #48]	; 0x30
   83b6c:	aa2b      	add	r2, sp, #172	; 0xac
   83b6e:	f003 fdd3 	bl	87718 <__ssprint_r>
   83b72:	2800      	cmp	r0, #0
   83b74:	f47e afee 	bne.w	82b54 <_svfprintf_r+0x230>
   83b78:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83b7a:	9911      	ldr	r1, [sp, #68]	; 0x44
   83b7c:	f8dd c0b4 	ldr.w	ip, [sp, #180]	; 0xb4
   83b80:	1b0c      	subs	r4, r1, r4
   83b82:	ae38      	add	r6, sp, #224	; 0xe0
   83b84:	e5a5      	b.n	836d2 <_svfprintf_r+0xdae>
   83b86:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83b88:	46ba      	mov	sl, r7
   83b8a:	2c06      	cmp	r4, #6
   83b8c:	bf28      	it	cs
   83b8e:	2406      	movcs	r4, #6
   83b90:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   83b94:	970a      	str	r7, [sp, #40]	; 0x28
   83b96:	9714      	str	r7, [sp, #80]	; 0x50
   83b98:	9510      	str	r5, [sp, #64]	; 0x40
   83b9a:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83b9e:	4f97      	ldr	r7, [pc, #604]	; (83dfc <_svfprintf_r+0x14d8>)
   83ba0:	f7ff b857 	b.w	82c52 <_svfprintf_r+0x32e>
   83ba4:	9d12      	ldr	r5, [sp, #72]	; 0x48
   83ba6:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   83baa:	9509      	str	r5, [sp, #36]	; 0x24
   83bac:	2500      	movs	r5, #0
   83bae:	930b      	str	r3, [sp, #44]	; 0x2c
   83bb0:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   83bb4:	950a      	str	r5, [sp, #40]	; 0x28
   83bb6:	f7ff b84f 	b.w	82c58 <_svfprintf_r+0x334>
   83bba:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   83bbe:	9c0e      	ldr	r4, [sp, #56]	; 0x38
   83bc0:	f8dc 3000 	ldr.w	r3, [ip]
   83bc4:	f10c 0c04 	add.w	ip, ip, #4
   83bc8:	f8cd c040 	str.w	ip, [sp, #64]	; 0x40
   83bcc:	601c      	str	r4, [r3, #0]
   83bce:	f7fe becf 	b.w	82970 <_svfprintf_r+0x4c>
   83bd2:	f04f 0a2d 	mov.w	sl, #45	; 0x2d
   83bd6:	f88d a08f 	strb.w	sl, [sp, #143]	; 0x8f
   83bda:	f7ff ba99 	b.w	83110 <_svfprintf_r+0x7ec>
   83bde:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83be0:	1cdc      	adds	r4, r3, #3
   83be2:	db19      	blt.n	83c18 <_svfprintf_r+0x12f4>
   83be4:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83be6:	429c      	cmp	r4, r3
   83be8:	db16      	blt.n	83c18 <_svfprintf_r+0x12f4>
   83bea:	9314      	str	r3, [sp, #80]	; 0x50
   83bec:	e714      	b.n	83a18 <_svfprintf_r+0x10f4>
   83bee:	4623      	mov	r3, r4
   83bf0:	e702      	b.n	839f8 <_svfprintf_r+0x10d4>
   83bf2:	ea24 7ce4 	bic.w	ip, r4, r4, asr #31
   83bf6:	f8cd c02c 	str.w	ip, [sp, #44]	; 0x2c
   83bfa:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83bfc:	9510      	str	r5, [sp, #64]	; 0x40
   83bfe:	900a      	str	r0, [sp, #40]	; 0x28
   83c00:	9014      	str	r0, [sp, #80]	; 0x50
   83c02:	f89d a08f 	ldrb.w	sl, [sp, #143]	; 0x8f
   83c06:	f7ff b824 	b.w	82c52 <_svfprintf_r+0x32e>
   83c0a:	783b      	ldrb	r3, [r7, #0]
   83c0c:	2b30      	cmp	r3, #48	; 0x30
   83c0e:	f000 80ad 	beq.w	83d6c <_svfprintf_r+0x1448>
   83c12:	9d25      	ldr	r5, [sp, #148]	; 0x94
   83c14:	442c      	add	r4, r5
   83c16:	e6dc      	b.n	839d2 <_svfprintf_r+0x10ae>
   83c18:	f1a8 0802 	sub.w	r8, r8, #2
   83c1c:	1e59      	subs	r1, r3, #1
   83c1e:	2900      	cmp	r1, #0
   83c20:	9125      	str	r1, [sp, #148]	; 0x94
   83c22:	bfba      	itte	lt
   83c24:	4249      	neglt	r1, r1
   83c26:	232d      	movlt	r3, #45	; 0x2d
   83c28:	232b      	movge	r3, #43	; 0x2b
   83c2a:	2909      	cmp	r1, #9
   83c2c:	f88d 809c 	strb.w	r8, [sp, #156]	; 0x9c
   83c30:	f88d 309d 	strb.w	r3, [sp, #157]	; 0x9d
   83c34:	dc65      	bgt.n	83d02 <_svfprintf_r+0x13de>
   83c36:	2330      	movs	r3, #48	; 0x30
   83c38:	3130      	adds	r1, #48	; 0x30
   83c3a:	f88d 309e 	strb.w	r3, [sp, #158]	; 0x9e
   83c3e:	f88d 109f 	strb.w	r1, [sp, #159]	; 0x9f
   83c42:	ab28      	add	r3, sp, #160	; 0xa0
   83c44:	9d11      	ldr	r5, [sp, #68]	; 0x44
   83c46:	aa27      	add	r2, sp, #156	; 0x9c
   83c48:	9c11      	ldr	r4, [sp, #68]	; 0x44
   83c4a:	1a9a      	subs	r2, r3, r2
   83c4c:	2d01      	cmp	r5, #1
   83c4e:	9219      	str	r2, [sp, #100]	; 0x64
   83c50:	4414      	add	r4, r2
   83c52:	f340 80b7 	ble.w	83dc4 <_svfprintf_r+0x14a0>
   83c56:	3401      	adds	r4, #1
   83c58:	2500      	movs	r5, #0
   83c5a:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83c5e:	9514      	str	r5, [sp, #80]	; 0x50
   83c60:	e6ea      	b.n	83a38 <_svfprintf_r+0x1114>
   83c62:	2400      	movs	r4, #0
   83c64:	4681      	mov	r9, r0
   83c66:	940a      	str	r4, [sp, #40]	; 0x28
   83c68:	f7fe beba 	b.w	829e0 <_svfprintf_r+0xbc>
   83c6c:	980d      	ldr	r0, [sp, #52]	; 0x34
   83c6e:	990c      	ldr	r1, [sp, #48]	; 0x30
   83c70:	aa2b      	add	r2, sp, #172	; 0xac
   83c72:	f003 fd51 	bl	87718 <__ssprint_r>
   83c76:	2800      	cmp	r0, #0
   83c78:	f47e af6c 	bne.w	82b54 <_svfprintf_r+0x230>
   83c7c:	9c25      	ldr	r4, [sp, #148]	; 0x94
   83c7e:	992d      	ldr	r1, [sp, #180]	; 0xb4
   83c80:	9b2c      	ldr	r3, [sp, #176]	; 0xb0
   83c82:	aa38      	add	r2, sp, #224	; 0xe0
   83c84:	e616      	b.n	838b4 <_svfprintf_r+0xf90>
   83c86:	9c14      	ldr	r4, [sp, #80]	; 0x50
   83c88:	9d11      	ldr	r5, [sp, #68]	; 0x44
   83c8a:	2c00      	cmp	r4, #0
   83c8c:	bfd4      	ite	le
   83c8e:	f1c4 0402 	rsble	r4, r4, #2
   83c92:	2401      	movgt	r4, #1
   83c94:	442c      	add	r4, r5
   83c96:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83c9a:	f04f 0867 	mov.w	r8, #103	; 0x67
   83c9e:	e6cb      	b.n	83a38 <_svfprintf_r+0x1114>
   83ca0:	9917      	ldr	r1, [sp, #92]	; 0x5c
   83ca2:	9816      	ldr	r0, [sp, #88]	; 0x58
   83ca4:	f101 4100 	add.w	r1, r1, #2147483648	; 0x80000000
   83ca8:	9020      	str	r0, [sp, #128]	; 0x80
   83caa:	9121      	str	r1, [sp, #132]	; 0x84
   83cac:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   83cb0:	e660      	b.n	83974 <_svfprintf_r+0x1050>
   83cb2:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83cb4:	2003      	movs	r0, #3
   83cb6:	a925      	add	r1, sp, #148	; 0x94
   83cb8:	aa26      	add	r2, sp, #152	; 0x98
   83cba:	ab29      	add	r3, sp, #164	; 0xa4
   83cbc:	9501      	str	r5, [sp, #4]
   83cbe:	9000      	str	r0, [sp, #0]
   83cc0:	9203      	str	r2, [sp, #12]
   83cc2:	9304      	str	r3, [sp, #16]
   83cc4:	9102      	str	r1, [sp, #8]
   83cc6:	980d      	ldr	r0, [sp, #52]	; 0x34
   83cc8:	e9dd 2320 	ldrd	r2, r3, [sp, #128]	; 0x80
   83ccc:	f001 f84c 	bl	84d68 <_dtoa_r>
   83cd0:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83cd2:	4607      	mov	r7, r0
   83cd4:	e677      	b.n	839c6 <_svfprintf_r+0x10a2>
   83cd6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83cd8:	2003      	movs	r0, #3
   83cda:	a925      	add	r1, sp, #148	; 0x94
   83cdc:	aa26      	add	r2, sp, #152	; 0x98
   83cde:	ab29      	add	r3, sp, #164	; 0xa4
   83ce0:	9401      	str	r4, [sp, #4]
   83ce2:	e7ec      	b.n	83cbe <_svfprintf_r+0x139a>
   83ce4:	9d25      	ldr	r5, [sp, #148]	; 0x94
   83ce6:	9c0a      	ldr	r4, [sp, #40]	; 0x28
   83ce8:	2d00      	cmp	r5, #0
   83cea:	9514      	str	r5, [sp, #80]	; 0x50
   83cec:	dd63      	ble.n	83db6 <_svfprintf_r+0x1492>
   83cee:	bbb4      	cbnz	r4, 83d5e <_svfprintf_r+0x143a>
   83cf0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83cf2:	07e8      	lsls	r0, r5, #31
   83cf4:	d433      	bmi.n	83d5e <_svfprintf_r+0x143a>
   83cf6:	9c14      	ldr	r4, [sp, #80]	; 0x50
   83cf8:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83cfc:	e69c      	b.n	83a38 <_svfprintf_r+0x1114>
   83cfe:	9b29      	ldr	r3, [sp, #164]	; 0xa4
   83d00:	e67a      	b.n	839f8 <_svfprintf_r+0x10d4>
   83d02:	f10d 02aa 	add.w	r2, sp, #170	; 0xaa
   83d06:	4d3e      	ldr	r5, [pc, #248]	; (83e00 <_svfprintf_r+0x14dc>)
   83d08:	17cb      	asrs	r3, r1, #31
   83d0a:	fb85 5001 	smull	r5, r0, r5, r1
   83d0e:	ebc3 00a0 	rsb	r0, r3, r0, asr #2
   83d12:	eb00 0380 	add.w	r3, r0, r0, lsl #2
   83d16:	eba1 0143 	sub.w	r1, r1, r3, lsl #1
   83d1a:	2809      	cmp	r0, #9
   83d1c:	4613      	mov	r3, r2
   83d1e:	f101 0230 	add.w	r2, r1, #48	; 0x30
   83d22:	701a      	strb	r2, [r3, #0]
   83d24:	4601      	mov	r1, r0
   83d26:	f103 32ff 	add.w	r2, r3, #4294967295
   83d2a:	dcec      	bgt.n	83d06 <_svfprintf_r+0x13e2>
   83d2c:	f100 0130 	add.w	r1, r0, #48	; 0x30
   83d30:	f10d 04ab 	add.w	r4, sp, #171	; 0xab
   83d34:	b2c9      	uxtb	r1, r1
   83d36:	4294      	cmp	r4, r2
   83d38:	f803 1c01 	strb.w	r1, [r3, #-1]
   83d3c:	d95a      	bls.n	83df4 <_svfprintf_r+0x14d0>
   83d3e:	f10d 009d 	add.w	r0, sp, #157	; 0x9d
   83d42:	461a      	mov	r2, r3
   83d44:	e001      	b.n	83d4a <_svfprintf_r+0x1426>
   83d46:	f812 1b01 	ldrb.w	r1, [r2], #1
   83d4a:	42a2      	cmp	r2, r4
   83d4c:	f800 1f01 	strb.w	r1, [r0, #1]!
   83d50:	d1f9      	bne.n	83d46 <_svfprintf_r+0x1422>
   83d52:	f50d 7c90 	add.w	ip, sp, #288	; 0x120
   83d56:	ebc3 034c 	rsb	r3, r3, ip, lsl #1
   83d5a:	3bf6      	subs	r3, #246	; 0xf6
   83d5c:	e772      	b.n	83c44 <_svfprintf_r+0x1320>
   83d5e:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83d60:	1c6c      	adds	r4, r5, #1
   83d62:	9d14      	ldr	r5, [sp, #80]	; 0x50
   83d64:	442c      	add	r4, r5
   83d66:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83d6a:	e665      	b.n	83a38 <_svfprintf_r+0x1114>
   83d6c:	e9dd 0120 	ldrd	r0, r1, [sp, #128]	; 0x80
   83d70:	2200      	movs	r2, #0
   83d72:	2300      	movs	r3, #0
   83d74:	f004 fb3a 	bl	883ec <__aeabi_dcmpeq>
   83d78:	2800      	cmp	r0, #0
   83d7a:	f47f af4a 	bne.w	83c12 <_svfprintf_r+0x12ee>
   83d7e:	f1c5 0501 	rsb	r5, r5, #1
   83d82:	9525      	str	r5, [sp, #148]	; 0x94
   83d84:	442c      	add	r4, r5
   83d86:	e624      	b.n	839d2 <_svfprintf_r+0x10ae>
   83d88:	9d14      	ldr	r5, [sp, #80]	; 0x50
   83d8a:	f04f 0867 	mov.w	r8, #103	; 0x67
   83d8e:	1c6c      	adds	r4, r5, #1
   83d90:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83d94:	e650      	b.n	83a38 <_svfprintf_r+0x1114>
   83d96:	9d10      	ldr	r5, [sp, #64]	; 0x40
   83d98:	f8dd c040 	ldr.w	ip, [sp, #64]	; 0x40
   83d9c:	682d      	ldr	r5, [r5, #0]
   83d9e:	f10c 0304 	add.w	r3, ip, #4
   83da2:	2d00      	cmp	r5, #0
   83da4:	f899 8001 	ldrb.w	r8, [r9, #1]
   83da8:	950a      	str	r5, [sp, #40]	; 0x28
   83daa:	9310      	str	r3, [sp, #64]	; 0x40
   83dac:	4681      	mov	r9, r0
   83dae:	f6be ae15 	bge.w	829dc <_svfprintf_r+0xb8>
   83db2:	f7fe be10 	b.w	829d6 <_svfprintf_r+0xb2>
   83db6:	b97c      	cbnz	r4, 83dd8 <_svfprintf_r+0x14b4>
   83db8:	9d09      	ldr	r5, [sp, #36]	; 0x24
   83dba:	07e9      	lsls	r1, r5, #31
   83dbc:	d40c      	bmi.n	83dd8 <_svfprintf_r+0x14b4>
   83dbe:	2301      	movs	r3, #1
   83dc0:	461c      	mov	r4, r3
   83dc2:	e639      	b.n	83a38 <_svfprintf_r+0x1114>
   83dc4:	f8dd c024 	ldr.w	ip, [sp, #36]	; 0x24
   83dc8:	f01c 0301 	ands.w	r3, ip, #1
   83dcc:	f47f af43 	bne.w	83c56 <_svfprintf_r+0x1332>
   83dd0:	9314      	str	r3, [sp, #80]	; 0x50
   83dd2:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83dd6:	e62f      	b.n	83a38 <_svfprintf_r+0x1114>
   83dd8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   83dda:	1cac      	adds	r4, r5, #2
   83ddc:	ea24 73e4 	bic.w	r3, r4, r4, asr #31
   83de0:	e62a      	b.n	83a38 <_svfprintf_r+0x1114>
   83de2:	9d0d      	ldr	r5, [sp, #52]	; 0x34
   83de4:	230c      	movs	r3, #12
   83de6:	602b      	str	r3, [r5, #0]
   83de8:	f04f 30ff 	mov.w	r0, #4294967295
   83dec:	f7fe beba 	b.w	82b64 <_svfprintf_r+0x240>
   83df0:	9b25      	ldr	r3, [sp, #148]	; 0x94
   83df2:	e713      	b.n	83c1c <_svfprintf_r+0x12f8>
   83df4:	f10d 039e 	add.w	r3, sp, #158	; 0x9e
   83df8:	e724      	b.n	83c44 <_svfprintf_r+0x1320>
   83dfa:	bf00      	nop
   83dfc:	00088b0c 	.word	0x00088b0c
   83e00:	66666667 	.word	0x66666667

00083e04 <__sprint_r.part.0>:
   83e04:	6e4b      	ldr	r3, [r1, #100]	; 0x64
   83e06:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   83e0a:	049c      	lsls	r4, r3, #18
   83e0c:	460e      	mov	r6, r1
   83e0e:	4680      	mov	r8, r0
   83e10:	4691      	mov	r9, r2
   83e12:	d52a      	bpl.n	83e6a <__sprint_r.part.0+0x66>
   83e14:	6893      	ldr	r3, [r2, #8]
   83e16:	6812      	ldr	r2, [r2, #0]
   83e18:	f102 0a08 	add.w	sl, r2, #8
   83e1c:	b31b      	cbz	r3, 83e66 <__sprint_r.part.0+0x62>
   83e1e:	e91a 00a0 	ldmdb	sl, {r5, r7}
   83e22:	08bf      	lsrs	r7, r7, #2
   83e24:	d017      	beq.n	83e56 <__sprint_r.part.0+0x52>
   83e26:	3d04      	subs	r5, #4
   83e28:	2400      	movs	r4, #0
   83e2a:	e001      	b.n	83e30 <__sprint_r.part.0+0x2c>
   83e2c:	42a7      	cmp	r7, r4
   83e2e:	d010      	beq.n	83e52 <__sprint_r.part.0+0x4e>
   83e30:	4640      	mov	r0, r8
   83e32:	f855 1f04 	ldr.w	r1, [r5, #4]!
   83e36:	4632      	mov	r2, r6
   83e38:	f002 f808 	bl	85e4c <_fputwc_r>
   83e3c:	1c43      	adds	r3, r0, #1
   83e3e:	f104 0401 	add.w	r4, r4, #1
   83e42:	d1f3      	bne.n	83e2c <__sprint_r.part.0+0x28>
   83e44:	2300      	movs	r3, #0
   83e46:	f8c9 3008 	str.w	r3, [r9, #8]
   83e4a:	f8c9 3004 	str.w	r3, [r9, #4]
   83e4e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   83e52:	f8d9 3008 	ldr.w	r3, [r9, #8]
   83e56:	eba3 0387 	sub.w	r3, r3, r7, lsl #2
   83e5a:	f8c9 3008 	str.w	r3, [r9, #8]
   83e5e:	f10a 0a08 	add.w	sl, sl, #8
   83e62:	2b00      	cmp	r3, #0
   83e64:	d1db      	bne.n	83e1e <__sprint_r.part.0+0x1a>
   83e66:	2000      	movs	r0, #0
   83e68:	e7ec      	b.n	83e44 <__sprint_r.part.0+0x40>
   83e6a:	f002 f969 	bl	86140 <__sfvwrite_r>
   83e6e:	2300      	movs	r3, #0
   83e70:	f8c9 3008 	str.w	r3, [r9, #8]
   83e74:	f8c9 3004 	str.w	r3, [r9, #4]
   83e78:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

00083e7c <_vfiprintf_r>:
   83e7c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   83e80:	b0b1      	sub	sp, #196	; 0xc4
   83e82:	461c      	mov	r4, r3
   83e84:	9102      	str	r1, [sp, #8]
   83e86:	4690      	mov	r8, r2
   83e88:	9308      	str	r3, [sp, #32]
   83e8a:	9006      	str	r0, [sp, #24]
   83e8c:	b118      	cbz	r0, 83e96 <_vfiprintf_r+0x1a>
   83e8e:	6b83      	ldr	r3, [r0, #56]	; 0x38
   83e90:	2b00      	cmp	r3, #0
   83e92:	f000 80e8 	beq.w	84066 <_vfiprintf_r+0x1ea>
   83e96:	9d02      	ldr	r5, [sp, #8]
   83e98:	89ab      	ldrh	r3, [r5, #12]
   83e9a:	b29a      	uxth	r2, r3
   83e9c:	0490      	lsls	r0, r2, #18
   83e9e:	d407      	bmi.n	83eb0 <_vfiprintf_r+0x34>
   83ea0:	6e6a      	ldr	r2, [r5, #100]	; 0x64
   83ea2:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   83ea6:	f422 5100 	bic.w	r1, r2, #8192	; 0x2000
   83eaa:	81ab      	strh	r3, [r5, #12]
   83eac:	b29a      	uxth	r2, r3
   83eae:	6669      	str	r1, [r5, #100]	; 0x64
   83eb0:	0711      	lsls	r1, r2, #28
   83eb2:	f140 80b7 	bpl.w	84024 <_vfiprintf_r+0x1a8>
   83eb6:	f8dd b008 	ldr.w	fp, [sp, #8]
   83eba:	f8db 3010 	ldr.w	r3, [fp, #16]
   83ebe:	2b00      	cmp	r3, #0
   83ec0:	f000 80b0 	beq.w	84024 <_vfiprintf_r+0x1a8>
   83ec4:	f002 021a 	and.w	r2, r2, #26
   83ec8:	2a0a      	cmp	r2, #10
   83eca:	f000 80b7 	beq.w	8403c <_vfiprintf_r+0x1c0>
   83ece:	2300      	movs	r3, #0
   83ed0:	f10d 0980 	add.w	r9, sp, #128	; 0x80
   83ed4:	930a      	str	r3, [sp, #40]	; 0x28
   83ed6:	9315      	str	r3, [sp, #84]	; 0x54
   83ed8:	9314      	str	r3, [sp, #80]	; 0x50
   83eda:	9309      	str	r3, [sp, #36]	; 0x24
   83edc:	f8cd 904c 	str.w	r9, [sp, #76]	; 0x4c
   83ee0:	464e      	mov	r6, r9
   83ee2:	f898 3000 	ldrb.w	r3, [r8]
   83ee6:	2b00      	cmp	r3, #0
   83ee8:	f000 84c8 	beq.w	8487c <_vfiprintf_r+0xa00>
   83eec:	2b25      	cmp	r3, #37	; 0x25
   83eee:	f000 84c5 	beq.w	8487c <_vfiprintf_r+0xa00>
   83ef2:	f108 0201 	add.w	r2, r8, #1
   83ef6:	e001      	b.n	83efc <_vfiprintf_r+0x80>
   83ef8:	2b25      	cmp	r3, #37	; 0x25
   83efa:	d004      	beq.n	83f06 <_vfiprintf_r+0x8a>
   83efc:	7813      	ldrb	r3, [r2, #0]
   83efe:	4614      	mov	r4, r2
   83f00:	3201      	adds	r2, #1
   83f02:	2b00      	cmp	r3, #0
   83f04:	d1f8      	bne.n	83ef8 <_vfiprintf_r+0x7c>
   83f06:	ebc8 0504 	rsb	r5, r8, r4
   83f0a:	b195      	cbz	r5, 83f32 <_vfiprintf_r+0xb6>
   83f0c:	9b14      	ldr	r3, [sp, #80]	; 0x50
   83f0e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   83f10:	3301      	adds	r3, #1
   83f12:	442a      	add	r2, r5
   83f14:	2b07      	cmp	r3, #7
   83f16:	f8c6 8000 	str.w	r8, [r6]
   83f1a:	6075      	str	r5, [r6, #4]
   83f1c:	9215      	str	r2, [sp, #84]	; 0x54
   83f1e:	9314      	str	r3, [sp, #80]	; 0x50
   83f20:	dd7b      	ble.n	8401a <_vfiprintf_r+0x19e>
   83f22:	2a00      	cmp	r2, #0
   83f24:	f040 84d5 	bne.w	848d2 <_vfiprintf_r+0xa56>
   83f28:	9809      	ldr	r0, [sp, #36]	; 0x24
   83f2a:	9214      	str	r2, [sp, #80]	; 0x50
   83f2c:	4428      	add	r0, r5
   83f2e:	464e      	mov	r6, r9
   83f30:	9009      	str	r0, [sp, #36]	; 0x24
   83f32:	7823      	ldrb	r3, [r4, #0]
   83f34:	2b00      	cmp	r3, #0
   83f36:	f000 83ed 	beq.w	84714 <_vfiprintf_r+0x898>
   83f3a:	2100      	movs	r1, #0
   83f3c:	f04f 0200 	mov.w	r2, #0
   83f40:	f04f 3cff 	mov.w	ip, #4294967295
   83f44:	7863      	ldrb	r3, [r4, #1]
   83f46:	f88d 2047 	strb.w	r2, [sp, #71]	; 0x47
   83f4a:	9104      	str	r1, [sp, #16]
   83f4c:	468a      	mov	sl, r1
   83f4e:	f104 0801 	add.w	r8, r4, #1
   83f52:	4608      	mov	r0, r1
   83f54:	4665      	mov	r5, ip
   83f56:	f108 0801 	add.w	r8, r8, #1
   83f5a:	f1a3 0220 	sub.w	r2, r3, #32
   83f5e:	2a58      	cmp	r2, #88	; 0x58
   83f60:	f200 82d9 	bhi.w	84516 <_vfiprintf_r+0x69a>
   83f64:	e8df f012 	tbh	[pc, r2, lsl #1]
   83f68:	02d702cb 	.word	0x02d702cb
   83f6c:	02d202d7 	.word	0x02d202d7
   83f70:	02d702d7 	.word	0x02d702d7
   83f74:	02d702d7 	.word	0x02d702d7
   83f78:	02d702d7 	.word	0x02d702d7
   83f7c:	028f0282 	.word	0x028f0282
   83f80:	008402d7 	.word	0x008402d7
   83f84:	02d70293 	.word	0x02d70293
   83f88:	0196012b 	.word	0x0196012b
   83f8c:	01960196 	.word	0x01960196
   83f90:	01960196 	.word	0x01960196
   83f94:	01960196 	.word	0x01960196
   83f98:	01960196 	.word	0x01960196
   83f9c:	02d702d7 	.word	0x02d702d7
   83fa0:	02d702d7 	.word	0x02d702d7
   83fa4:	02d702d7 	.word	0x02d702d7
   83fa8:	02d702d7 	.word	0x02d702d7
   83fac:	02d702d7 	.word	0x02d702d7
   83fb0:	02d70130 	.word	0x02d70130
   83fb4:	02d702d7 	.word	0x02d702d7
   83fb8:	02d702d7 	.word	0x02d702d7
   83fbc:	02d702d7 	.word	0x02d702d7
   83fc0:	02d702d7 	.word	0x02d702d7
   83fc4:	017b02d7 	.word	0x017b02d7
   83fc8:	02d702d7 	.word	0x02d702d7
   83fcc:	02d702d7 	.word	0x02d702d7
   83fd0:	01a402d7 	.word	0x01a402d7
   83fd4:	02d702d7 	.word	0x02d702d7
   83fd8:	02d701bf 	.word	0x02d701bf
   83fdc:	02d702d7 	.word	0x02d702d7
   83fe0:	02d702d7 	.word	0x02d702d7
   83fe4:	02d702d7 	.word	0x02d702d7
   83fe8:	02d702d7 	.word	0x02d702d7
   83fec:	01e402d7 	.word	0x01e402d7
   83ff0:	02d701fa 	.word	0x02d701fa
   83ff4:	02d702d7 	.word	0x02d702d7
   83ff8:	01fa0216 	.word	0x01fa0216
   83ffc:	02d702d7 	.word	0x02d702d7
   84000:	02d7021b 	.word	0x02d7021b
   84004:	00890228 	.word	0x00890228
   84008:	027d0266 	.word	0x027d0266
   8400c:	023a02d7 	.word	0x023a02d7
   84010:	011902d7 	.word	0x011902d7
   84014:	02d702d7 	.word	0x02d702d7
   84018:	02af      	.short	0x02af
   8401a:	3608      	adds	r6, #8
   8401c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8401e:	4428      	add	r0, r5
   84020:	9009      	str	r0, [sp, #36]	; 0x24
   84022:	e786      	b.n	83f32 <_vfiprintf_r+0xb6>
   84024:	9806      	ldr	r0, [sp, #24]
   84026:	9902      	ldr	r1, [sp, #8]
   84028:	f000 fd90 	bl	84b4c <__swsetup_r>
   8402c:	b9b0      	cbnz	r0, 8405c <_vfiprintf_r+0x1e0>
   8402e:	9d02      	ldr	r5, [sp, #8]
   84030:	89aa      	ldrh	r2, [r5, #12]
   84032:	f002 021a 	and.w	r2, r2, #26
   84036:	2a0a      	cmp	r2, #10
   84038:	f47f af49 	bne.w	83ece <_vfiprintf_r+0x52>
   8403c:	f8dd b008 	ldr.w	fp, [sp, #8]
   84040:	f9bb 300e 	ldrsh.w	r3, [fp, #14]
   84044:	2b00      	cmp	r3, #0
   84046:	f6ff af42 	blt.w	83ece <_vfiprintf_r+0x52>
   8404a:	9806      	ldr	r0, [sp, #24]
   8404c:	4659      	mov	r1, fp
   8404e:	4642      	mov	r2, r8
   84050:	4623      	mov	r3, r4
   84052:	f000 fd3d 	bl	84ad0 <__sbprintf>
   84056:	b031      	add	sp, #196	; 0xc4
   84058:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8405c:	f04f 30ff 	mov.w	r0, #4294967295
   84060:	b031      	add	sp, #196	; 0xc4
   84062:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84066:	f001 fe5b 	bl	85d20 <__sinit>
   8406a:	e714      	b.n	83e96 <_vfiprintf_r+0x1a>
   8406c:	4240      	negs	r0, r0
   8406e:	9308      	str	r3, [sp, #32]
   84070:	f04a 0a04 	orr.w	sl, sl, #4
   84074:	f898 3000 	ldrb.w	r3, [r8]
   84078:	e76d      	b.n	83f56 <_vfiprintf_r+0xda>
   8407a:	f01a 0320 	ands.w	r3, sl, #32
   8407e:	9004      	str	r0, [sp, #16]
   84080:	46ac      	mov	ip, r5
   84082:	f000 80f4 	beq.w	8426e <_vfiprintf_r+0x3f2>
   84086:	f8dd b020 	ldr.w	fp, [sp, #32]
   8408a:	f10b 0307 	add.w	r3, fp, #7
   8408e:	f023 0307 	bic.w	r3, r3, #7
   84092:	f103 0408 	add.w	r4, r3, #8
   84096:	9408      	str	r4, [sp, #32]
   84098:	e9d3 4500 	ldrd	r4, r5, [r3]
   8409c:	2300      	movs	r3, #0
   8409e:	f04f 0000 	mov.w	r0, #0
   840a2:	2100      	movs	r1, #0
   840a4:	f88d 0047 	strb.w	r0, [sp, #71]	; 0x47
   840a8:	f8cd c014 	str.w	ip, [sp, #20]
   840ac:	9107      	str	r1, [sp, #28]
   840ae:	f1bc 0f00 	cmp.w	ip, #0
   840b2:	bfa8      	it	ge
   840b4:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   840b8:	ea54 0205 	orrs.w	r2, r4, r5
   840bc:	f040 80ad 	bne.w	8421a <_vfiprintf_r+0x39e>
   840c0:	f1bc 0f00 	cmp.w	ip, #0
   840c4:	f040 80a9 	bne.w	8421a <_vfiprintf_r+0x39e>
   840c8:	2b00      	cmp	r3, #0
   840ca:	f040 83c0 	bne.w	8484e <_vfiprintf_r+0x9d2>
   840ce:	f01a 0f01 	tst.w	sl, #1
   840d2:	f000 83bc 	beq.w	8484e <_vfiprintf_r+0x9d2>
   840d6:	2330      	movs	r3, #48	; 0x30
   840d8:	af30      	add	r7, sp, #192	; 0xc0
   840da:	f807 3d41 	strb.w	r3, [r7, #-65]!
   840de:	ebc7 0409 	rsb	r4, r7, r9
   840e2:	9405      	str	r4, [sp, #20]
   840e4:	f8dd b014 	ldr.w	fp, [sp, #20]
   840e8:	9c07      	ldr	r4, [sp, #28]
   840ea:	45e3      	cmp	fp, ip
   840ec:	bfb8      	it	lt
   840ee:	46e3      	movlt	fp, ip
   840f0:	f8cd b00c 	str.w	fp, [sp, #12]
   840f4:	b11c      	cbz	r4, 840fe <_vfiprintf_r+0x282>
   840f6:	f10b 0b01 	add.w	fp, fp, #1
   840fa:	f8cd b00c 	str.w	fp, [sp, #12]
   840fe:	f01a 0502 	ands.w	r5, sl, #2
   84102:	9507      	str	r5, [sp, #28]
   84104:	d005      	beq.n	84112 <_vfiprintf_r+0x296>
   84106:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8410a:	f10b 0b02 	add.w	fp, fp, #2
   8410e:	f8cd b00c 	str.w	fp, [sp, #12]
   84112:	f01a 0384 	ands.w	r3, sl, #132	; 0x84
   84116:	930b      	str	r3, [sp, #44]	; 0x2c
   84118:	f040 821b 	bne.w	84552 <_vfiprintf_r+0x6d6>
   8411c:	9d04      	ldr	r5, [sp, #16]
   8411e:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84122:	ebcb 0405 	rsb	r4, fp, r5
   84126:	2c00      	cmp	r4, #0
   84128:	f340 8213 	ble.w	84552 <_vfiprintf_r+0x6d6>
   8412c:	2c10      	cmp	r4, #16
   8412e:	f340 8489 	ble.w	84a44 <_vfiprintf_r+0xbc8>
   84132:	4dbe      	ldr	r5, [pc, #760]	; (8442c <_vfiprintf_r+0x5b0>)
   84134:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84136:	462b      	mov	r3, r5
   84138:	9814      	ldr	r0, [sp, #80]	; 0x50
   8413a:	4625      	mov	r5, r4
   8413c:	f04f 0b10 	mov.w	fp, #16
   84140:	4664      	mov	r4, ip
   84142:	46b4      	mov	ip, r6
   84144:	461e      	mov	r6, r3
   84146:	e006      	b.n	84156 <_vfiprintf_r+0x2da>
   84148:	1c83      	adds	r3, r0, #2
   8414a:	f10c 0c08 	add.w	ip, ip, #8
   8414e:	4608      	mov	r0, r1
   84150:	3d10      	subs	r5, #16
   84152:	2d10      	cmp	r5, #16
   84154:	dd11      	ble.n	8417a <_vfiprintf_r+0x2fe>
   84156:	1c41      	adds	r1, r0, #1
   84158:	3210      	adds	r2, #16
   8415a:	2907      	cmp	r1, #7
   8415c:	9215      	str	r2, [sp, #84]	; 0x54
   8415e:	e88c 0840 	stmia.w	ip, {r6, fp}
   84162:	9114      	str	r1, [sp, #80]	; 0x50
   84164:	ddf0      	ble.n	84148 <_vfiprintf_r+0x2cc>
   84166:	2a00      	cmp	r2, #0
   84168:	f040 81e6 	bne.w	84538 <_vfiprintf_r+0x6bc>
   8416c:	3d10      	subs	r5, #16
   8416e:	2d10      	cmp	r5, #16
   84170:	f04f 0301 	mov.w	r3, #1
   84174:	4610      	mov	r0, r2
   84176:	46cc      	mov	ip, r9
   84178:	dced      	bgt.n	84156 <_vfiprintf_r+0x2da>
   8417a:	4631      	mov	r1, r6
   8417c:	4666      	mov	r6, ip
   8417e:	46a4      	mov	ip, r4
   84180:	462c      	mov	r4, r5
   84182:	460d      	mov	r5, r1
   84184:	4422      	add	r2, r4
   84186:	2b07      	cmp	r3, #7
   84188:	9215      	str	r2, [sp, #84]	; 0x54
   8418a:	6035      	str	r5, [r6, #0]
   8418c:	6074      	str	r4, [r6, #4]
   8418e:	9314      	str	r3, [sp, #80]	; 0x50
   84190:	f300 836d 	bgt.w	8486e <_vfiprintf_r+0x9f2>
   84194:	3608      	adds	r6, #8
   84196:	1c59      	adds	r1, r3, #1
   84198:	e1de      	b.n	84558 <_vfiprintf_r+0x6dc>
   8419a:	f01a 0f20 	tst.w	sl, #32
   8419e:	9004      	str	r0, [sp, #16]
   841a0:	46ac      	mov	ip, r5
   841a2:	f000 808d 	beq.w	842c0 <_vfiprintf_r+0x444>
   841a6:	9d08      	ldr	r5, [sp, #32]
   841a8:	1deb      	adds	r3, r5, #7
   841aa:	f023 0307 	bic.w	r3, r3, #7
   841ae:	f103 0b08 	add.w	fp, r3, #8
   841b2:	e9d3 4500 	ldrd	r4, r5, [r3]
   841b6:	f8cd b020 	str.w	fp, [sp, #32]
   841ba:	2301      	movs	r3, #1
   841bc:	e76f      	b.n	8409e <_vfiprintf_r+0x222>
   841be:	f04a 0a80 	orr.w	sl, sl, #128	; 0x80
   841c2:	f898 3000 	ldrb.w	r3, [r8]
   841c6:	e6c6      	b.n	83f56 <_vfiprintf_r+0xda>
   841c8:	f04a 0a10 	orr.w	sl, sl, #16
   841cc:	f01a 0f20 	tst.w	sl, #32
   841d0:	9004      	str	r0, [sp, #16]
   841d2:	46ac      	mov	ip, r5
   841d4:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   841d8:	f000 80c8 	beq.w	8436c <_vfiprintf_r+0x4f0>
   841dc:	9c08      	ldr	r4, [sp, #32]
   841de:	1de1      	adds	r1, r4, #7
   841e0:	f021 0107 	bic.w	r1, r1, #7
   841e4:	e9d1 2300 	ldrd	r2, r3, [r1]
   841e8:	3108      	adds	r1, #8
   841ea:	9108      	str	r1, [sp, #32]
   841ec:	4614      	mov	r4, r2
   841ee:	461d      	mov	r5, r3
   841f0:	2a00      	cmp	r2, #0
   841f2:	f173 0b00 	sbcs.w	fp, r3, #0
   841f6:	f2c0 83ce 	blt.w	84996 <_vfiprintf_r+0xb1a>
   841fa:	f1bc 0f00 	cmp.w	ip, #0
   841fe:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   84202:	bfa8      	it	ge
   84204:	f02a 0a80 	bicge.w	sl, sl, #128	; 0x80
   84208:	ea54 0205 	orrs.w	r2, r4, r5
   8420c:	9007      	str	r0, [sp, #28]
   8420e:	f8cd c014 	str.w	ip, [sp, #20]
   84212:	f04f 0301 	mov.w	r3, #1
   84216:	f43f af53 	beq.w	840c0 <_vfiprintf_r+0x244>
   8421a:	2b01      	cmp	r3, #1
   8421c:	f000 8319 	beq.w	84852 <_vfiprintf_r+0x9d6>
   84220:	2b02      	cmp	r3, #2
   84222:	f10d 037f 	add.w	r3, sp, #127	; 0x7f
   84226:	f040 824c 	bne.w	846c2 <_vfiprintf_r+0x846>
   8422a:	f8dd b028 	ldr.w	fp, [sp, #40]	; 0x28
   8422e:	4619      	mov	r1, r3
   84230:	f004 000f 	and.w	r0, r4, #15
   84234:	0922      	lsrs	r2, r4, #4
   84236:	f81b 0000 	ldrb.w	r0, [fp, r0]
   8423a:	ea42 7205 	orr.w	r2, r2, r5, lsl #28
   8423e:	092b      	lsrs	r3, r5, #4
   84240:	7008      	strb	r0, [r1, #0]
   84242:	ea52 0003 	orrs.w	r0, r2, r3
   84246:	460f      	mov	r7, r1
   84248:	4614      	mov	r4, r2
   8424a:	461d      	mov	r5, r3
   8424c:	f101 31ff 	add.w	r1, r1, #4294967295
   84250:	d1ee      	bne.n	84230 <_vfiprintf_r+0x3b4>
   84252:	e9cd 230e 	strd	r2, r3, [sp, #56]	; 0x38
   84256:	ebc7 0309 	rsb	r3, r7, r9
   8425a:	9305      	str	r3, [sp, #20]
   8425c:	e742      	b.n	840e4 <_vfiprintf_r+0x268>
   8425e:	f04a 0a10 	orr.w	sl, sl, #16
   84262:	f01a 0320 	ands.w	r3, sl, #32
   84266:	9004      	str	r0, [sp, #16]
   84268:	46ac      	mov	ip, r5
   8426a:	f47f af0c 	bne.w	84086 <_vfiprintf_r+0x20a>
   8426e:	f01a 0210 	ands.w	r2, sl, #16
   84272:	f040 8311 	bne.w	84898 <_vfiprintf_r+0xa1c>
   84276:	f01a 0340 	ands.w	r3, sl, #64	; 0x40
   8427a:	f000 830d 	beq.w	84898 <_vfiprintf_r+0xa1c>
   8427e:	f8dd b020 	ldr.w	fp, [sp, #32]
   84282:	4613      	mov	r3, r2
   84284:	f8bb 4000 	ldrh.w	r4, [fp]
   84288:	f10b 0b04 	add.w	fp, fp, #4
   8428c:	2500      	movs	r5, #0
   8428e:	f8cd b020 	str.w	fp, [sp, #32]
   84292:	e704      	b.n	8409e <_vfiprintf_r+0x222>
   84294:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   84298:	2000      	movs	r0, #0
   8429a:	f818 3b01 	ldrb.w	r3, [r8], #1
   8429e:	eb00 0080 	add.w	r0, r0, r0, lsl #2
   842a2:	eb02 0040 	add.w	r0, r2, r0, lsl #1
   842a6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   842aa:	2a09      	cmp	r2, #9
   842ac:	d9f5      	bls.n	8429a <_vfiprintf_r+0x41e>
   842ae:	e654      	b.n	83f5a <_vfiprintf_r+0xde>
   842b0:	f04a 0a10 	orr.w	sl, sl, #16
   842b4:	f01a 0f20 	tst.w	sl, #32
   842b8:	9004      	str	r0, [sp, #16]
   842ba:	46ac      	mov	ip, r5
   842bc:	f47f af73 	bne.w	841a6 <_vfiprintf_r+0x32a>
   842c0:	f01a 0f10 	tst.w	sl, #16
   842c4:	f040 82ef 	bne.w	848a6 <_vfiprintf_r+0xa2a>
   842c8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   842cc:	f000 82eb 	beq.w	848a6 <_vfiprintf_r+0xa2a>
   842d0:	f8dd b020 	ldr.w	fp, [sp, #32]
   842d4:	2500      	movs	r5, #0
   842d6:	f8bb 4000 	ldrh.w	r4, [fp]
   842da:	f10b 0b04 	add.w	fp, fp, #4
   842de:	2301      	movs	r3, #1
   842e0:	f8cd b020 	str.w	fp, [sp, #32]
   842e4:	e6db      	b.n	8409e <_vfiprintf_r+0x222>
   842e6:	46ac      	mov	ip, r5
   842e8:	4d51      	ldr	r5, [pc, #324]	; (84430 <_vfiprintf_r+0x5b4>)
   842ea:	f01a 0f20 	tst.w	sl, #32
   842ee:	9004      	str	r0, [sp, #16]
   842f0:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   842f4:	950a      	str	r5, [sp, #40]	; 0x28
   842f6:	f000 80f0 	beq.w	844da <_vfiprintf_r+0x65e>
   842fa:	9d08      	ldr	r5, [sp, #32]
   842fc:	1dea      	adds	r2, r5, #7
   842fe:	f022 0207 	bic.w	r2, r2, #7
   84302:	f102 0b08 	add.w	fp, r2, #8
   84306:	f8cd b020 	str.w	fp, [sp, #32]
   8430a:	e9d2 4500 	ldrd	r4, r5, [r2]
   8430e:	f01a 0f01 	tst.w	sl, #1
   84312:	f000 82aa 	beq.w	8486a <_vfiprintf_r+0x9ee>
   84316:	ea54 0b05 	orrs.w	fp, r4, r5
   8431a:	f000 82a6 	beq.w	8486a <_vfiprintf_r+0x9ee>
   8431e:	2230      	movs	r2, #48	; 0x30
   84320:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   84324:	f04a 0a02 	orr.w	sl, sl, #2
   84328:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8432c:	2302      	movs	r3, #2
   8432e:	e6b6      	b.n	8409e <_vfiprintf_r+0x222>
   84330:	9b08      	ldr	r3, [sp, #32]
   84332:	f8dd b020 	ldr.w	fp, [sp, #32]
   84336:	681b      	ldr	r3, [r3, #0]
   84338:	2401      	movs	r4, #1
   8433a:	f04f 0500 	mov.w	r5, #0
   8433e:	f10b 0b04 	add.w	fp, fp, #4
   84342:	9004      	str	r0, [sp, #16]
   84344:	9403      	str	r4, [sp, #12]
   84346:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   8434a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8434e:	f8cd b020 	str.w	fp, [sp, #32]
   84352:	9405      	str	r4, [sp, #20]
   84354:	af16      	add	r7, sp, #88	; 0x58
   84356:	f04f 0c00 	mov.w	ip, #0
   8435a:	e6d0      	b.n	840fe <_vfiprintf_r+0x282>
   8435c:	f01a 0f20 	tst.w	sl, #32
   84360:	9004      	str	r0, [sp, #16]
   84362:	46ac      	mov	ip, r5
   84364:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   84368:	f47f af38 	bne.w	841dc <_vfiprintf_r+0x360>
   8436c:	f01a 0f10 	tst.w	sl, #16
   84370:	f040 82a7 	bne.w	848c2 <_vfiprintf_r+0xa46>
   84374:	f01a 0f40 	tst.w	sl, #64	; 0x40
   84378:	f000 82a3 	beq.w	848c2 <_vfiprintf_r+0xa46>
   8437c:	f8dd b020 	ldr.w	fp, [sp, #32]
   84380:	f9bb 4000 	ldrsh.w	r4, [fp]
   84384:	f10b 0b04 	add.w	fp, fp, #4
   84388:	17e5      	asrs	r5, r4, #31
   8438a:	4622      	mov	r2, r4
   8438c:	462b      	mov	r3, r5
   8438e:	f8cd b020 	str.w	fp, [sp, #32]
   84392:	e72d      	b.n	841f0 <_vfiprintf_r+0x374>
   84394:	f04a 0a40 	orr.w	sl, sl, #64	; 0x40
   84398:	f898 3000 	ldrb.w	r3, [r8]
   8439c:	e5db      	b.n	83f56 <_vfiprintf_r+0xda>
   8439e:	f898 3000 	ldrb.w	r3, [r8]
   843a2:	4642      	mov	r2, r8
   843a4:	2b6c      	cmp	r3, #108	; 0x6c
   843a6:	bf03      	ittte	eq
   843a8:	f108 0801 	addeq.w	r8, r8, #1
   843ac:	f04a 0a20 	orreq.w	sl, sl, #32
   843b0:	7853      	ldrbeq	r3, [r2, #1]
   843b2:	f04a 0a10 	orrne.w	sl, sl, #16
   843b6:	e5ce      	b.n	83f56 <_vfiprintf_r+0xda>
   843b8:	f01a 0f20 	tst.w	sl, #32
   843bc:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   843c0:	f000 82f7 	beq.w	849b2 <_vfiprintf_r+0xb36>
   843c4:	9c08      	ldr	r4, [sp, #32]
   843c6:	6821      	ldr	r1, [r4, #0]
   843c8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   843ca:	17e5      	asrs	r5, r4, #31
   843cc:	462b      	mov	r3, r5
   843ce:	9d08      	ldr	r5, [sp, #32]
   843d0:	4622      	mov	r2, r4
   843d2:	3504      	adds	r5, #4
   843d4:	9508      	str	r5, [sp, #32]
   843d6:	e9c1 2300 	strd	r2, r3, [r1]
   843da:	e582      	b.n	83ee2 <_vfiprintf_r+0x66>
   843dc:	9c08      	ldr	r4, [sp, #32]
   843de:	46ac      	mov	ip, r5
   843e0:	6827      	ldr	r7, [r4, #0]
   843e2:	f04f 0500 	mov.w	r5, #0
   843e6:	9004      	str	r0, [sp, #16]
   843e8:	f88d 5047 	strb.w	r5, [sp, #71]	; 0x47
   843ec:	3404      	adds	r4, #4
   843ee:	2f00      	cmp	r7, #0
   843f0:	f000 8332 	beq.w	84a58 <_vfiprintf_r+0xbdc>
   843f4:	f1bc 0f00 	cmp.w	ip, #0
   843f8:	4638      	mov	r0, r7
   843fa:	f2c0 8307 	blt.w	84a0c <_vfiprintf_r+0xb90>
   843fe:	4662      	mov	r2, ip
   84400:	2100      	movs	r1, #0
   84402:	f8cd c004 	str.w	ip, [sp, #4]
   84406:	f002 fb6d 	bl	86ae4 <memchr>
   8440a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8440e:	2800      	cmp	r0, #0
   84410:	f000 833a 	beq.w	84a88 <_vfiprintf_r+0xc0c>
   84414:	1bc0      	subs	r0, r0, r7
   84416:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   8441a:	4560      	cmp	r0, ip
   8441c:	bfa8      	it	ge
   8441e:	4660      	movge	r0, ip
   84420:	9005      	str	r0, [sp, #20]
   84422:	9408      	str	r4, [sp, #32]
   84424:	9507      	str	r5, [sp, #28]
   84426:	f04f 0c00 	mov.w	ip, #0
   8442a:	e65b      	b.n	840e4 <_vfiprintf_r+0x268>
   8442c:	00088b38 	.word	0x00088b38
   84430:	00088ae4 	.word	0x00088ae4
   84434:	9b08      	ldr	r3, [sp, #32]
   84436:	f8dd b020 	ldr.w	fp, [sp, #32]
   8443a:	9004      	str	r0, [sp, #16]
   8443c:	48b2      	ldr	r0, [pc, #712]	; (84708 <_vfiprintf_r+0x88c>)
   8443e:	681c      	ldr	r4, [r3, #0]
   84440:	2230      	movs	r2, #48	; 0x30
   84442:	2378      	movs	r3, #120	; 0x78
   84444:	f10b 0b04 	add.w	fp, fp, #4
   84448:	46ac      	mov	ip, r5
   8444a:	f88d 3049 	strb.w	r3, [sp, #73]	; 0x49
   8444e:	f04a 0a02 	orr.w	sl, sl, #2
   84452:	f8cd b020 	str.w	fp, [sp, #32]
   84456:	2500      	movs	r5, #0
   84458:	f88d 2048 	strb.w	r2, [sp, #72]	; 0x48
   8445c:	900a      	str	r0, [sp, #40]	; 0x28
   8445e:	2302      	movs	r3, #2
   84460:	e61d      	b.n	8409e <_vfiprintf_r+0x222>
   84462:	f04a 0a20 	orr.w	sl, sl, #32
   84466:	f898 3000 	ldrb.w	r3, [r8]
   8446a:	e574      	b.n	83f56 <_vfiprintf_r+0xda>
   8446c:	f8dd b020 	ldr.w	fp, [sp, #32]
   84470:	f8db 0000 	ldr.w	r0, [fp]
   84474:	f10b 0304 	add.w	r3, fp, #4
   84478:	2800      	cmp	r0, #0
   8447a:	f6ff adf7 	blt.w	8406c <_vfiprintf_r+0x1f0>
   8447e:	9308      	str	r3, [sp, #32]
   84480:	f898 3000 	ldrb.w	r3, [r8]
   84484:	e567      	b.n	83f56 <_vfiprintf_r+0xda>
   84486:	f898 3000 	ldrb.w	r3, [r8]
   8448a:	212b      	movs	r1, #43	; 0x2b
   8448c:	e563      	b.n	83f56 <_vfiprintf_r+0xda>
   8448e:	f898 3000 	ldrb.w	r3, [r8]
   84492:	f108 0401 	add.w	r4, r8, #1
   84496:	2b2a      	cmp	r3, #42	; 0x2a
   84498:	f000 8305 	beq.w	84aa6 <_vfiprintf_r+0xc2a>
   8449c:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   844a0:	2a09      	cmp	r2, #9
   844a2:	bf98      	it	ls
   844a4:	2500      	movls	r5, #0
   844a6:	f200 82fa 	bhi.w	84a9e <_vfiprintf_r+0xc22>
   844aa:	f814 3b01 	ldrb.w	r3, [r4], #1
   844ae:	eb05 0585 	add.w	r5, r5, r5, lsl #2
   844b2:	eb02 0545 	add.w	r5, r2, r5, lsl #1
   844b6:	f1a3 0230 	sub.w	r2, r3, #48	; 0x30
   844ba:	2a09      	cmp	r2, #9
   844bc:	d9f5      	bls.n	844aa <_vfiprintf_r+0x62e>
   844be:	ea45 75e5 	orr.w	r5, r5, r5, asr #31
   844c2:	46a0      	mov	r8, r4
   844c4:	e549      	b.n	83f5a <_vfiprintf_r+0xde>
   844c6:	4c90      	ldr	r4, [pc, #576]	; (84708 <_vfiprintf_r+0x88c>)
   844c8:	f01a 0f20 	tst.w	sl, #32
   844cc:	9004      	str	r0, [sp, #16]
   844ce:	46ac      	mov	ip, r5
   844d0:	940a      	str	r4, [sp, #40]	; 0x28
   844d2:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   844d6:	f47f af10 	bne.w	842fa <_vfiprintf_r+0x47e>
   844da:	f01a 0f10 	tst.w	sl, #16
   844de:	f040 81ea 	bne.w	848b6 <_vfiprintf_r+0xa3a>
   844e2:	f01a 0f40 	tst.w	sl, #64	; 0x40
   844e6:	f000 81e6 	beq.w	848b6 <_vfiprintf_r+0xa3a>
   844ea:	f8dd b020 	ldr.w	fp, [sp, #32]
   844ee:	2500      	movs	r5, #0
   844f0:	f8bb 4000 	ldrh.w	r4, [fp]
   844f4:	f10b 0b04 	add.w	fp, fp, #4
   844f8:	f8cd b020 	str.w	fp, [sp, #32]
   844fc:	e707      	b.n	8430e <_vfiprintf_r+0x492>
   844fe:	f898 3000 	ldrb.w	r3, [r8]
   84502:	2900      	cmp	r1, #0
   84504:	f47f ad27 	bne.w	83f56 <_vfiprintf_r+0xda>
   84508:	2120      	movs	r1, #32
   8450a:	e524      	b.n	83f56 <_vfiprintf_r+0xda>
   8450c:	f04a 0a01 	orr.w	sl, sl, #1
   84510:	f898 3000 	ldrb.w	r3, [r8]
   84514:	e51f      	b.n	83f56 <_vfiprintf_r+0xda>
   84516:	9004      	str	r0, [sp, #16]
   84518:	f88d 1047 	strb.w	r1, [sp, #71]	; 0x47
   8451c:	2b00      	cmp	r3, #0
   8451e:	f000 80f9 	beq.w	84714 <_vfiprintf_r+0x898>
   84522:	2501      	movs	r5, #1
   84524:	f04f 0b00 	mov.w	fp, #0
   84528:	9503      	str	r5, [sp, #12]
   8452a:	f88d 3058 	strb.w	r3, [sp, #88]	; 0x58
   8452e:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   84532:	9505      	str	r5, [sp, #20]
   84534:	af16      	add	r7, sp, #88	; 0x58
   84536:	e70e      	b.n	84356 <_vfiprintf_r+0x4da>
   84538:	9806      	ldr	r0, [sp, #24]
   8453a:	9902      	ldr	r1, [sp, #8]
   8453c:	aa13      	add	r2, sp, #76	; 0x4c
   8453e:	f7ff fc61 	bl	83e04 <__sprint_r.part.0>
   84542:	2800      	cmp	r0, #0
   84544:	f040 80ed 	bne.w	84722 <_vfiprintf_r+0x8a6>
   84548:	9814      	ldr	r0, [sp, #80]	; 0x50
   8454a:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8454c:	1c43      	adds	r3, r0, #1
   8454e:	46cc      	mov	ip, r9
   84550:	e5fe      	b.n	84150 <_vfiprintf_r+0x2d4>
   84552:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84554:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84556:	1c59      	adds	r1, r3, #1
   84558:	f89d 0047 	ldrb.w	r0, [sp, #71]	; 0x47
   8455c:	b168      	cbz	r0, 8457a <_vfiprintf_r+0x6fe>
   8455e:	3201      	adds	r2, #1
   84560:	f10d 0047 	add.w	r0, sp, #71	; 0x47
   84564:	2301      	movs	r3, #1
   84566:	2907      	cmp	r1, #7
   84568:	9215      	str	r2, [sp, #84]	; 0x54
   8456a:	9114      	str	r1, [sp, #80]	; 0x50
   8456c:	e886 0009 	stmia.w	r6, {r0, r3}
   84570:	f300 8160 	bgt.w	84834 <_vfiprintf_r+0x9b8>
   84574:	460b      	mov	r3, r1
   84576:	3608      	adds	r6, #8
   84578:	3101      	adds	r1, #1
   8457a:	9c07      	ldr	r4, [sp, #28]
   8457c:	b164      	cbz	r4, 84598 <_vfiprintf_r+0x71c>
   8457e:	3202      	adds	r2, #2
   84580:	a812      	add	r0, sp, #72	; 0x48
   84582:	2302      	movs	r3, #2
   84584:	2907      	cmp	r1, #7
   84586:	9215      	str	r2, [sp, #84]	; 0x54
   84588:	9114      	str	r1, [sp, #80]	; 0x50
   8458a:	e886 0009 	stmia.w	r6, {r0, r3}
   8458e:	f300 8157 	bgt.w	84840 <_vfiprintf_r+0x9c4>
   84592:	460b      	mov	r3, r1
   84594:	3608      	adds	r6, #8
   84596:	3101      	adds	r1, #1
   84598:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8459a:	2d80      	cmp	r5, #128	; 0x80
   8459c:	f000 8101 	beq.w	847a2 <_vfiprintf_r+0x926>
   845a0:	9d05      	ldr	r5, [sp, #20]
   845a2:	ebc5 040c 	rsb	r4, r5, ip
   845a6:	2c00      	cmp	r4, #0
   845a8:	dd2f      	ble.n	8460a <_vfiprintf_r+0x78e>
   845aa:	2c10      	cmp	r4, #16
   845ac:	4d57      	ldr	r5, [pc, #348]	; (8470c <_vfiprintf_r+0x890>)
   845ae:	dd22      	ble.n	845f6 <_vfiprintf_r+0x77a>
   845b0:	4630      	mov	r0, r6
   845b2:	f04f 0b10 	mov.w	fp, #16
   845b6:	462e      	mov	r6, r5
   845b8:	4625      	mov	r5, r4
   845ba:	9c06      	ldr	r4, [sp, #24]
   845bc:	e006      	b.n	845cc <_vfiprintf_r+0x750>
   845be:	f103 0c02 	add.w	ip, r3, #2
   845c2:	3008      	adds	r0, #8
   845c4:	460b      	mov	r3, r1
   845c6:	3d10      	subs	r5, #16
   845c8:	2d10      	cmp	r5, #16
   845ca:	dd10      	ble.n	845ee <_vfiprintf_r+0x772>
   845cc:	1c59      	adds	r1, r3, #1
   845ce:	3210      	adds	r2, #16
   845d0:	2907      	cmp	r1, #7
   845d2:	9215      	str	r2, [sp, #84]	; 0x54
   845d4:	e880 0840 	stmia.w	r0, {r6, fp}
   845d8:	9114      	str	r1, [sp, #80]	; 0x50
   845da:	ddf0      	ble.n	845be <_vfiprintf_r+0x742>
   845dc:	2a00      	cmp	r2, #0
   845de:	d163      	bne.n	846a8 <_vfiprintf_r+0x82c>
   845e0:	3d10      	subs	r5, #16
   845e2:	2d10      	cmp	r5, #16
   845e4:	f04f 0c01 	mov.w	ip, #1
   845e8:	4613      	mov	r3, r2
   845ea:	4648      	mov	r0, r9
   845ec:	dcee      	bgt.n	845cc <_vfiprintf_r+0x750>
   845ee:	462c      	mov	r4, r5
   845f0:	4661      	mov	r1, ip
   845f2:	4635      	mov	r5, r6
   845f4:	4606      	mov	r6, r0
   845f6:	4422      	add	r2, r4
   845f8:	2907      	cmp	r1, #7
   845fa:	9215      	str	r2, [sp, #84]	; 0x54
   845fc:	6035      	str	r5, [r6, #0]
   845fe:	6074      	str	r4, [r6, #4]
   84600:	9114      	str	r1, [sp, #80]	; 0x50
   84602:	f300 80c1 	bgt.w	84788 <_vfiprintf_r+0x90c>
   84606:	3608      	adds	r6, #8
   84608:	3101      	adds	r1, #1
   8460a:	9d05      	ldr	r5, [sp, #20]
   8460c:	2907      	cmp	r1, #7
   8460e:	442a      	add	r2, r5
   84610:	9215      	str	r2, [sp, #84]	; 0x54
   84612:	6037      	str	r7, [r6, #0]
   84614:	6075      	str	r5, [r6, #4]
   84616:	9114      	str	r1, [sp, #80]	; 0x50
   84618:	f340 80c1 	ble.w	8479e <_vfiprintf_r+0x922>
   8461c:	2a00      	cmp	r2, #0
   8461e:	f040 8130 	bne.w	84882 <_vfiprintf_r+0xa06>
   84622:	9214      	str	r2, [sp, #80]	; 0x50
   84624:	464e      	mov	r6, r9
   84626:	f01a 0f04 	tst.w	sl, #4
   8462a:	f000 808b 	beq.w	84744 <_vfiprintf_r+0x8c8>
   8462e:	9d04      	ldr	r5, [sp, #16]
   84630:	f8dd b00c 	ldr.w	fp, [sp, #12]
   84634:	ebcb 0405 	rsb	r4, fp, r5
   84638:	2c00      	cmp	r4, #0
   8463a:	f340 8083 	ble.w	84744 <_vfiprintf_r+0x8c8>
   8463e:	2c10      	cmp	r4, #16
   84640:	f340 821e 	ble.w	84a80 <_vfiprintf_r+0xc04>
   84644:	9914      	ldr	r1, [sp, #80]	; 0x50
   84646:	4d32      	ldr	r5, [pc, #200]	; (84710 <_vfiprintf_r+0x894>)
   84648:	2710      	movs	r7, #16
   8464a:	f8dd a018 	ldr.w	sl, [sp, #24]
   8464e:	f8dd b008 	ldr.w	fp, [sp, #8]
   84652:	e005      	b.n	84660 <_vfiprintf_r+0x7e4>
   84654:	1c88      	adds	r0, r1, #2
   84656:	3608      	adds	r6, #8
   84658:	4619      	mov	r1, r3
   8465a:	3c10      	subs	r4, #16
   8465c:	2c10      	cmp	r4, #16
   8465e:	dd10      	ble.n	84682 <_vfiprintf_r+0x806>
   84660:	1c4b      	adds	r3, r1, #1
   84662:	3210      	adds	r2, #16
   84664:	2b07      	cmp	r3, #7
   84666:	9215      	str	r2, [sp, #84]	; 0x54
   84668:	e886 00a0 	stmia.w	r6, {r5, r7}
   8466c:	9314      	str	r3, [sp, #80]	; 0x50
   8466e:	ddf1      	ble.n	84654 <_vfiprintf_r+0x7d8>
   84670:	2a00      	cmp	r2, #0
   84672:	d17d      	bne.n	84770 <_vfiprintf_r+0x8f4>
   84674:	3c10      	subs	r4, #16
   84676:	2c10      	cmp	r4, #16
   84678:	f04f 0001 	mov.w	r0, #1
   8467c:	4611      	mov	r1, r2
   8467e:	464e      	mov	r6, r9
   84680:	dcee      	bgt.n	84660 <_vfiprintf_r+0x7e4>
   84682:	4422      	add	r2, r4
   84684:	2807      	cmp	r0, #7
   84686:	9215      	str	r2, [sp, #84]	; 0x54
   84688:	6035      	str	r5, [r6, #0]
   8468a:	6074      	str	r4, [r6, #4]
   8468c:	9014      	str	r0, [sp, #80]	; 0x50
   8468e:	dd59      	ble.n	84744 <_vfiprintf_r+0x8c8>
   84690:	2a00      	cmp	r2, #0
   84692:	d14f      	bne.n	84734 <_vfiprintf_r+0x8b8>
   84694:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84696:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8469a:	9d04      	ldr	r5, [sp, #16]
   8469c:	45ab      	cmp	fp, r5
   8469e:	bfac      	ite	ge
   846a0:	445c      	addge	r4, fp
   846a2:	1964      	addlt	r4, r4, r5
   846a4:	9409      	str	r4, [sp, #36]	; 0x24
   846a6:	e05e      	b.n	84766 <_vfiprintf_r+0x8ea>
   846a8:	4620      	mov	r0, r4
   846aa:	9902      	ldr	r1, [sp, #8]
   846ac:	aa13      	add	r2, sp, #76	; 0x4c
   846ae:	f7ff fba9 	bl	83e04 <__sprint_r.part.0>
   846b2:	2800      	cmp	r0, #0
   846b4:	d135      	bne.n	84722 <_vfiprintf_r+0x8a6>
   846b6:	9b14      	ldr	r3, [sp, #80]	; 0x50
   846b8:	9a15      	ldr	r2, [sp, #84]	; 0x54
   846ba:	f103 0c01 	add.w	ip, r3, #1
   846be:	4648      	mov	r0, r9
   846c0:	e781      	b.n	845c6 <_vfiprintf_r+0x74a>
   846c2:	08e0      	lsrs	r0, r4, #3
   846c4:	ea40 7045 	orr.w	r0, r0, r5, lsl #29
   846c8:	f004 0207 	and.w	r2, r4, #7
   846cc:	08e9      	lsrs	r1, r5, #3
   846ce:	3230      	adds	r2, #48	; 0x30
   846d0:	ea50 0b01 	orrs.w	fp, r0, r1
   846d4:	461f      	mov	r7, r3
   846d6:	701a      	strb	r2, [r3, #0]
   846d8:	4604      	mov	r4, r0
   846da:	460d      	mov	r5, r1
   846dc:	f103 33ff 	add.w	r3, r3, #4294967295
   846e0:	d1ef      	bne.n	846c2 <_vfiprintf_r+0x846>
   846e2:	f01a 0f01 	tst.w	sl, #1
   846e6:	e9cd 010c 	strd	r0, r1, [sp, #48]	; 0x30
   846ea:	4639      	mov	r1, r7
   846ec:	f000 80b9 	beq.w	84862 <_vfiprintf_r+0x9e6>
   846f0:	2a30      	cmp	r2, #48	; 0x30
   846f2:	f43f acf4 	beq.w	840de <_vfiprintf_r+0x262>
   846f6:	461f      	mov	r7, r3
   846f8:	ebc7 0509 	rsb	r5, r7, r9
   846fc:	2330      	movs	r3, #48	; 0x30
   846fe:	9505      	str	r5, [sp, #20]
   84700:	f801 3c01 	strb.w	r3, [r1, #-1]
   84704:	e4ee      	b.n	840e4 <_vfiprintf_r+0x268>
   84706:	bf00      	nop
   84708:	00088af8 	.word	0x00088af8
   8470c:	00088b28 	.word	0x00088b28
   84710:	00088b38 	.word	0x00088b38
   84714:	9b15      	ldr	r3, [sp, #84]	; 0x54
   84716:	b123      	cbz	r3, 84722 <_vfiprintf_r+0x8a6>
   84718:	9806      	ldr	r0, [sp, #24]
   8471a:	9902      	ldr	r1, [sp, #8]
   8471c:	aa13      	add	r2, sp, #76	; 0x4c
   8471e:	f7ff fb71 	bl	83e04 <__sprint_r.part.0>
   84722:	9c02      	ldr	r4, [sp, #8]
   84724:	89a3      	ldrh	r3, [r4, #12]
   84726:	065b      	lsls	r3, r3, #25
   84728:	f53f ac98 	bmi.w	8405c <_vfiprintf_r+0x1e0>
   8472c:	9809      	ldr	r0, [sp, #36]	; 0x24
   8472e:	b031      	add	sp, #196	; 0xc4
   84730:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84734:	9806      	ldr	r0, [sp, #24]
   84736:	9902      	ldr	r1, [sp, #8]
   84738:	aa13      	add	r2, sp, #76	; 0x4c
   8473a:	f7ff fb63 	bl	83e04 <__sprint_r.part.0>
   8473e:	2800      	cmp	r0, #0
   84740:	d1ef      	bne.n	84722 <_vfiprintf_r+0x8a6>
   84742:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84744:	9c09      	ldr	r4, [sp, #36]	; 0x24
   84746:	f8dd b00c 	ldr.w	fp, [sp, #12]
   8474a:	9d04      	ldr	r5, [sp, #16]
   8474c:	45ab      	cmp	fp, r5
   8474e:	bfac      	ite	ge
   84750:	445c      	addge	r4, fp
   84752:	1964      	addlt	r4, r4, r5
   84754:	9409      	str	r4, [sp, #36]	; 0x24
   84756:	b132      	cbz	r2, 84766 <_vfiprintf_r+0x8ea>
   84758:	9806      	ldr	r0, [sp, #24]
   8475a:	9902      	ldr	r1, [sp, #8]
   8475c:	aa13      	add	r2, sp, #76	; 0x4c
   8475e:	f7ff fb51 	bl	83e04 <__sprint_r.part.0>
   84762:	2800      	cmp	r0, #0
   84764:	d1dd      	bne.n	84722 <_vfiprintf_r+0x8a6>
   84766:	2000      	movs	r0, #0
   84768:	9014      	str	r0, [sp, #80]	; 0x50
   8476a:	464e      	mov	r6, r9
   8476c:	f7ff bbb9 	b.w	83ee2 <_vfiprintf_r+0x66>
   84770:	4650      	mov	r0, sl
   84772:	4659      	mov	r1, fp
   84774:	aa13      	add	r2, sp, #76	; 0x4c
   84776:	f7ff fb45 	bl	83e04 <__sprint_r.part.0>
   8477a:	2800      	cmp	r0, #0
   8477c:	d1d1      	bne.n	84722 <_vfiprintf_r+0x8a6>
   8477e:	9914      	ldr	r1, [sp, #80]	; 0x50
   84780:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84782:	1c48      	adds	r0, r1, #1
   84784:	464e      	mov	r6, r9
   84786:	e768      	b.n	8465a <_vfiprintf_r+0x7de>
   84788:	2a00      	cmp	r2, #0
   8478a:	f040 80f7 	bne.w	8497c <_vfiprintf_r+0xb00>
   8478e:	9c05      	ldr	r4, [sp, #20]
   84790:	2301      	movs	r3, #1
   84792:	9720      	str	r7, [sp, #128]	; 0x80
   84794:	9421      	str	r4, [sp, #132]	; 0x84
   84796:	9415      	str	r4, [sp, #84]	; 0x54
   84798:	4622      	mov	r2, r4
   8479a:	9314      	str	r3, [sp, #80]	; 0x50
   8479c:	464e      	mov	r6, r9
   8479e:	3608      	adds	r6, #8
   847a0:	e741      	b.n	84626 <_vfiprintf_r+0x7aa>
   847a2:	9d04      	ldr	r5, [sp, #16]
   847a4:	f8dd b00c 	ldr.w	fp, [sp, #12]
   847a8:	ebcb 0405 	rsb	r4, fp, r5
   847ac:	2c00      	cmp	r4, #0
   847ae:	f77f aef7 	ble.w	845a0 <_vfiprintf_r+0x724>
   847b2:	2c10      	cmp	r4, #16
   847b4:	4da6      	ldr	r5, [pc, #664]	; (84a50 <_vfiprintf_r+0xbd4>)
   847b6:	f340 8170 	ble.w	84a9a <_vfiprintf_r+0xc1e>
   847ba:	4629      	mov	r1, r5
   847bc:	f04f 0b10 	mov.w	fp, #16
   847c0:	4625      	mov	r5, r4
   847c2:	4664      	mov	r4, ip
   847c4:	46b4      	mov	ip, r6
   847c6:	460e      	mov	r6, r1
   847c8:	e006      	b.n	847d8 <_vfiprintf_r+0x95c>
   847ca:	1c98      	adds	r0, r3, #2
   847cc:	f10c 0c08 	add.w	ip, ip, #8
   847d0:	460b      	mov	r3, r1
   847d2:	3d10      	subs	r5, #16
   847d4:	2d10      	cmp	r5, #16
   847d6:	dd0f      	ble.n	847f8 <_vfiprintf_r+0x97c>
   847d8:	1c59      	adds	r1, r3, #1
   847da:	3210      	adds	r2, #16
   847dc:	2907      	cmp	r1, #7
   847de:	9215      	str	r2, [sp, #84]	; 0x54
   847e0:	e88c 0840 	stmia.w	ip, {r6, fp}
   847e4:	9114      	str	r1, [sp, #80]	; 0x50
   847e6:	ddf0      	ble.n	847ca <_vfiprintf_r+0x94e>
   847e8:	b9ba      	cbnz	r2, 8481a <_vfiprintf_r+0x99e>
   847ea:	3d10      	subs	r5, #16
   847ec:	2d10      	cmp	r5, #16
   847ee:	f04f 0001 	mov.w	r0, #1
   847f2:	4613      	mov	r3, r2
   847f4:	46cc      	mov	ip, r9
   847f6:	dcef      	bgt.n	847d8 <_vfiprintf_r+0x95c>
   847f8:	4633      	mov	r3, r6
   847fa:	4666      	mov	r6, ip
   847fc:	46a4      	mov	ip, r4
   847fe:	462c      	mov	r4, r5
   84800:	461d      	mov	r5, r3
   84802:	4422      	add	r2, r4
   84804:	2807      	cmp	r0, #7
   84806:	9215      	str	r2, [sp, #84]	; 0x54
   84808:	6035      	str	r5, [r6, #0]
   8480a:	6074      	str	r4, [r6, #4]
   8480c:	9014      	str	r0, [sp, #80]	; 0x50
   8480e:	f300 80af 	bgt.w	84970 <_vfiprintf_r+0xaf4>
   84812:	3608      	adds	r6, #8
   84814:	1c41      	adds	r1, r0, #1
   84816:	4603      	mov	r3, r0
   84818:	e6c2      	b.n	845a0 <_vfiprintf_r+0x724>
   8481a:	9806      	ldr	r0, [sp, #24]
   8481c:	9902      	ldr	r1, [sp, #8]
   8481e:	aa13      	add	r2, sp, #76	; 0x4c
   84820:	f7ff faf0 	bl	83e04 <__sprint_r.part.0>
   84824:	2800      	cmp	r0, #0
   84826:	f47f af7c 	bne.w	84722 <_vfiprintf_r+0x8a6>
   8482a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   8482c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8482e:	1c58      	adds	r0, r3, #1
   84830:	46cc      	mov	ip, r9
   84832:	e7ce      	b.n	847d2 <_vfiprintf_r+0x956>
   84834:	2a00      	cmp	r2, #0
   84836:	d179      	bne.n	8492c <_vfiprintf_r+0xab0>
   84838:	4619      	mov	r1, r3
   8483a:	464e      	mov	r6, r9
   8483c:	4613      	mov	r3, r2
   8483e:	e69c      	b.n	8457a <_vfiprintf_r+0x6fe>
   84840:	2a00      	cmp	r2, #0
   84842:	f040 8084 	bne.w	8494e <_vfiprintf_r+0xad2>
   84846:	2101      	movs	r1, #1
   84848:	4613      	mov	r3, r2
   8484a:	464e      	mov	r6, r9
   8484c:	e6a4      	b.n	84598 <_vfiprintf_r+0x71c>
   8484e:	464f      	mov	r7, r9
   84850:	e448      	b.n	840e4 <_vfiprintf_r+0x268>
   84852:	2d00      	cmp	r5, #0
   84854:	bf08      	it	eq
   84856:	2c0a      	cmpeq	r4, #10
   84858:	d246      	bcs.n	848e8 <_vfiprintf_r+0xa6c>
   8485a:	3430      	adds	r4, #48	; 0x30
   8485c:	af30      	add	r7, sp, #192	; 0xc0
   8485e:	f807 4d41 	strb.w	r4, [r7, #-65]!
   84862:	ebc7 0309 	rsb	r3, r7, r9
   84866:	9305      	str	r3, [sp, #20]
   84868:	e43c      	b.n	840e4 <_vfiprintf_r+0x268>
   8486a:	2302      	movs	r3, #2
   8486c:	e417      	b.n	8409e <_vfiprintf_r+0x222>
   8486e:	2a00      	cmp	r2, #0
   84870:	f040 80af 	bne.w	849d2 <_vfiprintf_r+0xb56>
   84874:	4613      	mov	r3, r2
   84876:	2101      	movs	r1, #1
   84878:	464e      	mov	r6, r9
   8487a:	e66d      	b.n	84558 <_vfiprintf_r+0x6dc>
   8487c:	4644      	mov	r4, r8
   8487e:	f7ff bb58 	b.w	83f32 <_vfiprintf_r+0xb6>
   84882:	9806      	ldr	r0, [sp, #24]
   84884:	9902      	ldr	r1, [sp, #8]
   84886:	aa13      	add	r2, sp, #76	; 0x4c
   84888:	f7ff fabc 	bl	83e04 <__sprint_r.part.0>
   8488c:	2800      	cmp	r0, #0
   8488e:	f47f af48 	bne.w	84722 <_vfiprintf_r+0x8a6>
   84892:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84894:	464e      	mov	r6, r9
   84896:	e6c6      	b.n	84626 <_vfiprintf_r+0x7aa>
   84898:	9d08      	ldr	r5, [sp, #32]
   8489a:	682c      	ldr	r4, [r5, #0]
   8489c:	3504      	adds	r5, #4
   8489e:	9508      	str	r5, [sp, #32]
   848a0:	2500      	movs	r5, #0
   848a2:	f7ff bbfc 	b.w	8409e <_vfiprintf_r+0x222>
   848a6:	9d08      	ldr	r5, [sp, #32]
   848a8:	2301      	movs	r3, #1
   848aa:	682c      	ldr	r4, [r5, #0]
   848ac:	3504      	adds	r5, #4
   848ae:	9508      	str	r5, [sp, #32]
   848b0:	2500      	movs	r5, #0
   848b2:	f7ff bbf4 	b.w	8409e <_vfiprintf_r+0x222>
   848b6:	9d08      	ldr	r5, [sp, #32]
   848b8:	682c      	ldr	r4, [r5, #0]
   848ba:	3504      	adds	r5, #4
   848bc:	9508      	str	r5, [sp, #32]
   848be:	2500      	movs	r5, #0
   848c0:	e525      	b.n	8430e <_vfiprintf_r+0x492>
   848c2:	9d08      	ldr	r5, [sp, #32]
   848c4:	682c      	ldr	r4, [r5, #0]
   848c6:	3504      	adds	r5, #4
   848c8:	9508      	str	r5, [sp, #32]
   848ca:	17e5      	asrs	r5, r4, #31
   848cc:	4622      	mov	r2, r4
   848ce:	462b      	mov	r3, r5
   848d0:	e48e      	b.n	841f0 <_vfiprintf_r+0x374>
   848d2:	9806      	ldr	r0, [sp, #24]
   848d4:	9902      	ldr	r1, [sp, #8]
   848d6:	aa13      	add	r2, sp, #76	; 0x4c
   848d8:	f7ff fa94 	bl	83e04 <__sprint_r.part.0>
   848dc:	2800      	cmp	r0, #0
   848de:	f47f af20 	bne.w	84722 <_vfiprintf_r+0x8a6>
   848e2:	464e      	mov	r6, r9
   848e4:	f7ff bb9a 	b.w	8401c <_vfiprintf_r+0x1a0>
   848e8:	f10d 0b7f 	add.w	fp, sp, #127	; 0x7f
   848ec:	9603      	str	r6, [sp, #12]
   848ee:	465e      	mov	r6, fp
   848f0:	46e3      	mov	fp, ip
   848f2:	4620      	mov	r0, r4
   848f4:	4629      	mov	r1, r5
   848f6:	220a      	movs	r2, #10
   848f8:	2300      	movs	r3, #0
   848fa:	f003 fdd1 	bl	884a0 <__aeabi_uldivmod>
   848fe:	3230      	adds	r2, #48	; 0x30
   84900:	7032      	strb	r2, [r6, #0]
   84902:	4620      	mov	r0, r4
   84904:	4629      	mov	r1, r5
   84906:	220a      	movs	r2, #10
   84908:	2300      	movs	r3, #0
   8490a:	f003 fdc9 	bl	884a0 <__aeabi_uldivmod>
   8490e:	4604      	mov	r4, r0
   84910:	460d      	mov	r5, r1
   84912:	ea54 0005 	orrs.w	r0, r4, r5
   84916:	4637      	mov	r7, r6
   84918:	f106 36ff 	add.w	r6, r6, #4294967295
   8491c:	d1e9      	bne.n	848f2 <_vfiprintf_r+0xa76>
   8491e:	ebc7 0309 	rsb	r3, r7, r9
   84922:	46dc      	mov	ip, fp
   84924:	9e03      	ldr	r6, [sp, #12]
   84926:	9305      	str	r3, [sp, #20]
   84928:	f7ff bbdc 	b.w	840e4 <_vfiprintf_r+0x268>
   8492c:	9806      	ldr	r0, [sp, #24]
   8492e:	9902      	ldr	r1, [sp, #8]
   84930:	aa13      	add	r2, sp, #76	; 0x4c
   84932:	f8cd c004 	str.w	ip, [sp, #4]
   84936:	f7ff fa65 	bl	83e04 <__sprint_r.part.0>
   8493a:	f8dd c004 	ldr.w	ip, [sp, #4]
   8493e:	2800      	cmp	r0, #0
   84940:	f47f aeef 	bne.w	84722 <_vfiprintf_r+0x8a6>
   84944:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84946:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84948:	1c59      	adds	r1, r3, #1
   8494a:	464e      	mov	r6, r9
   8494c:	e615      	b.n	8457a <_vfiprintf_r+0x6fe>
   8494e:	9806      	ldr	r0, [sp, #24]
   84950:	9902      	ldr	r1, [sp, #8]
   84952:	aa13      	add	r2, sp, #76	; 0x4c
   84954:	f8cd c004 	str.w	ip, [sp, #4]
   84958:	f7ff fa54 	bl	83e04 <__sprint_r.part.0>
   8495c:	f8dd c004 	ldr.w	ip, [sp, #4]
   84960:	2800      	cmp	r0, #0
   84962:	f47f aede 	bne.w	84722 <_vfiprintf_r+0x8a6>
   84966:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84968:	9a15      	ldr	r2, [sp, #84]	; 0x54
   8496a:	1c59      	adds	r1, r3, #1
   8496c:	464e      	mov	r6, r9
   8496e:	e613      	b.n	84598 <_vfiprintf_r+0x71c>
   84970:	2a00      	cmp	r2, #0
   84972:	d156      	bne.n	84a22 <_vfiprintf_r+0xba6>
   84974:	2101      	movs	r1, #1
   84976:	4613      	mov	r3, r2
   84978:	464e      	mov	r6, r9
   8497a:	e611      	b.n	845a0 <_vfiprintf_r+0x724>
   8497c:	9806      	ldr	r0, [sp, #24]
   8497e:	9902      	ldr	r1, [sp, #8]
   84980:	aa13      	add	r2, sp, #76	; 0x4c
   84982:	f7ff fa3f 	bl	83e04 <__sprint_r.part.0>
   84986:	2800      	cmp	r0, #0
   84988:	f47f aecb 	bne.w	84722 <_vfiprintf_r+0x8a6>
   8498c:	9914      	ldr	r1, [sp, #80]	; 0x50
   8498e:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84990:	3101      	adds	r1, #1
   84992:	464e      	mov	r6, r9
   84994:	e639      	b.n	8460a <_vfiprintf_r+0x78e>
   84996:	f04f 0b2d 	mov.w	fp, #45	; 0x2d
   8499a:	4264      	negs	r4, r4
   8499c:	eb65 0545 	sbc.w	r5, r5, r5, lsl #1
   849a0:	f88d b047 	strb.w	fp, [sp, #71]	; 0x47
   849a4:	f8cd b01c 	str.w	fp, [sp, #28]
   849a8:	f8cd c014 	str.w	ip, [sp, #20]
   849ac:	2301      	movs	r3, #1
   849ae:	f7ff bb7e 	b.w	840ae <_vfiprintf_r+0x232>
   849b2:	f01a 0f10 	tst.w	sl, #16
   849b6:	d11d      	bne.n	849f4 <_vfiprintf_r+0xb78>
   849b8:	f01a 0f40 	tst.w	sl, #64	; 0x40
   849bc:	d058      	beq.n	84a70 <_vfiprintf_r+0xbf4>
   849be:	9d08      	ldr	r5, [sp, #32]
   849c0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   849c4:	682b      	ldr	r3, [r5, #0]
   849c6:	3504      	adds	r5, #4
   849c8:	9508      	str	r5, [sp, #32]
   849ca:	f8a3 b000 	strh.w	fp, [r3]
   849ce:	f7ff ba88 	b.w	83ee2 <_vfiprintf_r+0x66>
   849d2:	9806      	ldr	r0, [sp, #24]
   849d4:	9902      	ldr	r1, [sp, #8]
   849d6:	aa13      	add	r2, sp, #76	; 0x4c
   849d8:	f8cd c004 	str.w	ip, [sp, #4]
   849dc:	f7ff fa12 	bl	83e04 <__sprint_r.part.0>
   849e0:	f8dd c004 	ldr.w	ip, [sp, #4]
   849e4:	2800      	cmp	r0, #0
   849e6:	f47f ae9c 	bne.w	84722 <_vfiprintf_r+0x8a6>
   849ea:	9b14      	ldr	r3, [sp, #80]	; 0x50
   849ec:	9a15      	ldr	r2, [sp, #84]	; 0x54
   849ee:	1c59      	adds	r1, r3, #1
   849f0:	464e      	mov	r6, r9
   849f2:	e5b1      	b.n	84558 <_vfiprintf_r+0x6dc>
   849f4:	f8dd b020 	ldr.w	fp, [sp, #32]
   849f8:	9c09      	ldr	r4, [sp, #36]	; 0x24
   849fa:	f8db 3000 	ldr.w	r3, [fp]
   849fe:	f10b 0b04 	add.w	fp, fp, #4
   84a02:	f8cd b020 	str.w	fp, [sp, #32]
   84a06:	601c      	str	r4, [r3, #0]
   84a08:	f7ff ba6b 	b.w	83ee2 <_vfiprintf_r+0x66>
   84a0c:	9408      	str	r4, [sp, #32]
   84a0e:	f7fd ff27 	bl	82860 <strlen>
   84a12:	f89d 4047 	ldrb.w	r4, [sp, #71]	; 0x47
   84a16:	9005      	str	r0, [sp, #20]
   84a18:	9407      	str	r4, [sp, #28]
   84a1a:	f04f 0c00 	mov.w	ip, #0
   84a1e:	f7ff bb61 	b.w	840e4 <_vfiprintf_r+0x268>
   84a22:	9806      	ldr	r0, [sp, #24]
   84a24:	9902      	ldr	r1, [sp, #8]
   84a26:	aa13      	add	r2, sp, #76	; 0x4c
   84a28:	f8cd c004 	str.w	ip, [sp, #4]
   84a2c:	f7ff f9ea 	bl	83e04 <__sprint_r.part.0>
   84a30:	f8dd c004 	ldr.w	ip, [sp, #4]
   84a34:	2800      	cmp	r0, #0
   84a36:	f47f ae74 	bne.w	84722 <_vfiprintf_r+0x8a6>
   84a3a:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84a3c:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84a3e:	1c59      	adds	r1, r3, #1
   84a40:	464e      	mov	r6, r9
   84a42:	e5ad      	b.n	845a0 <_vfiprintf_r+0x724>
   84a44:	9b14      	ldr	r3, [sp, #80]	; 0x50
   84a46:	9a15      	ldr	r2, [sp, #84]	; 0x54
   84a48:	3301      	adds	r3, #1
   84a4a:	4d02      	ldr	r5, [pc, #8]	; (84a54 <_vfiprintf_r+0xbd8>)
   84a4c:	f7ff bb9a 	b.w	84184 <_vfiprintf_r+0x308>
   84a50:	00088b28 	.word	0x00088b28
   84a54:	00088b38 	.word	0x00088b38
   84a58:	f1bc 0f06 	cmp.w	ip, #6
   84a5c:	bf34      	ite	cc
   84a5e:	4663      	movcc	r3, ip
   84a60:	2306      	movcs	r3, #6
   84a62:	9408      	str	r4, [sp, #32]
   84a64:	ea23 74e3 	bic.w	r4, r3, r3, asr #31
   84a68:	9305      	str	r3, [sp, #20]
   84a6a:	9403      	str	r4, [sp, #12]
   84a6c:	4f16      	ldr	r7, [pc, #88]	; (84ac8 <_vfiprintf_r+0xc4c>)
   84a6e:	e472      	b.n	84356 <_vfiprintf_r+0x4da>
   84a70:	9c08      	ldr	r4, [sp, #32]
   84a72:	9d09      	ldr	r5, [sp, #36]	; 0x24
   84a74:	6823      	ldr	r3, [r4, #0]
   84a76:	3404      	adds	r4, #4
   84a78:	9408      	str	r4, [sp, #32]
   84a7a:	601d      	str	r5, [r3, #0]
   84a7c:	f7ff ba31 	b.w	83ee2 <_vfiprintf_r+0x66>
   84a80:	9814      	ldr	r0, [sp, #80]	; 0x50
   84a82:	4d12      	ldr	r5, [pc, #72]	; (84acc <_vfiprintf_r+0xc50>)
   84a84:	3001      	adds	r0, #1
   84a86:	e5fc      	b.n	84682 <_vfiprintf_r+0x806>
   84a88:	f89d 5047 	ldrb.w	r5, [sp, #71]	; 0x47
   84a8c:	f8cd c014 	str.w	ip, [sp, #20]
   84a90:	9507      	str	r5, [sp, #28]
   84a92:	9408      	str	r4, [sp, #32]
   84a94:	4684      	mov	ip, r0
   84a96:	f7ff bb25 	b.w	840e4 <_vfiprintf_r+0x268>
   84a9a:	4608      	mov	r0, r1
   84a9c:	e6b1      	b.n	84802 <_vfiprintf_r+0x986>
   84a9e:	46a0      	mov	r8, r4
   84aa0:	2500      	movs	r5, #0
   84aa2:	f7ff ba5a 	b.w	83f5a <_vfiprintf_r+0xde>
   84aa6:	f8dd b020 	ldr.w	fp, [sp, #32]
   84aaa:	f898 3001 	ldrb.w	r3, [r8, #1]
   84aae:	f8db 5000 	ldr.w	r5, [fp]
   84ab2:	f10b 0204 	add.w	r2, fp, #4
   84ab6:	2d00      	cmp	r5, #0
   84ab8:	9208      	str	r2, [sp, #32]
   84aba:	46a0      	mov	r8, r4
   84abc:	f6bf aa4b 	bge.w	83f56 <_vfiprintf_r+0xda>
   84ac0:	f04f 35ff 	mov.w	r5, #4294967295
   84ac4:	f7ff ba47 	b.w	83f56 <_vfiprintf_r+0xda>
   84ac8:	00088b0c 	.word	0x00088b0c
   84acc:	00088b38 	.word	0x00088b38

00084ad0 <__sbprintf>:
   84ad0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   84ad4:	6e4f      	ldr	r7, [r1, #100]	; 0x64
   84ad6:	f5ad 6d8d 	sub.w	sp, sp, #1128	; 0x468
   84ada:	4688      	mov	r8, r1
   84adc:	9719      	str	r7, [sp, #100]	; 0x64
   84ade:	f8d8 701c 	ldr.w	r7, [r8, #28]
   84ae2:	f8b1 a00c 	ldrh.w	sl, [r1, #12]
   84ae6:	f8b1 900e 	ldrh.w	r9, [r1, #14]
   84aea:	9707      	str	r7, [sp, #28]
   84aec:	f8d8 7024 	ldr.w	r7, [r8, #36]	; 0x24
   84af0:	ac1a      	add	r4, sp, #104	; 0x68
   84af2:	f44f 6580 	mov.w	r5, #1024	; 0x400
   84af6:	f02a 0a02 	bic.w	sl, sl, #2
   84afa:	2600      	movs	r6, #0
   84afc:	4669      	mov	r1, sp
   84afe:	9400      	str	r4, [sp, #0]
   84b00:	9404      	str	r4, [sp, #16]
   84b02:	9502      	str	r5, [sp, #8]
   84b04:	9505      	str	r5, [sp, #20]
   84b06:	f8ad a00c 	strh.w	sl, [sp, #12]
   84b0a:	f8ad 900e 	strh.w	r9, [sp, #14]
   84b0e:	9709      	str	r7, [sp, #36]	; 0x24
   84b10:	9606      	str	r6, [sp, #24]
   84b12:	4605      	mov	r5, r0
   84b14:	f7ff f9b2 	bl	83e7c <_vfiprintf_r>
   84b18:	1e04      	subs	r4, r0, #0
   84b1a:	db07      	blt.n	84b2c <__sbprintf+0x5c>
   84b1c:	4628      	mov	r0, r5
   84b1e:	4669      	mov	r1, sp
   84b20:	f001 f8e2 	bl	85ce8 <_fflush_r>
   84b24:	42b0      	cmp	r0, r6
   84b26:	bf18      	it	ne
   84b28:	f04f 34ff 	movne.w	r4, #4294967295
   84b2c:	f8bd 300c 	ldrh.w	r3, [sp, #12]
   84b30:	065b      	lsls	r3, r3, #25
   84b32:	d505      	bpl.n	84b40 <__sbprintf+0x70>
   84b34:	f8b8 300c 	ldrh.w	r3, [r8, #12]
   84b38:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84b3c:	f8a8 300c 	strh.w	r3, [r8, #12]
   84b40:	4620      	mov	r0, r4
   84b42:	f50d 6d8d 	add.w	sp, sp, #1128	; 0x468
   84b46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   84b4a:	bf00      	nop

00084b4c <__swsetup_r>:
   84b4c:	4b2f      	ldr	r3, [pc, #188]	; (84c0c <__swsetup_r+0xc0>)
   84b4e:	b570      	push	{r4, r5, r6, lr}
   84b50:	4606      	mov	r6, r0
   84b52:	6818      	ldr	r0, [r3, #0]
   84b54:	460c      	mov	r4, r1
   84b56:	b110      	cbz	r0, 84b5e <__swsetup_r+0x12>
   84b58:	6b82      	ldr	r2, [r0, #56]	; 0x38
   84b5a:	2a00      	cmp	r2, #0
   84b5c:	d036      	beq.n	84bcc <__swsetup_r+0x80>
   84b5e:	89a5      	ldrh	r5, [r4, #12]
   84b60:	b2ab      	uxth	r3, r5
   84b62:	0719      	lsls	r1, r3, #28
   84b64:	d50c      	bpl.n	84b80 <__swsetup_r+0x34>
   84b66:	6922      	ldr	r2, [r4, #16]
   84b68:	b1aa      	cbz	r2, 84b96 <__swsetup_r+0x4a>
   84b6a:	f013 0101 	ands.w	r1, r3, #1
   84b6e:	d01e      	beq.n	84bae <__swsetup_r+0x62>
   84b70:	6963      	ldr	r3, [r4, #20]
   84b72:	2100      	movs	r1, #0
   84b74:	425b      	negs	r3, r3
   84b76:	61a3      	str	r3, [r4, #24]
   84b78:	60a1      	str	r1, [r4, #8]
   84b7a:	b1f2      	cbz	r2, 84bba <__swsetup_r+0x6e>
   84b7c:	2000      	movs	r0, #0
   84b7e:	bd70      	pop	{r4, r5, r6, pc}
   84b80:	06da      	lsls	r2, r3, #27
   84b82:	d53a      	bpl.n	84bfa <__swsetup_r+0xae>
   84b84:	075b      	lsls	r3, r3, #29
   84b86:	d424      	bmi.n	84bd2 <__swsetup_r+0x86>
   84b88:	6922      	ldr	r2, [r4, #16]
   84b8a:	f045 0308 	orr.w	r3, r5, #8
   84b8e:	81a3      	strh	r3, [r4, #12]
   84b90:	b29b      	uxth	r3, r3
   84b92:	2a00      	cmp	r2, #0
   84b94:	d1e9      	bne.n	84b6a <__swsetup_r+0x1e>
   84b96:	f403 7120 	and.w	r1, r3, #640	; 0x280
   84b9a:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   84b9e:	d0e4      	beq.n	84b6a <__swsetup_r+0x1e>
   84ba0:	4630      	mov	r0, r6
   84ba2:	4621      	mov	r1, r4
   84ba4:	f001 fc8a 	bl	864bc <__smakebuf_r>
   84ba8:	89a3      	ldrh	r3, [r4, #12]
   84baa:	6922      	ldr	r2, [r4, #16]
   84bac:	e7dd      	b.n	84b6a <__swsetup_r+0x1e>
   84bae:	0798      	lsls	r0, r3, #30
   84bb0:	bf58      	it	pl
   84bb2:	6961      	ldrpl	r1, [r4, #20]
   84bb4:	60a1      	str	r1, [r4, #8]
   84bb6:	2a00      	cmp	r2, #0
   84bb8:	d1e0      	bne.n	84b7c <__swsetup_r+0x30>
   84bba:	89a3      	ldrh	r3, [r4, #12]
   84bbc:	061a      	lsls	r2, r3, #24
   84bbe:	d5dd      	bpl.n	84b7c <__swsetup_r+0x30>
   84bc0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   84bc4:	81a3      	strh	r3, [r4, #12]
   84bc6:	f04f 30ff 	mov.w	r0, #4294967295
   84bca:	bd70      	pop	{r4, r5, r6, pc}
   84bcc:	f001 f8a8 	bl	85d20 <__sinit>
   84bd0:	e7c5      	b.n	84b5e <__swsetup_r+0x12>
   84bd2:	6b21      	ldr	r1, [r4, #48]	; 0x30
   84bd4:	b149      	cbz	r1, 84bea <__swsetup_r+0x9e>
   84bd6:	f104 0340 	add.w	r3, r4, #64	; 0x40
   84bda:	4299      	cmp	r1, r3
   84bdc:	d003      	beq.n	84be6 <__swsetup_r+0x9a>
   84bde:	4630      	mov	r0, r6
   84be0:	f001 f9e2 	bl	85fa8 <_free_r>
   84be4:	89a5      	ldrh	r5, [r4, #12]
   84be6:	2300      	movs	r3, #0
   84be8:	6323      	str	r3, [r4, #48]	; 0x30
   84bea:	6922      	ldr	r2, [r4, #16]
   84bec:	f025 0524 	bic.w	r5, r5, #36	; 0x24
   84bf0:	2100      	movs	r1, #0
   84bf2:	b2ad      	uxth	r5, r5
   84bf4:	6022      	str	r2, [r4, #0]
   84bf6:	6061      	str	r1, [r4, #4]
   84bf8:	e7c7      	b.n	84b8a <__swsetup_r+0x3e>
   84bfa:	f045 0540 	orr.w	r5, r5, #64	; 0x40
   84bfe:	2309      	movs	r3, #9
   84c00:	6033      	str	r3, [r6, #0]
   84c02:	f04f 30ff 	mov.w	r0, #4294967295
   84c06:	81a5      	strh	r5, [r4, #12]
   84c08:	bd70      	pop	{r4, r5, r6, pc}
   84c0a:	bf00      	nop
   84c0c:	20070578 	.word	0x20070578

00084c10 <register_fini>:
   84c10:	4b02      	ldr	r3, [pc, #8]	; (84c1c <register_fini+0xc>)
   84c12:	b113      	cbz	r3, 84c1a <register_fini+0xa>
   84c14:	4802      	ldr	r0, [pc, #8]	; (84c20 <register_fini+0x10>)
   84c16:	f000 b805 	b.w	84c24 <atexit>
   84c1a:	4770      	bx	lr
   84c1c:	00000000 	.word	0x00000000
   84c20:	00085e1d 	.word	0x00085e1d

00084c24 <atexit>:
   84c24:	4601      	mov	r1, r0
   84c26:	2000      	movs	r0, #0
   84c28:	4602      	mov	r2, r0
   84c2a:	4603      	mov	r3, r0
   84c2c:	f002 be92 	b.w	87954 <__register_exitproc>

00084c30 <quorem>:
   84c30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84c34:	6903      	ldr	r3, [r0, #16]
   84c36:	690d      	ldr	r5, [r1, #16]
   84c38:	b083      	sub	sp, #12
   84c3a:	429d      	cmp	r5, r3
   84c3c:	4683      	mov	fp, r0
   84c3e:	f300 808c 	bgt.w	84d5a <quorem+0x12a>
   84c42:	3d01      	subs	r5, #1
   84c44:	f101 0414 	add.w	r4, r1, #20
   84c48:	f100 0a14 	add.w	sl, r0, #20
   84c4c:	f854 2025 	ldr.w	r2, [r4, r5, lsl #2]
   84c50:	f85a 3025 	ldr.w	r3, [sl, r5, lsl #2]
   84c54:	3201      	adds	r2, #1
   84c56:	fbb3 f8f2 	udiv	r8, r3, r2
   84c5a:	00aa      	lsls	r2, r5, #2
   84c5c:	4691      	mov	r9, r2
   84c5e:	9200      	str	r2, [sp, #0]
   84c60:	4452      	add	r2, sl
   84c62:	44a1      	add	r9, r4
   84c64:	9201      	str	r2, [sp, #4]
   84c66:	f1b8 0f00 	cmp.w	r8, #0
   84c6a:	d03e      	beq.n	84cea <quorem+0xba>
   84c6c:	2600      	movs	r6, #0
   84c6e:	4630      	mov	r0, r6
   84c70:	4622      	mov	r2, r4
   84c72:	4653      	mov	r3, sl
   84c74:	468c      	mov	ip, r1
   84c76:	f852 7b04 	ldr.w	r7, [r2], #4
   84c7a:	6819      	ldr	r1, [r3, #0]
   84c7c:	fa1f fe87 	uxth.w	lr, r7
   84c80:	0c3f      	lsrs	r7, r7, #16
   84c82:	fb0e 6e08 	mla	lr, lr, r8, r6
   84c86:	fb07 f608 	mul.w	r6, r7, r8
   84c8a:	eb06 461e 	add.w	r6, r6, lr, lsr #16
   84c8e:	fa1f fe8e 	uxth.w	lr, lr
   84c92:	ebce 0e00 	rsb	lr, lr, r0
   84c96:	b28f      	uxth	r7, r1
   84c98:	b2b0      	uxth	r0, r6
   84c9a:	4477      	add	r7, lr
   84c9c:	ebc0 4011 	rsb	r0, r0, r1, lsr #16
   84ca0:	eb00 4027 	add.w	r0, r0, r7, asr #16
   84ca4:	b2bf      	uxth	r7, r7
   84ca6:	ea47 4700 	orr.w	r7, r7, r0, lsl #16
   84caa:	4591      	cmp	r9, r2
   84cac:	f843 7b04 	str.w	r7, [r3], #4
   84cb0:	ea4f 4020 	mov.w	r0, r0, asr #16
   84cb4:	ea4f 4616 	mov.w	r6, r6, lsr #16
   84cb8:	d2dd      	bcs.n	84c76 <quorem+0x46>
   84cba:	9a00      	ldr	r2, [sp, #0]
   84cbc:	4661      	mov	r1, ip
   84cbe:	f85a 3002 	ldr.w	r3, [sl, r2]
   84cc2:	b993      	cbnz	r3, 84cea <quorem+0xba>
   84cc4:	9a01      	ldr	r2, [sp, #4]
   84cc6:	1f13      	subs	r3, r2, #4
   84cc8:	459a      	cmp	sl, r3
   84cca:	d20c      	bcs.n	84ce6 <quorem+0xb6>
   84ccc:	f852 3c04 	ldr.w	r3, [r2, #-4]
   84cd0:	b94b      	cbnz	r3, 84ce6 <quorem+0xb6>
   84cd2:	f1a2 0308 	sub.w	r3, r2, #8
   84cd6:	e002      	b.n	84cde <quorem+0xae>
   84cd8:	681a      	ldr	r2, [r3, #0]
   84cda:	3b04      	subs	r3, #4
   84cdc:	b91a      	cbnz	r2, 84ce6 <quorem+0xb6>
   84cde:	459a      	cmp	sl, r3
   84ce0:	f105 35ff 	add.w	r5, r5, #4294967295
   84ce4:	d3f8      	bcc.n	84cd8 <quorem+0xa8>
   84ce6:	f8cb 5010 	str.w	r5, [fp, #16]
   84cea:	4658      	mov	r0, fp
   84cec:	f002 f9ca 	bl	87084 <__mcmp>
   84cf0:	2800      	cmp	r0, #0
   84cf2:	db2e      	blt.n	84d52 <quorem+0x122>
   84cf4:	f108 0801 	add.w	r8, r8, #1
   84cf8:	4653      	mov	r3, sl
   84cfa:	2200      	movs	r2, #0
   84cfc:	f854 6b04 	ldr.w	r6, [r4], #4
   84d00:	6818      	ldr	r0, [r3, #0]
   84d02:	b2b1      	uxth	r1, r6
   84d04:	1a51      	subs	r1, r2, r1
   84d06:	b287      	uxth	r7, r0
   84d08:	0c36      	lsrs	r6, r6, #16
   84d0a:	4439      	add	r1, r7
   84d0c:	ebc6 4010 	rsb	r0, r6, r0, lsr #16
   84d10:	eb00 4221 	add.w	r2, r0, r1, asr #16
   84d14:	b289      	uxth	r1, r1
   84d16:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
   84d1a:	45a1      	cmp	r9, r4
   84d1c:	f843 1b04 	str.w	r1, [r3], #4
   84d20:	ea4f 4222 	mov.w	r2, r2, asr #16
   84d24:	d2ea      	bcs.n	84cfc <quorem+0xcc>
   84d26:	f85a 2025 	ldr.w	r2, [sl, r5, lsl #2]
   84d2a:	eb0a 0385 	add.w	r3, sl, r5, lsl #2
   84d2e:	b982      	cbnz	r2, 84d52 <quorem+0x122>
   84d30:	1f1a      	subs	r2, r3, #4
   84d32:	4592      	cmp	sl, r2
   84d34:	d20b      	bcs.n	84d4e <quorem+0x11e>
   84d36:	f853 2c04 	ldr.w	r2, [r3, #-4]
   84d3a:	b942      	cbnz	r2, 84d4e <quorem+0x11e>
   84d3c:	3b08      	subs	r3, #8
   84d3e:	e002      	b.n	84d46 <quorem+0x116>
   84d40:	681a      	ldr	r2, [r3, #0]
   84d42:	3b04      	subs	r3, #4
   84d44:	b91a      	cbnz	r2, 84d4e <quorem+0x11e>
   84d46:	459a      	cmp	sl, r3
   84d48:	f105 35ff 	add.w	r5, r5, #4294967295
   84d4c:	d3f8      	bcc.n	84d40 <quorem+0x110>
   84d4e:	f8cb 5010 	str.w	r5, [fp, #16]
   84d52:	4640      	mov	r0, r8
   84d54:	b003      	add	sp, #12
   84d56:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d5a:	2000      	movs	r0, #0
   84d5c:	b003      	add	sp, #12
   84d5e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84d62:	bf00      	nop
   84d64:	0000      	movs	r0, r0
	...

00084d68 <_dtoa_r>:
   84d68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   84d6c:	6c01      	ldr	r1, [r0, #64]	; 0x40
   84d6e:	b09b      	sub	sp, #108	; 0x6c
   84d70:	4604      	mov	r4, r0
   84d72:	4692      	mov	sl, r2
   84d74:	469b      	mov	fp, r3
   84d76:	9d27      	ldr	r5, [sp, #156]	; 0x9c
   84d78:	b141      	cbz	r1, 84d8c <_dtoa_r+0x24>
   84d7a:	6c43      	ldr	r3, [r0, #68]	; 0x44
   84d7c:	2201      	movs	r2, #1
   84d7e:	409a      	lsls	r2, r3
   84d80:	604b      	str	r3, [r1, #4]
   84d82:	608a      	str	r2, [r1, #8]
   84d84:	f001 ff88 	bl	86c98 <_Bfree>
   84d88:	2300      	movs	r3, #0
   84d8a:	6423      	str	r3, [r4, #64]	; 0x40
   84d8c:	f1bb 0f00 	cmp.w	fp, #0
   84d90:	46d9      	mov	r9, fp
   84d92:	db33      	blt.n	84dfc <_dtoa_r+0x94>
   84d94:	2300      	movs	r3, #0
   84d96:	602b      	str	r3, [r5, #0]
   84d98:	4ba5      	ldr	r3, [pc, #660]	; (85030 <_dtoa_r+0x2c8>)
   84d9a:	461a      	mov	r2, r3
   84d9c:	ea09 0303 	and.w	r3, r9, r3
   84da0:	4293      	cmp	r3, r2
   84da2:	d014      	beq.n	84dce <_dtoa_r+0x66>
   84da4:	4650      	mov	r0, sl
   84da6:	4659      	mov	r1, fp
   84da8:	2200      	movs	r2, #0
   84daa:	2300      	movs	r3, #0
   84dac:	f003 fb1e 	bl	883ec <__aeabi_dcmpeq>
   84db0:	4680      	mov	r8, r0
   84db2:	b348      	cbz	r0, 84e08 <_dtoa_r+0xa0>
   84db4:	9e26      	ldr	r6, [sp, #152]	; 0x98
   84db6:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   84db8:	2301      	movs	r3, #1
   84dba:	6033      	str	r3, [r6, #0]
   84dbc:	2d00      	cmp	r5, #0
   84dbe:	f000 80ca 	beq.w	84f56 <_dtoa_r+0x1ee>
   84dc2:	489c      	ldr	r0, [pc, #624]	; (85034 <_dtoa_r+0x2cc>)
   84dc4:	6028      	str	r0, [r5, #0]
   84dc6:	3801      	subs	r0, #1
   84dc8:	b01b      	add	sp, #108	; 0x6c
   84dca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84dce:	9d26      	ldr	r5, [sp, #152]	; 0x98
   84dd0:	f242 730f 	movw	r3, #9999	; 0x270f
   84dd4:	602b      	str	r3, [r5, #0]
   84dd6:	f1ba 0f00 	cmp.w	sl, #0
   84dda:	f000 80a5 	beq.w	84f28 <_dtoa_r+0x1c0>
   84dde:	4896      	ldr	r0, [pc, #600]	; (85038 <_dtoa_r+0x2d0>)
   84de0:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   84de2:	2e00      	cmp	r6, #0
   84de4:	d0f0      	beq.n	84dc8 <_dtoa_r+0x60>
   84de6:	78c3      	ldrb	r3, [r0, #3]
   84de8:	2b00      	cmp	r3, #0
   84dea:	f000 80b6 	beq.w	84f5a <_dtoa_r+0x1f2>
   84dee:	f100 0308 	add.w	r3, r0, #8
   84df2:	9d28      	ldr	r5, [sp, #160]	; 0xa0
   84df4:	602b      	str	r3, [r5, #0]
   84df6:	b01b      	add	sp, #108	; 0x6c
   84df8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   84dfc:	2301      	movs	r3, #1
   84dfe:	f02b 4900 	bic.w	r9, fp, #2147483648	; 0x80000000
   84e02:	602b      	str	r3, [r5, #0]
   84e04:	46cb      	mov	fp, r9
   84e06:	e7c7      	b.n	84d98 <_dtoa_r+0x30>
   84e08:	aa19      	add	r2, sp, #100	; 0x64
   84e0a:	ab18      	add	r3, sp, #96	; 0x60
   84e0c:	e88d 000c 	stmia.w	sp, {r2, r3}
   84e10:	4620      	mov	r0, r4
   84e12:	4652      	mov	r2, sl
   84e14:	465b      	mov	r3, fp
   84e16:	f002 f9c5 	bl	871a4 <__d2b>
   84e1a:	ea5f 5519 	movs.w	r5, r9, lsr #20
   84e1e:	900a      	str	r0, [sp, #40]	; 0x28
   84e20:	f040 808b 	bne.w	84f3a <_dtoa_r+0x1d2>
   84e24:	9f18      	ldr	r7, [sp, #96]	; 0x60
   84e26:	9d19      	ldr	r5, [sp, #100]	; 0x64
   84e28:	f46f 6382 	mvn.w	r3, #1040	; 0x410
   84e2c:	443d      	add	r5, r7
   84e2e:	429d      	cmp	r5, r3
   84e30:	f2c0 8295 	blt.w	8535e <_dtoa_r+0x5f6>
   84e34:	331f      	adds	r3, #31
   84e36:	f205 4212 	addw	r2, r5, #1042	; 0x412
   84e3a:	1b5b      	subs	r3, r3, r5
   84e3c:	fa09 f303 	lsl.w	r3, r9, r3
   84e40:	fa2a f202 	lsr.w	r2, sl, r2
   84e44:	ea43 0002 	orr.w	r0, r3, r2
   84e48:	f002 fff2 	bl	87e30 <__aeabi_ui2d>
   84e4c:	2601      	movs	r6, #1
   84e4e:	3d01      	subs	r5, #1
   84e50:	46b8      	mov	r8, r7
   84e52:	f1a1 71f8 	sub.w	r1, r1, #32505856	; 0x1f00000
   84e56:	9616      	str	r6, [sp, #88]	; 0x58
   84e58:	2200      	movs	r2, #0
   84e5a:	4b78      	ldr	r3, [pc, #480]	; (8503c <_dtoa_r+0x2d4>)
   84e5c:	f002 feaa 	bl	87bb4 <__aeabi_dsub>
   84e60:	a36d      	add	r3, pc, #436	; (adr r3, 85018 <_dtoa_r+0x2b0>)
   84e62:	e9d3 2300 	ldrd	r2, r3, [r3]
   84e66:	f003 f859 	bl	87f1c <__aeabi_dmul>
   84e6a:	a36d      	add	r3, pc, #436	; (adr r3, 85020 <_dtoa_r+0x2b8>)
   84e6c:	e9d3 2300 	ldrd	r2, r3, [r3]
   84e70:	f002 fea2 	bl	87bb8 <__adddf3>
   84e74:	4606      	mov	r6, r0
   84e76:	4628      	mov	r0, r5
   84e78:	460f      	mov	r7, r1
   84e7a:	f002 ffe9 	bl	87e50 <__aeabi_i2d>
   84e7e:	a36a      	add	r3, pc, #424	; (adr r3, 85028 <_dtoa_r+0x2c0>)
   84e80:	e9d3 2300 	ldrd	r2, r3, [r3]
   84e84:	f003 f84a 	bl	87f1c <__aeabi_dmul>
   84e88:	4602      	mov	r2, r0
   84e8a:	460b      	mov	r3, r1
   84e8c:	4630      	mov	r0, r6
   84e8e:	4639      	mov	r1, r7
   84e90:	f002 fe92 	bl	87bb8 <__adddf3>
   84e94:	4606      	mov	r6, r0
   84e96:	460f      	mov	r7, r1
   84e98:	f003 fada 	bl	88450 <__aeabi_d2iz>
   84e9c:	4639      	mov	r1, r7
   84e9e:	9007      	str	r0, [sp, #28]
   84ea0:	2200      	movs	r2, #0
   84ea2:	4630      	mov	r0, r6
   84ea4:	2300      	movs	r3, #0
   84ea6:	f003 faab 	bl	88400 <__aeabi_dcmplt>
   84eaa:	2800      	cmp	r0, #0
   84eac:	f040 8229 	bne.w	85302 <_dtoa_r+0x59a>
   84eb0:	9e07      	ldr	r6, [sp, #28]
   84eb2:	2e16      	cmp	r6, #22
   84eb4:	f200 8222 	bhi.w	852fc <_dtoa_r+0x594>
   84eb8:	4961      	ldr	r1, [pc, #388]	; (85040 <_dtoa_r+0x2d8>)
   84eba:	4652      	mov	r2, sl
   84ebc:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
   84ec0:	465b      	mov	r3, fp
   84ec2:	e9d1 0100 	ldrd	r0, r1, [r1]
   84ec6:	f003 fab9 	bl	8843c <__aeabi_dcmpgt>
   84eca:	2800      	cmp	r0, #0
   84ecc:	f000 824c 	beq.w	85368 <_dtoa_r+0x600>
   84ed0:	3e01      	subs	r6, #1
   84ed2:	9607      	str	r6, [sp, #28]
   84ed4:	2600      	movs	r6, #0
   84ed6:	960e      	str	r6, [sp, #56]	; 0x38
   84ed8:	ebc5 0508 	rsb	r5, r5, r8
   84edc:	3d01      	subs	r5, #1
   84ede:	9506      	str	r5, [sp, #24]
   84ee0:	f100 8226 	bmi.w	85330 <_dtoa_r+0x5c8>
   84ee4:	2500      	movs	r5, #0
   84ee6:	9508      	str	r5, [sp, #32]
   84ee8:	9e07      	ldr	r6, [sp, #28]
   84eea:	2e00      	cmp	r6, #0
   84eec:	f2c0 8217 	blt.w	8531e <_dtoa_r+0x5b6>
   84ef0:	9d06      	ldr	r5, [sp, #24]
   84ef2:	960d      	str	r6, [sp, #52]	; 0x34
   84ef4:	4435      	add	r5, r6
   84ef6:	2600      	movs	r6, #0
   84ef8:	9506      	str	r5, [sp, #24]
   84efa:	960c      	str	r6, [sp, #48]	; 0x30
   84efc:	9d24      	ldr	r5, [sp, #144]	; 0x90
   84efe:	2d09      	cmp	r5, #9
   84f00:	d82d      	bhi.n	84f5e <_dtoa_r+0x1f6>
   84f02:	2d05      	cmp	r5, #5
   84f04:	bfc4      	itt	gt
   84f06:	3d04      	subgt	r5, #4
   84f08:	9524      	strgt	r5, [sp, #144]	; 0x90
   84f0a:	9e24      	ldr	r6, [sp, #144]	; 0x90
   84f0c:	bfc8      	it	gt
   84f0e:	2500      	movgt	r5, #0
   84f10:	f1a6 0302 	sub.w	r3, r6, #2
   84f14:	bfd8      	it	le
   84f16:	2501      	movle	r5, #1
   84f18:	2b03      	cmp	r3, #3
   84f1a:	d822      	bhi.n	84f62 <_dtoa_r+0x1fa>
   84f1c:	e8df f013 	tbh	[pc, r3, lsl #1]
   84f20:	029e03b7 	.word	0x029e03b7
   84f24:	049a03c0 	.word	0x049a03c0
   84f28:	4a46      	ldr	r2, [pc, #280]	; (85044 <_dtoa_r+0x2dc>)
   84f2a:	4b43      	ldr	r3, [pc, #268]	; (85038 <_dtoa_r+0x2d0>)
   84f2c:	f3c9 0013 	ubfx	r0, r9, #0, #20
   84f30:	2800      	cmp	r0, #0
   84f32:	bf0c      	ite	eq
   84f34:	4610      	moveq	r0, r2
   84f36:	4618      	movne	r0, r3
   84f38:	e752      	b.n	84de0 <_dtoa_r+0x78>
   84f3a:	f3cb 0313 	ubfx	r3, fp, #0, #20
   84f3e:	f043 517f 	orr.w	r1, r3, #1069547520	; 0x3fc00000
   84f42:	f8cd 8058 	str.w	r8, [sp, #88]	; 0x58
   84f46:	4650      	mov	r0, sl
   84f48:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
   84f4c:	f441 1140 	orr.w	r1, r1, #3145728	; 0x300000
   84f50:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
   84f54:	e780      	b.n	84e58 <_dtoa_r+0xf0>
   84f56:	483c      	ldr	r0, [pc, #240]	; (85048 <_dtoa_r+0x2e0>)
   84f58:	e736      	b.n	84dc8 <_dtoa_r+0x60>
   84f5a:	1cc3      	adds	r3, r0, #3
   84f5c:	e749      	b.n	84df2 <_dtoa_r+0x8a>
   84f5e:	2500      	movs	r5, #0
   84f60:	9524      	str	r5, [sp, #144]	; 0x90
   84f62:	2500      	movs	r5, #0
   84f64:	6465      	str	r5, [r4, #68]	; 0x44
   84f66:	4629      	mov	r1, r5
   84f68:	4620      	mov	r0, r4
   84f6a:	f001 fe6f 	bl	86c4c <_Balloc>
   84f6e:	f04f 39ff 	mov.w	r9, #4294967295
   84f72:	2601      	movs	r6, #1
   84f74:	9009      	str	r0, [sp, #36]	; 0x24
   84f76:	9525      	str	r5, [sp, #148]	; 0x94
   84f78:	6420      	str	r0, [r4, #64]	; 0x40
   84f7a:	f8cd 903c 	str.w	r9, [sp, #60]	; 0x3c
   84f7e:	960b      	str	r6, [sp, #44]	; 0x2c
   84f80:	9b19      	ldr	r3, [sp, #100]	; 0x64
   84f82:	2b00      	cmp	r3, #0
   84f84:	f2c0 80d2 	blt.w	8512c <_dtoa_r+0x3c4>
   84f88:	9e07      	ldr	r6, [sp, #28]
   84f8a:	2e0e      	cmp	r6, #14
   84f8c:	f300 80ce 	bgt.w	8512c <_dtoa_r+0x3c4>
   84f90:	4b2b      	ldr	r3, [pc, #172]	; (85040 <_dtoa_r+0x2d8>)
   84f92:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
   84f96:	e9d3 0100 	ldrd	r0, r1, [r3]
   84f9a:	e9cd 0104 	strd	r0, r1, [sp, #16]
   84f9e:	9925      	ldr	r1, [sp, #148]	; 0x94
   84fa0:	2900      	cmp	r1, #0
   84fa2:	f2c0 8380 	blt.w	856a6 <_dtoa_r+0x93e>
   84fa6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   84faa:	4659      	mov	r1, fp
   84fac:	4650      	mov	r0, sl
   84fae:	f003 f8df 	bl	88170 <__aeabi_ddiv>
   84fb2:	f003 fa4d 	bl	88450 <__aeabi_d2iz>
   84fb6:	4605      	mov	r5, r0
   84fb8:	f002 ff4a 	bl	87e50 <__aeabi_i2d>
   84fbc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   84fc0:	f002 ffac 	bl	87f1c <__aeabi_dmul>
   84fc4:	4602      	mov	r2, r0
   84fc6:	460b      	mov	r3, r1
   84fc8:	4650      	mov	r0, sl
   84fca:	4659      	mov	r1, fp
   84fcc:	f002 fdf2 	bl	87bb4 <__aeabi_dsub>
   84fd0:	9a09      	ldr	r2, [sp, #36]	; 0x24
   84fd2:	f105 0330 	add.w	r3, r5, #48	; 0x30
   84fd6:	f1b9 0f01 	cmp.w	r9, #1
   84fda:	4606      	mov	r6, r0
   84fdc:	460f      	mov	r7, r1
   84fde:	7013      	strb	r3, [r2, #0]
   84fe0:	f102 0b01 	add.w	fp, r2, #1
   84fe4:	d064      	beq.n	850b0 <_dtoa_r+0x348>
   84fe6:	2200      	movs	r2, #0
   84fe8:	4b18      	ldr	r3, [pc, #96]	; (8504c <_dtoa_r+0x2e4>)
   84fea:	f002 ff97 	bl	87f1c <__aeabi_dmul>
   84fee:	2200      	movs	r2, #0
   84ff0:	2300      	movs	r3, #0
   84ff2:	4606      	mov	r6, r0
   84ff4:	460f      	mov	r7, r1
   84ff6:	f003 f9f9 	bl	883ec <__aeabi_dcmpeq>
   84ffa:	2800      	cmp	r0, #0
   84ffc:	f040 8081 	bne.w	85102 <_dtoa_r+0x39a>
   85000:	f8dd 8024 	ldr.w	r8, [sp, #36]	; 0x24
   85004:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85006:	44c8      	add	r8, r9
   85008:	e9dd ab04 	ldrd	sl, fp, [sp, #16]
   8500c:	f105 0902 	add.w	r9, r5, #2
   85010:	9403      	str	r4, [sp, #12]
   85012:	e028      	b.n	85066 <_dtoa_r+0x2fe>
   85014:	f3af 8000 	nop.w
   85018:	636f4361 	.word	0x636f4361
   8501c:	3fd287a7 	.word	0x3fd287a7
   85020:	8b60c8b3 	.word	0x8b60c8b3
   85024:	3fc68a28 	.word	0x3fc68a28
   85028:	509f79fb 	.word	0x509f79fb
   8502c:	3fd34413 	.word	0x3fd34413
   85030:	7ff00000 	.word	0x7ff00000
   85034:	00088b15 	.word	0x00088b15
   85038:	00088b54 	.word	0x00088b54
   8503c:	3ff80000 	.word	0x3ff80000
   85040:	00088b68 	.word	0x00088b68
   85044:	00088b48 	.word	0x00088b48
   85048:	00088b14 	.word	0x00088b14
   8504c:	40240000 	.word	0x40240000
   85050:	f002 ff64 	bl	87f1c <__aeabi_dmul>
   85054:	2200      	movs	r2, #0
   85056:	2300      	movs	r3, #0
   85058:	4606      	mov	r6, r0
   8505a:	460f      	mov	r7, r1
   8505c:	f003 f9c6 	bl	883ec <__aeabi_dcmpeq>
   85060:	2800      	cmp	r0, #0
   85062:	f040 83c1 	bne.w	857e8 <_dtoa_r+0xa80>
   85066:	4652      	mov	r2, sl
   85068:	465b      	mov	r3, fp
   8506a:	4630      	mov	r0, r6
   8506c:	4639      	mov	r1, r7
   8506e:	f003 f87f 	bl	88170 <__aeabi_ddiv>
   85072:	f003 f9ed 	bl	88450 <__aeabi_d2iz>
   85076:	4605      	mov	r5, r0
   85078:	f002 feea 	bl	87e50 <__aeabi_i2d>
   8507c:	4652      	mov	r2, sl
   8507e:	465b      	mov	r3, fp
   85080:	f002 ff4c 	bl	87f1c <__aeabi_dmul>
   85084:	4602      	mov	r2, r0
   85086:	460b      	mov	r3, r1
   85088:	4630      	mov	r0, r6
   8508a:	4639      	mov	r1, r7
   8508c:	f002 fd92 	bl	87bb4 <__aeabi_dsub>
   85090:	f105 0e30 	add.w	lr, r5, #48	; 0x30
   85094:	45c1      	cmp	r9, r8
   85096:	f809 ec01 	strb.w	lr, [r9, #-1]
   8509a:	464c      	mov	r4, r9
   8509c:	4606      	mov	r6, r0
   8509e:	460f      	mov	r7, r1
   850a0:	f04f 0200 	mov.w	r2, #0
   850a4:	4ba7      	ldr	r3, [pc, #668]	; (85344 <_dtoa_r+0x5dc>)
   850a6:	f109 0901 	add.w	r9, r9, #1
   850aa:	d1d1      	bne.n	85050 <_dtoa_r+0x2e8>
   850ac:	46a3      	mov	fp, r4
   850ae:	9c03      	ldr	r4, [sp, #12]
   850b0:	4632      	mov	r2, r6
   850b2:	463b      	mov	r3, r7
   850b4:	4630      	mov	r0, r6
   850b6:	4639      	mov	r1, r7
   850b8:	f002 fd7e 	bl	87bb8 <__adddf3>
   850bc:	4606      	mov	r6, r0
   850be:	460f      	mov	r7, r1
   850c0:	4632      	mov	r2, r6
   850c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   850c6:	463b      	mov	r3, r7
   850c8:	f003 f99a 	bl	88400 <__aeabi_dcmplt>
   850cc:	b940      	cbnz	r0, 850e0 <_dtoa_r+0x378>
   850ce:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   850d2:	4632      	mov	r2, r6
   850d4:	463b      	mov	r3, r7
   850d6:	f003 f989 	bl	883ec <__aeabi_dcmpeq>
   850da:	b190      	cbz	r0, 85102 <_dtoa_r+0x39a>
   850dc:	07eb      	lsls	r3, r5, #31
   850de:	d510      	bpl.n	85102 <_dtoa_r+0x39a>
   850e0:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   850e4:	9a09      	ldr	r2, [sp, #36]	; 0x24
   850e6:	e005      	b.n	850f4 <_dtoa_r+0x38c>
   850e8:	429a      	cmp	r2, r3
   850ea:	f000 8429 	beq.w	85940 <_dtoa_r+0xbd8>
   850ee:	f813 5c01 	ldrb.w	r5, [r3, #-1]
   850f2:	469b      	mov	fp, r3
   850f4:	2d39      	cmp	r5, #57	; 0x39
   850f6:	f10b 33ff 	add.w	r3, fp, #4294967295
   850fa:	d0f5      	beq.n	850e8 <_dtoa_r+0x380>
   850fc:	1c6a      	adds	r2, r5, #1
   850fe:	b2d2      	uxtb	r2, r2
   85100:	701a      	strb	r2, [r3, #0]
   85102:	4620      	mov	r0, r4
   85104:	990a      	ldr	r1, [sp, #40]	; 0x28
   85106:	f001 fdc7 	bl	86c98 <_Bfree>
   8510a:	9e07      	ldr	r6, [sp, #28]
   8510c:	9d26      	ldr	r5, [sp, #152]	; 0x98
   8510e:	1c73      	adds	r3, r6, #1
   85110:	9e28      	ldr	r6, [sp, #160]	; 0xa0
   85112:	2200      	movs	r2, #0
   85114:	f88b 2000 	strb.w	r2, [fp]
   85118:	602b      	str	r3, [r5, #0]
   8511a:	2e00      	cmp	r6, #0
   8511c:	f000 8325 	beq.w	8576a <_dtoa_r+0xa02>
   85120:	9809      	ldr	r0, [sp, #36]	; 0x24
   85122:	f8c6 b000 	str.w	fp, [r6]
   85126:	b01b      	add	sp, #108	; 0x6c
   85128:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8512c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8512e:	2d00      	cmp	r5, #0
   85130:	f000 8103 	beq.w	8533a <_dtoa_r+0x5d2>
   85134:	9e24      	ldr	r6, [sp, #144]	; 0x90
   85136:	2e01      	cmp	r6, #1
   85138:	f340 82dc 	ble.w	856f4 <_dtoa_r+0x98c>
   8513c:	9e0c      	ldr	r6, [sp, #48]	; 0x30
   8513e:	f109 37ff 	add.w	r7, r9, #4294967295
   85142:	42be      	cmp	r6, r7
   85144:	f2c0 8389 	blt.w	8585a <_dtoa_r+0xaf2>
   85148:	1bf7      	subs	r7, r6, r7
   8514a:	f1b9 0f00 	cmp.w	r9, #0
   8514e:	f2c0 8487 	blt.w	85a60 <_dtoa_r+0xcf8>
   85152:	9d08      	ldr	r5, [sp, #32]
   85154:	464b      	mov	r3, r9
   85156:	9e08      	ldr	r6, [sp, #32]
   85158:	4620      	mov	r0, r4
   8515a:	441e      	add	r6, r3
   8515c:	9608      	str	r6, [sp, #32]
   8515e:	9e06      	ldr	r6, [sp, #24]
   85160:	2101      	movs	r1, #1
   85162:	441e      	add	r6, r3
   85164:	9606      	str	r6, [sp, #24]
   85166:	f001 fe39 	bl	86ddc <__i2b>
   8516a:	4606      	mov	r6, r0
   8516c:	b165      	cbz	r5, 85188 <_dtoa_r+0x420>
   8516e:	9806      	ldr	r0, [sp, #24]
   85170:	2800      	cmp	r0, #0
   85172:	dd09      	ble.n	85188 <_dtoa_r+0x420>
   85174:	4603      	mov	r3, r0
   85176:	9908      	ldr	r1, [sp, #32]
   85178:	42ab      	cmp	r3, r5
   8517a:	bfa8      	it	ge
   8517c:	462b      	movge	r3, r5
   8517e:	1ac9      	subs	r1, r1, r3
   85180:	1ac0      	subs	r0, r0, r3
   85182:	9108      	str	r1, [sp, #32]
   85184:	1aed      	subs	r5, r5, r3
   85186:	9006      	str	r0, [sp, #24]
   85188:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8518a:	2a00      	cmp	r2, #0
   8518c:	dd1d      	ble.n	851ca <_dtoa_r+0x462>
   8518e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   85190:	2b00      	cmp	r3, #0
   85192:	f000 8358 	beq.w	85846 <_dtoa_r+0xade>
   85196:	2f00      	cmp	r7, #0
   85198:	dd11      	ble.n	851be <_dtoa_r+0x456>
   8519a:	4631      	mov	r1, r6
   8519c:	463a      	mov	r2, r7
   8519e:	4620      	mov	r0, r4
   851a0:	f001 fec4 	bl	86f2c <__pow5mult>
   851a4:	4606      	mov	r6, r0
   851a6:	4631      	mov	r1, r6
   851a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   851aa:	4620      	mov	r0, r4
   851ac:	f001 fe20 	bl	86df0 <__multiply>
   851b0:	990a      	ldr	r1, [sp, #40]	; 0x28
   851b2:	4680      	mov	r8, r0
   851b4:	4620      	mov	r0, r4
   851b6:	f001 fd6f 	bl	86c98 <_Bfree>
   851ba:	f8cd 8028 	str.w	r8, [sp, #40]	; 0x28
   851be:	f8dd e030 	ldr.w	lr, [sp, #48]	; 0x30
   851c2:	ebbe 0207 	subs.w	r2, lr, r7
   851c6:	f040 828f 	bne.w	856e8 <_dtoa_r+0x980>
   851ca:	4620      	mov	r0, r4
   851cc:	2101      	movs	r1, #1
   851ce:	f001 fe05 	bl	86ddc <__i2b>
   851d2:	4680      	mov	r8, r0
   851d4:	980d      	ldr	r0, [sp, #52]	; 0x34
   851d6:	2800      	cmp	r0, #0
   851d8:	dd05      	ble.n	851e6 <_dtoa_r+0x47e>
   851da:	4641      	mov	r1, r8
   851dc:	4620      	mov	r0, r4
   851de:	9a0d      	ldr	r2, [sp, #52]	; 0x34
   851e0:	f001 fea4 	bl	86f2c <__pow5mult>
   851e4:	4680      	mov	r8, r0
   851e6:	9924      	ldr	r1, [sp, #144]	; 0x90
   851e8:	2901      	cmp	r1, #1
   851ea:	f340 82c1 	ble.w	85770 <_dtoa_r+0xa08>
   851ee:	2700      	movs	r7, #0
   851f0:	980d      	ldr	r0, [sp, #52]	; 0x34
   851f2:	2800      	cmp	r0, #0
   851f4:	f040 82af 	bne.w	85756 <_dtoa_r+0x9ee>
   851f8:	2001      	movs	r0, #1
   851fa:	9b06      	ldr	r3, [sp, #24]
   851fc:	4403      	add	r3, r0
   851fe:	f013 031f 	ands.w	r3, r3, #31
   85202:	f000 80a1 	beq.w	85348 <_dtoa_r+0x5e0>
   85206:	f1c3 0220 	rsb	r2, r3, #32
   8520a:	2a04      	cmp	r2, #4
   8520c:	f340 84b7 	ble.w	85b7e <_dtoa_r+0xe16>
   85210:	9908      	ldr	r1, [sp, #32]
   85212:	9a06      	ldr	r2, [sp, #24]
   85214:	f1c3 031c 	rsb	r3, r3, #28
   85218:	4419      	add	r1, r3
   8521a:	441a      	add	r2, r3
   8521c:	9108      	str	r1, [sp, #32]
   8521e:	441d      	add	r5, r3
   85220:	9206      	str	r2, [sp, #24]
   85222:	9908      	ldr	r1, [sp, #32]
   85224:	2900      	cmp	r1, #0
   85226:	dd05      	ble.n	85234 <_dtoa_r+0x4cc>
   85228:	990a      	ldr	r1, [sp, #40]	; 0x28
   8522a:	9a08      	ldr	r2, [sp, #32]
   8522c:	4620      	mov	r0, r4
   8522e:	f001 fecb 	bl	86fc8 <__lshift>
   85232:	900a      	str	r0, [sp, #40]	; 0x28
   85234:	9a06      	ldr	r2, [sp, #24]
   85236:	2a00      	cmp	r2, #0
   85238:	dd04      	ble.n	85244 <_dtoa_r+0x4dc>
   8523a:	4641      	mov	r1, r8
   8523c:	4620      	mov	r0, r4
   8523e:	f001 fec3 	bl	86fc8 <__lshift>
   85242:	4680      	mov	r8, r0
   85244:	9b0e      	ldr	r3, [sp, #56]	; 0x38
   85246:	2b00      	cmp	r3, #0
   85248:	f040 826a 	bne.w	85720 <_dtoa_r+0x9b8>
   8524c:	f1b9 0f00 	cmp.w	r9, #0
   85250:	f340 82a6 	ble.w	857a0 <_dtoa_r+0xa38>
   85254:	980b      	ldr	r0, [sp, #44]	; 0x2c
   85256:	2800      	cmp	r0, #0
   85258:	f040 8088 	bne.w	8536c <_dtoa_r+0x604>
   8525c:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   8525e:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   85260:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   85264:	e006      	b.n	85274 <_dtoa_r+0x50c>
   85266:	4639      	mov	r1, r7
   85268:	4620      	mov	r0, r4
   8526a:	220a      	movs	r2, #10
   8526c:	2300      	movs	r3, #0
   8526e:	f001 fd1d 	bl	86cac <__multadd>
   85272:	4607      	mov	r7, r0
   85274:	4638      	mov	r0, r7
   85276:	4641      	mov	r1, r8
   85278:	f7ff fcda 	bl	84c30 <quorem>
   8527c:	3030      	adds	r0, #48	; 0x30
   8527e:	f80b 0005 	strb.w	r0, [fp, r5]
   85282:	3501      	adds	r5, #1
   85284:	45a9      	cmp	r9, r5
   85286:	dcee      	bgt.n	85266 <_dtoa_r+0x4fe>
   85288:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   8528c:	4682      	mov	sl, r0
   8528e:	970a      	str	r7, [sp, #40]	; 0x28
   85290:	f1b9 0f01 	cmp.w	r9, #1
   85294:	bfac      	ite	ge
   85296:	44cb      	addge	fp, r9
   85298:	f10b 0b01 	addlt.w	fp, fp, #1
   8529c:	2500      	movs	r5, #0
   8529e:	990a      	ldr	r1, [sp, #40]	; 0x28
   852a0:	2201      	movs	r2, #1
   852a2:	4620      	mov	r0, r4
   852a4:	f001 fe90 	bl	86fc8 <__lshift>
   852a8:	4641      	mov	r1, r8
   852aa:	900a      	str	r0, [sp, #40]	; 0x28
   852ac:	f001 feea 	bl	87084 <__mcmp>
   852b0:	2800      	cmp	r0, #0
   852b2:	f340 8309 	ble.w	858c8 <_dtoa_r+0xb60>
   852b6:	f81b 2c01 	ldrb.w	r2, [fp, #-1]
   852ba:	9909      	ldr	r1, [sp, #36]	; 0x24
   852bc:	e005      	b.n	852ca <_dtoa_r+0x562>
   852be:	4299      	cmp	r1, r3
   852c0:	f000 828b 	beq.w	857da <_dtoa_r+0xa72>
   852c4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   852c8:	469b      	mov	fp, r3
   852ca:	2a39      	cmp	r2, #57	; 0x39
   852cc:	f10b 33ff 	add.w	r3, fp, #4294967295
   852d0:	d0f5      	beq.n	852be <_dtoa_r+0x556>
   852d2:	3201      	adds	r2, #1
   852d4:	701a      	strb	r2, [r3, #0]
   852d6:	4641      	mov	r1, r8
   852d8:	4620      	mov	r0, r4
   852da:	f001 fcdd 	bl	86c98 <_Bfree>
   852de:	2e00      	cmp	r6, #0
   852e0:	f43f af0f 	beq.w	85102 <_dtoa_r+0x39a>
   852e4:	b12d      	cbz	r5, 852f2 <_dtoa_r+0x58a>
   852e6:	42b5      	cmp	r5, r6
   852e8:	d003      	beq.n	852f2 <_dtoa_r+0x58a>
   852ea:	4629      	mov	r1, r5
   852ec:	4620      	mov	r0, r4
   852ee:	f001 fcd3 	bl	86c98 <_Bfree>
   852f2:	4631      	mov	r1, r6
   852f4:	4620      	mov	r0, r4
   852f6:	f001 fccf 	bl	86c98 <_Bfree>
   852fa:	e702      	b.n	85102 <_dtoa_r+0x39a>
   852fc:	2601      	movs	r6, #1
   852fe:	960e      	str	r6, [sp, #56]	; 0x38
   85300:	e5ea      	b.n	84ed8 <_dtoa_r+0x170>
   85302:	9807      	ldr	r0, [sp, #28]
   85304:	f002 fda4 	bl	87e50 <__aeabi_i2d>
   85308:	4632      	mov	r2, r6
   8530a:	463b      	mov	r3, r7
   8530c:	f003 f86e 	bl	883ec <__aeabi_dcmpeq>
   85310:	2800      	cmp	r0, #0
   85312:	f47f adcd 	bne.w	84eb0 <_dtoa_r+0x148>
   85316:	9e07      	ldr	r6, [sp, #28]
   85318:	3e01      	subs	r6, #1
   8531a:	9607      	str	r6, [sp, #28]
   8531c:	e5c8      	b.n	84eb0 <_dtoa_r+0x148>
   8531e:	9e07      	ldr	r6, [sp, #28]
   85320:	9d08      	ldr	r5, [sp, #32]
   85322:	1bad      	subs	r5, r5, r6
   85324:	9508      	str	r5, [sp, #32]
   85326:	4275      	negs	r5, r6
   85328:	2600      	movs	r6, #0
   8532a:	950c      	str	r5, [sp, #48]	; 0x30
   8532c:	960d      	str	r6, [sp, #52]	; 0x34
   8532e:	e5e5      	b.n	84efc <_dtoa_r+0x194>
   85330:	426d      	negs	r5, r5
   85332:	2600      	movs	r6, #0
   85334:	9508      	str	r5, [sp, #32]
   85336:	9606      	str	r6, [sp, #24]
   85338:	e5d6      	b.n	84ee8 <_dtoa_r+0x180>
   8533a:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   8533c:	9d08      	ldr	r5, [sp, #32]
   8533e:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
   85340:	e714      	b.n	8516c <_dtoa_r+0x404>
   85342:	bf00      	nop
   85344:	40240000 	.word	0x40240000
   85348:	231c      	movs	r3, #28
   8534a:	f8dd e020 	ldr.w	lr, [sp, #32]
   8534e:	9806      	ldr	r0, [sp, #24]
   85350:	449e      	add	lr, r3
   85352:	4418      	add	r0, r3
   85354:	f8cd e020 	str.w	lr, [sp, #32]
   85358:	441d      	add	r5, r3
   8535a:	9006      	str	r0, [sp, #24]
   8535c:	e761      	b.n	85222 <_dtoa_r+0x4ba>
   8535e:	48a7      	ldr	r0, [pc, #668]	; (855fc <_dtoa_r+0x894>)
   85360:	1b40      	subs	r0, r0, r5
   85362:	fa0a f000 	lsl.w	r0, sl, r0
   85366:	e56f      	b.n	84e48 <_dtoa_r+0xe0>
   85368:	900e      	str	r0, [sp, #56]	; 0x38
   8536a:	e5b5      	b.n	84ed8 <_dtoa_r+0x170>
   8536c:	2d00      	cmp	r5, #0
   8536e:	dd05      	ble.n	8537c <_dtoa_r+0x614>
   85370:	4631      	mov	r1, r6
   85372:	462a      	mov	r2, r5
   85374:	4620      	mov	r0, r4
   85376:	f001 fe27 	bl	86fc8 <__lshift>
   8537a:	4606      	mov	r6, r0
   8537c:	2f00      	cmp	r7, #0
   8537e:	f040 82e9 	bne.w	85954 <_dtoa_r+0xbec>
   85382:	4637      	mov	r7, r6
   85384:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85386:	9809      	ldr	r0, [sp, #36]	; 0x24
   85388:	444d      	add	r5, r9
   8538a:	9508      	str	r5, [sp, #32]
   8538c:	f00a 0501 	and.w	r5, sl, #1
   85390:	950b      	str	r5, [sp, #44]	; 0x2c
   85392:	f8dd 9028 	ldr.w	r9, [sp, #40]	; 0x28
   85396:	1c45      	adds	r5, r0, #1
   85398:	e00a      	b.n	853b0 <_dtoa_r+0x648>
   8539a:	f001 fc87 	bl	86cac <__multadd>
   8539e:	4639      	mov	r1, r7
   853a0:	4606      	mov	r6, r0
   853a2:	220a      	movs	r2, #10
   853a4:	4620      	mov	r0, r4
   853a6:	2300      	movs	r3, #0
   853a8:	f001 fc80 	bl	86cac <__multadd>
   853ac:	4607      	mov	r7, r0
   853ae:	3501      	adds	r5, #1
   853b0:	4641      	mov	r1, r8
   853b2:	4648      	mov	r0, r9
   853b4:	f7ff fc3c 	bl	84c30 <quorem>
   853b8:	4631      	mov	r1, r6
   853ba:	4683      	mov	fp, r0
   853bc:	4648      	mov	r0, r9
   853be:	f001 fe61 	bl	87084 <__mcmp>
   853c2:	4641      	mov	r1, r8
   853c4:	9003      	str	r0, [sp, #12]
   853c6:	463a      	mov	r2, r7
   853c8:	4620      	mov	r0, r4
   853ca:	f001 fe7f 	bl	870cc <__mdiff>
   853ce:	68c2      	ldr	r2, [r0, #12]
   853d0:	1e69      	subs	r1, r5, #1
   853d2:	4603      	mov	r3, r0
   853d4:	f10b 0a30 	add.w	sl, fp, #48	; 0x30
   853d8:	9106      	str	r1, [sp, #24]
   853da:	2a00      	cmp	r2, #0
   853dc:	f040 8193 	bne.w	85706 <_dtoa_r+0x99e>
   853e0:	4619      	mov	r1, r3
   853e2:	4648      	mov	r0, r9
   853e4:	9302      	str	r3, [sp, #8]
   853e6:	f001 fe4d 	bl	87084 <__mcmp>
   853ea:	9b02      	ldr	r3, [sp, #8]
   853ec:	4602      	mov	r2, r0
   853ee:	4619      	mov	r1, r3
   853f0:	4620      	mov	r0, r4
   853f2:	9202      	str	r2, [sp, #8]
   853f4:	f001 fc50 	bl	86c98 <_Bfree>
   853f8:	9a02      	ldr	r2, [sp, #8]
   853fa:	b92a      	cbnz	r2, 85408 <_dtoa_r+0x6a0>
   853fc:	9b24      	ldr	r3, [sp, #144]	; 0x90
   853fe:	b91b      	cbnz	r3, 85408 <_dtoa_r+0x6a0>
   85400:	980b      	ldr	r0, [sp, #44]	; 0x2c
   85402:	2800      	cmp	r0, #0
   85404:	f000 8393 	beq.w	85b2e <_dtoa_r+0xdc6>
   85408:	9b03      	ldr	r3, [sp, #12]
   8540a:	2b00      	cmp	r3, #0
   8540c:	f2c0 8234 	blt.w	85878 <_dtoa_r+0xb10>
   85410:	d105      	bne.n	8541e <_dtoa_r+0x6b6>
   85412:	9824      	ldr	r0, [sp, #144]	; 0x90
   85414:	b918      	cbnz	r0, 8541e <_dtoa_r+0x6b6>
   85416:	990b      	ldr	r1, [sp, #44]	; 0x2c
   85418:	2900      	cmp	r1, #0
   8541a:	f000 822d 	beq.w	85878 <_dtoa_r+0xb10>
   8541e:	2a00      	cmp	r2, #0
   85420:	f300 82ac 	bgt.w	8597c <_dtoa_r+0xc14>
   85424:	f8dd e020 	ldr.w	lr, [sp, #32]
   85428:	f805 ac01 	strb.w	sl, [r5, #-1]
   8542c:	4575      	cmp	r5, lr
   8542e:	46ab      	mov	fp, r5
   85430:	f000 82b4 	beq.w	8599c <_dtoa_r+0xc34>
   85434:	4649      	mov	r1, r9
   85436:	220a      	movs	r2, #10
   85438:	2300      	movs	r3, #0
   8543a:	4620      	mov	r0, r4
   8543c:	f001 fc36 	bl	86cac <__multadd>
   85440:	42be      	cmp	r6, r7
   85442:	4681      	mov	r9, r0
   85444:	4631      	mov	r1, r6
   85446:	4620      	mov	r0, r4
   85448:	f04f 020a 	mov.w	r2, #10
   8544c:	f04f 0300 	mov.w	r3, #0
   85450:	d1a3      	bne.n	8539a <_dtoa_r+0x632>
   85452:	f001 fc2b 	bl	86cac <__multadd>
   85456:	4606      	mov	r6, r0
   85458:	4607      	mov	r7, r0
   8545a:	e7a8      	b.n	853ae <_dtoa_r+0x646>
   8545c:	2600      	movs	r6, #0
   8545e:	960b      	str	r6, [sp, #44]	; 0x2c
   85460:	9e07      	ldr	r6, [sp, #28]
   85462:	f8dd e094 	ldr.w	lr, [sp, #148]	; 0x94
   85466:	44b6      	add	lr, r6
   85468:	f10e 0901 	add.w	r9, lr, #1
   8546c:	f1b9 0f00 	cmp.w	r9, #0
   85470:	f8cd e03c 	str.w	lr, [sp, #60]	; 0x3c
   85474:	464e      	mov	r6, r9
   85476:	f340 8150 	ble.w	8571a <_dtoa_r+0x9b2>
   8547a:	2100      	movs	r1, #0
   8547c:	2e17      	cmp	r6, #23
   8547e:	6461      	str	r1, [r4, #68]	; 0x44
   85480:	d90a      	bls.n	85498 <_dtoa_r+0x730>
   85482:	2201      	movs	r2, #1
   85484:	2304      	movs	r3, #4
   85486:	005b      	lsls	r3, r3, #1
   85488:	f103 0014 	add.w	r0, r3, #20
   8548c:	42b0      	cmp	r0, r6
   8548e:	4611      	mov	r1, r2
   85490:	f102 0201 	add.w	r2, r2, #1
   85494:	d9f7      	bls.n	85486 <_dtoa_r+0x71e>
   85496:	6461      	str	r1, [r4, #68]	; 0x44
   85498:	4620      	mov	r0, r4
   8549a:	f001 fbd7 	bl	86c4c <_Balloc>
   8549e:	2e0e      	cmp	r6, #14
   854a0:	9009      	str	r0, [sp, #36]	; 0x24
   854a2:	6420      	str	r0, [r4, #64]	; 0x40
   854a4:	f63f ad6c 	bhi.w	84f80 <_dtoa_r+0x218>
   854a8:	2d00      	cmp	r5, #0
   854aa:	f43f ad69 	beq.w	84f80 <_dtoa_r+0x218>
   854ae:	9d07      	ldr	r5, [sp, #28]
   854b0:	e9cd ab12 	strd	sl, fp, [sp, #72]	; 0x48
   854b4:	2d00      	cmp	r5, #0
   854b6:	f340 821c 	ble.w	858f2 <_dtoa_r+0xb8a>
   854ba:	4b51      	ldr	r3, [pc, #324]	; (85600 <_dtoa_r+0x898>)
   854bc:	f005 020f 	and.w	r2, r5, #15
   854c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   854c4:	112d      	asrs	r5, r5, #4
   854c6:	e9d3 6700 	ldrd	r6, r7, [r3]
   854ca:	06eb      	lsls	r3, r5, #27
   854cc:	f140 81cd 	bpl.w	8586a <_dtoa_r+0xb02>
   854d0:	4b4c      	ldr	r3, [pc, #304]	; (85604 <_dtoa_r+0x89c>)
   854d2:	4650      	mov	r0, sl
   854d4:	4659      	mov	r1, fp
   854d6:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
   854da:	f002 fe49 	bl	88170 <__aeabi_ddiv>
   854de:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   854e2:	f005 050f 	and.w	r5, r5, #15
   854e6:	f04f 0803 	mov.w	r8, #3
   854ea:	b18d      	cbz	r5, 85510 <_dtoa_r+0x7a8>
   854ec:	f8df a114 	ldr.w	sl, [pc, #276]	; 85604 <_dtoa_r+0x89c>
   854f0:	4630      	mov	r0, r6
   854f2:	4639      	mov	r1, r7
   854f4:	07ee      	lsls	r6, r5, #31
   854f6:	d505      	bpl.n	85504 <_dtoa_r+0x79c>
   854f8:	e9da 2300 	ldrd	r2, r3, [sl]
   854fc:	f108 0801 	add.w	r8, r8, #1
   85500:	f002 fd0c 	bl	87f1c <__aeabi_dmul>
   85504:	106d      	asrs	r5, r5, #1
   85506:	f10a 0a08 	add.w	sl, sl, #8
   8550a:	d1f3      	bne.n	854f4 <_dtoa_r+0x78c>
   8550c:	4606      	mov	r6, r0
   8550e:	460f      	mov	r7, r1
   85510:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   85514:	4632      	mov	r2, r6
   85516:	463b      	mov	r3, r7
   85518:	f002 fe2a 	bl	88170 <__aeabi_ddiv>
   8551c:	4682      	mov	sl, r0
   8551e:	468b      	mov	fp, r1
   85520:	9d0e      	ldr	r5, [sp, #56]	; 0x38
   85522:	b145      	cbz	r5, 85536 <_dtoa_r+0x7ce>
   85524:	4650      	mov	r0, sl
   85526:	4659      	mov	r1, fp
   85528:	2200      	movs	r2, #0
   8552a:	4b37      	ldr	r3, [pc, #220]	; (85608 <_dtoa_r+0x8a0>)
   8552c:	f002 ff68 	bl	88400 <__aeabi_dcmplt>
   85530:	2800      	cmp	r0, #0
   85532:	f040 82aa 	bne.w	85a8a <_dtoa_r+0xd22>
   85536:	4640      	mov	r0, r8
   85538:	f002 fc8a 	bl	87e50 <__aeabi_i2d>
   8553c:	4652      	mov	r2, sl
   8553e:	465b      	mov	r3, fp
   85540:	f002 fcec 	bl	87f1c <__aeabi_dmul>
   85544:	2200      	movs	r2, #0
   85546:	4b31      	ldr	r3, [pc, #196]	; (8560c <_dtoa_r+0x8a4>)
   85548:	f002 fb36 	bl	87bb8 <__adddf3>
   8554c:	4606      	mov	r6, r0
   8554e:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   85552:	f1b9 0f00 	cmp.w	r9, #0
   85556:	f000 815a 	beq.w	8580e <_dtoa_r+0xaa6>
   8555a:	9d07      	ldr	r5, [sp, #28]
   8555c:	46c8      	mov	r8, r9
   8555e:	9517      	str	r5, [sp, #92]	; 0x5c
   85560:	9d0b      	ldr	r5, [sp, #44]	; 0x2c
   85562:	2d00      	cmp	r5, #0
   85564:	f000 8223 	beq.w	859ae <_dtoa_r+0xc46>
   85568:	4b25      	ldr	r3, [pc, #148]	; (85600 <_dtoa_r+0x898>)
   8556a:	2000      	movs	r0, #0
   8556c:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
   85570:	e953 2302 	ldrd	r2, r3, [r3, #-8]
   85574:	4926      	ldr	r1, [pc, #152]	; (85610 <_dtoa_r+0x8a8>)
   85576:	f002 fdfb 	bl	88170 <__aeabi_ddiv>
   8557a:	4632      	mov	r2, r6
   8557c:	463b      	mov	r3, r7
   8557e:	f002 fb19 	bl	87bb4 <__aeabi_dsub>
   85582:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   85586:	4659      	mov	r1, fp
   85588:	4650      	mov	r0, sl
   8558a:	f002 ff61 	bl	88450 <__aeabi_d2iz>
   8558e:	4605      	mov	r5, r0
   85590:	f002 fc5e 	bl	87e50 <__aeabi_i2d>
   85594:	4602      	mov	r2, r0
   85596:	460b      	mov	r3, r1
   85598:	4650      	mov	r0, sl
   8559a:	4659      	mov	r1, fp
   8559c:	f002 fb0a 	bl	87bb4 <__aeabi_dsub>
   855a0:	3530      	adds	r5, #48	; 0x30
   855a2:	9e09      	ldr	r6, [sp, #36]	; 0x24
   855a4:	e9cd 0104 	strd	r0, r1, [sp, #16]
   855a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   855ac:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   855b0:	b2ed      	uxtb	r5, r5
   855b2:	7035      	strb	r5, [r6, #0]
   855b4:	f106 0b01 	add.w	fp, r6, #1
   855b8:	f002 ff40 	bl	8843c <__aeabi_dcmpgt>
   855bc:	2800      	cmp	r0, #0
   855be:	f040 82ab 	bne.w	85b18 <_dtoa_r+0xdb0>
   855c2:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
   855c6:	2000      	movs	r0, #0
   855c8:	490f      	ldr	r1, [pc, #60]	; (85608 <_dtoa_r+0x8a0>)
   855ca:	f002 faf3 	bl	87bb4 <__aeabi_dsub>
   855ce:	4602      	mov	r2, r0
   855d0:	460b      	mov	r3, r1
   855d2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
   855d6:	f002 ff31 	bl	8843c <__aeabi_dcmpgt>
   855da:	2800      	cmp	r0, #0
   855dc:	f040 82a2 	bne.w	85b24 <_dtoa_r+0xdbc>
   855e0:	f1b8 0f01 	cmp.w	r8, #1
   855e4:	f340 8181 	ble.w	858ea <_dtoa_r+0xb82>
   855e8:	44b0      	add	r8, r6
   855ea:	f8cd 9050 	str.w	r9, [sp, #80]	; 0x50
   855ee:	46a2      	mov	sl, r4
   855f0:	46c1      	mov	r9, r8
   855f2:	e9dd 6704 	ldrd	r6, r7, [sp, #16]
   855f6:	e9dd 4510 	ldrd	r4, r5, [sp, #64]	; 0x40
   855fa:	e019      	b.n	85630 <_dtoa_r+0x8c8>
   855fc:	fffffbee 	.word	0xfffffbee
   85600:	00088b68 	.word	0x00088b68
   85604:	00088c30 	.word	0x00088c30
   85608:	3ff00000 	.word	0x3ff00000
   8560c:	401c0000 	.word	0x401c0000
   85610:	3fe00000 	.word	0x3fe00000
   85614:	2000      	movs	r0, #0
   85616:	49a8      	ldr	r1, [pc, #672]	; (858b8 <_dtoa_r+0xb50>)
   85618:	f002 facc 	bl	87bb4 <__aeabi_dsub>
   8561c:	4622      	mov	r2, r4
   8561e:	462b      	mov	r3, r5
   85620:	f002 feee 	bl	88400 <__aeabi_dcmplt>
   85624:	2800      	cmp	r0, #0
   85626:	f040 827b 	bne.w	85b20 <_dtoa_r+0xdb8>
   8562a:	45cb      	cmp	fp, r9
   8562c:	f000 815a 	beq.w	858e4 <_dtoa_r+0xb7c>
   85630:	4620      	mov	r0, r4
   85632:	4629      	mov	r1, r5
   85634:	2200      	movs	r2, #0
   85636:	4ba1      	ldr	r3, [pc, #644]	; (858bc <_dtoa_r+0xb54>)
   85638:	f002 fc70 	bl	87f1c <__aeabi_dmul>
   8563c:	2200      	movs	r2, #0
   8563e:	4b9f      	ldr	r3, [pc, #636]	; (858bc <_dtoa_r+0xb54>)
   85640:	4604      	mov	r4, r0
   85642:	460d      	mov	r5, r1
   85644:	4630      	mov	r0, r6
   85646:	4639      	mov	r1, r7
   85648:	f002 fc68 	bl	87f1c <__aeabi_dmul>
   8564c:	460f      	mov	r7, r1
   8564e:	4606      	mov	r6, r0
   85650:	f002 fefe 	bl	88450 <__aeabi_d2iz>
   85654:	4680      	mov	r8, r0
   85656:	f002 fbfb 	bl	87e50 <__aeabi_i2d>
   8565a:	4602      	mov	r2, r0
   8565c:	460b      	mov	r3, r1
   8565e:	4630      	mov	r0, r6
   85660:	4639      	mov	r1, r7
   85662:	f002 faa7 	bl	87bb4 <__aeabi_dsub>
   85666:	f108 0830 	add.w	r8, r8, #48	; 0x30
   8566a:	fa5f f888 	uxtb.w	r8, r8
   8566e:	4622      	mov	r2, r4
   85670:	462b      	mov	r3, r5
   85672:	f80b 8b01 	strb.w	r8, [fp], #1
   85676:	4606      	mov	r6, r0
   85678:	460f      	mov	r7, r1
   8567a:	f002 fec1 	bl	88400 <__aeabi_dcmplt>
   8567e:	4632      	mov	r2, r6
   85680:	463b      	mov	r3, r7
   85682:	2800      	cmp	r0, #0
   85684:	d0c6      	beq.n	85614 <_dtoa_r+0x8ac>
   85686:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   85688:	4654      	mov	r4, sl
   8568a:	9607      	str	r6, [sp, #28]
   8568c:	e539      	b.n	85102 <_dtoa_r+0x39a>
   8568e:	2600      	movs	r6, #0
   85690:	960b      	str	r6, [sp, #44]	; 0x2c
   85692:	9825      	ldr	r0, [sp, #148]	; 0x94
   85694:	2800      	cmp	r0, #0
   85696:	dd3c      	ble.n	85712 <_dtoa_r+0x9aa>
   85698:	4606      	mov	r6, r0
   8569a:	900f      	str	r0, [sp, #60]	; 0x3c
   8569c:	4681      	mov	r9, r0
   8569e:	e6ec      	b.n	8547a <_dtoa_r+0x712>
   856a0:	2601      	movs	r6, #1
   856a2:	960b      	str	r6, [sp, #44]	; 0x2c
   856a4:	e7f5      	b.n	85692 <_dtoa_r+0x92a>
   856a6:	f1b9 0f00 	cmp.w	r9, #0
   856aa:	f73f ac7c 	bgt.w	84fa6 <_dtoa_r+0x23e>
   856ae:	f040 80c6 	bne.w	8583e <_dtoa_r+0xad6>
   856b2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
   856b6:	2200      	movs	r2, #0
   856b8:	4b81      	ldr	r3, [pc, #516]	; (858c0 <_dtoa_r+0xb58>)
   856ba:	f002 fc2f 	bl	87f1c <__aeabi_dmul>
   856be:	4652      	mov	r2, sl
   856c0:	465b      	mov	r3, fp
   856c2:	f002 feb1 	bl	88428 <__aeabi_dcmpge>
   856c6:	46c8      	mov	r8, r9
   856c8:	464e      	mov	r6, r9
   856ca:	2800      	cmp	r0, #0
   856cc:	d07c      	beq.n	857c8 <_dtoa_r+0xa60>
   856ce:	9d25      	ldr	r5, [sp, #148]	; 0x94
   856d0:	f8dd b024 	ldr.w	fp, [sp, #36]	; 0x24
   856d4:	43ed      	mvns	r5, r5
   856d6:	9507      	str	r5, [sp, #28]
   856d8:	4641      	mov	r1, r8
   856da:	4620      	mov	r0, r4
   856dc:	f001 fadc 	bl	86c98 <_Bfree>
   856e0:	2e00      	cmp	r6, #0
   856e2:	f47f ae06 	bne.w	852f2 <_dtoa_r+0x58a>
   856e6:	e50c      	b.n	85102 <_dtoa_r+0x39a>
   856e8:	990a      	ldr	r1, [sp, #40]	; 0x28
   856ea:	4620      	mov	r0, r4
   856ec:	f001 fc1e 	bl	86f2c <__pow5mult>
   856f0:	900a      	str	r0, [sp, #40]	; 0x28
   856f2:	e56a      	b.n	851ca <_dtoa_r+0x462>
   856f4:	9d16      	ldr	r5, [sp, #88]	; 0x58
   856f6:	2d00      	cmp	r5, #0
   856f8:	f000 81b8 	beq.w	85a6c <_dtoa_r+0xd04>
   856fc:	f203 4333 	addw	r3, r3, #1075	; 0x433
   85700:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85702:	9d08      	ldr	r5, [sp, #32]
   85704:	e527      	b.n	85156 <_dtoa_r+0x3ee>
   85706:	4601      	mov	r1, r0
   85708:	4620      	mov	r0, r4
   8570a:	f001 fac5 	bl	86c98 <_Bfree>
   8570e:	2201      	movs	r2, #1
   85710:	e67a      	b.n	85408 <_dtoa_r+0x6a0>
   85712:	2601      	movs	r6, #1
   85714:	9625      	str	r6, [sp, #148]	; 0x94
   85716:	960f      	str	r6, [sp, #60]	; 0x3c
   85718:	46b1      	mov	r9, r6
   8571a:	2100      	movs	r1, #0
   8571c:	6461      	str	r1, [r4, #68]	; 0x44
   8571e:	e6bb      	b.n	85498 <_dtoa_r+0x730>
   85720:	980a      	ldr	r0, [sp, #40]	; 0x28
   85722:	4641      	mov	r1, r8
   85724:	f001 fcae 	bl	87084 <__mcmp>
   85728:	2800      	cmp	r0, #0
   8572a:	f6bf ad8f 	bge.w	8524c <_dtoa_r+0x4e4>
   8572e:	f8dd e01c 	ldr.w	lr, [sp, #28]
   85732:	990a      	ldr	r1, [sp, #40]	; 0x28
   85734:	f10e 3eff 	add.w	lr, lr, #4294967295
   85738:	4620      	mov	r0, r4
   8573a:	220a      	movs	r2, #10
   8573c:	2300      	movs	r3, #0
   8573e:	f8cd e01c 	str.w	lr, [sp, #28]
   85742:	f001 fab3 	bl	86cac <__multadd>
   85746:	900a      	str	r0, [sp, #40]	; 0x28
   85748:	980b      	ldr	r0, [sp, #44]	; 0x2c
   8574a:	2800      	cmp	r0, #0
   8574c:	f040 8209 	bne.w	85b62 <_dtoa_r+0xdfa>
   85750:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   85754:	e57a      	b.n	8524c <_dtoa_r+0x4e4>
   85756:	f8d8 3010 	ldr.w	r3, [r8, #16]
   8575a:	eb08 0383 	add.w	r3, r8, r3, lsl #2
   8575e:	6918      	ldr	r0, [r3, #16]
   85760:	f001 faee 	bl	86d40 <__hi0bits>
   85764:	f1c0 0020 	rsb	r0, r0, #32
   85768:	e547      	b.n	851fa <_dtoa_r+0x492>
   8576a:	9809      	ldr	r0, [sp, #36]	; 0x24
   8576c:	f7ff bb2c 	b.w	84dc8 <_dtoa_r+0x60>
   85770:	f1ba 0f00 	cmp.w	sl, #0
   85774:	f47f ad3b 	bne.w	851ee <_dtoa_r+0x486>
   85778:	f3cb 0313 	ubfx	r3, fp, #0, #20
   8577c:	2b00      	cmp	r3, #0
   8577e:	f040 817c 	bne.w	85a7a <_dtoa_r+0xd12>
   85782:	f02b 4700 	bic.w	r7, fp, #2147483648	; 0x80000000
   85786:	0d3f      	lsrs	r7, r7, #20
   85788:	053f      	lsls	r7, r7, #20
   8578a:	2f00      	cmp	r7, #0
   8578c:	f43f ad30 	beq.w	851f0 <_dtoa_r+0x488>
   85790:	9a08      	ldr	r2, [sp, #32]
   85792:	9b06      	ldr	r3, [sp, #24]
   85794:	3201      	adds	r2, #1
   85796:	3301      	adds	r3, #1
   85798:	9208      	str	r2, [sp, #32]
   8579a:	9306      	str	r3, [sp, #24]
   8579c:	2701      	movs	r7, #1
   8579e:	e527      	b.n	851f0 <_dtoa_r+0x488>
   857a0:	9924      	ldr	r1, [sp, #144]	; 0x90
   857a2:	2902      	cmp	r1, #2
   857a4:	f77f ad56 	ble.w	85254 <_dtoa_r+0x4ec>
   857a8:	f1b9 0f00 	cmp.w	r9, #0
   857ac:	d18f      	bne.n	856ce <_dtoa_r+0x966>
   857ae:	4641      	mov	r1, r8
   857b0:	464b      	mov	r3, r9
   857b2:	2205      	movs	r2, #5
   857b4:	4620      	mov	r0, r4
   857b6:	f001 fa79 	bl	86cac <__multadd>
   857ba:	4680      	mov	r8, r0
   857bc:	4641      	mov	r1, r8
   857be:	980a      	ldr	r0, [sp, #40]	; 0x28
   857c0:	f001 fc60 	bl	87084 <__mcmp>
   857c4:	2800      	cmp	r0, #0
   857c6:	dd82      	ble.n	856ce <_dtoa_r+0x966>
   857c8:	9d07      	ldr	r5, [sp, #28]
   857ca:	2331      	movs	r3, #49	; 0x31
   857cc:	3501      	adds	r5, #1
   857ce:	9507      	str	r5, [sp, #28]
   857d0:	9d09      	ldr	r5, [sp, #36]	; 0x24
   857d2:	702b      	strb	r3, [r5, #0]
   857d4:	f105 0b01 	add.w	fp, r5, #1
   857d8:	e77e      	b.n	856d8 <_dtoa_r+0x970>
   857da:	9807      	ldr	r0, [sp, #28]
   857dc:	9909      	ldr	r1, [sp, #36]	; 0x24
   857de:	2331      	movs	r3, #49	; 0x31
   857e0:	3001      	adds	r0, #1
   857e2:	9007      	str	r0, [sp, #28]
   857e4:	700b      	strb	r3, [r1, #0]
   857e6:	e576      	b.n	852d6 <_dtoa_r+0x56e>
   857e8:	46a3      	mov	fp, r4
   857ea:	9c03      	ldr	r4, [sp, #12]
   857ec:	e489      	b.n	85102 <_dtoa_r+0x39a>
   857ee:	4640      	mov	r0, r8
   857f0:	f002 fb2e 	bl	87e50 <__aeabi_i2d>
   857f4:	4602      	mov	r2, r0
   857f6:	460b      	mov	r3, r1
   857f8:	4650      	mov	r0, sl
   857fa:	4659      	mov	r1, fp
   857fc:	f002 fb8e 	bl	87f1c <__aeabi_dmul>
   85800:	2200      	movs	r2, #0
   85802:	4b30      	ldr	r3, [pc, #192]	; (858c4 <_dtoa_r+0xb5c>)
   85804:	f002 f9d8 	bl	87bb8 <__adddf3>
   85808:	4606      	mov	r6, r0
   8580a:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   8580e:	4650      	mov	r0, sl
   85810:	4659      	mov	r1, fp
   85812:	2200      	movs	r2, #0
   85814:	4b2a      	ldr	r3, [pc, #168]	; (858c0 <_dtoa_r+0xb58>)
   85816:	f002 f9cd 	bl	87bb4 <__aeabi_dsub>
   8581a:	4632      	mov	r2, r6
   8581c:	463b      	mov	r3, r7
   8581e:	4682      	mov	sl, r0
   85820:	468b      	mov	fp, r1
   85822:	f002 fe0b 	bl	8843c <__aeabi_dcmpgt>
   85826:	2800      	cmp	r0, #0
   85828:	f040 80bd 	bne.w	859a6 <_dtoa_r+0xc3e>
   8582c:	4632      	mov	r2, r6
   8582e:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
   85832:	4650      	mov	r0, sl
   85834:	4659      	mov	r1, fp
   85836:	f002 fde3 	bl	88400 <__aeabi_dcmplt>
   8583a:	2800      	cmp	r0, #0
   8583c:	d055      	beq.n	858ea <_dtoa_r+0xb82>
   8583e:	f04f 0800 	mov.w	r8, #0
   85842:	4646      	mov	r6, r8
   85844:	e743      	b.n	856ce <_dtoa_r+0x966>
   85846:	990a      	ldr	r1, [sp, #40]	; 0x28
   85848:	9a0c      	ldr	r2, [sp, #48]	; 0x30
   8584a:	4620      	mov	r0, r4
   8584c:	f001 fb6e 	bl	86f2c <__pow5mult>
   85850:	900a      	str	r0, [sp, #40]	; 0x28
   85852:	e4ba      	b.n	851ca <_dtoa_r+0x462>
   85854:	2601      	movs	r6, #1
   85856:	960b      	str	r6, [sp, #44]	; 0x2c
   85858:	e602      	b.n	85460 <_dtoa_r+0x6f8>
   8585a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
   8585c:	9e0d      	ldr	r6, [sp, #52]	; 0x34
   8585e:	1b7b      	subs	r3, r7, r5
   85860:	441e      	add	r6, r3
   85862:	970c      	str	r7, [sp, #48]	; 0x30
   85864:	960d      	str	r6, [sp, #52]	; 0x34
   85866:	2700      	movs	r7, #0
   85868:	e46f      	b.n	8514a <_dtoa_r+0x3e2>
   8586a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8586e:	f04f 0802 	mov.w	r8, #2
   85872:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
   85876:	e638      	b.n	854ea <_dtoa_r+0x782>
   85878:	2a00      	cmp	r2, #0
   8587a:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   8587e:	46d9      	mov	r9, fp
   85880:	dd11      	ble.n	858a6 <_dtoa_r+0xb3e>
   85882:	990a      	ldr	r1, [sp, #40]	; 0x28
   85884:	2201      	movs	r2, #1
   85886:	4620      	mov	r0, r4
   85888:	f001 fb9e 	bl	86fc8 <__lshift>
   8588c:	4641      	mov	r1, r8
   8588e:	900a      	str	r0, [sp, #40]	; 0x28
   85890:	f001 fbf8 	bl	87084 <__mcmp>
   85894:	2800      	cmp	r0, #0
   85896:	f340 815d 	ble.w	85b54 <_dtoa_r+0xdec>
   8589a:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   8589e:	f000 811b 	beq.w	85ad8 <_dtoa_r+0xd70>
   858a2:	f109 0a31 	add.w	sl, r9, #49	; 0x31
   858a6:	9b06      	ldr	r3, [sp, #24]
   858a8:	4635      	mov	r5, r6
   858aa:	f883 a000 	strb.w	sl, [r3]
   858ae:	f103 0b01 	add.w	fp, r3, #1
   858b2:	463e      	mov	r6, r7
   858b4:	e50f      	b.n	852d6 <_dtoa_r+0x56e>
   858b6:	bf00      	nop
   858b8:	3ff00000 	.word	0x3ff00000
   858bc:	40240000 	.word	0x40240000
   858c0:	40140000 	.word	0x40140000
   858c4:	401c0000 	.word	0x401c0000
   858c8:	d103      	bne.n	858d2 <_dtoa_r+0xb6a>
   858ca:	f01a 0f01 	tst.w	sl, #1
   858ce:	f47f acf2 	bne.w	852b6 <_dtoa_r+0x54e>
   858d2:	465b      	mov	r3, fp
   858d4:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   858d8:	469b      	mov	fp, r3
   858da:	2a30      	cmp	r2, #48	; 0x30
   858dc:	f103 33ff 	add.w	r3, r3, #4294967295
   858e0:	d0f8      	beq.n	858d4 <_dtoa_r+0xb6c>
   858e2:	e4f8      	b.n	852d6 <_dtoa_r+0x56e>
   858e4:	f8dd 9050 	ldr.w	r9, [sp, #80]	; 0x50
   858e8:	4654      	mov	r4, sl
   858ea:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   858ee:	f7ff bb47 	b.w	84f80 <_dtoa_r+0x218>
   858f2:	9e07      	ldr	r6, [sp, #28]
   858f4:	4275      	negs	r5, r6
   858f6:	2d00      	cmp	r5, #0
   858f8:	f000 80c2 	beq.w	85a80 <_dtoa_r+0xd18>
   858fc:	4ba3      	ldr	r3, [pc, #652]	; (85b8c <_dtoa_r+0xe24>)
   858fe:	f005 020f 	and.w	r2, r5, #15
   85902:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
   85906:	e9d3 2300 	ldrd	r2, r3, [r3]
   8590a:	e9dd 0112 	ldrd	r0, r1, [sp, #72]	; 0x48
   8590e:	f002 fb05 	bl	87f1c <__aeabi_dmul>
   85912:	112d      	asrs	r5, r5, #4
   85914:	4682      	mov	sl, r0
   85916:	468b      	mov	fp, r1
   85918:	f000 812e 	beq.w	85b78 <_dtoa_r+0xe10>
   8591c:	4e9c      	ldr	r6, [pc, #624]	; (85b90 <_dtoa_r+0xe28>)
   8591e:	f04f 0802 	mov.w	r8, #2
   85922:	07ea      	lsls	r2, r5, #31
   85924:	d505      	bpl.n	85932 <_dtoa_r+0xbca>
   85926:	e9d6 2300 	ldrd	r2, r3, [r6]
   8592a:	f108 0801 	add.w	r8, r8, #1
   8592e:	f002 faf5 	bl	87f1c <__aeabi_dmul>
   85932:	106d      	asrs	r5, r5, #1
   85934:	f106 0608 	add.w	r6, r6, #8
   85938:	d1f3      	bne.n	85922 <_dtoa_r+0xbba>
   8593a:	4682      	mov	sl, r0
   8593c:	468b      	mov	fp, r1
   8593e:	e5ef      	b.n	85520 <_dtoa_r+0x7b8>
   85940:	9e07      	ldr	r6, [sp, #28]
   85942:	9d09      	ldr	r5, [sp, #36]	; 0x24
   85944:	2230      	movs	r2, #48	; 0x30
   85946:	702a      	strb	r2, [r5, #0]
   85948:	3601      	adds	r6, #1
   8594a:	2231      	movs	r2, #49	; 0x31
   8594c:	9607      	str	r6, [sp, #28]
   8594e:	701a      	strb	r2, [r3, #0]
   85950:	f7ff bbd7 	b.w	85102 <_dtoa_r+0x39a>
   85954:	6871      	ldr	r1, [r6, #4]
   85956:	4620      	mov	r0, r4
   85958:	f001 f978 	bl	86c4c <_Balloc>
   8595c:	6933      	ldr	r3, [r6, #16]
   8595e:	4605      	mov	r5, r0
   85960:	1c9a      	adds	r2, r3, #2
   85962:	0092      	lsls	r2, r2, #2
   85964:	f106 010c 	add.w	r1, r6, #12
   85968:	300c      	adds	r0, #12
   8596a:	f7fc fe0b 	bl	82584 <memcpy>
   8596e:	4620      	mov	r0, r4
   85970:	4629      	mov	r1, r5
   85972:	2201      	movs	r2, #1
   85974:	f001 fb28 	bl	86fc8 <__lshift>
   85978:	4607      	mov	r7, r0
   8597a:	e503      	b.n	85384 <_dtoa_r+0x61c>
   8597c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85980:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85984:	f000 80a8 	beq.w	85ad8 <_dtoa_r+0xd70>
   85988:	9d06      	ldr	r5, [sp, #24]
   8598a:	f10a 0301 	add.w	r3, sl, #1
   8598e:	702b      	strb	r3, [r5, #0]
   85990:	4635      	mov	r5, r6
   85992:	9e06      	ldr	r6, [sp, #24]
   85994:	f106 0b01 	add.w	fp, r6, #1
   85998:	463e      	mov	r6, r7
   8599a:	e49c      	b.n	852d6 <_dtoa_r+0x56e>
   8599c:	4635      	mov	r5, r6
   8599e:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   859a2:	463e      	mov	r6, r7
   859a4:	e47b      	b.n	8529e <_dtoa_r+0x536>
   859a6:	f04f 0800 	mov.w	r8, #0
   859aa:	4646      	mov	r6, r8
   859ac:	e70c      	b.n	857c8 <_dtoa_r+0xa60>
   859ae:	4977      	ldr	r1, [pc, #476]	; (85b8c <_dtoa_r+0xe24>)
   859b0:	f108 35ff 	add.w	r5, r8, #4294967295
   859b4:	eb01 01c5 	add.w	r1, r1, r5, lsl #3
   859b8:	4632      	mov	r2, r6
   859ba:	463b      	mov	r3, r7
   859bc:	e9d1 0100 	ldrd	r0, r1, [r1]
   859c0:	9510      	str	r5, [sp, #64]	; 0x40
   859c2:	f002 faab 	bl	87f1c <__aeabi_dmul>
   859c6:	e9cd 0114 	strd	r0, r1, [sp, #80]	; 0x50
   859ca:	4659      	mov	r1, fp
   859cc:	4650      	mov	r0, sl
   859ce:	f002 fd3f 	bl	88450 <__aeabi_d2iz>
   859d2:	4605      	mov	r5, r0
   859d4:	f002 fa3c 	bl	87e50 <__aeabi_i2d>
   859d8:	4602      	mov	r2, r0
   859da:	460b      	mov	r3, r1
   859dc:	4650      	mov	r0, sl
   859de:	4659      	mov	r1, fp
   859e0:	f002 f8e8 	bl	87bb4 <__aeabi_dsub>
   859e4:	f8dd e024 	ldr.w	lr, [sp, #36]	; 0x24
   859e8:	3530      	adds	r5, #48	; 0x30
   859ea:	f1b8 0f01 	cmp.w	r8, #1
   859ee:	4606      	mov	r6, r0
   859f0:	460f      	mov	r7, r1
   859f2:	f88e 5000 	strb.w	r5, [lr]
   859f6:	f10e 0b01 	add.w	fp, lr, #1
   859fa:	d01e      	beq.n	85a3a <_dtoa_r+0xcd2>
   859fc:	9d09      	ldr	r5, [sp, #36]	; 0x24
   859fe:	1e6b      	subs	r3, r5, #1
   85a00:	eb03 0a08 	add.w	sl, r3, r8
   85a04:	2200      	movs	r2, #0
   85a06:	4b63      	ldr	r3, [pc, #396]	; (85b94 <_dtoa_r+0xe2c>)
   85a08:	f002 fa88 	bl	87f1c <__aeabi_dmul>
   85a0c:	460f      	mov	r7, r1
   85a0e:	4606      	mov	r6, r0
   85a10:	f002 fd1e 	bl	88450 <__aeabi_d2iz>
   85a14:	4680      	mov	r8, r0
   85a16:	f002 fa1b 	bl	87e50 <__aeabi_i2d>
   85a1a:	f108 0830 	add.w	r8, r8, #48	; 0x30
   85a1e:	4602      	mov	r2, r0
   85a20:	460b      	mov	r3, r1
   85a22:	4630      	mov	r0, r6
   85a24:	4639      	mov	r1, r7
   85a26:	f002 f8c5 	bl	87bb4 <__aeabi_dsub>
   85a2a:	f805 8f01 	strb.w	r8, [r5, #1]!
   85a2e:	4555      	cmp	r5, sl
   85a30:	d1e8      	bne.n	85a04 <_dtoa_r+0xc9c>
   85a32:	9d10      	ldr	r5, [sp, #64]	; 0x40
   85a34:	4606      	mov	r6, r0
   85a36:	460f      	mov	r7, r1
   85a38:	44ab      	add	fp, r5
   85a3a:	2200      	movs	r2, #0
   85a3c:	4b56      	ldr	r3, [pc, #344]	; (85b98 <_dtoa_r+0xe30>)
   85a3e:	e9dd 0114 	ldrd	r0, r1, [sp, #80]	; 0x50
   85a42:	f002 f8b9 	bl	87bb8 <__adddf3>
   85a46:	4632      	mov	r2, r6
   85a48:	463b      	mov	r3, r7
   85a4a:	f002 fcd9 	bl	88400 <__aeabi_dcmplt>
   85a4e:	2800      	cmp	r0, #0
   85a50:	d04d      	beq.n	85aee <_dtoa_r+0xd86>
   85a52:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   85a54:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85a56:	9607      	str	r6, [sp, #28]
   85a58:	f81b 5c01 	ldrb.w	r5, [fp, #-1]
   85a5c:	f7ff bb4a 	b.w	850f4 <_dtoa_r+0x38c>
   85a60:	9e08      	ldr	r6, [sp, #32]
   85a62:	2300      	movs	r3, #0
   85a64:	ebc9 0506 	rsb	r5, r9, r6
   85a68:	f7ff bb75 	b.w	85156 <_dtoa_r+0x3ee>
   85a6c:	9b18      	ldr	r3, [sp, #96]	; 0x60
   85a6e:	9f0c      	ldr	r7, [sp, #48]	; 0x30
   85a70:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
   85a74:	9d08      	ldr	r5, [sp, #32]
   85a76:	f7ff bb6e 	b.w	85156 <_dtoa_r+0x3ee>
   85a7a:	4657      	mov	r7, sl
   85a7c:	f7ff bbb8 	b.w	851f0 <_dtoa_r+0x488>
   85a80:	e9dd ab12 	ldrd	sl, fp, [sp, #72]	; 0x48
   85a84:	f04f 0802 	mov.w	r8, #2
   85a88:	e54a      	b.n	85520 <_dtoa_r+0x7b8>
   85a8a:	f1b9 0f00 	cmp.w	r9, #0
   85a8e:	f43f aeae 	beq.w	857ee <_dtoa_r+0xa86>
   85a92:	9e0f      	ldr	r6, [sp, #60]	; 0x3c
   85a94:	2e00      	cmp	r6, #0
   85a96:	f77f af28 	ble.w	858ea <_dtoa_r+0xb82>
   85a9a:	2200      	movs	r2, #0
   85a9c:	4b3d      	ldr	r3, [pc, #244]	; (85b94 <_dtoa_r+0xe2c>)
   85a9e:	4650      	mov	r0, sl
   85aa0:	4659      	mov	r1, fp
   85aa2:	f002 fa3b 	bl	87f1c <__aeabi_dmul>
   85aa6:	4682      	mov	sl, r0
   85aa8:	f108 0001 	add.w	r0, r8, #1
   85aac:	468b      	mov	fp, r1
   85aae:	f002 f9cf 	bl	87e50 <__aeabi_i2d>
   85ab2:	4602      	mov	r2, r0
   85ab4:	460b      	mov	r3, r1
   85ab6:	4650      	mov	r0, sl
   85ab8:	4659      	mov	r1, fp
   85aba:	f002 fa2f 	bl	87f1c <__aeabi_dmul>
   85abe:	2200      	movs	r2, #0
   85ac0:	4b36      	ldr	r3, [pc, #216]	; (85b9c <_dtoa_r+0xe34>)
   85ac2:	f002 f879 	bl	87bb8 <__adddf3>
   85ac6:	9d07      	ldr	r5, [sp, #28]
   85ac8:	4606      	mov	r6, r0
   85aca:	3d01      	subs	r5, #1
   85acc:	f1a1 7750 	sub.w	r7, r1, #54525952	; 0x3400000
   85ad0:	9517      	str	r5, [sp, #92]	; 0x5c
   85ad2:	f8dd 803c 	ldr.w	r8, [sp, #60]	; 0x3c
   85ad6:	e543      	b.n	85560 <_dtoa_r+0x7f8>
   85ad8:	4635      	mov	r5, r6
   85ada:	9b06      	ldr	r3, [sp, #24]
   85adc:	9e06      	ldr	r6, [sp, #24]
   85ade:	2239      	movs	r2, #57	; 0x39
   85ae0:	7032      	strb	r2, [r6, #0]
   85ae2:	f103 0b01 	add.w	fp, r3, #1
   85ae6:	463e      	mov	r6, r7
   85ae8:	9909      	ldr	r1, [sp, #36]	; 0x24
   85aea:	f7ff bbee 	b.w	852ca <_dtoa_r+0x562>
   85aee:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
   85af2:	2000      	movs	r0, #0
   85af4:	4928      	ldr	r1, [pc, #160]	; (85b98 <_dtoa_r+0xe30>)
   85af6:	f002 f85d 	bl	87bb4 <__aeabi_dsub>
   85afa:	4632      	mov	r2, r6
   85afc:	463b      	mov	r3, r7
   85afe:	f002 fc9d 	bl	8843c <__aeabi_dcmpgt>
   85b02:	2800      	cmp	r0, #0
   85b04:	f43f aef1 	beq.w	858ea <_dtoa_r+0xb82>
   85b08:	465b      	mov	r3, fp
   85b0a:	f813 2c01 	ldrb.w	r2, [r3, #-1]
   85b0e:	469b      	mov	fp, r3
   85b10:	2a30      	cmp	r2, #48	; 0x30
   85b12:	f103 33ff 	add.w	r3, r3, #4294967295
   85b16:	d0f8      	beq.n	85b0a <_dtoa_r+0xda2>
   85b18:	9d17      	ldr	r5, [sp, #92]	; 0x5c
   85b1a:	9507      	str	r5, [sp, #28]
   85b1c:	f7ff baf1 	b.w	85102 <_dtoa_r+0x39a>
   85b20:	4645      	mov	r5, r8
   85b22:	4654      	mov	r4, sl
   85b24:	9e17      	ldr	r6, [sp, #92]	; 0x5c
   85b26:	9a09      	ldr	r2, [sp, #36]	; 0x24
   85b28:	9607      	str	r6, [sp, #28]
   85b2a:	f7ff bae3 	b.w	850f4 <_dtoa_r+0x38c>
   85b2e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
   85b32:	f8cd 9028 	str.w	r9, [sp, #40]	; 0x28
   85b36:	d0cf      	beq.n	85ad8 <_dtoa_r+0xd70>
   85b38:	9b03      	ldr	r3, [sp, #12]
   85b3a:	4635      	mov	r5, r6
   85b3c:	2b00      	cmp	r3, #0
   85b3e:	9e06      	ldr	r6, [sp, #24]
   85b40:	bfc8      	it	gt
   85b42:	f10b 0a31 	addgt.w	sl, fp, #49	; 0x31
   85b46:	f886 a000 	strb.w	sl, [r6]
   85b4a:	f106 0b01 	add.w	fp, r6, #1
   85b4e:	463e      	mov	r6, r7
   85b50:	f7ff bbc1 	b.w	852d6 <_dtoa_r+0x56e>
   85b54:	f47f aea7 	bne.w	858a6 <_dtoa_r+0xb3e>
   85b58:	f01a 0f01 	tst.w	sl, #1
   85b5c:	f43f aea3 	beq.w	858a6 <_dtoa_r+0xb3e>
   85b60:	e69b      	b.n	8589a <_dtoa_r+0xb32>
   85b62:	4631      	mov	r1, r6
   85b64:	4620      	mov	r0, r4
   85b66:	220a      	movs	r2, #10
   85b68:	2300      	movs	r3, #0
   85b6a:	f8dd 903c 	ldr.w	r9, [sp, #60]	; 0x3c
   85b6e:	f001 f89d 	bl	86cac <__multadd>
   85b72:	4606      	mov	r6, r0
   85b74:	f7ff bb6a 	b.w	8524c <_dtoa_r+0x4e4>
   85b78:	f04f 0802 	mov.w	r8, #2
   85b7c:	e4d0      	b.n	85520 <_dtoa_r+0x7b8>
   85b7e:	f43f ab50 	beq.w	85222 <_dtoa_r+0x4ba>
   85b82:	f1c3 033c 	rsb	r3, r3, #60	; 0x3c
   85b86:	f7ff bbe0 	b.w	8534a <_dtoa_r+0x5e2>
   85b8a:	bf00      	nop
   85b8c:	00088b68 	.word	0x00088b68
   85b90:	00088c30 	.word	0x00088c30
   85b94:	40240000 	.word	0x40240000
   85b98:	3fe00000 	.word	0x3fe00000
   85b9c:	401c0000 	.word	0x401c0000

00085ba0 <__sflush_r>:
   85ba0:	898b      	ldrh	r3, [r1, #12]
   85ba2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85ba6:	b29a      	uxth	r2, r3
   85ba8:	460d      	mov	r5, r1
   85baa:	0711      	lsls	r1, r2, #28
   85bac:	4680      	mov	r8, r0
   85bae:	d43c      	bmi.n	85c2a <__sflush_r+0x8a>
   85bb0:	686a      	ldr	r2, [r5, #4]
   85bb2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   85bb6:	2a00      	cmp	r2, #0
   85bb8:	81ab      	strh	r3, [r5, #12]
   85bba:	dd59      	ble.n	85c70 <__sflush_r+0xd0>
   85bbc:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85bbe:	2c00      	cmp	r4, #0
   85bc0:	d04b      	beq.n	85c5a <__sflush_r+0xba>
   85bc2:	b29b      	uxth	r3, r3
   85bc4:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
   85bc8:	2100      	movs	r1, #0
   85bca:	b292      	uxth	r2, r2
   85bcc:	f8d8 6000 	ldr.w	r6, [r8]
   85bd0:	f8c8 1000 	str.w	r1, [r8]
   85bd4:	2a00      	cmp	r2, #0
   85bd6:	d04f      	beq.n	85c78 <__sflush_r+0xd8>
   85bd8:	6d2a      	ldr	r2, [r5, #80]	; 0x50
   85bda:	075f      	lsls	r7, r3, #29
   85bdc:	d505      	bpl.n	85bea <__sflush_r+0x4a>
   85bde:	6869      	ldr	r1, [r5, #4]
   85be0:	6b2b      	ldr	r3, [r5, #48]	; 0x30
   85be2:	1a52      	subs	r2, r2, r1
   85be4:	b10b      	cbz	r3, 85bea <__sflush_r+0x4a>
   85be6:	6beb      	ldr	r3, [r5, #60]	; 0x3c
   85be8:	1ad2      	subs	r2, r2, r3
   85bea:	4640      	mov	r0, r8
   85bec:	69e9      	ldr	r1, [r5, #28]
   85bee:	2300      	movs	r3, #0
   85bf0:	47a0      	blx	r4
   85bf2:	1c44      	adds	r4, r0, #1
   85bf4:	d04a      	beq.n	85c8c <__sflush_r+0xec>
   85bf6:	89ab      	ldrh	r3, [r5, #12]
   85bf8:	692a      	ldr	r2, [r5, #16]
   85bfa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
   85bfe:	b29b      	uxth	r3, r3
   85c00:	2100      	movs	r1, #0
   85c02:	602a      	str	r2, [r5, #0]
   85c04:	04da      	lsls	r2, r3, #19
   85c06:	81ab      	strh	r3, [r5, #12]
   85c08:	6069      	str	r1, [r5, #4]
   85c0a:	d44c      	bmi.n	85ca6 <__sflush_r+0x106>
   85c0c:	6b29      	ldr	r1, [r5, #48]	; 0x30
   85c0e:	f8c8 6000 	str.w	r6, [r8]
   85c12:	b311      	cbz	r1, 85c5a <__sflush_r+0xba>
   85c14:	f105 0340 	add.w	r3, r5, #64	; 0x40
   85c18:	4299      	cmp	r1, r3
   85c1a:	d002      	beq.n	85c22 <__sflush_r+0x82>
   85c1c:	4640      	mov	r0, r8
   85c1e:	f000 f9c3 	bl	85fa8 <_free_r>
   85c22:	2000      	movs	r0, #0
   85c24:	6328      	str	r0, [r5, #48]	; 0x30
   85c26:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c2a:	692e      	ldr	r6, [r5, #16]
   85c2c:	b1ae      	cbz	r6, 85c5a <__sflush_r+0xba>
   85c2e:	0791      	lsls	r1, r2, #30
   85c30:	682c      	ldr	r4, [r5, #0]
   85c32:	bf0c      	ite	eq
   85c34:	696b      	ldreq	r3, [r5, #20]
   85c36:	2300      	movne	r3, #0
   85c38:	602e      	str	r6, [r5, #0]
   85c3a:	1ba4      	subs	r4, r4, r6
   85c3c:	60ab      	str	r3, [r5, #8]
   85c3e:	e00a      	b.n	85c56 <__sflush_r+0xb6>
   85c40:	4632      	mov	r2, r6
   85c42:	4623      	mov	r3, r4
   85c44:	6a6f      	ldr	r7, [r5, #36]	; 0x24
   85c46:	4640      	mov	r0, r8
   85c48:	69e9      	ldr	r1, [r5, #28]
   85c4a:	47b8      	blx	r7
   85c4c:	2800      	cmp	r0, #0
   85c4e:	ebc0 0404 	rsb	r4, r0, r4
   85c52:	4406      	add	r6, r0
   85c54:	dd04      	ble.n	85c60 <__sflush_r+0xc0>
   85c56:	2c00      	cmp	r4, #0
   85c58:	dcf2      	bgt.n	85c40 <__sflush_r+0xa0>
   85c5a:	2000      	movs	r0, #0
   85c5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c60:	89ab      	ldrh	r3, [r5, #12]
   85c62:	f04f 30ff 	mov.w	r0, #4294967295
   85c66:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85c6a:	81ab      	strh	r3, [r5, #12]
   85c6c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85c70:	6bea      	ldr	r2, [r5, #60]	; 0x3c
   85c72:	2a00      	cmp	r2, #0
   85c74:	dca2      	bgt.n	85bbc <__sflush_r+0x1c>
   85c76:	e7f0      	b.n	85c5a <__sflush_r+0xba>
   85c78:	2301      	movs	r3, #1
   85c7a:	4640      	mov	r0, r8
   85c7c:	69e9      	ldr	r1, [r5, #28]
   85c7e:	47a0      	blx	r4
   85c80:	1c43      	adds	r3, r0, #1
   85c82:	4602      	mov	r2, r0
   85c84:	d01e      	beq.n	85cc4 <__sflush_r+0x124>
   85c86:	89ab      	ldrh	r3, [r5, #12]
   85c88:	6aac      	ldr	r4, [r5, #40]	; 0x28
   85c8a:	e7a6      	b.n	85bda <__sflush_r+0x3a>
   85c8c:	f8d8 3000 	ldr.w	r3, [r8]
   85c90:	b95b      	cbnz	r3, 85caa <__sflush_r+0x10a>
   85c92:	89aa      	ldrh	r2, [r5, #12]
   85c94:	6929      	ldr	r1, [r5, #16]
   85c96:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
   85c9a:	b292      	uxth	r2, r2
   85c9c:	606b      	str	r3, [r5, #4]
   85c9e:	04d3      	lsls	r3, r2, #19
   85ca0:	81aa      	strh	r2, [r5, #12]
   85ca2:	6029      	str	r1, [r5, #0]
   85ca4:	d5b2      	bpl.n	85c0c <__sflush_r+0x6c>
   85ca6:	6528      	str	r0, [r5, #80]	; 0x50
   85ca8:	e7b0      	b.n	85c0c <__sflush_r+0x6c>
   85caa:	2b1d      	cmp	r3, #29
   85cac:	d001      	beq.n	85cb2 <__sflush_r+0x112>
   85cae:	2b16      	cmp	r3, #22
   85cb0:	d113      	bne.n	85cda <__sflush_r+0x13a>
   85cb2:	89a9      	ldrh	r1, [r5, #12]
   85cb4:	692b      	ldr	r3, [r5, #16]
   85cb6:	f421 6100 	bic.w	r1, r1, #2048	; 0x800
   85cba:	2200      	movs	r2, #0
   85cbc:	81a9      	strh	r1, [r5, #12]
   85cbe:	602b      	str	r3, [r5, #0]
   85cc0:	606a      	str	r2, [r5, #4]
   85cc2:	e7a3      	b.n	85c0c <__sflush_r+0x6c>
   85cc4:	f8d8 3000 	ldr.w	r3, [r8]
   85cc8:	2b00      	cmp	r3, #0
   85cca:	d0dc      	beq.n	85c86 <__sflush_r+0xe6>
   85ccc:	2b1d      	cmp	r3, #29
   85cce:	d001      	beq.n	85cd4 <__sflush_r+0x134>
   85cd0:	2b16      	cmp	r3, #22
   85cd2:	d1c5      	bne.n	85c60 <__sflush_r+0xc0>
   85cd4:	f8c8 6000 	str.w	r6, [r8]
   85cd8:	e7bf      	b.n	85c5a <__sflush_r+0xba>
   85cda:	89ab      	ldrh	r3, [r5, #12]
   85cdc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85ce0:	81ab      	strh	r3, [r5, #12]
   85ce2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ce6:	bf00      	nop

00085ce8 <_fflush_r>:
   85ce8:	b510      	push	{r4, lr}
   85cea:	4604      	mov	r4, r0
   85cec:	b082      	sub	sp, #8
   85cee:	b108      	cbz	r0, 85cf4 <_fflush_r+0xc>
   85cf0:	6b83      	ldr	r3, [r0, #56]	; 0x38
   85cf2:	b153      	cbz	r3, 85d0a <_fflush_r+0x22>
   85cf4:	f9b1 000c 	ldrsh.w	r0, [r1, #12]
   85cf8:	b908      	cbnz	r0, 85cfe <_fflush_r+0x16>
   85cfa:	b002      	add	sp, #8
   85cfc:	bd10      	pop	{r4, pc}
   85cfe:	4620      	mov	r0, r4
   85d00:	b002      	add	sp, #8
   85d02:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
   85d06:	f7ff bf4b 	b.w	85ba0 <__sflush_r>
   85d0a:	9101      	str	r1, [sp, #4]
   85d0c:	f000 f808 	bl	85d20 <__sinit>
   85d10:	9901      	ldr	r1, [sp, #4]
   85d12:	e7ef      	b.n	85cf4 <_fflush_r+0xc>

00085d14 <_cleanup_r>:
   85d14:	4901      	ldr	r1, [pc, #4]	; (85d1c <_cleanup_r+0x8>)
   85d16:	f000 bb9f 	b.w	86458 <_fwalk>
   85d1a:	bf00      	nop
   85d1c:	00087b01 	.word	0x00087b01

00085d20 <__sinit>:
   85d20:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   85d24:	6b84      	ldr	r4, [r0, #56]	; 0x38
   85d26:	b083      	sub	sp, #12
   85d28:	4607      	mov	r7, r0
   85d2a:	2c00      	cmp	r4, #0
   85d2c:	d165      	bne.n	85dfa <__sinit+0xda>
   85d2e:	687d      	ldr	r5, [r7, #4]
   85d30:	4833      	ldr	r0, [pc, #204]	; (85e00 <__sinit+0xe0>)
   85d32:	2304      	movs	r3, #4
   85d34:	2103      	movs	r1, #3
   85d36:	f507 723b 	add.w	r2, r7, #748	; 0x2ec
   85d3a:	63f8      	str	r0, [r7, #60]	; 0x3c
   85d3c:	f8c7 12e4 	str.w	r1, [r7, #740]	; 0x2e4
   85d40:	f8c7 22e8 	str.w	r2, [r7, #744]	; 0x2e8
   85d44:	f8c7 42e0 	str.w	r4, [r7, #736]	; 0x2e0
   85d48:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85d4c:	81ab      	strh	r3, [r5, #12]
   85d4e:	602c      	str	r4, [r5, #0]
   85d50:	606c      	str	r4, [r5, #4]
   85d52:	60ac      	str	r4, [r5, #8]
   85d54:	666c      	str	r4, [r5, #100]	; 0x64
   85d56:	81ec      	strh	r4, [r5, #14]
   85d58:	612c      	str	r4, [r5, #16]
   85d5a:	616c      	str	r4, [r5, #20]
   85d5c:	61ac      	str	r4, [r5, #24]
   85d5e:	4621      	mov	r1, r4
   85d60:	2208      	movs	r2, #8
   85d62:	f7fc fc85 	bl	82670 <memset>
   85d66:	f8df b09c 	ldr.w	fp, [pc, #156]	; 85e04 <__sinit+0xe4>
   85d6a:	68be      	ldr	r6, [r7, #8]
   85d6c:	f8df a098 	ldr.w	sl, [pc, #152]	; 85e08 <__sinit+0xe8>
   85d70:	f8df 9098 	ldr.w	r9, [pc, #152]	; 85e0c <__sinit+0xec>
   85d74:	f8df 8098 	ldr.w	r8, [pc, #152]	; 85e10 <__sinit+0xf0>
   85d78:	2301      	movs	r3, #1
   85d7a:	2209      	movs	r2, #9
   85d7c:	61ed      	str	r5, [r5, #28]
   85d7e:	f8c5 b020 	str.w	fp, [r5, #32]
   85d82:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85d86:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85d8a:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85d8e:	4621      	mov	r1, r4
   85d90:	81f3      	strh	r3, [r6, #14]
   85d92:	81b2      	strh	r2, [r6, #12]
   85d94:	6034      	str	r4, [r6, #0]
   85d96:	6074      	str	r4, [r6, #4]
   85d98:	60b4      	str	r4, [r6, #8]
   85d9a:	6674      	str	r4, [r6, #100]	; 0x64
   85d9c:	6134      	str	r4, [r6, #16]
   85d9e:	6174      	str	r4, [r6, #20]
   85da0:	61b4      	str	r4, [r6, #24]
   85da2:	2208      	movs	r2, #8
   85da4:	f106 005c 	add.w	r0, r6, #92	; 0x5c
   85da8:	9301      	str	r3, [sp, #4]
   85daa:	f7fc fc61 	bl	82670 <memset>
   85dae:	68fd      	ldr	r5, [r7, #12]
   85db0:	2012      	movs	r0, #18
   85db2:	2202      	movs	r2, #2
   85db4:	61f6      	str	r6, [r6, #28]
   85db6:	f8c6 b020 	str.w	fp, [r6, #32]
   85dba:	f8c6 a024 	str.w	sl, [r6, #36]	; 0x24
   85dbe:	f8c6 9028 	str.w	r9, [r6, #40]	; 0x28
   85dc2:	f8c6 802c 	str.w	r8, [r6, #44]	; 0x2c
   85dc6:	4621      	mov	r1, r4
   85dc8:	81a8      	strh	r0, [r5, #12]
   85dca:	81ea      	strh	r2, [r5, #14]
   85dcc:	602c      	str	r4, [r5, #0]
   85dce:	606c      	str	r4, [r5, #4]
   85dd0:	60ac      	str	r4, [r5, #8]
   85dd2:	666c      	str	r4, [r5, #100]	; 0x64
   85dd4:	612c      	str	r4, [r5, #16]
   85dd6:	616c      	str	r4, [r5, #20]
   85dd8:	61ac      	str	r4, [r5, #24]
   85dda:	f105 005c 	add.w	r0, r5, #92	; 0x5c
   85dde:	2208      	movs	r2, #8
   85de0:	f7fc fc46 	bl	82670 <memset>
   85de4:	9b01      	ldr	r3, [sp, #4]
   85de6:	61ed      	str	r5, [r5, #28]
   85de8:	f8c5 b020 	str.w	fp, [r5, #32]
   85dec:	f8c5 a024 	str.w	sl, [r5, #36]	; 0x24
   85df0:	f8c5 9028 	str.w	r9, [r5, #40]	; 0x28
   85df4:	f8c5 802c 	str.w	r8, [r5, #44]	; 0x2c
   85df8:	63bb      	str	r3, [r7, #56]	; 0x38
   85dfa:	b003      	add	sp, #12
   85dfc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   85e00:	00085d15 	.word	0x00085d15
   85e04:	00087695 	.word	0x00087695
   85e08:	000876b9 	.word	0x000876b9
   85e0c:	000876f1 	.word	0x000876f1
   85e10:	00087711 	.word	0x00087711

00085e14 <__sfp_lock_acquire>:
   85e14:	4770      	bx	lr
   85e16:	bf00      	nop

00085e18 <__sfp_lock_release>:
   85e18:	4770      	bx	lr
   85e1a:	bf00      	nop

00085e1c <__libc_fini_array>:
   85e1c:	b538      	push	{r3, r4, r5, lr}
   85e1e:	4d09      	ldr	r5, [pc, #36]	; (85e44 <__libc_fini_array+0x28>)
   85e20:	4c09      	ldr	r4, [pc, #36]	; (85e48 <__libc_fini_array+0x2c>)
   85e22:	1b64      	subs	r4, r4, r5
   85e24:	10a4      	asrs	r4, r4, #2
   85e26:	bf18      	it	ne
   85e28:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   85e2c:	d005      	beq.n	85e3a <__libc_fini_array+0x1e>
   85e2e:	3c01      	subs	r4, #1
   85e30:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   85e34:	4798      	blx	r3
   85e36:	2c00      	cmp	r4, #0
   85e38:	d1f9      	bne.n	85e2e <__libc_fini_array+0x12>
   85e3a:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   85e3e:	f002 bf1b 	b.w	88c78 <_fini>
   85e42:	bf00      	nop
   85e44:	00088c84 	.word	0x00088c84
   85e48:	00088c88 	.word	0x00088c88

00085e4c <_fputwc_r>:
   85e4c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85e50:	8993      	ldrh	r3, [r2, #12]
   85e52:	460f      	mov	r7, r1
   85e54:	0499      	lsls	r1, r3, #18
   85e56:	b082      	sub	sp, #8
   85e58:	4614      	mov	r4, r2
   85e5a:	4680      	mov	r8, r0
   85e5c:	d406      	bmi.n	85e6c <_fputwc_r+0x20>
   85e5e:	6e52      	ldr	r2, [r2, #100]	; 0x64
   85e60:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
   85e64:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   85e68:	81a3      	strh	r3, [r4, #12]
   85e6a:	6662      	str	r2, [r4, #100]	; 0x64
   85e6c:	f000 fb1c 	bl	864a8 <__locale_mb_cur_max>
   85e70:	2801      	cmp	r0, #1
   85e72:	d03e      	beq.n	85ef2 <_fputwc_r+0xa6>
   85e74:	463a      	mov	r2, r7
   85e76:	4640      	mov	r0, r8
   85e78:	a901      	add	r1, sp, #4
   85e7a:	f104 035c 	add.w	r3, r4, #92	; 0x5c
   85e7e:	f001 fd1f 	bl	878c0 <_wcrtomb_r>
   85e82:	1c42      	adds	r2, r0, #1
   85e84:	4606      	mov	r6, r0
   85e86:	d02d      	beq.n	85ee4 <_fputwc_r+0x98>
   85e88:	2800      	cmp	r0, #0
   85e8a:	d03a      	beq.n	85f02 <_fputwc_r+0xb6>
   85e8c:	f89d 1004 	ldrb.w	r1, [sp, #4]
   85e90:	2500      	movs	r5, #0
   85e92:	e009      	b.n	85ea8 <_fputwc_r+0x5c>
   85e94:	6823      	ldr	r3, [r4, #0]
   85e96:	7019      	strb	r1, [r3, #0]
   85e98:	6823      	ldr	r3, [r4, #0]
   85e9a:	3301      	adds	r3, #1
   85e9c:	6023      	str	r3, [r4, #0]
   85e9e:	3501      	adds	r5, #1
   85ea0:	42b5      	cmp	r5, r6
   85ea2:	d22e      	bcs.n	85f02 <_fputwc_r+0xb6>
   85ea4:	ab01      	add	r3, sp, #4
   85ea6:	5ce9      	ldrb	r1, [r5, r3]
   85ea8:	68a3      	ldr	r3, [r4, #8]
   85eaa:	3b01      	subs	r3, #1
   85eac:	2b00      	cmp	r3, #0
   85eae:	60a3      	str	r3, [r4, #8]
   85eb0:	daf0      	bge.n	85e94 <_fputwc_r+0x48>
   85eb2:	69a2      	ldr	r2, [r4, #24]
   85eb4:	4293      	cmp	r3, r2
   85eb6:	db06      	blt.n	85ec6 <_fputwc_r+0x7a>
   85eb8:	6823      	ldr	r3, [r4, #0]
   85eba:	7019      	strb	r1, [r3, #0]
   85ebc:	6823      	ldr	r3, [r4, #0]
   85ebe:	7819      	ldrb	r1, [r3, #0]
   85ec0:	3301      	adds	r3, #1
   85ec2:	290a      	cmp	r1, #10
   85ec4:	d1ea      	bne.n	85e9c <_fputwc_r+0x50>
   85ec6:	4640      	mov	r0, r8
   85ec8:	4622      	mov	r2, r4
   85eca:	f001 fca5 	bl	87818 <__swbuf_r>
   85ece:	f1b0 33ff 	subs.w	r3, r0, #4294967295
   85ed2:	4258      	negs	r0, r3
   85ed4:	4158      	adcs	r0, r3
   85ed6:	2800      	cmp	r0, #0
   85ed8:	d0e1      	beq.n	85e9e <_fputwc_r+0x52>
   85eda:	f04f 30ff 	mov.w	r0, #4294967295
   85ede:	b002      	add	sp, #8
   85ee0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ee4:	89a3      	ldrh	r3, [r4, #12]
   85ee6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   85eea:	81a3      	strh	r3, [r4, #12]
   85eec:	b002      	add	sp, #8
   85eee:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85ef2:	1e7b      	subs	r3, r7, #1
   85ef4:	2bfe      	cmp	r3, #254	; 0xfe
   85ef6:	d8bd      	bhi.n	85e74 <_fputwc_r+0x28>
   85ef8:	b2f9      	uxtb	r1, r7
   85efa:	4606      	mov	r6, r0
   85efc:	f88d 1004 	strb.w	r1, [sp, #4]
   85f00:	e7c6      	b.n	85e90 <_fputwc_r+0x44>
   85f02:	4638      	mov	r0, r7
   85f04:	b002      	add	sp, #8
   85f06:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   85f0a:	bf00      	nop

00085f0c <_malloc_trim_r>:
   85f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   85f0e:	4d23      	ldr	r5, [pc, #140]	; (85f9c <_malloc_trim_r+0x90>)
   85f10:	460f      	mov	r7, r1
   85f12:	4604      	mov	r4, r0
   85f14:	f000 fe96 	bl	86c44 <__malloc_lock>
   85f18:	68ab      	ldr	r3, [r5, #8]
   85f1a:	685e      	ldr	r6, [r3, #4]
   85f1c:	f026 0603 	bic.w	r6, r6, #3
   85f20:	1bf1      	subs	r1, r6, r7
   85f22:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   85f26:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   85f2a:	f021 010f 	bic.w	r1, r1, #15
   85f2e:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   85f32:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   85f36:	db07      	blt.n	85f48 <_malloc_trim_r+0x3c>
   85f38:	4620      	mov	r0, r4
   85f3a:	2100      	movs	r1, #0
   85f3c:	f001 fb98 	bl	87670 <_sbrk_r>
   85f40:	68ab      	ldr	r3, [r5, #8]
   85f42:	4433      	add	r3, r6
   85f44:	4298      	cmp	r0, r3
   85f46:	d004      	beq.n	85f52 <_malloc_trim_r+0x46>
   85f48:	4620      	mov	r0, r4
   85f4a:	f000 fe7d 	bl	86c48 <__malloc_unlock>
   85f4e:	2000      	movs	r0, #0
   85f50:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85f52:	4620      	mov	r0, r4
   85f54:	4279      	negs	r1, r7
   85f56:	f001 fb8b 	bl	87670 <_sbrk_r>
   85f5a:	3001      	adds	r0, #1
   85f5c:	d00d      	beq.n	85f7a <_malloc_trim_r+0x6e>
   85f5e:	4b10      	ldr	r3, [pc, #64]	; (85fa0 <_malloc_trim_r+0x94>)
   85f60:	68aa      	ldr	r2, [r5, #8]
   85f62:	6819      	ldr	r1, [r3, #0]
   85f64:	1bf6      	subs	r6, r6, r7
   85f66:	f046 0601 	orr.w	r6, r6, #1
   85f6a:	4620      	mov	r0, r4
   85f6c:	1bc9      	subs	r1, r1, r7
   85f6e:	6056      	str	r6, [r2, #4]
   85f70:	6019      	str	r1, [r3, #0]
   85f72:	f000 fe69 	bl	86c48 <__malloc_unlock>
   85f76:	2001      	movs	r0, #1
   85f78:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   85f7a:	4620      	mov	r0, r4
   85f7c:	2100      	movs	r1, #0
   85f7e:	f001 fb77 	bl	87670 <_sbrk_r>
   85f82:	68ab      	ldr	r3, [r5, #8]
   85f84:	1ac2      	subs	r2, r0, r3
   85f86:	2a0f      	cmp	r2, #15
   85f88:	ddde      	ble.n	85f48 <_malloc_trim_r+0x3c>
   85f8a:	4d06      	ldr	r5, [pc, #24]	; (85fa4 <_malloc_trim_r+0x98>)
   85f8c:	4904      	ldr	r1, [pc, #16]	; (85fa0 <_malloc_trim_r+0x94>)
   85f8e:	682d      	ldr	r5, [r5, #0]
   85f90:	f042 0201 	orr.w	r2, r2, #1
   85f94:	1b40      	subs	r0, r0, r5
   85f96:	605a      	str	r2, [r3, #4]
   85f98:	6008      	str	r0, [r1, #0]
   85f9a:	e7d5      	b.n	85f48 <_malloc_trim_r+0x3c>
   85f9c:	200705d8 	.word	0x200705d8
   85fa0:	2007ac7c 	.word	0x2007ac7c
   85fa4:	200709e4 	.word	0x200709e4

00085fa8 <_free_r>:
   85fa8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   85fac:	460d      	mov	r5, r1
   85fae:	4606      	mov	r6, r0
   85fb0:	2900      	cmp	r1, #0
   85fb2:	d055      	beq.n	86060 <_free_r+0xb8>
   85fb4:	f000 fe46 	bl	86c44 <__malloc_lock>
   85fb8:	f855 1c04 	ldr.w	r1, [r5, #-4]
   85fbc:	f8df c170 	ldr.w	ip, [pc, #368]	; 86130 <_free_r+0x188>
   85fc0:	f1a5 0408 	sub.w	r4, r5, #8
   85fc4:	f021 0301 	bic.w	r3, r1, #1
   85fc8:	18e2      	adds	r2, r4, r3
   85fca:	f8dc 0008 	ldr.w	r0, [ip, #8]
   85fce:	6857      	ldr	r7, [r2, #4]
   85fd0:	4290      	cmp	r0, r2
   85fd2:	f027 0703 	bic.w	r7, r7, #3
   85fd6:	d068      	beq.n	860aa <_free_r+0x102>
   85fd8:	f011 0101 	ands.w	r1, r1, #1
   85fdc:	6057      	str	r7, [r2, #4]
   85fde:	d032      	beq.n	86046 <_free_r+0x9e>
   85fe0:	2100      	movs	r1, #0
   85fe2:	19d0      	adds	r0, r2, r7
   85fe4:	6840      	ldr	r0, [r0, #4]
   85fe6:	07c0      	lsls	r0, r0, #31
   85fe8:	d406      	bmi.n	85ff8 <_free_r+0x50>
   85fea:	443b      	add	r3, r7
   85fec:	6890      	ldr	r0, [r2, #8]
   85fee:	2900      	cmp	r1, #0
   85ff0:	d04d      	beq.n	8608e <_free_r+0xe6>
   85ff2:	68d2      	ldr	r2, [r2, #12]
   85ff4:	60c2      	str	r2, [r0, #12]
   85ff6:	6090      	str	r0, [r2, #8]
   85ff8:	f043 0201 	orr.w	r2, r3, #1
   85ffc:	6062      	str	r2, [r4, #4]
   85ffe:	50e3      	str	r3, [r4, r3]
   86000:	b9e1      	cbnz	r1, 8603c <_free_r+0x94>
   86002:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   86006:	d32d      	bcc.n	86064 <_free_r+0xbc>
   86008:	0a5a      	lsrs	r2, r3, #9
   8600a:	2a04      	cmp	r2, #4
   8600c:	d869      	bhi.n	860e2 <_free_r+0x13a>
   8600e:	0998      	lsrs	r0, r3, #6
   86010:	3038      	adds	r0, #56	; 0x38
   86012:	0041      	lsls	r1, r0, #1
   86014:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   86018:	f8dc 2008 	ldr.w	r2, [ip, #8]
   8601c:	4944      	ldr	r1, [pc, #272]	; (86130 <_free_r+0x188>)
   8601e:	4562      	cmp	r2, ip
   86020:	d065      	beq.n	860ee <_free_r+0x146>
   86022:	6851      	ldr	r1, [r2, #4]
   86024:	f021 0103 	bic.w	r1, r1, #3
   86028:	428b      	cmp	r3, r1
   8602a:	d202      	bcs.n	86032 <_free_r+0x8a>
   8602c:	6892      	ldr	r2, [r2, #8]
   8602e:	4594      	cmp	ip, r2
   86030:	d1f7      	bne.n	86022 <_free_r+0x7a>
   86032:	68d3      	ldr	r3, [r2, #12]
   86034:	60e3      	str	r3, [r4, #12]
   86036:	60a2      	str	r2, [r4, #8]
   86038:	609c      	str	r4, [r3, #8]
   8603a:	60d4      	str	r4, [r2, #12]
   8603c:	4630      	mov	r0, r6
   8603e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   86042:	f000 be01 	b.w	86c48 <__malloc_unlock>
   86046:	f855 5c08 	ldr.w	r5, [r5, #-8]
   8604a:	f10c 0808 	add.w	r8, ip, #8
   8604e:	1b64      	subs	r4, r4, r5
   86050:	68a0      	ldr	r0, [r4, #8]
   86052:	442b      	add	r3, r5
   86054:	4540      	cmp	r0, r8
   86056:	d042      	beq.n	860de <_free_r+0x136>
   86058:	68e5      	ldr	r5, [r4, #12]
   8605a:	60c5      	str	r5, [r0, #12]
   8605c:	60a8      	str	r0, [r5, #8]
   8605e:	e7c0      	b.n	85fe2 <_free_r+0x3a>
   86060:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86064:	08db      	lsrs	r3, r3, #3
   86066:	109a      	asrs	r2, r3, #2
   86068:	2001      	movs	r0, #1
   8606a:	4090      	lsls	r0, r2
   8606c:	f8dc 1004 	ldr.w	r1, [ip, #4]
   86070:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   86074:	689a      	ldr	r2, [r3, #8]
   86076:	4301      	orrs	r1, r0
   86078:	60a2      	str	r2, [r4, #8]
   8607a:	60e3      	str	r3, [r4, #12]
   8607c:	f8cc 1004 	str.w	r1, [ip, #4]
   86080:	4630      	mov	r0, r6
   86082:	609c      	str	r4, [r3, #8]
   86084:	60d4      	str	r4, [r2, #12]
   86086:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   8608a:	f000 bddd 	b.w	86c48 <__malloc_unlock>
   8608e:	4d29      	ldr	r5, [pc, #164]	; (86134 <_free_r+0x18c>)
   86090:	42a8      	cmp	r0, r5
   86092:	d1ae      	bne.n	85ff2 <_free_r+0x4a>
   86094:	f043 0201 	orr.w	r2, r3, #1
   86098:	f8cc 4014 	str.w	r4, [ip, #20]
   8609c:	f8cc 4010 	str.w	r4, [ip, #16]
   860a0:	60e0      	str	r0, [r4, #12]
   860a2:	60a0      	str	r0, [r4, #8]
   860a4:	6062      	str	r2, [r4, #4]
   860a6:	50e3      	str	r3, [r4, r3]
   860a8:	e7c8      	b.n	8603c <_free_r+0x94>
   860aa:	441f      	add	r7, r3
   860ac:	07cb      	lsls	r3, r1, #31
   860ae:	d407      	bmi.n	860c0 <_free_r+0x118>
   860b0:	f855 1c08 	ldr.w	r1, [r5, #-8]
   860b4:	1a64      	subs	r4, r4, r1
   860b6:	68e3      	ldr	r3, [r4, #12]
   860b8:	68a2      	ldr	r2, [r4, #8]
   860ba:	440f      	add	r7, r1
   860bc:	60d3      	str	r3, [r2, #12]
   860be:	609a      	str	r2, [r3, #8]
   860c0:	4b1d      	ldr	r3, [pc, #116]	; (86138 <_free_r+0x190>)
   860c2:	f047 0201 	orr.w	r2, r7, #1
   860c6:	681b      	ldr	r3, [r3, #0]
   860c8:	6062      	str	r2, [r4, #4]
   860ca:	429f      	cmp	r7, r3
   860cc:	f8cc 4008 	str.w	r4, [ip, #8]
   860d0:	d3b4      	bcc.n	8603c <_free_r+0x94>
   860d2:	4b1a      	ldr	r3, [pc, #104]	; (8613c <_free_r+0x194>)
   860d4:	4630      	mov	r0, r6
   860d6:	6819      	ldr	r1, [r3, #0]
   860d8:	f7ff ff18 	bl	85f0c <_malloc_trim_r>
   860dc:	e7ae      	b.n	8603c <_free_r+0x94>
   860de:	2101      	movs	r1, #1
   860e0:	e77f      	b.n	85fe2 <_free_r+0x3a>
   860e2:	2a14      	cmp	r2, #20
   860e4:	d80b      	bhi.n	860fe <_free_r+0x156>
   860e6:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   860ea:	0041      	lsls	r1, r0, #1
   860ec:	e792      	b.n	86014 <_free_r+0x6c>
   860ee:	1080      	asrs	r0, r0, #2
   860f0:	2501      	movs	r5, #1
   860f2:	4085      	lsls	r5, r0
   860f4:	6848      	ldr	r0, [r1, #4]
   860f6:	4613      	mov	r3, r2
   860f8:	4328      	orrs	r0, r5
   860fa:	6048      	str	r0, [r1, #4]
   860fc:	e79a      	b.n	86034 <_free_r+0x8c>
   860fe:	2a54      	cmp	r2, #84	; 0x54
   86100:	d803      	bhi.n	8610a <_free_r+0x162>
   86102:	0b18      	lsrs	r0, r3, #12
   86104:	306e      	adds	r0, #110	; 0x6e
   86106:	0041      	lsls	r1, r0, #1
   86108:	e784      	b.n	86014 <_free_r+0x6c>
   8610a:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8610e:	d803      	bhi.n	86118 <_free_r+0x170>
   86110:	0bd8      	lsrs	r0, r3, #15
   86112:	3077      	adds	r0, #119	; 0x77
   86114:	0041      	lsls	r1, r0, #1
   86116:	e77d      	b.n	86014 <_free_r+0x6c>
   86118:	f240 5154 	movw	r1, #1364	; 0x554
   8611c:	428a      	cmp	r2, r1
   8611e:	d803      	bhi.n	86128 <_free_r+0x180>
   86120:	0c98      	lsrs	r0, r3, #18
   86122:	307c      	adds	r0, #124	; 0x7c
   86124:	0041      	lsls	r1, r0, #1
   86126:	e775      	b.n	86014 <_free_r+0x6c>
   86128:	21fc      	movs	r1, #252	; 0xfc
   8612a:	207e      	movs	r0, #126	; 0x7e
   8612c:	e772      	b.n	86014 <_free_r+0x6c>
   8612e:	bf00      	nop
   86130:	200705d8 	.word	0x200705d8
   86134:	200705e0 	.word	0x200705e0
   86138:	200709e0 	.word	0x200709e0
   8613c:	2007ac78 	.word	0x2007ac78

00086140 <__sfvwrite_r>:
   86140:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86144:	6893      	ldr	r3, [r2, #8]
   86146:	b083      	sub	sp, #12
   86148:	4616      	mov	r6, r2
   8614a:	4681      	mov	r9, r0
   8614c:	460c      	mov	r4, r1
   8614e:	b32b      	cbz	r3, 8619c <__sfvwrite_r+0x5c>
   86150:	898b      	ldrh	r3, [r1, #12]
   86152:	0719      	lsls	r1, r3, #28
   86154:	d526      	bpl.n	861a4 <__sfvwrite_r+0x64>
   86156:	6922      	ldr	r2, [r4, #16]
   86158:	b322      	cbz	r2, 861a4 <__sfvwrite_r+0x64>
   8615a:	f003 0202 	and.w	r2, r3, #2
   8615e:	b292      	uxth	r2, r2
   86160:	6835      	ldr	r5, [r6, #0]
   86162:	2a00      	cmp	r2, #0
   86164:	d02c      	beq.n	861c0 <__sfvwrite_r+0x80>
   86166:	f04f 0a00 	mov.w	sl, #0
   8616a:	f8df b2e8 	ldr.w	fp, [pc, #744]	; 86454 <__sfvwrite_r+0x314>
   8616e:	46d0      	mov	r8, sl
   86170:	45d8      	cmp	r8, fp
   86172:	bf34      	ite	cc
   86174:	4643      	movcc	r3, r8
   86176:	465b      	movcs	r3, fp
   86178:	4652      	mov	r2, sl
   8617a:	4648      	mov	r0, r9
   8617c:	f1b8 0f00 	cmp.w	r8, #0
   86180:	d04f      	beq.n	86222 <__sfvwrite_r+0xe2>
   86182:	69e1      	ldr	r1, [r4, #28]
   86184:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86186:	47b8      	blx	r7
   86188:	2800      	cmp	r0, #0
   8618a:	dd56      	ble.n	8623a <__sfvwrite_r+0xfa>
   8618c:	68b3      	ldr	r3, [r6, #8]
   8618e:	4482      	add	sl, r0
   86190:	1a1b      	subs	r3, r3, r0
   86192:	ebc0 0808 	rsb	r8, r0, r8
   86196:	60b3      	str	r3, [r6, #8]
   86198:	2b00      	cmp	r3, #0
   8619a:	d1e9      	bne.n	86170 <__sfvwrite_r+0x30>
   8619c:	2000      	movs	r0, #0
   8619e:	b003      	add	sp, #12
   861a0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   861a4:	4648      	mov	r0, r9
   861a6:	4621      	mov	r1, r4
   861a8:	f7fe fcd0 	bl	84b4c <__swsetup_r>
   861ac:	2800      	cmp	r0, #0
   861ae:	f040 8148 	bne.w	86442 <__sfvwrite_r+0x302>
   861b2:	89a3      	ldrh	r3, [r4, #12]
   861b4:	6835      	ldr	r5, [r6, #0]
   861b6:	f003 0202 	and.w	r2, r3, #2
   861ba:	b292      	uxth	r2, r2
   861bc:	2a00      	cmp	r2, #0
   861be:	d1d2      	bne.n	86166 <__sfvwrite_r+0x26>
   861c0:	f013 0a01 	ands.w	sl, r3, #1
   861c4:	d142      	bne.n	8624c <__sfvwrite_r+0x10c>
   861c6:	46d0      	mov	r8, sl
   861c8:	f1b8 0f00 	cmp.w	r8, #0
   861cc:	d023      	beq.n	86216 <__sfvwrite_r+0xd6>
   861ce:	059a      	lsls	r2, r3, #22
   861d0:	68a7      	ldr	r7, [r4, #8]
   861d2:	d576      	bpl.n	862c2 <__sfvwrite_r+0x182>
   861d4:	45b8      	cmp	r8, r7
   861d6:	f0c0 80a4 	bcc.w	86322 <__sfvwrite_r+0x1e2>
   861da:	f413 6f90 	tst.w	r3, #1152	; 0x480
   861de:	f040 80b2 	bne.w	86346 <__sfvwrite_r+0x206>
   861e2:	6820      	ldr	r0, [r4, #0]
   861e4:	46bb      	mov	fp, r7
   861e6:	4651      	mov	r1, sl
   861e8:	465a      	mov	r2, fp
   861ea:	f000 fcc5 	bl	86b78 <memmove>
   861ee:	68a2      	ldr	r2, [r4, #8]
   861f0:	6821      	ldr	r1, [r4, #0]
   861f2:	1bd2      	subs	r2, r2, r7
   861f4:	eb01 030b 	add.w	r3, r1, fp
   861f8:	60a2      	str	r2, [r4, #8]
   861fa:	6023      	str	r3, [r4, #0]
   861fc:	4642      	mov	r2, r8
   861fe:	68b3      	ldr	r3, [r6, #8]
   86200:	4492      	add	sl, r2
   86202:	1a9b      	subs	r3, r3, r2
   86204:	ebc2 0808 	rsb	r8, r2, r8
   86208:	60b3      	str	r3, [r6, #8]
   8620a:	2b00      	cmp	r3, #0
   8620c:	d0c6      	beq.n	8619c <__sfvwrite_r+0x5c>
   8620e:	89a3      	ldrh	r3, [r4, #12]
   86210:	f1b8 0f00 	cmp.w	r8, #0
   86214:	d1db      	bne.n	861ce <__sfvwrite_r+0x8e>
   86216:	f8d5 a000 	ldr.w	sl, [r5]
   8621a:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8621e:	3508      	adds	r5, #8
   86220:	e7d2      	b.n	861c8 <__sfvwrite_r+0x88>
   86222:	f8d5 a000 	ldr.w	sl, [r5]
   86226:	f8d5 8004 	ldr.w	r8, [r5, #4]
   8622a:	3508      	adds	r5, #8
   8622c:	e7a0      	b.n	86170 <__sfvwrite_r+0x30>
   8622e:	4648      	mov	r0, r9
   86230:	4621      	mov	r1, r4
   86232:	f7ff fd59 	bl	85ce8 <_fflush_r>
   86236:	2800      	cmp	r0, #0
   86238:	d059      	beq.n	862ee <__sfvwrite_r+0x1ae>
   8623a:	89a3      	ldrh	r3, [r4, #12]
   8623c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
   86240:	f04f 30ff 	mov.w	r0, #4294967295
   86244:	81a3      	strh	r3, [r4, #12]
   86246:	b003      	add	sp, #12
   86248:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8624c:	4692      	mov	sl, r2
   8624e:	9201      	str	r2, [sp, #4]
   86250:	4693      	mov	fp, r2
   86252:	4690      	mov	r8, r2
   86254:	f1b8 0f00 	cmp.w	r8, #0
   86258:	d02b      	beq.n	862b2 <__sfvwrite_r+0x172>
   8625a:	9f01      	ldr	r7, [sp, #4]
   8625c:	2f00      	cmp	r7, #0
   8625e:	d064      	beq.n	8632a <__sfvwrite_r+0x1ea>
   86260:	6820      	ldr	r0, [r4, #0]
   86262:	6921      	ldr	r1, [r4, #16]
   86264:	45c2      	cmp	sl, r8
   86266:	bf34      	ite	cc
   86268:	4653      	movcc	r3, sl
   8626a:	4643      	movcs	r3, r8
   8626c:	4288      	cmp	r0, r1
   8626e:	461f      	mov	r7, r3
   86270:	f8d4 c008 	ldr.w	ip, [r4, #8]
   86274:	6962      	ldr	r2, [r4, #20]
   86276:	d903      	bls.n	86280 <__sfvwrite_r+0x140>
   86278:	4494      	add	ip, r2
   8627a:	4563      	cmp	r3, ip
   8627c:	f300 80ae 	bgt.w	863dc <__sfvwrite_r+0x29c>
   86280:	4293      	cmp	r3, r2
   86282:	db36      	blt.n	862f2 <__sfvwrite_r+0x1b2>
   86284:	4613      	mov	r3, r2
   86286:	6a67      	ldr	r7, [r4, #36]	; 0x24
   86288:	4648      	mov	r0, r9
   8628a:	69e1      	ldr	r1, [r4, #28]
   8628c:	465a      	mov	r2, fp
   8628e:	47b8      	blx	r7
   86290:	1e07      	subs	r7, r0, #0
   86292:	ddd2      	ble.n	8623a <__sfvwrite_r+0xfa>
   86294:	ebba 0a07 	subs.w	sl, sl, r7
   86298:	d03a      	beq.n	86310 <__sfvwrite_r+0x1d0>
   8629a:	68b3      	ldr	r3, [r6, #8]
   8629c:	44bb      	add	fp, r7
   8629e:	1bdb      	subs	r3, r3, r7
   862a0:	ebc7 0808 	rsb	r8, r7, r8
   862a4:	60b3      	str	r3, [r6, #8]
   862a6:	2b00      	cmp	r3, #0
   862a8:	f43f af78 	beq.w	8619c <__sfvwrite_r+0x5c>
   862ac:	f1b8 0f00 	cmp.w	r8, #0
   862b0:	d1d3      	bne.n	8625a <__sfvwrite_r+0x11a>
   862b2:	2700      	movs	r7, #0
   862b4:	f8d5 b000 	ldr.w	fp, [r5]
   862b8:	f8d5 8004 	ldr.w	r8, [r5, #4]
   862bc:	9701      	str	r7, [sp, #4]
   862be:	3508      	adds	r5, #8
   862c0:	e7c8      	b.n	86254 <__sfvwrite_r+0x114>
   862c2:	6820      	ldr	r0, [r4, #0]
   862c4:	6923      	ldr	r3, [r4, #16]
   862c6:	4298      	cmp	r0, r3
   862c8:	d802      	bhi.n	862d0 <__sfvwrite_r+0x190>
   862ca:	6963      	ldr	r3, [r4, #20]
   862cc:	4598      	cmp	r8, r3
   862ce:	d272      	bcs.n	863b6 <__sfvwrite_r+0x276>
   862d0:	45b8      	cmp	r8, r7
   862d2:	bf38      	it	cc
   862d4:	4647      	movcc	r7, r8
   862d6:	463a      	mov	r2, r7
   862d8:	4651      	mov	r1, sl
   862da:	f000 fc4d 	bl	86b78 <memmove>
   862de:	68a3      	ldr	r3, [r4, #8]
   862e0:	6822      	ldr	r2, [r4, #0]
   862e2:	1bdb      	subs	r3, r3, r7
   862e4:	443a      	add	r2, r7
   862e6:	60a3      	str	r3, [r4, #8]
   862e8:	6022      	str	r2, [r4, #0]
   862ea:	2b00      	cmp	r3, #0
   862ec:	d09f      	beq.n	8622e <__sfvwrite_r+0xee>
   862ee:	463a      	mov	r2, r7
   862f0:	e785      	b.n	861fe <__sfvwrite_r+0xbe>
   862f2:	461a      	mov	r2, r3
   862f4:	4659      	mov	r1, fp
   862f6:	9300      	str	r3, [sp, #0]
   862f8:	f000 fc3e 	bl	86b78 <memmove>
   862fc:	9b00      	ldr	r3, [sp, #0]
   862fe:	68a1      	ldr	r1, [r4, #8]
   86300:	6822      	ldr	r2, [r4, #0]
   86302:	1ac9      	subs	r1, r1, r3
   86304:	ebba 0a07 	subs.w	sl, sl, r7
   86308:	4413      	add	r3, r2
   8630a:	60a1      	str	r1, [r4, #8]
   8630c:	6023      	str	r3, [r4, #0]
   8630e:	d1c4      	bne.n	8629a <__sfvwrite_r+0x15a>
   86310:	4648      	mov	r0, r9
   86312:	4621      	mov	r1, r4
   86314:	f7ff fce8 	bl	85ce8 <_fflush_r>
   86318:	2800      	cmp	r0, #0
   8631a:	d18e      	bne.n	8623a <__sfvwrite_r+0xfa>
   8631c:	f8cd a004 	str.w	sl, [sp, #4]
   86320:	e7bb      	b.n	8629a <__sfvwrite_r+0x15a>
   86322:	6820      	ldr	r0, [r4, #0]
   86324:	4647      	mov	r7, r8
   86326:	46c3      	mov	fp, r8
   86328:	e75d      	b.n	861e6 <__sfvwrite_r+0xa6>
   8632a:	4658      	mov	r0, fp
   8632c:	210a      	movs	r1, #10
   8632e:	4642      	mov	r2, r8
   86330:	f000 fbd8 	bl	86ae4 <memchr>
   86334:	2800      	cmp	r0, #0
   86336:	d07f      	beq.n	86438 <__sfvwrite_r+0x2f8>
   86338:	f100 0a01 	add.w	sl, r0, #1
   8633c:	2701      	movs	r7, #1
   8633e:	ebcb 0a0a 	rsb	sl, fp, sl
   86342:	9701      	str	r7, [sp, #4]
   86344:	e78c      	b.n	86260 <__sfvwrite_r+0x120>
   86346:	6822      	ldr	r2, [r4, #0]
   86348:	6921      	ldr	r1, [r4, #16]
   8634a:	6967      	ldr	r7, [r4, #20]
   8634c:	ebc1 0c02 	rsb	ip, r1, r2
   86350:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   86354:	f10c 0201 	add.w	r2, ip, #1
   86358:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   8635c:	4442      	add	r2, r8
   8635e:	107f      	asrs	r7, r7, #1
   86360:	4297      	cmp	r7, r2
   86362:	bf34      	ite	cc
   86364:	4617      	movcc	r7, r2
   86366:	463a      	movcs	r2, r7
   86368:	055b      	lsls	r3, r3, #21
   8636a:	d54f      	bpl.n	8640c <__sfvwrite_r+0x2cc>
   8636c:	4611      	mov	r1, r2
   8636e:	4648      	mov	r0, r9
   86370:	f8cd c000 	str.w	ip, [sp]
   86374:	f000 f91a 	bl	865ac <_malloc_r>
   86378:	f8dd c000 	ldr.w	ip, [sp]
   8637c:	4683      	mov	fp, r0
   8637e:	2800      	cmp	r0, #0
   86380:	d062      	beq.n	86448 <__sfvwrite_r+0x308>
   86382:	4662      	mov	r2, ip
   86384:	6921      	ldr	r1, [r4, #16]
   86386:	f8cd c000 	str.w	ip, [sp]
   8638a:	f7fc f8fb 	bl	82584 <memcpy>
   8638e:	89a2      	ldrh	r2, [r4, #12]
   86390:	f8dd c000 	ldr.w	ip, [sp]
   86394:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   86398:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8639c:	81a2      	strh	r2, [r4, #12]
   8639e:	eb0b 000c 	add.w	r0, fp, ip
   863a2:	ebcc 0207 	rsb	r2, ip, r7
   863a6:	f8c4 b010 	str.w	fp, [r4, #16]
   863aa:	6167      	str	r7, [r4, #20]
   863ac:	6020      	str	r0, [r4, #0]
   863ae:	60a2      	str	r2, [r4, #8]
   863b0:	4647      	mov	r7, r8
   863b2:	46c3      	mov	fp, r8
   863b4:	e717      	b.n	861e6 <__sfvwrite_r+0xa6>
   863b6:	f06f 4200 	mvn.w	r2, #2147483648	; 0x80000000
   863ba:	4590      	cmp	r8, r2
   863bc:	bf38      	it	cc
   863be:	4642      	movcc	r2, r8
   863c0:	fb92 f2f3 	sdiv	r2, r2, r3
   863c4:	fb02 f303 	mul.w	r3, r2, r3
   863c8:	6a67      	ldr	r7, [r4, #36]	; 0x24
   863ca:	4648      	mov	r0, r9
   863cc:	69e1      	ldr	r1, [r4, #28]
   863ce:	4652      	mov	r2, sl
   863d0:	47b8      	blx	r7
   863d2:	2800      	cmp	r0, #0
   863d4:	f77f af31 	ble.w	8623a <__sfvwrite_r+0xfa>
   863d8:	4602      	mov	r2, r0
   863da:	e710      	b.n	861fe <__sfvwrite_r+0xbe>
   863dc:	4662      	mov	r2, ip
   863de:	4659      	mov	r1, fp
   863e0:	f8cd c000 	str.w	ip, [sp]
   863e4:	f000 fbc8 	bl	86b78 <memmove>
   863e8:	f8dd c000 	ldr.w	ip, [sp]
   863ec:	6823      	ldr	r3, [r4, #0]
   863ee:	4648      	mov	r0, r9
   863f0:	4463      	add	r3, ip
   863f2:	6023      	str	r3, [r4, #0]
   863f4:	4621      	mov	r1, r4
   863f6:	f8cd c000 	str.w	ip, [sp]
   863fa:	f7ff fc75 	bl	85ce8 <_fflush_r>
   863fe:	f8dd c000 	ldr.w	ip, [sp]
   86402:	2800      	cmp	r0, #0
   86404:	f47f af19 	bne.w	8623a <__sfvwrite_r+0xfa>
   86408:	4667      	mov	r7, ip
   8640a:	e743      	b.n	86294 <__sfvwrite_r+0x154>
   8640c:	4648      	mov	r0, r9
   8640e:	f8cd c000 	str.w	ip, [sp]
   86412:	f000 ff25 	bl	87260 <_realloc_r>
   86416:	f8dd c000 	ldr.w	ip, [sp]
   8641a:	4683      	mov	fp, r0
   8641c:	2800      	cmp	r0, #0
   8641e:	d1be      	bne.n	8639e <__sfvwrite_r+0x25e>
   86420:	4648      	mov	r0, r9
   86422:	6921      	ldr	r1, [r4, #16]
   86424:	f7ff fdc0 	bl	85fa8 <_free_r>
   86428:	89a3      	ldrh	r3, [r4, #12]
   8642a:	220c      	movs	r2, #12
   8642c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
   86430:	b29b      	uxth	r3, r3
   86432:	f8c9 2000 	str.w	r2, [r9]
   86436:	e701      	b.n	8623c <__sfvwrite_r+0xfc>
   86438:	2701      	movs	r7, #1
   8643a:	f108 0a01 	add.w	sl, r8, #1
   8643e:	9701      	str	r7, [sp, #4]
   86440:	e70e      	b.n	86260 <__sfvwrite_r+0x120>
   86442:	f04f 30ff 	mov.w	r0, #4294967295
   86446:	e6aa      	b.n	8619e <__sfvwrite_r+0x5e>
   86448:	230c      	movs	r3, #12
   8644a:	f8c9 3000 	str.w	r3, [r9]
   8644e:	89a3      	ldrh	r3, [r4, #12]
   86450:	e6f4      	b.n	8623c <__sfvwrite_r+0xfc>
   86452:	bf00      	nop
   86454:	7ffffc00 	.word	0x7ffffc00

00086458 <_fwalk>:
   86458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   8645c:	f510 7738 	adds.w	r7, r0, #736	; 0x2e0
   86460:	4688      	mov	r8, r1
   86462:	d019      	beq.n	86498 <_fwalk+0x40>
   86464:	2600      	movs	r6, #0
   86466:	687d      	ldr	r5, [r7, #4]
   86468:	68bc      	ldr	r4, [r7, #8]
   8646a:	3d01      	subs	r5, #1
   8646c:	d40e      	bmi.n	8648c <_fwalk+0x34>
   8646e:	89a3      	ldrh	r3, [r4, #12]
   86470:	3d01      	subs	r5, #1
   86472:	2b01      	cmp	r3, #1
   86474:	d906      	bls.n	86484 <_fwalk+0x2c>
   86476:	f9b4 300e 	ldrsh.w	r3, [r4, #14]
   8647a:	4620      	mov	r0, r4
   8647c:	3301      	adds	r3, #1
   8647e:	d001      	beq.n	86484 <_fwalk+0x2c>
   86480:	47c0      	blx	r8
   86482:	4306      	orrs	r6, r0
   86484:	1c6b      	adds	r3, r5, #1
   86486:	f104 0468 	add.w	r4, r4, #104	; 0x68
   8648a:	d1f0      	bne.n	8646e <_fwalk+0x16>
   8648c:	683f      	ldr	r7, [r7, #0]
   8648e:	2f00      	cmp	r7, #0
   86490:	d1e9      	bne.n	86466 <_fwalk+0xe>
   86492:	4630      	mov	r0, r6
   86494:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86498:	463e      	mov	r6, r7
   8649a:	4630      	mov	r0, r6
   8649c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

000864a0 <__locale_charset>:
   864a0:	4800      	ldr	r0, [pc, #0]	; (864a4 <__locale_charset+0x4>)
   864a2:	4770      	bx	lr
   864a4:	200705b4 	.word	0x200705b4

000864a8 <__locale_mb_cur_max>:
   864a8:	4b01      	ldr	r3, [pc, #4]	; (864b0 <__locale_mb_cur_max+0x8>)
   864aa:	6818      	ldr	r0, [r3, #0]
   864ac:	4770      	bx	lr
   864ae:	bf00      	nop
   864b0:	200705d4 	.word	0x200705d4

000864b4 <_localeconv_r>:
   864b4:	4800      	ldr	r0, [pc, #0]	; (864b8 <_localeconv_r+0x4>)
   864b6:	4770      	bx	lr
   864b8:	2007057c 	.word	0x2007057c

000864bc <__smakebuf_r>:
   864bc:	b5f0      	push	{r4, r5, r6, r7, lr}
   864be:	898b      	ldrh	r3, [r1, #12]
   864c0:	b091      	sub	sp, #68	; 0x44
   864c2:	b29a      	uxth	r2, r3
   864c4:	0796      	lsls	r6, r2, #30
   864c6:	460c      	mov	r4, r1
   864c8:	4605      	mov	r5, r0
   864ca:	d437      	bmi.n	8653c <__smakebuf_r+0x80>
   864cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   864d0:	2900      	cmp	r1, #0
   864d2:	db17      	blt.n	86504 <__smakebuf_r+0x48>
   864d4:	aa01      	add	r2, sp, #4
   864d6:	f001 fb1b 	bl	87b10 <_fstat_r>
   864da:	2800      	cmp	r0, #0
   864dc:	db10      	blt.n	86500 <__smakebuf_r+0x44>
   864de:	9b02      	ldr	r3, [sp, #8]
   864e0:	f403 4370 	and.w	r3, r3, #61440	; 0xf000
   864e4:	f5b3 5100 	subs.w	r1, r3, #8192	; 0x2000
   864e8:	424f      	negs	r7, r1
   864ea:	414f      	adcs	r7, r1
   864ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
   864f0:	d02c      	beq.n	8654c <__smakebuf_r+0x90>
   864f2:	89a3      	ldrh	r3, [r4, #12]
   864f4:	f44f 6680 	mov.w	r6, #1024	; 0x400
   864f8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   864fc:	81a3      	strh	r3, [r4, #12]
   864fe:	e00b      	b.n	86518 <__smakebuf_r+0x5c>
   86500:	89a3      	ldrh	r3, [r4, #12]
   86502:	b29a      	uxth	r2, r3
   86504:	f012 0f80 	tst.w	r2, #128	; 0x80
   86508:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
   8650c:	81a3      	strh	r3, [r4, #12]
   8650e:	bf14      	ite	ne
   86510:	2640      	movne	r6, #64	; 0x40
   86512:	f44f 6680 	moveq.w	r6, #1024	; 0x400
   86516:	2700      	movs	r7, #0
   86518:	4628      	mov	r0, r5
   8651a:	4631      	mov	r1, r6
   8651c:	f000 f846 	bl	865ac <_malloc_r>
   86520:	89a3      	ldrh	r3, [r4, #12]
   86522:	2800      	cmp	r0, #0
   86524:	d029      	beq.n	8657a <__smakebuf_r+0xbe>
   86526:	4a1b      	ldr	r2, [pc, #108]	; (86594 <__smakebuf_r+0xd8>)
   86528:	f043 0380 	orr.w	r3, r3, #128	; 0x80
   8652c:	63ea      	str	r2, [r5, #60]	; 0x3c
   8652e:	81a3      	strh	r3, [r4, #12]
   86530:	6020      	str	r0, [r4, #0]
   86532:	6120      	str	r0, [r4, #16]
   86534:	6166      	str	r6, [r4, #20]
   86536:	b9a7      	cbnz	r7, 86562 <__smakebuf_r+0xa6>
   86538:	b011      	add	sp, #68	; 0x44
   8653a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8653c:	f101 0343 	add.w	r3, r1, #67	; 0x43
   86540:	2201      	movs	r2, #1
   86542:	600b      	str	r3, [r1, #0]
   86544:	610b      	str	r3, [r1, #16]
   86546:	614a      	str	r2, [r1, #20]
   86548:	b011      	add	sp, #68	; 0x44
   8654a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8654c:	4a12      	ldr	r2, [pc, #72]	; (86598 <__smakebuf_r+0xdc>)
   8654e:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   86550:	4293      	cmp	r3, r2
   86552:	d1ce      	bne.n	864f2 <__smakebuf_r+0x36>
   86554:	89a3      	ldrh	r3, [r4, #12]
   86556:	f44f 6680 	mov.w	r6, #1024	; 0x400
   8655a:	4333      	orrs	r3, r6
   8655c:	81a3      	strh	r3, [r4, #12]
   8655e:	64e6      	str	r6, [r4, #76]	; 0x4c
   86560:	e7da      	b.n	86518 <__smakebuf_r+0x5c>
   86562:	4628      	mov	r0, r5
   86564:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   86568:	f001 fae6 	bl	87b38 <_isatty_r>
   8656c:	2800      	cmp	r0, #0
   8656e:	d0e3      	beq.n	86538 <__smakebuf_r+0x7c>
   86570:	89a3      	ldrh	r3, [r4, #12]
   86572:	f043 0301 	orr.w	r3, r3, #1
   86576:	81a3      	strh	r3, [r4, #12]
   86578:	e7de      	b.n	86538 <__smakebuf_r+0x7c>
   8657a:	059a      	lsls	r2, r3, #22
   8657c:	d4dc      	bmi.n	86538 <__smakebuf_r+0x7c>
   8657e:	f104 0243 	add.w	r2, r4, #67	; 0x43
   86582:	f043 0302 	orr.w	r3, r3, #2
   86586:	2101      	movs	r1, #1
   86588:	81a3      	strh	r3, [r4, #12]
   8658a:	6022      	str	r2, [r4, #0]
   8658c:	6122      	str	r2, [r4, #16]
   8658e:	6161      	str	r1, [r4, #20]
   86590:	e7d2      	b.n	86538 <__smakebuf_r+0x7c>
   86592:	bf00      	nop
   86594:	00085d15 	.word	0x00085d15
   86598:	000876f1 	.word	0x000876f1

0008659c <malloc>:
   8659c:	4b02      	ldr	r3, [pc, #8]	; (865a8 <malloc+0xc>)
   8659e:	4601      	mov	r1, r0
   865a0:	6818      	ldr	r0, [r3, #0]
   865a2:	f000 b803 	b.w	865ac <_malloc_r>
   865a6:	bf00      	nop
   865a8:	20070578 	.word	0x20070578

000865ac <_malloc_r>:
   865ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   865b0:	f101 050b 	add.w	r5, r1, #11
   865b4:	2d16      	cmp	r5, #22
   865b6:	b083      	sub	sp, #12
   865b8:	4606      	mov	r6, r0
   865ba:	d927      	bls.n	8660c <_malloc_r+0x60>
   865bc:	f035 0507 	bics.w	r5, r5, #7
   865c0:	d427      	bmi.n	86612 <_malloc_r+0x66>
   865c2:	42a9      	cmp	r1, r5
   865c4:	d825      	bhi.n	86612 <_malloc_r+0x66>
   865c6:	4630      	mov	r0, r6
   865c8:	f000 fb3c 	bl	86c44 <__malloc_lock>
   865cc:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   865d0:	d226      	bcs.n	86620 <_malloc_r+0x74>
   865d2:	4fc1      	ldr	r7, [pc, #772]	; (868d8 <_malloc_r+0x32c>)
   865d4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   865d8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   865dc:	68dc      	ldr	r4, [r3, #12]
   865de:	429c      	cmp	r4, r3
   865e0:	f000 81d2 	beq.w	86988 <_malloc_r+0x3dc>
   865e4:	6863      	ldr	r3, [r4, #4]
   865e6:	68e2      	ldr	r2, [r4, #12]
   865e8:	f023 0303 	bic.w	r3, r3, #3
   865ec:	4423      	add	r3, r4
   865ee:	6858      	ldr	r0, [r3, #4]
   865f0:	68a1      	ldr	r1, [r4, #8]
   865f2:	f040 0501 	orr.w	r5, r0, #1
   865f6:	60ca      	str	r2, [r1, #12]
   865f8:	4630      	mov	r0, r6
   865fa:	6091      	str	r1, [r2, #8]
   865fc:	605d      	str	r5, [r3, #4]
   865fe:	f000 fb23 	bl	86c48 <__malloc_unlock>
   86602:	3408      	adds	r4, #8
   86604:	4620      	mov	r0, r4
   86606:	b003      	add	sp, #12
   86608:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8660c:	2510      	movs	r5, #16
   8660e:	42a9      	cmp	r1, r5
   86610:	d9d9      	bls.n	865c6 <_malloc_r+0x1a>
   86612:	2400      	movs	r4, #0
   86614:	230c      	movs	r3, #12
   86616:	4620      	mov	r0, r4
   86618:	6033      	str	r3, [r6, #0]
   8661a:	b003      	add	sp, #12
   8661c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86620:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   86624:	f000 8089 	beq.w	8673a <_malloc_r+0x18e>
   86628:	f1bc 0f04 	cmp.w	ip, #4
   8662c:	f200 8160 	bhi.w	868f0 <_malloc_r+0x344>
   86630:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   86634:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   86638:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8663c:	4fa6      	ldr	r7, [pc, #664]	; (868d8 <_malloc_r+0x32c>)
   8663e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   86642:	68cc      	ldr	r4, [r1, #12]
   86644:	42a1      	cmp	r1, r4
   86646:	d105      	bne.n	86654 <_malloc_r+0xa8>
   86648:	e00c      	b.n	86664 <_malloc_r+0xb8>
   8664a:	2b00      	cmp	r3, #0
   8664c:	da79      	bge.n	86742 <_malloc_r+0x196>
   8664e:	68e4      	ldr	r4, [r4, #12]
   86650:	42a1      	cmp	r1, r4
   86652:	d007      	beq.n	86664 <_malloc_r+0xb8>
   86654:	6862      	ldr	r2, [r4, #4]
   86656:	f022 0203 	bic.w	r2, r2, #3
   8665a:	1b53      	subs	r3, r2, r5
   8665c:	2b0f      	cmp	r3, #15
   8665e:	ddf4      	ble.n	8664a <_malloc_r+0x9e>
   86660:	f10c 3cff 	add.w	ip, ip, #4294967295
   86664:	f10c 0c01 	add.w	ip, ip, #1
   86668:	4b9b      	ldr	r3, [pc, #620]	; (868d8 <_malloc_r+0x32c>)
   8666a:	693c      	ldr	r4, [r7, #16]
   8666c:	f103 0e08 	add.w	lr, r3, #8
   86670:	4574      	cmp	r4, lr
   86672:	f000 817e 	beq.w	86972 <_malloc_r+0x3c6>
   86676:	6861      	ldr	r1, [r4, #4]
   86678:	f021 0103 	bic.w	r1, r1, #3
   8667c:	1b4a      	subs	r2, r1, r5
   8667e:	2a0f      	cmp	r2, #15
   86680:	f300 8164 	bgt.w	8694c <_malloc_r+0x3a0>
   86684:	2a00      	cmp	r2, #0
   86686:	f8c3 e014 	str.w	lr, [r3, #20]
   8668a:	f8c3 e010 	str.w	lr, [r3, #16]
   8668e:	da69      	bge.n	86764 <_malloc_r+0x1b8>
   86690:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   86694:	f080 813a 	bcs.w	8690c <_malloc_r+0x360>
   86698:	08c9      	lsrs	r1, r1, #3
   8669a:	108a      	asrs	r2, r1, #2
   8669c:	f04f 0801 	mov.w	r8, #1
   866a0:	fa08 f802 	lsl.w	r8, r8, r2
   866a4:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   866a8:	685a      	ldr	r2, [r3, #4]
   866aa:	6888      	ldr	r0, [r1, #8]
   866ac:	ea48 0202 	orr.w	r2, r8, r2
   866b0:	60a0      	str	r0, [r4, #8]
   866b2:	60e1      	str	r1, [r4, #12]
   866b4:	605a      	str	r2, [r3, #4]
   866b6:	608c      	str	r4, [r1, #8]
   866b8:	60c4      	str	r4, [r0, #12]
   866ba:	ea4f 03ac 	mov.w	r3, ip, asr #2
   866be:	2001      	movs	r0, #1
   866c0:	4098      	lsls	r0, r3
   866c2:	4290      	cmp	r0, r2
   866c4:	d85b      	bhi.n	8677e <_malloc_r+0x1d2>
   866c6:	4202      	tst	r2, r0
   866c8:	d106      	bne.n	866d8 <_malloc_r+0x12c>
   866ca:	f02c 0c03 	bic.w	ip, ip, #3
   866ce:	0040      	lsls	r0, r0, #1
   866d0:	4202      	tst	r2, r0
   866d2:	f10c 0c04 	add.w	ip, ip, #4
   866d6:	d0fa      	beq.n	866ce <_malloc_r+0x122>
   866d8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   866dc:	4644      	mov	r4, r8
   866de:	46e1      	mov	r9, ip
   866e0:	68e3      	ldr	r3, [r4, #12]
   866e2:	429c      	cmp	r4, r3
   866e4:	d107      	bne.n	866f6 <_malloc_r+0x14a>
   866e6:	e146      	b.n	86976 <_malloc_r+0x3ca>
   866e8:	2a00      	cmp	r2, #0
   866ea:	f280 8157 	bge.w	8699c <_malloc_r+0x3f0>
   866ee:	68db      	ldr	r3, [r3, #12]
   866f0:	429c      	cmp	r4, r3
   866f2:	f000 8140 	beq.w	86976 <_malloc_r+0x3ca>
   866f6:	6859      	ldr	r1, [r3, #4]
   866f8:	f021 0103 	bic.w	r1, r1, #3
   866fc:	1b4a      	subs	r2, r1, r5
   866fe:	2a0f      	cmp	r2, #15
   86700:	ddf2      	ble.n	866e8 <_malloc_r+0x13c>
   86702:	461c      	mov	r4, r3
   86704:	f854 cf08 	ldr.w	ip, [r4, #8]!
   86708:	68d9      	ldr	r1, [r3, #12]
   8670a:	f045 0901 	orr.w	r9, r5, #1
   8670e:	f042 0801 	orr.w	r8, r2, #1
   86712:	441d      	add	r5, r3
   86714:	f8c3 9004 	str.w	r9, [r3, #4]
   86718:	4630      	mov	r0, r6
   8671a:	f8cc 100c 	str.w	r1, [ip, #12]
   8671e:	f8c1 c008 	str.w	ip, [r1, #8]
   86722:	617d      	str	r5, [r7, #20]
   86724:	613d      	str	r5, [r7, #16]
   86726:	f8c5 e00c 	str.w	lr, [r5, #12]
   8672a:	f8c5 e008 	str.w	lr, [r5, #8]
   8672e:	f8c5 8004 	str.w	r8, [r5, #4]
   86732:	50aa      	str	r2, [r5, r2]
   86734:	f000 fa88 	bl	86c48 <__malloc_unlock>
   86738:	e764      	b.n	86604 <_malloc_r+0x58>
   8673a:	217e      	movs	r1, #126	; 0x7e
   8673c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   86740:	e77c      	b.n	8663c <_malloc_r+0x90>
   86742:	4422      	add	r2, r4
   86744:	6850      	ldr	r0, [r2, #4]
   86746:	68e3      	ldr	r3, [r4, #12]
   86748:	68a1      	ldr	r1, [r4, #8]
   8674a:	f040 0501 	orr.w	r5, r0, #1
   8674e:	60cb      	str	r3, [r1, #12]
   86750:	4630      	mov	r0, r6
   86752:	6099      	str	r1, [r3, #8]
   86754:	6055      	str	r5, [r2, #4]
   86756:	f000 fa77 	bl	86c48 <__malloc_unlock>
   8675a:	3408      	adds	r4, #8
   8675c:	4620      	mov	r0, r4
   8675e:	b003      	add	sp, #12
   86760:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   86764:	4421      	add	r1, r4
   86766:	684b      	ldr	r3, [r1, #4]
   86768:	4630      	mov	r0, r6
   8676a:	f043 0301 	orr.w	r3, r3, #1
   8676e:	604b      	str	r3, [r1, #4]
   86770:	f000 fa6a 	bl	86c48 <__malloc_unlock>
   86774:	3408      	adds	r4, #8
   86776:	4620      	mov	r0, r4
   86778:	b003      	add	sp, #12
   8677a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8677e:	68bc      	ldr	r4, [r7, #8]
   86780:	6863      	ldr	r3, [r4, #4]
   86782:	f023 0903 	bic.w	r9, r3, #3
   86786:	45a9      	cmp	r9, r5
   86788:	d304      	bcc.n	86794 <_malloc_r+0x1e8>
   8678a:	ebc5 0309 	rsb	r3, r5, r9
   8678e:	2b0f      	cmp	r3, #15
   86790:	f300 8091 	bgt.w	868b6 <_malloc_r+0x30a>
   86794:	4b51      	ldr	r3, [pc, #324]	; (868dc <_malloc_r+0x330>)
   86796:	4a52      	ldr	r2, [pc, #328]	; (868e0 <_malloc_r+0x334>)
   86798:	6819      	ldr	r1, [r3, #0]
   8679a:	6813      	ldr	r3, [r2, #0]
   8679c:	eb05 0a01 	add.w	sl, r5, r1
   867a0:	3301      	adds	r3, #1
   867a2:	eb04 0b09 	add.w	fp, r4, r9
   867a6:	f000 8161 	beq.w	86a6c <_malloc_r+0x4c0>
   867aa:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   867ae:	f10a 0a0f 	add.w	sl, sl, #15
   867b2:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   867b6:	f02a 0a0f 	bic.w	sl, sl, #15
   867ba:	4630      	mov	r0, r6
   867bc:	4651      	mov	r1, sl
   867be:	9201      	str	r2, [sp, #4]
   867c0:	f000 ff56 	bl	87670 <_sbrk_r>
   867c4:	f1b0 3fff 	cmp.w	r0, #4294967295
   867c8:	4680      	mov	r8, r0
   867ca:	9a01      	ldr	r2, [sp, #4]
   867cc:	f000 8101 	beq.w	869d2 <_malloc_r+0x426>
   867d0:	4583      	cmp	fp, r0
   867d2:	f200 80fb 	bhi.w	869cc <_malloc_r+0x420>
   867d6:	f8df c114 	ldr.w	ip, [pc, #276]	; 868ec <_malloc_r+0x340>
   867da:	45c3      	cmp	fp, r8
   867dc:	f8dc 3000 	ldr.w	r3, [ip]
   867e0:	4453      	add	r3, sl
   867e2:	f8cc 3000 	str.w	r3, [ip]
   867e6:	f000 814a 	beq.w	86a7e <_malloc_r+0x4d2>
   867ea:	6812      	ldr	r2, [r2, #0]
   867ec:	493c      	ldr	r1, [pc, #240]	; (868e0 <_malloc_r+0x334>)
   867ee:	3201      	adds	r2, #1
   867f0:	bf1b      	ittet	ne
   867f2:	ebcb 0b08 	rsbne	fp, fp, r8
   867f6:	445b      	addne	r3, fp
   867f8:	f8c1 8000 	streq.w	r8, [r1]
   867fc:	f8cc 3000 	strne.w	r3, [ip]
   86800:	f018 0307 	ands.w	r3, r8, #7
   86804:	f000 8114 	beq.w	86a30 <_malloc_r+0x484>
   86808:	f1c3 0208 	rsb	r2, r3, #8
   8680c:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   86810:	4490      	add	r8, r2
   86812:	3308      	adds	r3, #8
   86814:	44c2      	add	sl, r8
   86816:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   8681a:	ebca 0a03 	rsb	sl, sl, r3
   8681e:	4651      	mov	r1, sl
   86820:	4630      	mov	r0, r6
   86822:	f8cd c004 	str.w	ip, [sp, #4]
   86826:	f000 ff23 	bl	87670 <_sbrk_r>
   8682a:	1c43      	adds	r3, r0, #1
   8682c:	f8dd c004 	ldr.w	ip, [sp, #4]
   86830:	f000 8135 	beq.w	86a9e <_malloc_r+0x4f2>
   86834:	ebc8 0200 	rsb	r2, r8, r0
   86838:	4452      	add	r2, sl
   8683a:	f042 0201 	orr.w	r2, r2, #1
   8683e:	f8dc 3000 	ldr.w	r3, [ip]
   86842:	42bc      	cmp	r4, r7
   86844:	4453      	add	r3, sl
   86846:	f8c7 8008 	str.w	r8, [r7, #8]
   8684a:	f8cc 3000 	str.w	r3, [ip]
   8684e:	f8c8 2004 	str.w	r2, [r8, #4]
   86852:	f8df a098 	ldr.w	sl, [pc, #152]	; 868ec <_malloc_r+0x340>
   86856:	d015      	beq.n	86884 <_malloc_r+0x2d8>
   86858:	f1b9 0f0f 	cmp.w	r9, #15
   8685c:	f240 80eb 	bls.w	86a36 <_malloc_r+0x48a>
   86860:	6861      	ldr	r1, [r4, #4]
   86862:	f1a9 020c 	sub.w	r2, r9, #12
   86866:	f022 0207 	bic.w	r2, r2, #7
   8686a:	f001 0101 	and.w	r1, r1, #1
   8686e:	ea42 0e01 	orr.w	lr, r2, r1
   86872:	2005      	movs	r0, #5
   86874:	18a1      	adds	r1, r4, r2
   86876:	2a0f      	cmp	r2, #15
   86878:	f8c4 e004 	str.w	lr, [r4, #4]
   8687c:	6048      	str	r0, [r1, #4]
   8687e:	6088      	str	r0, [r1, #8]
   86880:	f200 8111 	bhi.w	86aa6 <_malloc_r+0x4fa>
   86884:	4a17      	ldr	r2, [pc, #92]	; (868e4 <_malloc_r+0x338>)
   86886:	68bc      	ldr	r4, [r7, #8]
   86888:	6811      	ldr	r1, [r2, #0]
   8688a:	428b      	cmp	r3, r1
   8688c:	bf88      	it	hi
   8688e:	6013      	strhi	r3, [r2, #0]
   86890:	4a15      	ldr	r2, [pc, #84]	; (868e8 <_malloc_r+0x33c>)
   86892:	6811      	ldr	r1, [r2, #0]
   86894:	428b      	cmp	r3, r1
   86896:	bf88      	it	hi
   86898:	6013      	strhi	r3, [r2, #0]
   8689a:	6862      	ldr	r2, [r4, #4]
   8689c:	f022 0203 	bic.w	r2, r2, #3
   868a0:	4295      	cmp	r5, r2
   868a2:	ebc5 0302 	rsb	r3, r5, r2
   868a6:	d801      	bhi.n	868ac <_malloc_r+0x300>
   868a8:	2b0f      	cmp	r3, #15
   868aa:	dc04      	bgt.n	868b6 <_malloc_r+0x30a>
   868ac:	4630      	mov	r0, r6
   868ae:	f000 f9cb 	bl	86c48 <__malloc_unlock>
   868b2:	2400      	movs	r4, #0
   868b4:	e6a6      	b.n	86604 <_malloc_r+0x58>
   868b6:	f045 0201 	orr.w	r2, r5, #1
   868ba:	f043 0301 	orr.w	r3, r3, #1
   868be:	4425      	add	r5, r4
   868c0:	6062      	str	r2, [r4, #4]
   868c2:	4630      	mov	r0, r6
   868c4:	60bd      	str	r5, [r7, #8]
   868c6:	606b      	str	r3, [r5, #4]
   868c8:	f000 f9be 	bl	86c48 <__malloc_unlock>
   868cc:	3408      	adds	r4, #8
   868ce:	4620      	mov	r0, r4
   868d0:	b003      	add	sp, #12
   868d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   868d6:	bf00      	nop
   868d8:	200705d8 	.word	0x200705d8
   868dc:	2007ac78 	.word	0x2007ac78
   868e0:	200709e4 	.word	0x200709e4
   868e4:	2007ac74 	.word	0x2007ac74
   868e8:	2007ac70 	.word	0x2007ac70
   868ec:	2007ac7c 	.word	0x2007ac7c
   868f0:	f1bc 0f14 	cmp.w	ip, #20
   868f4:	d961      	bls.n	869ba <_malloc_r+0x40e>
   868f6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   868fa:	f200 808f 	bhi.w	86a1c <_malloc_r+0x470>
   868fe:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   86902:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   86906:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8690a:	e697      	b.n	8663c <_malloc_r+0x90>
   8690c:	0a4b      	lsrs	r3, r1, #9
   8690e:	2b04      	cmp	r3, #4
   86910:	d958      	bls.n	869c4 <_malloc_r+0x418>
   86912:	2b14      	cmp	r3, #20
   86914:	f200 80ad 	bhi.w	86a72 <_malloc_r+0x4c6>
   86918:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   8691c:	0050      	lsls	r0, r2, #1
   8691e:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   86922:	6883      	ldr	r3, [r0, #8]
   86924:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 86ae0 <_malloc_r+0x534>
   86928:	4283      	cmp	r3, r0
   8692a:	f000 808a 	beq.w	86a42 <_malloc_r+0x496>
   8692e:	685a      	ldr	r2, [r3, #4]
   86930:	f022 0203 	bic.w	r2, r2, #3
   86934:	4291      	cmp	r1, r2
   86936:	d202      	bcs.n	8693e <_malloc_r+0x392>
   86938:	689b      	ldr	r3, [r3, #8]
   8693a:	4298      	cmp	r0, r3
   8693c:	d1f7      	bne.n	8692e <_malloc_r+0x382>
   8693e:	68d9      	ldr	r1, [r3, #12]
   86940:	687a      	ldr	r2, [r7, #4]
   86942:	60e1      	str	r1, [r4, #12]
   86944:	60a3      	str	r3, [r4, #8]
   86946:	608c      	str	r4, [r1, #8]
   86948:	60dc      	str	r4, [r3, #12]
   8694a:	e6b6      	b.n	866ba <_malloc_r+0x10e>
   8694c:	f045 0701 	orr.w	r7, r5, #1
   86950:	f042 0101 	orr.w	r1, r2, #1
   86954:	4425      	add	r5, r4
   86956:	6067      	str	r7, [r4, #4]
   86958:	4630      	mov	r0, r6
   8695a:	615d      	str	r5, [r3, #20]
   8695c:	611d      	str	r5, [r3, #16]
   8695e:	f8c5 e00c 	str.w	lr, [r5, #12]
   86962:	f8c5 e008 	str.w	lr, [r5, #8]
   86966:	6069      	str	r1, [r5, #4]
   86968:	50aa      	str	r2, [r5, r2]
   8696a:	3408      	adds	r4, #8
   8696c:	f000 f96c 	bl	86c48 <__malloc_unlock>
   86970:	e648      	b.n	86604 <_malloc_r+0x58>
   86972:	685a      	ldr	r2, [r3, #4]
   86974:	e6a1      	b.n	866ba <_malloc_r+0x10e>
   86976:	f109 0901 	add.w	r9, r9, #1
   8697a:	f019 0f03 	tst.w	r9, #3
   8697e:	f104 0408 	add.w	r4, r4, #8
   86982:	f47f aead 	bne.w	866e0 <_malloc_r+0x134>
   86986:	e02d      	b.n	869e4 <_malloc_r+0x438>
   86988:	f104 0308 	add.w	r3, r4, #8
   8698c:	6964      	ldr	r4, [r4, #20]
   8698e:	42a3      	cmp	r3, r4
   86990:	bf08      	it	eq
   86992:	f10c 0c02 	addeq.w	ip, ip, #2
   86996:	f43f ae67 	beq.w	86668 <_malloc_r+0xbc>
   8699a:	e623      	b.n	865e4 <_malloc_r+0x38>
   8699c:	4419      	add	r1, r3
   8699e:	6848      	ldr	r0, [r1, #4]
   869a0:	461c      	mov	r4, r3
   869a2:	f854 2f08 	ldr.w	r2, [r4, #8]!
   869a6:	68db      	ldr	r3, [r3, #12]
   869a8:	f040 0501 	orr.w	r5, r0, #1
   869ac:	604d      	str	r5, [r1, #4]
   869ae:	4630      	mov	r0, r6
   869b0:	60d3      	str	r3, [r2, #12]
   869b2:	609a      	str	r2, [r3, #8]
   869b4:	f000 f948 	bl	86c48 <__malloc_unlock>
   869b8:	e624      	b.n	86604 <_malloc_r+0x58>
   869ba:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   869be:	ea4f 014c 	mov.w	r1, ip, lsl #1
   869c2:	e63b      	b.n	8663c <_malloc_r+0x90>
   869c4:	098a      	lsrs	r2, r1, #6
   869c6:	3238      	adds	r2, #56	; 0x38
   869c8:	0050      	lsls	r0, r2, #1
   869ca:	e7a8      	b.n	8691e <_malloc_r+0x372>
   869cc:	42bc      	cmp	r4, r7
   869ce:	f43f af02 	beq.w	867d6 <_malloc_r+0x22a>
   869d2:	68bc      	ldr	r4, [r7, #8]
   869d4:	6862      	ldr	r2, [r4, #4]
   869d6:	f022 0203 	bic.w	r2, r2, #3
   869da:	e761      	b.n	868a0 <_malloc_r+0x2f4>
   869dc:	f8d8 8000 	ldr.w	r8, [r8]
   869e0:	4598      	cmp	r8, r3
   869e2:	d17a      	bne.n	86ada <_malloc_r+0x52e>
   869e4:	f01c 0f03 	tst.w	ip, #3
   869e8:	f1a8 0308 	sub.w	r3, r8, #8
   869ec:	f10c 3cff 	add.w	ip, ip, #4294967295
   869f0:	d1f4      	bne.n	869dc <_malloc_r+0x430>
   869f2:	687b      	ldr	r3, [r7, #4]
   869f4:	ea23 0300 	bic.w	r3, r3, r0
   869f8:	607b      	str	r3, [r7, #4]
   869fa:	0040      	lsls	r0, r0, #1
   869fc:	4298      	cmp	r0, r3
   869fe:	f63f aebe 	bhi.w	8677e <_malloc_r+0x1d2>
   86a02:	2800      	cmp	r0, #0
   86a04:	f43f aebb 	beq.w	8677e <_malloc_r+0x1d2>
   86a08:	4203      	tst	r3, r0
   86a0a:	46cc      	mov	ip, r9
   86a0c:	f47f ae64 	bne.w	866d8 <_malloc_r+0x12c>
   86a10:	0040      	lsls	r0, r0, #1
   86a12:	4203      	tst	r3, r0
   86a14:	f10c 0c04 	add.w	ip, ip, #4
   86a18:	d0fa      	beq.n	86a10 <_malloc_r+0x464>
   86a1a:	e65d      	b.n	866d8 <_malloc_r+0x12c>
   86a1c:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   86a20:	d819      	bhi.n	86a56 <_malloc_r+0x4aa>
   86a22:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   86a26:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   86a2a:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86a2e:	e605      	b.n	8663c <_malloc_r+0x90>
   86a30:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   86a34:	e6ee      	b.n	86814 <_malloc_r+0x268>
   86a36:	2301      	movs	r3, #1
   86a38:	f8c8 3004 	str.w	r3, [r8, #4]
   86a3c:	4644      	mov	r4, r8
   86a3e:	2200      	movs	r2, #0
   86a40:	e72e      	b.n	868a0 <_malloc_r+0x2f4>
   86a42:	1092      	asrs	r2, r2, #2
   86a44:	2001      	movs	r0, #1
   86a46:	4090      	lsls	r0, r2
   86a48:	f8d8 2004 	ldr.w	r2, [r8, #4]
   86a4c:	4619      	mov	r1, r3
   86a4e:	4302      	orrs	r2, r0
   86a50:	f8c8 2004 	str.w	r2, [r8, #4]
   86a54:	e775      	b.n	86942 <_malloc_r+0x396>
   86a56:	f240 5354 	movw	r3, #1364	; 0x554
   86a5a:	459c      	cmp	ip, r3
   86a5c:	d81b      	bhi.n	86a96 <_malloc_r+0x4ea>
   86a5e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   86a62:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   86a66:	ea4f 014c 	mov.w	r1, ip, lsl #1
   86a6a:	e5e7      	b.n	8663c <_malloc_r+0x90>
   86a6c:	f10a 0a10 	add.w	sl, sl, #16
   86a70:	e6a3      	b.n	867ba <_malloc_r+0x20e>
   86a72:	2b54      	cmp	r3, #84	; 0x54
   86a74:	d81f      	bhi.n	86ab6 <_malloc_r+0x50a>
   86a76:	0b0a      	lsrs	r2, r1, #12
   86a78:	326e      	adds	r2, #110	; 0x6e
   86a7a:	0050      	lsls	r0, r2, #1
   86a7c:	e74f      	b.n	8691e <_malloc_r+0x372>
   86a7e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   86a82:	2900      	cmp	r1, #0
   86a84:	f47f aeb1 	bne.w	867ea <_malloc_r+0x23e>
   86a88:	eb0a 0109 	add.w	r1, sl, r9
   86a8c:	68ba      	ldr	r2, [r7, #8]
   86a8e:	f041 0101 	orr.w	r1, r1, #1
   86a92:	6051      	str	r1, [r2, #4]
   86a94:	e6f6      	b.n	86884 <_malloc_r+0x2d8>
   86a96:	21fc      	movs	r1, #252	; 0xfc
   86a98:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   86a9c:	e5ce      	b.n	8663c <_malloc_r+0x90>
   86a9e:	2201      	movs	r2, #1
   86aa0:	f04f 0a00 	mov.w	sl, #0
   86aa4:	e6cb      	b.n	8683e <_malloc_r+0x292>
   86aa6:	f104 0108 	add.w	r1, r4, #8
   86aaa:	4630      	mov	r0, r6
   86aac:	f7ff fa7c 	bl	85fa8 <_free_r>
   86ab0:	f8da 3000 	ldr.w	r3, [sl]
   86ab4:	e6e6      	b.n	86884 <_malloc_r+0x2d8>
   86ab6:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   86aba:	d803      	bhi.n	86ac4 <_malloc_r+0x518>
   86abc:	0bca      	lsrs	r2, r1, #15
   86abe:	3277      	adds	r2, #119	; 0x77
   86ac0:	0050      	lsls	r0, r2, #1
   86ac2:	e72c      	b.n	8691e <_malloc_r+0x372>
   86ac4:	f240 5254 	movw	r2, #1364	; 0x554
   86ac8:	4293      	cmp	r3, r2
   86aca:	d803      	bhi.n	86ad4 <_malloc_r+0x528>
   86acc:	0c8a      	lsrs	r2, r1, #18
   86ace:	327c      	adds	r2, #124	; 0x7c
   86ad0:	0050      	lsls	r0, r2, #1
   86ad2:	e724      	b.n	8691e <_malloc_r+0x372>
   86ad4:	20fc      	movs	r0, #252	; 0xfc
   86ad6:	227e      	movs	r2, #126	; 0x7e
   86ad8:	e721      	b.n	8691e <_malloc_r+0x372>
   86ada:	687b      	ldr	r3, [r7, #4]
   86adc:	e78d      	b.n	869fa <_malloc_r+0x44e>
   86ade:	bf00      	nop
   86ae0:	200705d8 	.word	0x200705d8

00086ae4 <memchr>:
   86ae4:	0783      	lsls	r3, r0, #30
   86ae6:	b470      	push	{r4, r5, r6}
   86ae8:	b2c9      	uxtb	r1, r1
   86aea:	d040      	beq.n	86b6e <memchr+0x8a>
   86aec:	1e54      	subs	r4, r2, #1
   86aee:	b32a      	cbz	r2, 86b3c <memchr+0x58>
   86af0:	7803      	ldrb	r3, [r0, #0]
   86af2:	428b      	cmp	r3, r1
   86af4:	d023      	beq.n	86b3e <memchr+0x5a>
   86af6:	1c43      	adds	r3, r0, #1
   86af8:	e004      	b.n	86b04 <memchr+0x20>
   86afa:	b1fc      	cbz	r4, 86b3c <memchr+0x58>
   86afc:	7805      	ldrb	r5, [r0, #0]
   86afe:	4614      	mov	r4, r2
   86b00:	428d      	cmp	r5, r1
   86b02:	d01c      	beq.n	86b3e <memchr+0x5a>
   86b04:	f013 0f03 	tst.w	r3, #3
   86b08:	4618      	mov	r0, r3
   86b0a:	f104 32ff 	add.w	r2, r4, #4294967295
   86b0e:	f103 0301 	add.w	r3, r3, #1
   86b12:	d1f2      	bne.n	86afa <memchr+0x16>
   86b14:	2c03      	cmp	r4, #3
   86b16:	d814      	bhi.n	86b42 <memchr+0x5e>
   86b18:	1e65      	subs	r5, r4, #1
   86b1a:	b354      	cbz	r4, 86b72 <memchr+0x8e>
   86b1c:	7803      	ldrb	r3, [r0, #0]
   86b1e:	428b      	cmp	r3, r1
   86b20:	d00d      	beq.n	86b3e <memchr+0x5a>
   86b22:	1c42      	adds	r2, r0, #1
   86b24:	2300      	movs	r3, #0
   86b26:	e002      	b.n	86b2e <memchr+0x4a>
   86b28:	7804      	ldrb	r4, [r0, #0]
   86b2a:	428c      	cmp	r4, r1
   86b2c:	d007      	beq.n	86b3e <memchr+0x5a>
   86b2e:	42ab      	cmp	r3, r5
   86b30:	4610      	mov	r0, r2
   86b32:	f103 0301 	add.w	r3, r3, #1
   86b36:	f102 0201 	add.w	r2, r2, #1
   86b3a:	d1f5      	bne.n	86b28 <memchr+0x44>
   86b3c:	2000      	movs	r0, #0
   86b3e:	bc70      	pop	{r4, r5, r6}
   86b40:	4770      	bx	lr
   86b42:	ea41 2601 	orr.w	r6, r1, r1, lsl #8
   86b46:	4603      	mov	r3, r0
   86b48:	ea46 4606 	orr.w	r6, r6, r6, lsl #16
   86b4c:	681a      	ldr	r2, [r3, #0]
   86b4e:	4618      	mov	r0, r3
   86b50:	4072      	eors	r2, r6
   86b52:	f1a2 3501 	sub.w	r5, r2, #16843009	; 0x1010101
   86b56:	ea25 0202 	bic.w	r2, r5, r2
   86b5a:	f012 3f80 	tst.w	r2, #2155905152	; 0x80808080
   86b5e:	f103 0304 	add.w	r3, r3, #4
   86b62:	d1d9      	bne.n	86b18 <memchr+0x34>
   86b64:	3c04      	subs	r4, #4
   86b66:	2c03      	cmp	r4, #3
   86b68:	4618      	mov	r0, r3
   86b6a:	d8ef      	bhi.n	86b4c <memchr+0x68>
   86b6c:	e7d4      	b.n	86b18 <memchr+0x34>
   86b6e:	4614      	mov	r4, r2
   86b70:	e7d0      	b.n	86b14 <memchr+0x30>
   86b72:	4620      	mov	r0, r4
   86b74:	e7e3      	b.n	86b3e <memchr+0x5a>
   86b76:	bf00      	nop

00086b78 <memmove>:
   86b78:	4288      	cmp	r0, r1
   86b7a:	b4f0      	push	{r4, r5, r6, r7}
   86b7c:	d910      	bls.n	86ba0 <memmove+0x28>
   86b7e:	188c      	adds	r4, r1, r2
   86b80:	42a0      	cmp	r0, r4
   86b82:	d20d      	bcs.n	86ba0 <memmove+0x28>
   86b84:	1885      	adds	r5, r0, r2
   86b86:	1e53      	subs	r3, r2, #1
   86b88:	b142      	cbz	r2, 86b9c <memmove+0x24>
   86b8a:	4621      	mov	r1, r4
   86b8c:	462a      	mov	r2, r5
   86b8e:	f811 4d01 	ldrb.w	r4, [r1, #-1]!
   86b92:	3b01      	subs	r3, #1
   86b94:	f802 4d01 	strb.w	r4, [r2, #-1]!
   86b98:	1c5c      	adds	r4, r3, #1
   86b9a:	d1f8      	bne.n	86b8e <memmove+0x16>
   86b9c:	bcf0      	pop	{r4, r5, r6, r7}
   86b9e:	4770      	bx	lr
   86ba0:	2a0f      	cmp	r2, #15
   86ba2:	d944      	bls.n	86c2e <memmove+0xb6>
   86ba4:	ea40 0301 	orr.w	r3, r0, r1
   86ba8:	079b      	lsls	r3, r3, #30
   86baa:	d144      	bne.n	86c36 <memmove+0xbe>
   86bac:	f1a2 0710 	sub.w	r7, r2, #16
   86bb0:	093f      	lsrs	r7, r7, #4
   86bb2:	eb00 1607 	add.w	r6, r0, r7, lsl #4
   86bb6:	3610      	adds	r6, #16
   86bb8:	460c      	mov	r4, r1
   86bba:	4603      	mov	r3, r0
   86bbc:	6825      	ldr	r5, [r4, #0]
   86bbe:	3310      	adds	r3, #16
   86bc0:	f843 5c10 	str.w	r5, [r3, #-16]
   86bc4:	6865      	ldr	r5, [r4, #4]
   86bc6:	3410      	adds	r4, #16
   86bc8:	f843 5c0c 	str.w	r5, [r3, #-12]
   86bcc:	f854 5c08 	ldr.w	r5, [r4, #-8]
   86bd0:	f843 5c08 	str.w	r5, [r3, #-8]
   86bd4:	f854 5c04 	ldr.w	r5, [r4, #-4]
   86bd8:	f843 5c04 	str.w	r5, [r3, #-4]
   86bdc:	42b3      	cmp	r3, r6
   86bde:	d1ed      	bne.n	86bbc <memmove+0x44>
   86be0:	1c7b      	adds	r3, r7, #1
   86be2:	f002 0c0f 	and.w	ip, r2, #15
   86be6:	011b      	lsls	r3, r3, #4
   86be8:	f1bc 0f03 	cmp.w	ip, #3
   86bec:	4419      	add	r1, r3
   86bee:	4403      	add	r3, r0
   86bf0:	d923      	bls.n	86c3a <memmove+0xc2>
   86bf2:	460e      	mov	r6, r1
   86bf4:	461d      	mov	r5, r3
   86bf6:	4664      	mov	r4, ip
   86bf8:	f856 7b04 	ldr.w	r7, [r6], #4
   86bfc:	3c04      	subs	r4, #4
   86bfe:	2c03      	cmp	r4, #3
   86c00:	f845 7b04 	str.w	r7, [r5], #4
   86c04:	d8f8      	bhi.n	86bf8 <memmove+0x80>
   86c06:	f1ac 0404 	sub.w	r4, ip, #4
   86c0a:	f024 0403 	bic.w	r4, r4, #3
   86c0e:	3404      	adds	r4, #4
   86c10:	f002 0203 	and.w	r2, r2, #3
   86c14:	4423      	add	r3, r4
   86c16:	4421      	add	r1, r4
   86c18:	2a00      	cmp	r2, #0
   86c1a:	d0bf      	beq.n	86b9c <memmove+0x24>
   86c1c:	441a      	add	r2, r3
   86c1e:	f811 4b01 	ldrb.w	r4, [r1], #1
   86c22:	f803 4b01 	strb.w	r4, [r3], #1
   86c26:	4293      	cmp	r3, r2
   86c28:	d1f9      	bne.n	86c1e <memmove+0xa6>
   86c2a:	bcf0      	pop	{r4, r5, r6, r7}
   86c2c:	4770      	bx	lr
   86c2e:	4603      	mov	r3, r0
   86c30:	2a00      	cmp	r2, #0
   86c32:	d1f3      	bne.n	86c1c <memmove+0xa4>
   86c34:	e7b2      	b.n	86b9c <memmove+0x24>
   86c36:	4603      	mov	r3, r0
   86c38:	e7f0      	b.n	86c1c <memmove+0xa4>
   86c3a:	4662      	mov	r2, ip
   86c3c:	2a00      	cmp	r2, #0
   86c3e:	d1ed      	bne.n	86c1c <memmove+0xa4>
   86c40:	e7ac      	b.n	86b9c <memmove+0x24>
   86c42:	bf00      	nop

00086c44 <__malloc_lock>:
   86c44:	4770      	bx	lr
   86c46:	bf00      	nop

00086c48 <__malloc_unlock>:
   86c48:	4770      	bx	lr
   86c4a:	bf00      	nop

00086c4c <_Balloc>:
   86c4c:	6cc2      	ldr	r2, [r0, #76]	; 0x4c
   86c4e:	b570      	push	{r4, r5, r6, lr}
   86c50:	4605      	mov	r5, r0
   86c52:	460c      	mov	r4, r1
   86c54:	b14a      	cbz	r2, 86c6a <_Balloc+0x1e>
   86c56:	f852 0024 	ldr.w	r0, [r2, r4, lsl #2]
   86c5a:	b180      	cbz	r0, 86c7e <_Balloc+0x32>
   86c5c:	6801      	ldr	r1, [r0, #0]
   86c5e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
   86c62:	2200      	movs	r2, #0
   86c64:	6102      	str	r2, [r0, #16]
   86c66:	60c2      	str	r2, [r0, #12]
   86c68:	bd70      	pop	{r4, r5, r6, pc}
   86c6a:	2221      	movs	r2, #33	; 0x21
   86c6c:	2104      	movs	r1, #4
   86c6e:	f000 fec5 	bl	879fc <_calloc_r>
   86c72:	64e8      	str	r0, [r5, #76]	; 0x4c
   86c74:	4602      	mov	r2, r0
   86c76:	2800      	cmp	r0, #0
   86c78:	d1ed      	bne.n	86c56 <_Balloc+0xa>
   86c7a:	2000      	movs	r0, #0
   86c7c:	bd70      	pop	{r4, r5, r6, pc}
   86c7e:	2101      	movs	r1, #1
   86c80:	fa01 f604 	lsl.w	r6, r1, r4
   86c84:	1d72      	adds	r2, r6, #5
   86c86:	4628      	mov	r0, r5
   86c88:	0092      	lsls	r2, r2, #2
   86c8a:	f000 feb7 	bl	879fc <_calloc_r>
   86c8e:	2800      	cmp	r0, #0
   86c90:	d0f3      	beq.n	86c7a <_Balloc+0x2e>
   86c92:	6044      	str	r4, [r0, #4]
   86c94:	6086      	str	r6, [r0, #8]
   86c96:	e7e4      	b.n	86c62 <_Balloc+0x16>

00086c98 <_Bfree>:
   86c98:	b131      	cbz	r1, 86ca8 <_Bfree+0x10>
   86c9a:	6cc3      	ldr	r3, [r0, #76]	; 0x4c
   86c9c:	684a      	ldr	r2, [r1, #4]
   86c9e:	f853 0022 	ldr.w	r0, [r3, r2, lsl #2]
   86ca2:	6008      	str	r0, [r1, #0]
   86ca4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
   86ca8:	4770      	bx	lr
   86caa:	bf00      	nop

00086cac <__multadd>:
   86cac:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   86cb0:	690f      	ldr	r7, [r1, #16]
   86cb2:	b083      	sub	sp, #12
   86cb4:	4688      	mov	r8, r1
   86cb6:	4681      	mov	r9, r0
   86cb8:	f101 0514 	add.w	r5, r1, #20
   86cbc:	2400      	movs	r4, #0
   86cbe:	682e      	ldr	r6, [r5, #0]
   86cc0:	3401      	adds	r4, #1
   86cc2:	b2b1      	uxth	r1, r6
   86cc4:	0c36      	lsrs	r6, r6, #16
   86cc6:	fb02 3301 	mla	r3, r2, r1, r3
   86cca:	fb02 f606 	mul.w	r6, r2, r6
   86cce:	b299      	uxth	r1, r3
   86cd0:	eb06 4313 	add.w	r3, r6, r3, lsr #16
   86cd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
   86cd8:	42a7      	cmp	r7, r4
   86cda:	f845 1b04 	str.w	r1, [r5], #4
   86cde:	ea4f 4313 	mov.w	r3, r3, lsr #16
   86ce2:	dcec      	bgt.n	86cbe <__multadd+0x12>
   86ce4:	b14b      	cbz	r3, 86cfa <__multadd+0x4e>
   86ce6:	f8d8 2008 	ldr.w	r2, [r8, #8]
   86cea:	4297      	cmp	r7, r2
   86cec:	da09      	bge.n	86d02 <__multadd+0x56>
   86cee:	eb08 0287 	add.w	r2, r8, r7, lsl #2
   86cf2:	3701      	adds	r7, #1
   86cf4:	6153      	str	r3, [r2, #20]
   86cf6:	f8c8 7010 	str.w	r7, [r8, #16]
   86cfa:	4640      	mov	r0, r8
   86cfc:	b003      	add	sp, #12
   86cfe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   86d02:	f8d8 1004 	ldr.w	r1, [r8, #4]
   86d06:	4648      	mov	r0, r9
   86d08:	3101      	adds	r1, #1
   86d0a:	9301      	str	r3, [sp, #4]
   86d0c:	f7ff ff9e 	bl	86c4c <_Balloc>
   86d10:	f8d8 2010 	ldr.w	r2, [r8, #16]
   86d14:	f108 010c 	add.w	r1, r8, #12
   86d18:	3202      	adds	r2, #2
   86d1a:	4604      	mov	r4, r0
   86d1c:	0092      	lsls	r2, r2, #2
   86d1e:	300c      	adds	r0, #12
   86d20:	f7fb fc30 	bl	82584 <memcpy>
   86d24:	f8d9 204c 	ldr.w	r2, [r9, #76]	; 0x4c
   86d28:	f8d8 1004 	ldr.w	r1, [r8, #4]
   86d2c:	9b01      	ldr	r3, [sp, #4]
   86d2e:	f852 0021 	ldr.w	r0, [r2, r1, lsl #2]
   86d32:	f8c8 0000 	str.w	r0, [r8]
   86d36:	f842 8021 	str.w	r8, [r2, r1, lsl #2]
   86d3a:	46a0      	mov	r8, r4
   86d3c:	e7d7      	b.n	86cee <__multadd+0x42>
   86d3e:	bf00      	nop

00086d40 <__hi0bits>:
   86d40:	0c03      	lsrs	r3, r0, #16
   86d42:	041b      	lsls	r3, r3, #16
   86d44:	b9b3      	cbnz	r3, 86d74 <__hi0bits+0x34>
   86d46:	0400      	lsls	r0, r0, #16
   86d48:	2310      	movs	r3, #16
   86d4a:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
   86d4e:	bf04      	itt	eq
   86d50:	0200      	lsleq	r0, r0, #8
   86d52:	3308      	addeq	r3, #8
   86d54:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
   86d58:	bf04      	itt	eq
   86d5a:	0100      	lsleq	r0, r0, #4
   86d5c:	3304      	addeq	r3, #4
   86d5e:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
   86d62:	bf04      	itt	eq
   86d64:	0080      	lsleq	r0, r0, #2
   86d66:	3302      	addeq	r3, #2
   86d68:	2800      	cmp	r0, #0
   86d6a:	db07      	blt.n	86d7c <__hi0bits+0x3c>
   86d6c:	0042      	lsls	r2, r0, #1
   86d6e:	d403      	bmi.n	86d78 <__hi0bits+0x38>
   86d70:	2020      	movs	r0, #32
   86d72:	4770      	bx	lr
   86d74:	2300      	movs	r3, #0
   86d76:	e7e8      	b.n	86d4a <__hi0bits+0xa>
   86d78:	1c58      	adds	r0, r3, #1
   86d7a:	4770      	bx	lr
   86d7c:	4618      	mov	r0, r3
   86d7e:	4770      	bx	lr

00086d80 <__lo0bits>:
   86d80:	6803      	ldr	r3, [r0, #0]
   86d82:	f013 0207 	ands.w	r2, r3, #7
   86d86:	d007      	beq.n	86d98 <__lo0bits+0x18>
   86d88:	07d9      	lsls	r1, r3, #31
   86d8a:	d420      	bmi.n	86dce <__lo0bits+0x4e>
   86d8c:	079a      	lsls	r2, r3, #30
   86d8e:	d420      	bmi.n	86dd2 <__lo0bits+0x52>
   86d90:	089b      	lsrs	r3, r3, #2
   86d92:	6003      	str	r3, [r0, #0]
   86d94:	2002      	movs	r0, #2
   86d96:	4770      	bx	lr
   86d98:	b299      	uxth	r1, r3
   86d9a:	b909      	cbnz	r1, 86da0 <__lo0bits+0x20>
   86d9c:	0c1b      	lsrs	r3, r3, #16
   86d9e:	2210      	movs	r2, #16
   86da0:	f013 0fff 	tst.w	r3, #255	; 0xff
   86da4:	bf04      	itt	eq
   86da6:	0a1b      	lsreq	r3, r3, #8
   86da8:	3208      	addeq	r2, #8
   86daa:	0719      	lsls	r1, r3, #28
   86dac:	bf04      	itt	eq
   86dae:	091b      	lsreq	r3, r3, #4
   86db0:	3204      	addeq	r2, #4
   86db2:	0799      	lsls	r1, r3, #30
   86db4:	bf04      	itt	eq
   86db6:	089b      	lsreq	r3, r3, #2
   86db8:	3202      	addeq	r2, #2
   86dba:	07d9      	lsls	r1, r3, #31
   86dbc:	d404      	bmi.n	86dc8 <__lo0bits+0x48>
   86dbe:	085b      	lsrs	r3, r3, #1
   86dc0:	d101      	bne.n	86dc6 <__lo0bits+0x46>
   86dc2:	2020      	movs	r0, #32
   86dc4:	4770      	bx	lr
   86dc6:	3201      	adds	r2, #1
   86dc8:	6003      	str	r3, [r0, #0]
   86dca:	4610      	mov	r0, r2
   86dcc:	4770      	bx	lr
   86dce:	2000      	movs	r0, #0
   86dd0:	4770      	bx	lr
   86dd2:	085b      	lsrs	r3, r3, #1
   86dd4:	6003      	str	r3, [r0, #0]
   86dd6:	2001      	movs	r0, #1
   86dd8:	4770      	bx	lr
   86dda:	bf00      	nop

00086ddc <__i2b>:
   86ddc:	b510      	push	{r4, lr}
   86dde:	460c      	mov	r4, r1
   86de0:	2101      	movs	r1, #1
   86de2:	f7ff ff33 	bl	86c4c <_Balloc>
   86de6:	2201      	movs	r2, #1
   86de8:	6144      	str	r4, [r0, #20]
   86dea:	6102      	str	r2, [r0, #16]
   86dec:	bd10      	pop	{r4, pc}
   86dee:	bf00      	nop

00086df0 <__multiply>:
   86df0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86df4:	690d      	ldr	r5, [r1, #16]
   86df6:	f8d2 9010 	ldr.w	r9, [r2, #16]
   86dfa:	b085      	sub	sp, #20
   86dfc:	454d      	cmp	r5, r9
   86dfe:	460c      	mov	r4, r1
   86e00:	4692      	mov	sl, r2
   86e02:	da04      	bge.n	86e0e <__multiply+0x1e>
   86e04:	462a      	mov	r2, r5
   86e06:	4654      	mov	r4, sl
   86e08:	464d      	mov	r5, r9
   86e0a:	468a      	mov	sl, r1
   86e0c:	4691      	mov	r9, r2
   86e0e:	68a3      	ldr	r3, [r4, #8]
   86e10:	eb05 0709 	add.w	r7, r5, r9
   86e14:	6861      	ldr	r1, [r4, #4]
   86e16:	429f      	cmp	r7, r3
   86e18:	bfc8      	it	gt
   86e1a:	3101      	addgt	r1, #1
   86e1c:	f7ff ff16 	bl	86c4c <_Balloc>
   86e20:	f100 0614 	add.w	r6, r0, #20
   86e24:	eb06 0887 	add.w	r8, r6, r7, lsl #2
   86e28:	4546      	cmp	r6, r8
   86e2a:	9001      	str	r0, [sp, #4]
   86e2c:	d205      	bcs.n	86e3a <__multiply+0x4a>
   86e2e:	4633      	mov	r3, r6
   86e30:	2000      	movs	r0, #0
   86e32:	f843 0b04 	str.w	r0, [r3], #4
   86e36:	4598      	cmp	r8, r3
   86e38:	d8fb      	bhi.n	86e32 <__multiply+0x42>
   86e3a:	f10a 0c14 	add.w	ip, sl, #20
   86e3e:	eb0c 0989 	add.w	r9, ip, r9, lsl #2
   86e42:	3414      	adds	r4, #20
   86e44:	45cc      	cmp	ip, r9
   86e46:	9400      	str	r4, [sp, #0]
   86e48:	eb04 0585 	add.w	r5, r4, r5, lsl #2
   86e4c:	d25b      	bcs.n	86f06 <__multiply+0x116>
   86e4e:	f8cd 8008 	str.w	r8, [sp, #8]
   86e52:	9703      	str	r7, [sp, #12]
   86e54:	46c8      	mov	r8, r9
   86e56:	f85c 3b04 	ldr.w	r3, [ip], #4
   86e5a:	b29c      	uxth	r4, r3
   86e5c:	b324      	cbz	r4, 86ea8 <__multiply+0xb8>
   86e5e:	9a00      	ldr	r2, [sp, #0]
   86e60:	4633      	mov	r3, r6
   86e62:	f04f 0900 	mov.w	r9, #0
   86e66:	e000      	b.n	86e6a <__multiply+0x7a>
   86e68:	460b      	mov	r3, r1
   86e6a:	f852 7b04 	ldr.w	r7, [r2], #4
   86e6e:	6819      	ldr	r1, [r3, #0]
   86e70:	fa1f fb87 	uxth.w	fp, r7
   86e74:	fa1f fa81 	uxth.w	sl, r1
   86e78:	0c38      	lsrs	r0, r7, #16
   86e7a:	0c09      	lsrs	r1, r1, #16
   86e7c:	fb04 aa0b 	mla	sl, r4, fp, sl
   86e80:	fb04 1000 	mla	r0, r4, r0, r1
   86e84:	44d1      	add	r9, sl
   86e86:	eb00 4019 	add.w	r0, r0, r9, lsr #16
   86e8a:	fa1f f989 	uxth.w	r9, r9
   86e8e:	ea49 4700 	orr.w	r7, r9, r0, lsl #16
   86e92:	4619      	mov	r1, r3
   86e94:	4295      	cmp	r5, r2
   86e96:	ea4f 4910 	mov.w	r9, r0, lsr #16
   86e9a:	f841 7b04 	str.w	r7, [r1], #4
   86e9e:	d8e3      	bhi.n	86e68 <__multiply+0x78>
   86ea0:	f8c3 9004 	str.w	r9, [r3, #4]
   86ea4:	f85c 3c04 	ldr.w	r3, [ip, #-4]
   86ea8:	ea5f 4913 	movs.w	r9, r3, lsr #16
   86eac:	d024      	beq.n	86ef8 <__multiply+0x108>
   86eae:	f8d6 a000 	ldr.w	sl, [r6]
   86eb2:	9b00      	ldr	r3, [sp, #0]
   86eb4:	4650      	mov	r0, sl
   86eb6:	4631      	mov	r1, r6
   86eb8:	f04f 0b00 	mov.w	fp, #0
   86ebc:	e000      	b.n	86ec0 <__multiply+0xd0>
   86ebe:	4611      	mov	r1, r2
   86ec0:	881a      	ldrh	r2, [r3, #0]
   86ec2:	0c00      	lsrs	r0, r0, #16
   86ec4:	fb09 0002 	mla	r0, r9, r2, r0
   86ec8:	fa1f fa8a 	uxth.w	sl, sl
   86ecc:	4483      	add	fp, r0
   86ece:	ea4a 400b 	orr.w	r0, sl, fp, lsl #16
   86ed2:	460a      	mov	r2, r1
   86ed4:	f842 0b04 	str.w	r0, [r2], #4
   86ed8:	f853 7b04 	ldr.w	r7, [r3], #4
   86edc:	6848      	ldr	r0, [r1, #4]
   86ede:	ea4f 4a17 	mov.w	sl, r7, lsr #16
   86ee2:	b284      	uxth	r4, r0
   86ee4:	fb09 4a0a 	mla	sl, r9, sl, r4
   86ee8:	429d      	cmp	r5, r3
   86eea:	eb0a 4a1b 	add.w	sl, sl, fp, lsr #16
   86eee:	ea4f 4b1a 	mov.w	fp, sl, lsr #16
   86ef2:	d8e4      	bhi.n	86ebe <__multiply+0xce>
   86ef4:	f8c1 a004 	str.w	sl, [r1, #4]
   86ef8:	45e0      	cmp	r8, ip
   86efa:	f106 0604 	add.w	r6, r6, #4
   86efe:	d8aa      	bhi.n	86e56 <__multiply+0x66>
   86f00:	f8dd 8008 	ldr.w	r8, [sp, #8]
   86f04:	9f03      	ldr	r7, [sp, #12]
   86f06:	2f00      	cmp	r7, #0
   86f08:	dd0a      	ble.n	86f20 <__multiply+0x130>
   86f0a:	f858 3c04 	ldr.w	r3, [r8, #-4]
   86f0e:	f1a8 0804 	sub.w	r8, r8, #4
   86f12:	b11b      	cbz	r3, 86f1c <__multiply+0x12c>
   86f14:	e004      	b.n	86f20 <__multiply+0x130>
   86f16:	f858 3d04 	ldr.w	r3, [r8, #-4]!
   86f1a:	b90b      	cbnz	r3, 86f20 <__multiply+0x130>
   86f1c:	3f01      	subs	r7, #1
   86f1e:	d1fa      	bne.n	86f16 <__multiply+0x126>
   86f20:	9b01      	ldr	r3, [sp, #4]
   86f22:	4618      	mov	r0, r3
   86f24:	611f      	str	r7, [r3, #16]
   86f26:	b005      	add	sp, #20
   86f28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00086f2c <__pow5mult>:
   86f2c:	f012 0303 	ands.w	r3, r2, #3
   86f30:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   86f34:	4614      	mov	r4, r2
   86f36:	4607      	mov	r7, r0
   86f38:	460e      	mov	r6, r1
   86f3a:	d12c      	bne.n	86f96 <__pow5mult+0x6a>
   86f3c:	10a4      	asrs	r4, r4, #2
   86f3e:	d01c      	beq.n	86f7a <__pow5mult+0x4e>
   86f40:	6cbd      	ldr	r5, [r7, #72]	; 0x48
   86f42:	2d00      	cmp	r5, #0
   86f44:	d030      	beq.n	86fa8 <__pow5mult+0x7c>
   86f46:	f04f 0800 	mov.w	r8, #0
   86f4a:	e004      	b.n	86f56 <__pow5mult+0x2a>
   86f4c:	1064      	asrs	r4, r4, #1
   86f4e:	d014      	beq.n	86f7a <__pow5mult+0x4e>
   86f50:	6828      	ldr	r0, [r5, #0]
   86f52:	b1a8      	cbz	r0, 86f80 <__pow5mult+0x54>
   86f54:	4605      	mov	r5, r0
   86f56:	07e3      	lsls	r3, r4, #31
   86f58:	d5f8      	bpl.n	86f4c <__pow5mult+0x20>
   86f5a:	4638      	mov	r0, r7
   86f5c:	4631      	mov	r1, r6
   86f5e:	462a      	mov	r2, r5
   86f60:	f7ff ff46 	bl	86df0 <__multiply>
   86f64:	b1ae      	cbz	r6, 86f92 <__pow5mult+0x66>
   86f66:	6872      	ldr	r2, [r6, #4]
   86f68:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
   86f6a:	1064      	asrs	r4, r4, #1
   86f6c:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   86f70:	6031      	str	r1, [r6, #0]
   86f72:	f843 6022 	str.w	r6, [r3, r2, lsl #2]
   86f76:	4606      	mov	r6, r0
   86f78:	d1ea      	bne.n	86f50 <__pow5mult+0x24>
   86f7a:	4630      	mov	r0, r6
   86f7c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   86f80:	4638      	mov	r0, r7
   86f82:	4629      	mov	r1, r5
   86f84:	462a      	mov	r2, r5
   86f86:	f7ff ff33 	bl	86df0 <__multiply>
   86f8a:	6028      	str	r0, [r5, #0]
   86f8c:	f8c0 8000 	str.w	r8, [r0]
   86f90:	e7e0      	b.n	86f54 <__pow5mult+0x28>
   86f92:	4606      	mov	r6, r0
   86f94:	e7da      	b.n	86f4c <__pow5mult+0x20>
   86f96:	4a0b      	ldr	r2, [pc, #44]	; (86fc4 <__pow5mult+0x98>)
   86f98:	3b01      	subs	r3, #1
   86f9a:	f852 2023 	ldr.w	r2, [r2, r3, lsl #2]
   86f9e:	2300      	movs	r3, #0
   86fa0:	f7ff fe84 	bl	86cac <__multadd>
   86fa4:	4606      	mov	r6, r0
   86fa6:	e7c9      	b.n	86f3c <__pow5mult+0x10>
   86fa8:	2101      	movs	r1, #1
   86faa:	4638      	mov	r0, r7
   86fac:	f7ff fe4e 	bl	86c4c <_Balloc>
   86fb0:	f240 2171 	movw	r1, #625	; 0x271
   86fb4:	2201      	movs	r2, #1
   86fb6:	2300      	movs	r3, #0
   86fb8:	6141      	str	r1, [r0, #20]
   86fba:	6102      	str	r2, [r0, #16]
   86fbc:	4605      	mov	r5, r0
   86fbe:	64b8      	str	r0, [r7, #72]	; 0x48
   86fc0:	6003      	str	r3, [r0, #0]
   86fc2:	e7c0      	b.n	86f46 <__pow5mult+0x1a>
   86fc4:	00088c58 	.word	0x00088c58

00086fc8 <__lshift>:
   86fc8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   86fcc:	690b      	ldr	r3, [r1, #16]
   86fce:	ea4f 1a62 	mov.w	sl, r2, asr #5
   86fd2:	eb0a 0903 	add.w	r9, sl, r3
   86fd6:	688b      	ldr	r3, [r1, #8]
   86fd8:	f109 0601 	add.w	r6, r9, #1
   86fdc:	429e      	cmp	r6, r3
   86fde:	460f      	mov	r7, r1
   86fe0:	4693      	mov	fp, r2
   86fe2:	4680      	mov	r8, r0
   86fe4:	6849      	ldr	r1, [r1, #4]
   86fe6:	dd04      	ble.n	86ff2 <__lshift+0x2a>
   86fe8:	005b      	lsls	r3, r3, #1
   86fea:	429e      	cmp	r6, r3
   86fec:	f101 0101 	add.w	r1, r1, #1
   86ff0:	dcfa      	bgt.n	86fe8 <__lshift+0x20>
   86ff2:	4640      	mov	r0, r8
   86ff4:	f7ff fe2a 	bl	86c4c <_Balloc>
   86ff8:	f1ba 0f00 	cmp.w	sl, #0
   86ffc:	f100 0414 	add.w	r4, r0, #20
   87000:	dd09      	ble.n	87016 <__lshift+0x4e>
   87002:	2300      	movs	r3, #0
   87004:	461a      	mov	r2, r3
   87006:	4625      	mov	r5, r4
   87008:	3301      	adds	r3, #1
   8700a:	4553      	cmp	r3, sl
   8700c:	f845 2b04 	str.w	r2, [r5], #4
   87010:	d1fa      	bne.n	87008 <__lshift+0x40>
   87012:	eb04 0483 	add.w	r4, r4, r3, lsl #2
   87016:	693a      	ldr	r2, [r7, #16]
   87018:	f107 0314 	add.w	r3, r7, #20
   8701c:	f01b 0b1f 	ands.w	fp, fp, #31
   87020:	eb03 0c82 	add.w	ip, r3, r2, lsl #2
   87024:	d021      	beq.n	8706a <__lshift+0xa2>
   87026:	f1cb 0a20 	rsb	sl, fp, #32
   8702a:	2200      	movs	r2, #0
   8702c:	e000      	b.n	87030 <__lshift+0x68>
   8702e:	462c      	mov	r4, r5
   87030:	6819      	ldr	r1, [r3, #0]
   87032:	4625      	mov	r5, r4
   87034:	fa01 f10b 	lsl.w	r1, r1, fp
   87038:	430a      	orrs	r2, r1
   8703a:	f845 2b04 	str.w	r2, [r5], #4
   8703e:	f853 2b04 	ldr.w	r2, [r3], #4
   87042:	4563      	cmp	r3, ip
   87044:	fa22 f20a 	lsr.w	r2, r2, sl
   87048:	d3f1      	bcc.n	8702e <__lshift+0x66>
   8704a:	6062      	str	r2, [r4, #4]
   8704c:	b10a      	cbz	r2, 87052 <__lshift+0x8a>
   8704e:	f109 0602 	add.w	r6, r9, #2
   87052:	f8d8 304c 	ldr.w	r3, [r8, #76]	; 0x4c
   87056:	687a      	ldr	r2, [r7, #4]
   87058:	3e01      	subs	r6, #1
   8705a:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
   8705e:	6106      	str	r6, [r0, #16]
   87060:	6039      	str	r1, [r7, #0]
   87062:	f843 7022 	str.w	r7, [r3, r2, lsl #2]
   87066:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8706a:	f853 2b04 	ldr.w	r2, [r3], #4
   8706e:	459c      	cmp	ip, r3
   87070:	f844 2b04 	str.w	r2, [r4], #4
   87074:	d9ed      	bls.n	87052 <__lshift+0x8a>
   87076:	f853 2b04 	ldr.w	r2, [r3], #4
   8707a:	459c      	cmp	ip, r3
   8707c:	f844 2b04 	str.w	r2, [r4], #4
   87080:	d8f3      	bhi.n	8706a <__lshift+0xa2>
   87082:	e7e6      	b.n	87052 <__lshift+0x8a>

00087084 <__mcmp>:
   87084:	6902      	ldr	r2, [r0, #16]
   87086:	690b      	ldr	r3, [r1, #16]
   87088:	b410      	push	{r4}
   8708a:	1ad2      	subs	r2, r2, r3
   8708c:	d115      	bne.n	870ba <__mcmp+0x36>
   8708e:	009b      	lsls	r3, r3, #2
   87090:	3014      	adds	r0, #20
   87092:	3114      	adds	r1, #20
   87094:	4419      	add	r1, r3
   87096:	4403      	add	r3, r0
   87098:	e001      	b.n	8709e <__mcmp+0x1a>
   8709a:	4298      	cmp	r0, r3
   8709c:	d211      	bcs.n	870c2 <__mcmp+0x3e>
   8709e:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   870a2:	f851 4d04 	ldr.w	r4, [r1, #-4]!
   870a6:	42a2      	cmp	r2, r4
   870a8:	d0f7      	beq.n	8709a <__mcmp+0x16>
   870aa:	4294      	cmp	r4, r2
   870ac:	bf94      	ite	ls
   870ae:	2001      	movls	r0, #1
   870b0:	f04f 30ff 	movhi.w	r0, #4294967295
   870b4:	f85d 4b04 	ldr.w	r4, [sp], #4
   870b8:	4770      	bx	lr
   870ba:	4610      	mov	r0, r2
   870bc:	f85d 4b04 	ldr.w	r4, [sp], #4
   870c0:	4770      	bx	lr
   870c2:	2000      	movs	r0, #0
   870c4:	f85d 4b04 	ldr.w	r4, [sp], #4
   870c8:	4770      	bx	lr
   870ca:	bf00      	nop

000870cc <__mdiff>:
   870cc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   870d0:	460d      	mov	r5, r1
   870d2:	4604      	mov	r4, r0
   870d4:	4611      	mov	r1, r2
   870d6:	4628      	mov	r0, r5
   870d8:	4616      	mov	r6, r2
   870da:	f7ff ffd3 	bl	87084 <__mcmp>
   870de:	1e07      	subs	r7, r0, #0
   870e0:	d056      	beq.n	87190 <__mdiff+0xc4>
   870e2:	db4f      	blt.n	87184 <__mdiff+0xb8>
   870e4:	f04f 0900 	mov.w	r9, #0
   870e8:	6869      	ldr	r1, [r5, #4]
   870ea:	4620      	mov	r0, r4
   870ec:	f7ff fdae 	bl	86c4c <_Balloc>
   870f0:	692f      	ldr	r7, [r5, #16]
   870f2:	6932      	ldr	r2, [r6, #16]
   870f4:	3514      	adds	r5, #20
   870f6:	3614      	adds	r6, #20
   870f8:	f8c0 900c 	str.w	r9, [r0, #12]
   870fc:	f100 0314 	add.w	r3, r0, #20
   87100:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
   87104:	eb06 0882 	add.w	r8, r6, r2, lsl #2
   87108:	2100      	movs	r1, #0
   8710a:	f855 4b04 	ldr.w	r4, [r5], #4
   8710e:	f856 2b04 	ldr.w	r2, [r6], #4
   87112:	fa1f fa84 	uxth.w	sl, r4
   87116:	448a      	add	sl, r1
   87118:	fa1f f982 	uxth.w	r9, r2
   8711c:	0c11      	lsrs	r1, r2, #16
   8711e:	ebc1 4114 	rsb	r1, r1, r4, lsr #16
   87122:	ebc9 020a 	rsb	r2, r9, sl
   87126:	eb01 4122 	add.w	r1, r1, r2, asr #16
   8712a:	b292      	uxth	r2, r2
   8712c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   87130:	45b0      	cmp	r8, r6
   87132:	f843 2b04 	str.w	r2, [r3], #4
   87136:	ea4f 4121 	mov.w	r1, r1, asr #16
   8713a:	462c      	mov	r4, r5
   8713c:	d8e5      	bhi.n	8710a <__mdiff+0x3e>
   8713e:	45ac      	cmp	ip, r5
   87140:	4698      	mov	r8, r3
   87142:	d915      	bls.n	87170 <__mdiff+0xa4>
   87144:	f854 6b04 	ldr.w	r6, [r4], #4
   87148:	b2b2      	uxth	r2, r6
   8714a:	4411      	add	r1, r2
   8714c:	0c36      	lsrs	r6, r6, #16
   8714e:	eb06 4621 	add.w	r6, r6, r1, asr #16
   87152:	b289      	uxth	r1, r1
   87154:	ea41 4206 	orr.w	r2, r1, r6, lsl #16
   87158:	45a4      	cmp	ip, r4
   8715a:	f843 2b04 	str.w	r2, [r3], #4
   8715e:	ea4f 4126 	mov.w	r1, r6, asr #16
   87162:	d8ef      	bhi.n	87144 <__mdiff+0x78>
   87164:	43eb      	mvns	r3, r5
   87166:	4463      	add	r3, ip
   87168:	f023 0303 	bic.w	r3, r3, #3
   8716c:	3304      	adds	r3, #4
   8716e:	4443      	add	r3, r8
   87170:	3b04      	subs	r3, #4
   87172:	b922      	cbnz	r2, 8717e <__mdiff+0xb2>
   87174:	f853 2d04 	ldr.w	r2, [r3, #-4]!
   87178:	3f01      	subs	r7, #1
   8717a:	2a00      	cmp	r2, #0
   8717c:	d0fa      	beq.n	87174 <__mdiff+0xa8>
   8717e:	6107      	str	r7, [r0, #16]
   87180:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   87184:	462b      	mov	r3, r5
   87186:	f04f 0901 	mov.w	r9, #1
   8718a:	4635      	mov	r5, r6
   8718c:	461e      	mov	r6, r3
   8718e:	e7ab      	b.n	870e8 <__mdiff+0x1c>
   87190:	4620      	mov	r0, r4
   87192:	4639      	mov	r1, r7
   87194:	f7ff fd5a 	bl	86c4c <_Balloc>
   87198:	2301      	movs	r3, #1
   8719a:	6147      	str	r7, [r0, #20]
   8719c:	6103      	str	r3, [r0, #16]
   8719e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   871a2:	bf00      	nop

000871a4 <__d2b>:
   871a4:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   871a8:	2101      	movs	r1, #1
   871aa:	b083      	sub	sp, #12
   871ac:	461d      	mov	r5, r3
   871ae:	f3c3 560a 	ubfx	r6, r3, #20, #11
   871b2:	4614      	mov	r4, r2
   871b4:	9f0a      	ldr	r7, [sp, #40]	; 0x28
   871b6:	f7ff fd49 	bl	86c4c <_Balloc>
   871ba:	f3c5 0313 	ubfx	r3, r5, #0, #20
   871be:	4680      	mov	r8, r0
   871c0:	b10e      	cbz	r6, 871c6 <__d2b+0x22>
   871c2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   871c6:	9301      	str	r3, [sp, #4]
   871c8:	b324      	cbz	r4, 87214 <__d2b+0x70>
   871ca:	a802      	add	r0, sp, #8
   871cc:	f840 4d08 	str.w	r4, [r0, #-8]!
   871d0:	4668      	mov	r0, sp
   871d2:	f7ff fdd5 	bl	86d80 <__lo0bits>
   871d6:	2800      	cmp	r0, #0
   871d8:	d135      	bne.n	87246 <__d2b+0xa2>
   871da:	e89d 000c 	ldmia.w	sp, {r2, r3}
   871de:	f8c8 2014 	str.w	r2, [r8, #20]
   871e2:	2b00      	cmp	r3, #0
   871e4:	bf0c      	ite	eq
   871e6:	2401      	moveq	r4, #1
   871e8:	2402      	movne	r4, #2
   871ea:	f8c8 3018 	str.w	r3, [r8, #24]
   871ee:	f8c8 4010 	str.w	r4, [r8, #16]
   871f2:	b9de      	cbnz	r6, 8722c <__d2b+0x88>
   871f4:	eb08 0384 	add.w	r3, r8, r4, lsl #2
   871f8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
   871fc:	6038      	str	r0, [r7, #0]
   871fe:	6918      	ldr	r0, [r3, #16]
   87200:	f7ff fd9e 	bl	86d40 <__hi0bits>
   87204:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87206:	ebc0 1044 	rsb	r0, r0, r4, lsl #5
   8720a:	6018      	str	r0, [r3, #0]
   8720c:	4640      	mov	r0, r8
   8720e:	b003      	add	sp, #12
   87210:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87214:	a801      	add	r0, sp, #4
   87216:	f7ff fdb3 	bl	86d80 <__lo0bits>
   8721a:	9b01      	ldr	r3, [sp, #4]
   8721c:	2401      	movs	r4, #1
   8721e:	3020      	adds	r0, #32
   87220:	f8c8 3014 	str.w	r3, [r8, #20]
   87224:	f8c8 4010 	str.w	r4, [r8, #16]
   87228:	2e00      	cmp	r6, #0
   8722a:	d0e3      	beq.n	871f4 <__d2b+0x50>
   8722c:	f2a6 4933 	subw	r9, r6, #1075	; 0x433
   87230:	eb09 0300 	add.w	r3, r9, r0
   87234:	603b      	str	r3, [r7, #0]
   87236:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   87238:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
   8723c:	6018      	str	r0, [r3, #0]
   8723e:	4640      	mov	r0, r8
   87240:	b003      	add	sp, #12
   87242:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   87246:	9b01      	ldr	r3, [sp, #4]
   87248:	f1c0 0120 	rsb	r1, r0, #32
   8724c:	fa03 f101 	lsl.w	r1, r3, r1
   87250:	40c3      	lsrs	r3, r0
   87252:	9a00      	ldr	r2, [sp, #0]
   87254:	9301      	str	r3, [sp, #4]
   87256:	430a      	orrs	r2, r1
   87258:	f8c8 2014 	str.w	r2, [r8, #20]
   8725c:	e7c1      	b.n	871e2 <__d2b+0x3e>
   8725e:	bf00      	nop

00087260 <_realloc_r>:
   87260:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   87264:	460c      	mov	r4, r1
   87266:	b083      	sub	sp, #12
   87268:	4690      	mov	r8, r2
   8726a:	4681      	mov	r9, r0
   8726c:	2900      	cmp	r1, #0
   8726e:	f000 80ba 	beq.w	873e6 <_realloc_r+0x186>
   87272:	f7ff fce7 	bl	86c44 <__malloc_lock>
   87276:	f108 060b 	add.w	r6, r8, #11
   8727a:	f854 3c04 	ldr.w	r3, [r4, #-4]
   8727e:	2e16      	cmp	r6, #22
   87280:	f023 0503 	bic.w	r5, r3, #3
   87284:	f1a4 0708 	sub.w	r7, r4, #8
   87288:	d84b      	bhi.n	87322 <_realloc_r+0xc2>
   8728a:	2110      	movs	r1, #16
   8728c:	460e      	mov	r6, r1
   8728e:	45b0      	cmp	r8, r6
   87290:	d84c      	bhi.n	8732c <_realloc_r+0xcc>
   87292:	428d      	cmp	r5, r1
   87294:	da51      	bge.n	8733a <_realloc_r+0xda>
   87296:	f8df b384 	ldr.w	fp, [pc, #900]	; 8761c <_realloc_r+0x3bc>
   8729a:	1978      	adds	r0, r7, r5
   8729c:	f8db e008 	ldr.w	lr, [fp, #8]
   872a0:	4586      	cmp	lr, r0
   872a2:	f000 80a6 	beq.w	873f2 <_realloc_r+0x192>
   872a6:	6842      	ldr	r2, [r0, #4]
   872a8:	f022 0c01 	bic.w	ip, r2, #1
   872ac:	4484      	add	ip, r0
   872ae:	f8dc c004 	ldr.w	ip, [ip, #4]
   872b2:	f01c 0f01 	tst.w	ip, #1
   872b6:	d054      	beq.n	87362 <_realloc_r+0x102>
   872b8:	2200      	movs	r2, #0
   872ba:	4610      	mov	r0, r2
   872bc:	07db      	lsls	r3, r3, #31
   872be:	d46f      	bmi.n	873a0 <_realloc_r+0x140>
   872c0:	f854 3c08 	ldr.w	r3, [r4, #-8]
   872c4:	ebc3 0a07 	rsb	sl, r3, r7
   872c8:	f8da 3004 	ldr.w	r3, [sl, #4]
   872cc:	f023 0303 	bic.w	r3, r3, #3
   872d0:	442b      	add	r3, r5
   872d2:	2800      	cmp	r0, #0
   872d4:	d062      	beq.n	8739c <_realloc_r+0x13c>
   872d6:	4570      	cmp	r0, lr
   872d8:	f000 80e9 	beq.w	874ae <_realloc_r+0x24e>
   872dc:	eb02 0e03 	add.w	lr, r2, r3
   872e0:	458e      	cmp	lr, r1
   872e2:	db5b      	blt.n	8739c <_realloc_r+0x13c>
   872e4:	68c3      	ldr	r3, [r0, #12]
   872e6:	6882      	ldr	r2, [r0, #8]
   872e8:	46d0      	mov	r8, sl
   872ea:	60d3      	str	r3, [r2, #12]
   872ec:	609a      	str	r2, [r3, #8]
   872ee:	f858 1f08 	ldr.w	r1, [r8, #8]!
   872f2:	f8da 300c 	ldr.w	r3, [sl, #12]
   872f6:	1f2a      	subs	r2, r5, #4
   872f8:	2a24      	cmp	r2, #36	; 0x24
   872fa:	60cb      	str	r3, [r1, #12]
   872fc:	6099      	str	r1, [r3, #8]
   872fe:	f200 8123 	bhi.w	87548 <_realloc_r+0x2e8>
   87302:	2a13      	cmp	r2, #19
   87304:	f240 80b0 	bls.w	87468 <_realloc_r+0x208>
   87308:	6823      	ldr	r3, [r4, #0]
   8730a:	2a1b      	cmp	r2, #27
   8730c:	f8ca 3008 	str.w	r3, [sl, #8]
   87310:	6863      	ldr	r3, [r4, #4]
   87312:	f8ca 300c 	str.w	r3, [sl, #12]
   87316:	f200 812b 	bhi.w	87570 <_realloc_r+0x310>
   8731a:	3408      	adds	r4, #8
   8731c:	f10a 0310 	add.w	r3, sl, #16
   87320:	e0a3      	b.n	8746a <_realloc_r+0x20a>
   87322:	f026 0607 	bic.w	r6, r6, #7
   87326:	2e00      	cmp	r6, #0
   87328:	4631      	mov	r1, r6
   8732a:	dab0      	bge.n	8728e <_realloc_r+0x2e>
   8732c:	230c      	movs	r3, #12
   8732e:	2000      	movs	r0, #0
   87330:	f8c9 3000 	str.w	r3, [r9]
   87334:	b003      	add	sp, #12
   87336:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8733a:	46a0      	mov	r8, r4
   8733c:	1baa      	subs	r2, r5, r6
   8733e:	2a0f      	cmp	r2, #15
   87340:	f003 0301 	and.w	r3, r3, #1
   87344:	d81a      	bhi.n	8737c <_realloc_r+0x11c>
   87346:	432b      	orrs	r3, r5
   87348:	607b      	str	r3, [r7, #4]
   8734a:	443d      	add	r5, r7
   8734c:	686b      	ldr	r3, [r5, #4]
   8734e:	f043 0301 	orr.w	r3, r3, #1
   87352:	606b      	str	r3, [r5, #4]
   87354:	4648      	mov	r0, r9
   87356:	f7ff fc77 	bl	86c48 <__malloc_unlock>
   8735a:	4640      	mov	r0, r8
   8735c:	b003      	add	sp, #12
   8735e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   87362:	f022 0203 	bic.w	r2, r2, #3
   87366:	eb02 0c05 	add.w	ip, r2, r5
   8736a:	458c      	cmp	ip, r1
   8736c:	dba6      	blt.n	872bc <_realloc_r+0x5c>
   8736e:	68c2      	ldr	r2, [r0, #12]
   87370:	6881      	ldr	r1, [r0, #8]
   87372:	46a0      	mov	r8, r4
   87374:	60ca      	str	r2, [r1, #12]
   87376:	4665      	mov	r5, ip
   87378:	6091      	str	r1, [r2, #8]
   8737a:	e7df      	b.n	8733c <_realloc_r+0xdc>
   8737c:	19b9      	adds	r1, r7, r6
   8737e:	4333      	orrs	r3, r6
   87380:	f042 0001 	orr.w	r0, r2, #1
   87384:	607b      	str	r3, [r7, #4]
   87386:	440a      	add	r2, r1
   87388:	6048      	str	r0, [r1, #4]
   8738a:	6853      	ldr	r3, [r2, #4]
   8738c:	3108      	adds	r1, #8
   8738e:	f043 0301 	orr.w	r3, r3, #1
   87392:	6053      	str	r3, [r2, #4]
   87394:	4648      	mov	r0, r9
   87396:	f7fe fe07 	bl	85fa8 <_free_r>
   8739a:	e7db      	b.n	87354 <_realloc_r+0xf4>
   8739c:	428b      	cmp	r3, r1
   8739e:	da33      	bge.n	87408 <_realloc_r+0x1a8>
   873a0:	4641      	mov	r1, r8
   873a2:	4648      	mov	r0, r9
   873a4:	f7ff f902 	bl	865ac <_malloc_r>
   873a8:	4680      	mov	r8, r0
   873aa:	2800      	cmp	r0, #0
   873ac:	d0d2      	beq.n	87354 <_realloc_r+0xf4>
   873ae:	f854 3c04 	ldr.w	r3, [r4, #-4]
   873b2:	f1a0 0108 	sub.w	r1, r0, #8
   873b6:	f023 0201 	bic.w	r2, r3, #1
   873ba:	443a      	add	r2, r7
   873bc:	4291      	cmp	r1, r2
   873be:	f000 80bc 	beq.w	8753a <_realloc_r+0x2da>
   873c2:	1f2a      	subs	r2, r5, #4
   873c4:	2a24      	cmp	r2, #36	; 0x24
   873c6:	d86e      	bhi.n	874a6 <_realloc_r+0x246>
   873c8:	2a13      	cmp	r2, #19
   873ca:	d842      	bhi.n	87452 <_realloc_r+0x1f2>
   873cc:	4603      	mov	r3, r0
   873ce:	4622      	mov	r2, r4
   873d0:	6811      	ldr	r1, [r2, #0]
   873d2:	6019      	str	r1, [r3, #0]
   873d4:	6851      	ldr	r1, [r2, #4]
   873d6:	6059      	str	r1, [r3, #4]
   873d8:	6892      	ldr	r2, [r2, #8]
   873da:	609a      	str	r2, [r3, #8]
   873dc:	4621      	mov	r1, r4
   873de:	4648      	mov	r0, r9
   873e0:	f7fe fde2 	bl	85fa8 <_free_r>
   873e4:	e7b6      	b.n	87354 <_realloc_r+0xf4>
   873e6:	4611      	mov	r1, r2
   873e8:	b003      	add	sp, #12
   873ea:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   873ee:	f7ff b8dd 	b.w	865ac <_malloc_r>
   873f2:	f8de 2004 	ldr.w	r2, [lr, #4]
   873f6:	f106 0c10 	add.w	ip, r6, #16
   873fa:	f022 0203 	bic.w	r2, r2, #3
   873fe:	1950      	adds	r0, r2, r5
   87400:	4560      	cmp	r0, ip
   87402:	da3d      	bge.n	87480 <_realloc_r+0x220>
   87404:	4670      	mov	r0, lr
   87406:	e759      	b.n	872bc <_realloc_r+0x5c>
   87408:	46d0      	mov	r8, sl
   8740a:	f858 0f08 	ldr.w	r0, [r8, #8]!
   8740e:	f8da 100c 	ldr.w	r1, [sl, #12]
   87412:	1f2a      	subs	r2, r5, #4
   87414:	2a24      	cmp	r2, #36	; 0x24
   87416:	60c1      	str	r1, [r0, #12]
   87418:	6088      	str	r0, [r1, #8]
   8741a:	f200 80a0 	bhi.w	8755e <_realloc_r+0x2fe>
   8741e:	2a13      	cmp	r2, #19
   87420:	f240 809b 	bls.w	8755a <_realloc_r+0x2fa>
   87424:	6821      	ldr	r1, [r4, #0]
   87426:	2a1b      	cmp	r2, #27
   87428:	f8ca 1008 	str.w	r1, [sl, #8]
   8742c:	6861      	ldr	r1, [r4, #4]
   8742e:	f8ca 100c 	str.w	r1, [sl, #12]
   87432:	f200 80b2 	bhi.w	8759a <_realloc_r+0x33a>
   87436:	3408      	adds	r4, #8
   87438:	f10a 0210 	add.w	r2, sl, #16
   8743c:	6821      	ldr	r1, [r4, #0]
   8743e:	461d      	mov	r5, r3
   87440:	6011      	str	r1, [r2, #0]
   87442:	6861      	ldr	r1, [r4, #4]
   87444:	4657      	mov	r7, sl
   87446:	6051      	str	r1, [r2, #4]
   87448:	68a3      	ldr	r3, [r4, #8]
   8744a:	6093      	str	r3, [r2, #8]
   8744c:	f8da 3004 	ldr.w	r3, [sl, #4]
   87450:	e774      	b.n	8733c <_realloc_r+0xdc>
   87452:	6823      	ldr	r3, [r4, #0]
   87454:	2a1b      	cmp	r2, #27
   87456:	6003      	str	r3, [r0, #0]
   87458:	6863      	ldr	r3, [r4, #4]
   8745a:	6043      	str	r3, [r0, #4]
   8745c:	d862      	bhi.n	87524 <_realloc_r+0x2c4>
   8745e:	f100 0308 	add.w	r3, r0, #8
   87462:	f104 0208 	add.w	r2, r4, #8
   87466:	e7b3      	b.n	873d0 <_realloc_r+0x170>
   87468:	4643      	mov	r3, r8
   8746a:	6822      	ldr	r2, [r4, #0]
   8746c:	4675      	mov	r5, lr
   8746e:	601a      	str	r2, [r3, #0]
   87470:	6862      	ldr	r2, [r4, #4]
   87472:	4657      	mov	r7, sl
   87474:	605a      	str	r2, [r3, #4]
   87476:	68a2      	ldr	r2, [r4, #8]
   87478:	609a      	str	r2, [r3, #8]
   8747a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8747e:	e75d      	b.n	8733c <_realloc_r+0xdc>
   87480:	1b83      	subs	r3, r0, r6
   87482:	4437      	add	r7, r6
   87484:	f043 0301 	orr.w	r3, r3, #1
   87488:	f8cb 7008 	str.w	r7, [fp, #8]
   8748c:	607b      	str	r3, [r7, #4]
   8748e:	f854 3c04 	ldr.w	r3, [r4, #-4]
   87492:	4648      	mov	r0, r9
   87494:	f003 0301 	and.w	r3, r3, #1
   87498:	431e      	orrs	r6, r3
   8749a:	f844 6c04 	str.w	r6, [r4, #-4]
   8749e:	f7ff fbd3 	bl	86c48 <__malloc_unlock>
   874a2:	4620      	mov	r0, r4
   874a4:	e75a      	b.n	8735c <_realloc_r+0xfc>
   874a6:	4621      	mov	r1, r4
   874a8:	f7ff fb66 	bl	86b78 <memmove>
   874ac:	e796      	b.n	873dc <_realloc_r+0x17c>
   874ae:	eb02 0c03 	add.w	ip, r2, r3
   874b2:	f106 0210 	add.w	r2, r6, #16
   874b6:	4594      	cmp	ip, r2
   874b8:	f6ff af70 	blt.w	8739c <_realloc_r+0x13c>
   874bc:	4657      	mov	r7, sl
   874be:	f857 1f08 	ldr.w	r1, [r7, #8]!
   874c2:	f8da 300c 	ldr.w	r3, [sl, #12]
   874c6:	1f2a      	subs	r2, r5, #4
   874c8:	2a24      	cmp	r2, #36	; 0x24
   874ca:	60cb      	str	r3, [r1, #12]
   874cc:	6099      	str	r1, [r3, #8]
   874ce:	f200 8086 	bhi.w	875de <_realloc_r+0x37e>
   874d2:	2a13      	cmp	r2, #19
   874d4:	d977      	bls.n	875c6 <_realloc_r+0x366>
   874d6:	6823      	ldr	r3, [r4, #0]
   874d8:	2a1b      	cmp	r2, #27
   874da:	f8ca 3008 	str.w	r3, [sl, #8]
   874de:	6863      	ldr	r3, [r4, #4]
   874e0:	f8ca 300c 	str.w	r3, [sl, #12]
   874e4:	f200 8084 	bhi.w	875f0 <_realloc_r+0x390>
   874e8:	3408      	adds	r4, #8
   874ea:	f10a 0310 	add.w	r3, sl, #16
   874ee:	6822      	ldr	r2, [r4, #0]
   874f0:	601a      	str	r2, [r3, #0]
   874f2:	6862      	ldr	r2, [r4, #4]
   874f4:	605a      	str	r2, [r3, #4]
   874f6:	68a2      	ldr	r2, [r4, #8]
   874f8:	609a      	str	r2, [r3, #8]
   874fa:	ebc6 020c 	rsb	r2, r6, ip
   874fe:	eb0a 0306 	add.w	r3, sl, r6
   87502:	f042 0201 	orr.w	r2, r2, #1
   87506:	f8cb 3008 	str.w	r3, [fp, #8]
   8750a:	605a      	str	r2, [r3, #4]
   8750c:	f8da 3004 	ldr.w	r3, [sl, #4]
   87510:	4648      	mov	r0, r9
   87512:	f003 0301 	and.w	r3, r3, #1
   87516:	431e      	orrs	r6, r3
   87518:	f8ca 6004 	str.w	r6, [sl, #4]
   8751c:	f7ff fb94 	bl	86c48 <__malloc_unlock>
   87520:	4638      	mov	r0, r7
   87522:	e71b      	b.n	8735c <_realloc_r+0xfc>
   87524:	68a3      	ldr	r3, [r4, #8]
   87526:	2a24      	cmp	r2, #36	; 0x24
   87528:	6083      	str	r3, [r0, #8]
   8752a:	68e3      	ldr	r3, [r4, #12]
   8752c:	60c3      	str	r3, [r0, #12]
   8752e:	d02b      	beq.n	87588 <_realloc_r+0x328>
   87530:	f100 0310 	add.w	r3, r0, #16
   87534:	f104 0210 	add.w	r2, r4, #16
   87538:	e74a      	b.n	873d0 <_realloc_r+0x170>
   8753a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   8753e:	46a0      	mov	r8, r4
   87540:	f022 0203 	bic.w	r2, r2, #3
   87544:	4415      	add	r5, r2
   87546:	e6f9      	b.n	8733c <_realloc_r+0xdc>
   87548:	4621      	mov	r1, r4
   8754a:	4640      	mov	r0, r8
   8754c:	4675      	mov	r5, lr
   8754e:	4657      	mov	r7, sl
   87550:	f7ff fb12 	bl	86b78 <memmove>
   87554:	f8da 3004 	ldr.w	r3, [sl, #4]
   87558:	e6f0      	b.n	8733c <_realloc_r+0xdc>
   8755a:	4642      	mov	r2, r8
   8755c:	e76e      	b.n	8743c <_realloc_r+0x1dc>
   8755e:	4621      	mov	r1, r4
   87560:	4640      	mov	r0, r8
   87562:	461d      	mov	r5, r3
   87564:	4657      	mov	r7, sl
   87566:	f7ff fb07 	bl	86b78 <memmove>
   8756a:	f8da 3004 	ldr.w	r3, [sl, #4]
   8756e:	e6e5      	b.n	8733c <_realloc_r+0xdc>
   87570:	68a3      	ldr	r3, [r4, #8]
   87572:	2a24      	cmp	r2, #36	; 0x24
   87574:	f8ca 3010 	str.w	r3, [sl, #16]
   87578:	68e3      	ldr	r3, [r4, #12]
   8757a:	f8ca 3014 	str.w	r3, [sl, #20]
   8757e:	d018      	beq.n	875b2 <_realloc_r+0x352>
   87580:	3410      	adds	r4, #16
   87582:	f10a 0318 	add.w	r3, sl, #24
   87586:	e770      	b.n	8746a <_realloc_r+0x20a>
   87588:	6922      	ldr	r2, [r4, #16]
   8758a:	f100 0318 	add.w	r3, r0, #24
   8758e:	6102      	str	r2, [r0, #16]
   87590:	6961      	ldr	r1, [r4, #20]
   87592:	f104 0218 	add.w	r2, r4, #24
   87596:	6141      	str	r1, [r0, #20]
   87598:	e71a      	b.n	873d0 <_realloc_r+0x170>
   8759a:	68a1      	ldr	r1, [r4, #8]
   8759c:	2a24      	cmp	r2, #36	; 0x24
   8759e:	f8ca 1010 	str.w	r1, [sl, #16]
   875a2:	68e1      	ldr	r1, [r4, #12]
   875a4:	f8ca 1014 	str.w	r1, [sl, #20]
   875a8:	d00f      	beq.n	875ca <_realloc_r+0x36a>
   875aa:	3410      	adds	r4, #16
   875ac:	f10a 0218 	add.w	r2, sl, #24
   875b0:	e744      	b.n	8743c <_realloc_r+0x1dc>
   875b2:	6922      	ldr	r2, [r4, #16]
   875b4:	f10a 0320 	add.w	r3, sl, #32
   875b8:	f8ca 2018 	str.w	r2, [sl, #24]
   875bc:	6962      	ldr	r2, [r4, #20]
   875be:	3418      	adds	r4, #24
   875c0:	f8ca 201c 	str.w	r2, [sl, #28]
   875c4:	e751      	b.n	8746a <_realloc_r+0x20a>
   875c6:	463b      	mov	r3, r7
   875c8:	e791      	b.n	874ee <_realloc_r+0x28e>
   875ca:	6921      	ldr	r1, [r4, #16]
   875cc:	f10a 0220 	add.w	r2, sl, #32
   875d0:	f8ca 1018 	str.w	r1, [sl, #24]
   875d4:	6961      	ldr	r1, [r4, #20]
   875d6:	3418      	adds	r4, #24
   875d8:	f8ca 101c 	str.w	r1, [sl, #28]
   875dc:	e72e      	b.n	8743c <_realloc_r+0x1dc>
   875de:	4621      	mov	r1, r4
   875e0:	4638      	mov	r0, r7
   875e2:	f8cd c004 	str.w	ip, [sp, #4]
   875e6:	f7ff fac7 	bl	86b78 <memmove>
   875ea:	f8dd c004 	ldr.w	ip, [sp, #4]
   875ee:	e784      	b.n	874fa <_realloc_r+0x29a>
   875f0:	68a3      	ldr	r3, [r4, #8]
   875f2:	2a24      	cmp	r2, #36	; 0x24
   875f4:	f8ca 3010 	str.w	r3, [sl, #16]
   875f8:	68e3      	ldr	r3, [r4, #12]
   875fa:	f8ca 3014 	str.w	r3, [sl, #20]
   875fe:	d003      	beq.n	87608 <_realloc_r+0x3a8>
   87600:	3410      	adds	r4, #16
   87602:	f10a 0318 	add.w	r3, sl, #24
   87606:	e772      	b.n	874ee <_realloc_r+0x28e>
   87608:	6922      	ldr	r2, [r4, #16]
   8760a:	f10a 0320 	add.w	r3, sl, #32
   8760e:	f8ca 2018 	str.w	r2, [sl, #24]
   87612:	6962      	ldr	r2, [r4, #20]
   87614:	3418      	adds	r4, #24
   87616:	f8ca 201c 	str.w	r2, [sl, #28]
   8761a:	e768      	b.n	874ee <_realloc_r+0x28e>
   8761c:	200705d8 	.word	0x200705d8

00087620 <__fpclassifyd>:
   87620:	f031 4300 	bics.w	r3, r1, #2147483648	; 0x80000000
   87624:	b410      	push	{r4}
   87626:	d008      	beq.n	8763a <__fpclassifyd+0x1a>
   87628:	4a0f      	ldr	r2, [pc, #60]	; (87668 <__fpclassifyd+0x48>)
   8762a:	f5a3 1480 	sub.w	r4, r3, #1048576	; 0x100000
   8762e:	4294      	cmp	r4, r2
   87630:	d80a      	bhi.n	87648 <__fpclassifyd+0x28>
   87632:	2004      	movs	r0, #4
   87634:	f85d 4b04 	ldr.w	r4, [sp], #4
   87638:	4770      	bx	lr
   8763a:	2800      	cmp	r0, #0
   8763c:	bf0c      	ite	eq
   8763e:	2002      	moveq	r0, #2
   87640:	2003      	movne	r0, #3
   87642:	f85d 4b04 	ldr.w	r4, [sp], #4
   87646:	4770      	bx	lr
   87648:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
   8764c:	d201      	bcs.n	87652 <__fpclassifyd+0x32>
   8764e:	2003      	movs	r0, #3
   87650:	e7f7      	b.n	87642 <__fpclassifyd+0x22>
   87652:	4a06      	ldr	r2, [pc, #24]	; (8766c <__fpclassifyd+0x4c>)
   87654:	4293      	cmp	r3, r2
   87656:	d001      	beq.n	8765c <__fpclassifyd+0x3c>
   87658:	2000      	movs	r0, #0
   8765a:	e7f2      	b.n	87642 <__fpclassifyd+0x22>
   8765c:	f1d0 0001 	rsbs	r0, r0, #1
   87660:	bf38      	it	cc
   87662:	2000      	movcc	r0, #0
   87664:	e7ed      	b.n	87642 <__fpclassifyd+0x22>
   87666:	bf00      	nop
   87668:	7fdfffff 	.word	0x7fdfffff
   8766c:	7ff00000 	.word	0x7ff00000

00087670 <_sbrk_r>:
   87670:	b538      	push	{r3, r4, r5, lr}
   87672:	4c07      	ldr	r4, [pc, #28]	; (87690 <_sbrk_r+0x20>)
   87674:	2300      	movs	r3, #0
   87676:	4605      	mov	r5, r0
   87678:	4608      	mov	r0, r1
   8767a:	6023      	str	r3, [r4, #0]
   8767c:	f7f9 fad4 	bl	80c28 <_sbrk>
   87680:	1c43      	adds	r3, r0, #1
   87682:	d000      	beq.n	87686 <_sbrk_r+0x16>
   87684:	bd38      	pop	{r3, r4, r5, pc}
   87686:	6823      	ldr	r3, [r4, #0]
   87688:	2b00      	cmp	r3, #0
   8768a:	d0fb      	beq.n	87684 <_sbrk_r+0x14>
   8768c:	602b      	str	r3, [r5, #0]
   8768e:	bd38      	pop	{r3, r4, r5, pc}
   87690:	2007acb8 	.word	0x2007acb8

00087694 <__sread>:
   87694:	b510      	push	{r4, lr}
   87696:	460c      	mov	r4, r1
   87698:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   8769c:	f000 fa72 	bl	87b84 <_read_r>
   876a0:	2800      	cmp	r0, #0
   876a2:	db03      	blt.n	876ac <__sread+0x18>
   876a4:	6d23      	ldr	r3, [r4, #80]	; 0x50
   876a6:	4403      	add	r3, r0
   876a8:	6523      	str	r3, [r4, #80]	; 0x50
   876aa:	bd10      	pop	{r4, pc}
   876ac:	89a3      	ldrh	r3, [r4, #12]
   876ae:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
   876b2:	81a3      	strh	r3, [r4, #12]
   876b4:	bd10      	pop	{r4, pc}
   876b6:	bf00      	nop

000876b8 <__swrite>:
   876b8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   876bc:	460c      	mov	r4, r1
   876be:	8989      	ldrh	r1, [r1, #12]
   876c0:	461d      	mov	r5, r3
   876c2:	05cb      	lsls	r3, r1, #23
   876c4:	4616      	mov	r6, r2
   876c6:	4607      	mov	r7, r0
   876c8:	d506      	bpl.n	876d8 <__swrite+0x20>
   876ca:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   876ce:	2200      	movs	r2, #0
   876d0:	2302      	movs	r3, #2
   876d2:	f000 fa43 	bl	87b5c <_lseek_r>
   876d6:	89a1      	ldrh	r1, [r4, #12]
   876d8:	f421 5180 	bic.w	r1, r1, #4096	; 0x1000
   876dc:	81a1      	strh	r1, [r4, #12]
   876de:	4638      	mov	r0, r7
   876e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
   876e4:	4632      	mov	r2, r6
   876e6:	462b      	mov	r3, r5
   876e8:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   876ec:	f000 b91e 	b.w	8792c <_write_r>

000876f0 <__sseek>:
   876f0:	b510      	push	{r4, lr}
   876f2:	460c      	mov	r4, r1
   876f4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   876f8:	f000 fa30 	bl	87b5c <_lseek_r>
   876fc:	89a3      	ldrh	r3, [r4, #12]
   876fe:	1c42      	adds	r2, r0, #1
   87700:	bf0e      	itee	eq
   87702:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
   87706:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
   8770a:	6520      	strne	r0, [r4, #80]	; 0x50
   8770c:	81a3      	strh	r3, [r4, #12]
   8770e:	bd10      	pop	{r4, pc}

00087710 <__sclose>:
   87710:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
   87714:	f000 b9a2 	b.w	87a5c <_close_r>

00087718 <__ssprint_r>:
   87718:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8771c:	6894      	ldr	r4, [r2, #8]
   8771e:	b083      	sub	sp, #12
   87720:	4692      	mov	sl, r2
   87722:	4680      	mov	r8, r0
   87724:	460d      	mov	r5, r1
   87726:	6816      	ldr	r6, [r2, #0]
   87728:	2c00      	cmp	r4, #0
   8772a:	d06f      	beq.n	8780c <__ssprint_r+0xf4>
   8772c:	f04f 0b00 	mov.w	fp, #0
   87730:	6808      	ldr	r0, [r1, #0]
   87732:	688b      	ldr	r3, [r1, #8]
   87734:	465c      	mov	r4, fp
   87736:	2c00      	cmp	r4, #0
   87738:	d043      	beq.n	877c2 <__ssprint_r+0xaa>
   8773a:	429c      	cmp	r4, r3
   8773c:	461f      	mov	r7, r3
   8773e:	d345      	bcc.n	877cc <__ssprint_r+0xb4>
   87740:	89ab      	ldrh	r3, [r5, #12]
   87742:	f413 6f90 	tst.w	r3, #1152	; 0x480
   87746:	d044      	beq.n	877d2 <__ssprint_r+0xba>
   87748:	696f      	ldr	r7, [r5, #20]
   8774a:	6929      	ldr	r1, [r5, #16]
   8774c:	eb07 0747 	add.w	r7, r7, r7, lsl #1
   87750:	eb07 77d7 	add.w	r7, r7, r7, lsr #31
   87754:	ebc1 0900 	rsb	r9, r1, r0
   87758:	1c62      	adds	r2, r4, #1
   8775a:	107f      	asrs	r7, r7, #1
   8775c:	444a      	add	r2, r9
   8775e:	4297      	cmp	r7, r2
   87760:	bf34      	ite	cc
   87762:	4617      	movcc	r7, r2
   87764:	463a      	movcs	r2, r7
   87766:	055b      	lsls	r3, r3, #21
   87768:	d535      	bpl.n	877d6 <__ssprint_r+0xbe>
   8776a:	4611      	mov	r1, r2
   8776c:	4640      	mov	r0, r8
   8776e:	f7fe ff1d 	bl	865ac <_malloc_r>
   87772:	2800      	cmp	r0, #0
   87774:	d039      	beq.n	877ea <__ssprint_r+0xd2>
   87776:	6929      	ldr	r1, [r5, #16]
   87778:	464a      	mov	r2, r9
   8777a:	9001      	str	r0, [sp, #4]
   8777c:	f7fa ff02 	bl	82584 <memcpy>
   87780:	89aa      	ldrh	r2, [r5, #12]
   87782:	9b01      	ldr	r3, [sp, #4]
   87784:	f422 6290 	bic.w	r2, r2, #1152	; 0x480
   87788:	f042 0280 	orr.w	r2, r2, #128	; 0x80
   8778c:	81aa      	strh	r2, [r5, #12]
   8778e:	ebc9 0207 	rsb	r2, r9, r7
   87792:	eb03 0009 	add.w	r0, r3, r9
   87796:	616f      	str	r7, [r5, #20]
   87798:	612b      	str	r3, [r5, #16]
   8779a:	6028      	str	r0, [r5, #0]
   8779c:	60aa      	str	r2, [r5, #8]
   8779e:	4627      	mov	r7, r4
   877a0:	46a1      	mov	r9, r4
   877a2:	464a      	mov	r2, r9
   877a4:	4659      	mov	r1, fp
   877a6:	f7ff f9e7 	bl	86b78 <memmove>
   877aa:	f8da 2008 	ldr.w	r2, [sl, #8]
   877ae:	68ab      	ldr	r3, [r5, #8]
   877b0:	6828      	ldr	r0, [r5, #0]
   877b2:	1bdb      	subs	r3, r3, r7
   877b4:	4448      	add	r0, r9
   877b6:	1b14      	subs	r4, r2, r4
   877b8:	60ab      	str	r3, [r5, #8]
   877ba:	6028      	str	r0, [r5, #0]
   877bc:	f8ca 4008 	str.w	r4, [sl, #8]
   877c0:	b324      	cbz	r4, 8780c <__ssprint_r+0xf4>
   877c2:	f8d6 b000 	ldr.w	fp, [r6]
   877c6:	6874      	ldr	r4, [r6, #4]
   877c8:	3608      	adds	r6, #8
   877ca:	e7b4      	b.n	87736 <__ssprint_r+0x1e>
   877cc:	4627      	mov	r7, r4
   877ce:	46a1      	mov	r9, r4
   877d0:	e7e7      	b.n	877a2 <__ssprint_r+0x8a>
   877d2:	46b9      	mov	r9, r7
   877d4:	e7e5      	b.n	877a2 <__ssprint_r+0x8a>
   877d6:	4640      	mov	r0, r8
   877d8:	f7ff fd42 	bl	87260 <_realloc_r>
   877dc:	4603      	mov	r3, r0
   877de:	2800      	cmp	r0, #0
   877e0:	d1d5      	bne.n	8778e <__ssprint_r+0x76>
   877e2:	4640      	mov	r0, r8
   877e4:	6929      	ldr	r1, [r5, #16]
   877e6:	f7fe fbdf 	bl	85fa8 <_free_r>
   877ea:	89aa      	ldrh	r2, [r5, #12]
   877ec:	230c      	movs	r3, #12
   877ee:	f8c8 3000 	str.w	r3, [r8]
   877f2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
   877f6:	2300      	movs	r3, #0
   877f8:	f04f 30ff 	mov.w	r0, #4294967295
   877fc:	81aa      	strh	r2, [r5, #12]
   877fe:	f8ca 3008 	str.w	r3, [sl, #8]
   87802:	f8ca 3004 	str.w	r3, [sl, #4]
   87806:	b003      	add	sp, #12
   87808:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8780c:	4620      	mov	r0, r4
   8780e:	f8ca 4004 	str.w	r4, [sl, #4]
   87812:	b003      	add	sp, #12
   87814:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

00087818 <__swbuf_r>:
   87818:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8781a:	460d      	mov	r5, r1
   8781c:	4614      	mov	r4, r2
   8781e:	4607      	mov	r7, r0
   87820:	b110      	cbz	r0, 87828 <__swbuf_r+0x10>
   87822:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87824:	2b00      	cmp	r3, #0
   87826:	d048      	beq.n	878ba <__swbuf_r+0xa2>
   87828:	89a2      	ldrh	r2, [r4, #12]
   8782a:	69a0      	ldr	r0, [r4, #24]
   8782c:	b293      	uxth	r3, r2
   8782e:	60a0      	str	r0, [r4, #8]
   87830:	0718      	lsls	r0, r3, #28
   87832:	d538      	bpl.n	878a6 <__swbuf_r+0x8e>
   87834:	6926      	ldr	r6, [r4, #16]
   87836:	2e00      	cmp	r6, #0
   87838:	d035      	beq.n	878a6 <__swbuf_r+0x8e>
   8783a:	0499      	lsls	r1, r3, #18
   8783c:	b2ed      	uxtb	r5, r5
   8783e:	d515      	bpl.n	8786c <__swbuf_r+0x54>
   87840:	6823      	ldr	r3, [r4, #0]
   87842:	6962      	ldr	r2, [r4, #20]
   87844:	1b9e      	subs	r6, r3, r6
   87846:	4296      	cmp	r6, r2
   87848:	da1c      	bge.n	87884 <__swbuf_r+0x6c>
   8784a:	3601      	adds	r6, #1
   8784c:	68a2      	ldr	r2, [r4, #8]
   8784e:	1c59      	adds	r1, r3, #1
   87850:	3a01      	subs	r2, #1
   87852:	60a2      	str	r2, [r4, #8]
   87854:	6021      	str	r1, [r4, #0]
   87856:	701d      	strb	r5, [r3, #0]
   87858:	6963      	ldr	r3, [r4, #20]
   8785a:	42b3      	cmp	r3, r6
   8785c:	d01a      	beq.n	87894 <__swbuf_r+0x7c>
   8785e:	89a3      	ldrh	r3, [r4, #12]
   87860:	07db      	lsls	r3, r3, #31
   87862:	d501      	bpl.n	87868 <__swbuf_r+0x50>
   87864:	2d0a      	cmp	r5, #10
   87866:	d015      	beq.n	87894 <__swbuf_r+0x7c>
   87868:	4628      	mov	r0, r5
   8786a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   8786c:	6e63      	ldr	r3, [r4, #100]	; 0x64
   8786e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
   87872:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
   87876:	6663      	str	r3, [r4, #100]	; 0x64
   87878:	6823      	ldr	r3, [r4, #0]
   8787a:	81a2      	strh	r2, [r4, #12]
   8787c:	6962      	ldr	r2, [r4, #20]
   8787e:	1b9e      	subs	r6, r3, r6
   87880:	4296      	cmp	r6, r2
   87882:	dbe2      	blt.n	8784a <__swbuf_r+0x32>
   87884:	4638      	mov	r0, r7
   87886:	4621      	mov	r1, r4
   87888:	f7fe fa2e 	bl	85ce8 <_fflush_r>
   8788c:	b940      	cbnz	r0, 878a0 <__swbuf_r+0x88>
   8788e:	6823      	ldr	r3, [r4, #0]
   87890:	2601      	movs	r6, #1
   87892:	e7db      	b.n	8784c <__swbuf_r+0x34>
   87894:	4638      	mov	r0, r7
   87896:	4621      	mov	r1, r4
   87898:	f7fe fa26 	bl	85ce8 <_fflush_r>
   8789c:	2800      	cmp	r0, #0
   8789e:	d0e3      	beq.n	87868 <__swbuf_r+0x50>
   878a0:	f04f 30ff 	mov.w	r0, #4294967295
   878a4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   878a6:	4638      	mov	r0, r7
   878a8:	4621      	mov	r1, r4
   878aa:	f7fd f94f 	bl	84b4c <__swsetup_r>
   878ae:	2800      	cmp	r0, #0
   878b0:	d1f6      	bne.n	878a0 <__swbuf_r+0x88>
   878b2:	89a2      	ldrh	r2, [r4, #12]
   878b4:	6926      	ldr	r6, [r4, #16]
   878b6:	b293      	uxth	r3, r2
   878b8:	e7bf      	b.n	8783a <__swbuf_r+0x22>
   878ba:	f7fe fa31 	bl	85d20 <__sinit>
   878be:	e7b3      	b.n	87828 <__swbuf_r+0x10>

000878c0 <_wcrtomb_r>:
   878c0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   878c4:	461e      	mov	r6, r3
   878c6:	b086      	sub	sp, #24
   878c8:	460c      	mov	r4, r1
   878ca:	4605      	mov	r5, r0
   878cc:	4617      	mov	r7, r2
   878ce:	4b0f      	ldr	r3, [pc, #60]	; (8790c <_wcrtomb_r+0x4c>)
   878d0:	b191      	cbz	r1, 878f8 <_wcrtomb_r+0x38>
   878d2:	f8d3 8000 	ldr.w	r8, [r3]
   878d6:	f7fe fde3 	bl	864a0 <__locale_charset>
   878da:	9600      	str	r6, [sp, #0]
   878dc:	4603      	mov	r3, r0
   878de:	4621      	mov	r1, r4
   878e0:	463a      	mov	r2, r7
   878e2:	4628      	mov	r0, r5
   878e4:	47c0      	blx	r8
   878e6:	1c43      	adds	r3, r0, #1
   878e8:	d103      	bne.n	878f2 <_wcrtomb_r+0x32>
   878ea:	2200      	movs	r2, #0
   878ec:	238a      	movs	r3, #138	; 0x8a
   878ee:	6032      	str	r2, [r6, #0]
   878f0:	602b      	str	r3, [r5, #0]
   878f2:	b006      	add	sp, #24
   878f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   878f8:	681f      	ldr	r7, [r3, #0]
   878fa:	f7fe fdd1 	bl	864a0 <__locale_charset>
   878fe:	9600      	str	r6, [sp, #0]
   87900:	4603      	mov	r3, r0
   87902:	4622      	mov	r2, r4
   87904:	4628      	mov	r0, r5
   87906:	a903      	add	r1, sp, #12
   87908:	47b8      	blx	r7
   8790a:	e7ec      	b.n	878e6 <_wcrtomb_r+0x26>
   8790c:	200709e8 	.word	0x200709e8

00087910 <__ascii_wctomb>:
   87910:	b121      	cbz	r1, 8791c <__ascii_wctomb+0xc>
   87912:	2aff      	cmp	r2, #255	; 0xff
   87914:	d804      	bhi.n	87920 <__ascii_wctomb+0x10>
   87916:	700a      	strb	r2, [r1, #0]
   87918:	2001      	movs	r0, #1
   8791a:	4770      	bx	lr
   8791c:	4608      	mov	r0, r1
   8791e:	4770      	bx	lr
   87920:	238a      	movs	r3, #138	; 0x8a
   87922:	6003      	str	r3, [r0, #0]
   87924:	f04f 30ff 	mov.w	r0, #4294967295
   87928:	4770      	bx	lr
   8792a:	bf00      	nop

0008792c <_write_r>:
   8792c:	b570      	push	{r4, r5, r6, lr}
   8792e:	4c08      	ldr	r4, [pc, #32]	; (87950 <_write_r+0x24>)
   87930:	4606      	mov	r6, r0
   87932:	2500      	movs	r5, #0
   87934:	4608      	mov	r0, r1
   87936:	4611      	mov	r1, r2
   87938:	461a      	mov	r2, r3
   8793a:	6025      	str	r5, [r4, #0]
   8793c:	f7f8 fc86 	bl	8024c <_write>
   87940:	1c43      	adds	r3, r0, #1
   87942:	d000      	beq.n	87946 <_write_r+0x1a>
   87944:	bd70      	pop	{r4, r5, r6, pc}
   87946:	6823      	ldr	r3, [r4, #0]
   87948:	2b00      	cmp	r3, #0
   8794a:	d0fb      	beq.n	87944 <_write_r+0x18>
   8794c:	6033      	str	r3, [r6, #0]
   8794e:	bd70      	pop	{r4, r5, r6, pc}
   87950:	2007acb8 	.word	0x2007acb8

00087954 <__register_exitproc>:
   87954:	b5f0      	push	{r4, r5, r6, r7, lr}
   87956:	4c27      	ldr	r4, [pc, #156]	; (879f4 <__register_exitproc+0xa0>)
   87958:	b085      	sub	sp, #20
   8795a:	6826      	ldr	r6, [r4, #0]
   8795c:	4607      	mov	r7, r0
   8795e:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   87962:	2c00      	cmp	r4, #0
   87964:	d040      	beq.n	879e8 <__register_exitproc+0x94>
   87966:	6865      	ldr	r5, [r4, #4]
   87968:	2d1f      	cmp	r5, #31
   8796a:	dd1e      	ble.n	879aa <__register_exitproc+0x56>
   8796c:	4822      	ldr	r0, [pc, #136]	; (879f8 <__register_exitproc+0xa4>)
   8796e:	b918      	cbnz	r0, 87978 <__register_exitproc+0x24>
   87970:	f04f 30ff 	mov.w	r0, #4294967295
   87974:	b005      	add	sp, #20
   87976:	bdf0      	pop	{r4, r5, r6, r7, pc}
   87978:	f44f 70c8 	mov.w	r0, #400	; 0x190
   8797c:	9103      	str	r1, [sp, #12]
   8797e:	9202      	str	r2, [sp, #8]
   87980:	9301      	str	r3, [sp, #4]
   87982:	f7fe fe0b 	bl	8659c <malloc>
   87986:	9903      	ldr	r1, [sp, #12]
   87988:	4604      	mov	r4, r0
   8798a:	9a02      	ldr	r2, [sp, #8]
   8798c:	9b01      	ldr	r3, [sp, #4]
   8798e:	2800      	cmp	r0, #0
   87990:	d0ee      	beq.n	87970 <__register_exitproc+0x1c>
   87992:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   87996:	2000      	movs	r0, #0
   87998:	6025      	str	r5, [r4, #0]
   8799a:	6060      	str	r0, [r4, #4]
   8799c:	4605      	mov	r5, r0
   8799e:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   879a2:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   879a6:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   879aa:	b93f      	cbnz	r7, 879bc <__register_exitproc+0x68>
   879ac:	1c6b      	adds	r3, r5, #1
   879ae:	2000      	movs	r0, #0
   879b0:	3502      	adds	r5, #2
   879b2:	6063      	str	r3, [r4, #4]
   879b4:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   879b8:	b005      	add	sp, #20
   879ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
   879bc:	2601      	movs	r6, #1
   879be:	40ae      	lsls	r6, r5
   879c0:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   879c4:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   879c8:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   879cc:	2f02      	cmp	r7, #2
   879ce:	ea42 0206 	orr.w	r2, r2, r6
   879d2:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   879d6:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   879da:	d1e7      	bne.n	879ac <__register_exitproc+0x58>
   879dc:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   879e0:	431e      	orrs	r6, r3
   879e2:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   879e6:	e7e1      	b.n	879ac <__register_exitproc+0x58>
   879e8:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   879ec:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   879f0:	e7b9      	b.n	87966 <__register_exitproc+0x12>
   879f2:	bf00      	nop
   879f4:	00088ac0 	.word	0x00088ac0
   879f8:	0008659d 	.word	0x0008659d

000879fc <_calloc_r>:
   879fc:	b510      	push	{r4, lr}
   879fe:	fb02 f101 	mul.w	r1, r2, r1
   87a02:	f7fe fdd3 	bl	865ac <_malloc_r>
   87a06:	4604      	mov	r4, r0
   87a08:	b168      	cbz	r0, 87a26 <_calloc_r+0x2a>
   87a0a:	f850 2c04 	ldr.w	r2, [r0, #-4]
   87a0e:	f022 0203 	bic.w	r2, r2, #3
   87a12:	3a04      	subs	r2, #4
   87a14:	2a24      	cmp	r2, #36	; 0x24
   87a16:	d818      	bhi.n	87a4a <_calloc_r+0x4e>
   87a18:	2a13      	cmp	r2, #19
   87a1a:	d806      	bhi.n	87a2a <_calloc_r+0x2e>
   87a1c:	4603      	mov	r3, r0
   87a1e:	2200      	movs	r2, #0
   87a20:	601a      	str	r2, [r3, #0]
   87a22:	605a      	str	r2, [r3, #4]
   87a24:	609a      	str	r2, [r3, #8]
   87a26:	4620      	mov	r0, r4
   87a28:	bd10      	pop	{r4, pc}
   87a2a:	2300      	movs	r3, #0
   87a2c:	2a1b      	cmp	r2, #27
   87a2e:	6003      	str	r3, [r0, #0]
   87a30:	6043      	str	r3, [r0, #4]
   87a32:	d90f      	bls.n	87a54 <_calloc_r+0x58>
   87a34:	2a24      	cmp	r2, #36	; 0x24
   87a36:	6083      	str	r3, [r0, #8]
   87a38:	60c3      	str	r3, [r0, #12]
   87a3a:	bf05      	ittet	eq
   87a3c:	6103      	streq	r3, [r0, #16]
   87a3e:	6143      	streq	r3, [r0, #20]
   87a40:	f100 0310 	addne.w	r3, r0, #16
   87a44:	f100 0318 	addeq.w	r3, r0, #24
   87a48:	e7e9      	b.n	87a1e <_calloc_r+0x22>
   87a4a:	2100      	movs	r1, #0
   87a4c:	f7fa fe10 	bl	82670 <memset>
   87a50:	4620      	mov	r0, r4
   87a52:	bd10      	pop	{r4, pc}
   87a54:	f100 0308 	add.w	r3, r0, #8
   87a58:	e7e1      	b.n	87a1e <_calloc_r+0x22>
   87a5a:	bf00      	nop

00087a5c <_close_r>:
   87a5c:	b538      	push	{r3, r4, r5, lr}
   87a5e:	4c07      	ldr	r4, [pc, #28]	; (87a7c <_close_r+0x20>)
   87a60:	2300      	movs	r3, #0
   87a62:	4605      	mov	r5, r0
   87a64:	4608      	mov	r0, r1
   87a66:	6023      	str	r3, [r4, #0]
   87a68:	f7f9 f8f8 	bl	80c5c <_close>
   87a6c:	1c43      	adds	r3, r0, #1
   87a6e:	d000      	beq.n	87a72 <_close_r+0x16>
   87a70:	bd38      	pop	{r3, r4, r5, pc}
   87a72:	6823      	ldr	r3, [r4, #0]
   87a74:	2b00      	cmp	r3, #0
   87a76:	d0fb      	beq.n	87a70 <_close_r+0x14>
   87a78:	602b      	str	r3, [r5, #0]
   87a7a:	bd38      	pop	{r3, r4, r5, pc}
   87a7c:	2007acb8 	.word	0x2007acb8

00087a80 <_fclose_r>:
   87a80:	b570      	push	{r4, r5, r6, lr}
   87a82:	460c      	mov	r4, r1
   87a84:	4605      	mov	r5, r0
   87a86:	b131      	cbz	r1, 87a96 <_fclose_r+0x16>
   87a88:	b110      	cbz	r0, 87a90 <_fclose_r+0x10>
   87a8a:	6b83      	ldr	r3, [r0, #56]	; 0x38
   87a8c:	2b00      	cmp	r3, #0
   87a8e:	d02f      	beq.n	87af0 <_fclose_r+0x70>
   87a90:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
   87a94:	b90b      	cbnz	r3, 87a9a <_fclose_r+0x1a>
   87a96:	2000      	movs	r0, #0
   87a98:	bd70      	pop	{r4, r5, r6, pc}
   87a9a:	4628      	mov	r0, r5
   87a9c:	4621      	mov	r1, r4
   87a9e:	f7fe f923 	bl	85ce8 <_fflush_r>
   87aa2:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   87aa4:	4606      	mov	r6, r0
   87aa6:	b133      	cbz	r3, 87ab6 <_fclose_r+0x36>
   87aa8:	4628      	mov	r0, r5
   87aaa:	69e1      	ldr	r1, [r4, #28]
   87aac:	4798      	blx	r3
   87aae:	2800      	cmp	r0, #0
   87ab0:	bfb8      	it	lt
   87ab2:	f04f 36ff 	movlt.w	r6, #4294967295
   87ab6:	89a3      	ldrh	r3, [r4, #12]
   87ab8:	061b      	lsls	r3, r3, #24
   87aba:	d41c      	bmi.n	87af6 <_fclose_r+0x76>
   87abc:	6b21      	ldr	r1, [r4, #48]	; 0x30
   87abe:	b141      	cbz	r1, 87ad2 <_fclose_r+0x52>
   87ac0:	f104 0340 	add.w	r3, r4, #64	; 0x40
   87ac4:	4299      	cmp	r1, r3
   87ac6:	d002      	beq.n	87ace <_fclose_r+0x4e>
   87ac8:	4628      	mov	r0, r5
   87aca:	f7fe fa6d 	bl	85fa8 <_free_r>
   87ace:	2300      	movs	r3, #0
   87ad0:	6323      	str	r3, [r4, #48]	; 0x30
   87ad2:	6c61      	ldr	r1, [r4, #68]	; 0x44
   87ad4:	b121      	cbz	r1, 87ae0 <_fclose_r+0x60>
   87ad6:	4628      	mov	r0, r5
   87ad8:	f7fe fa66 	bl	85fa8 <_free_r>
   87adc:	2300      	movs	r3, #0
   87ade:	6463      	str	r3, [r4, #68]	; 0x44
   87ae0:	f7fe f998 	bl	85e14 <__sfp_lock_acquire>
   87ae4:	2300      	movs	r3, #0
   87ae6:	81a3      	strh	r3, [r4, #12]
   87ae8:	f7fe f996 	bl	85e18 <__sfp_lock_release>
   87aec:	4630      	mov	r0, r6
   87aee:	bd70      	pop	{r4, r5, r6, pc}
   87af0:	f7fe f916 	bl	85d20 <__sinit>
   87af4:	e7cc      	b.n	87a90 <_fclose_r+0x10>
   87af6:	4628      	mov	r0, r5
   87af8:	6921      	ldr	r1, [r4, #16]
   87afa:	f7fe fa55 	bl	85fa8 <_free_r>
   87afe:	e7dd      	b.n	87abc <_fclose_r+0x3c>

00087b00 <fclose>:
   87b00:	4b02      	ldr	r3, [pc, #8]	; (87b0c <fclose+0xc>)
   87b02:	4601      	mov	r1, r0
   87b04:	6818      	ldr	r0, [r3, #0]
   87b06:	f7ff bfbb 	b.w	87a80 <_fclose_r>
   87b0a:	bf00      	nop
   87b0c:	20070578 	.word	0x20070578

00087b10 <_fstat_r>:
   87b10:	b538      	push	{r3, r4, r5, lr}
   87b12:	4c08      	ldr	r4, [pc, #32]	; (87b34 <_fstat_r+0x24>)
   87b14:	2300      	movs	r3, #0
   87b16:	4605      	mov	r5, r0
   87b18:	4608      	mov	r0, r1
   87b1a:	4611      	mov	r1, r2
   87b1c:	6023      	str	r3, [r4, #0]
   87b1e:	f7f9 f8a1 	bl	80c64 <_fstat>
   87b22:	1c43      	adds	r3, r0, #1
   87b24:	d000      	beq.n	87b28 <_fstat_r+0x18>
   87b26:	bd38      	pop	{r3, r4, r5, pc}
   87b28:	6823      	ldr	r3, [r4, #0]
   87b2a:	2b00      	cmp	r3, #0
   87b2c:	d0fb      	beq.n	87b26 <_fstat_r+0x16>
   87b2e:	602b      	str	r3, [r5, #0]
   87b30:	bd38      	pop	{r3, r4, r5, pc}
   87b32:	bf00      	nop
   87b34:	2007acb8 	.word	0x2007acb8

00087b38 <_isatty_r>:
   87b38:	b538      	push	{r3, r4, r5, lr}
   87b3a:	4c07      	ldr	r4, [pc, #28]	; (87b58 <_isatty_r+0x20>)
   87b3c:	2300      	movs	r3, #0
   87b3e:	4605      	mov	r5, r0
   87b40:	4608      	mov	r0, r1
   87b42:	6023      	str	r3, [r4, #0]
   87b44:	f7f9 f894 	bl	80c70 <_isatty>
   87b48:	1c43      	adds	r3, r0, #1
   87b4a:	d000      	beq.n	87b4e <_isatty_r+0x16>
   87b4c:	bd38      	pop	{r3, r4, r5, pc}
   87b4e:	6823      	ldr	r3, [r4, #0]
   87b50:	2b00      	cmp	r3, #0
   87b52:	d0fb      	beq.n	87b4c <_isatty_r+0x14>
   87b54:	602b      	str	r3, [r5, #0]
   87b56:	bd38      	pop	{r3, r4, r5, pc}
   87b58:	2007acb8 	.word	0x2007acb8

00087b5c <_lseek_r>:
   87b5c:	b570      	push	{r4, r5, r6, lr}
   87b5e:	4c08      	ldr	r4, [pc, #32]	; (87b80 <_lseek_r+0x24>)
   87b60:	4606      	mov	r6, r0
   87b62:	2500      	movs	r5, #0
   87b64:	4608      	mov	r0, r1
   87b66:	4611      	mov	r1, r2
   87b68:	461a      	mov	r2, r3
   87b6a:	6025      	str	r5, [r4, #0]
   87b6c:	f7f9 f882 	bl	80c74 <_lseek>
   87b70:	1c43      	adds	r3, r0, #1
   87b72:	d000      	beq.n	87b76 <_lseek_r+0x1a>
   87b74:	bd70      	pop	{r4, r5, r6, pc}
   87b76:	6823      	ldr	r3, [r4, #0]
   87b78:	2b00      	cmp	r3, #0
   87b7a:	d0fb      	beq.n	87b74 <_lseek_r+0x18>
   87b7c:	6033      	str	r3, [r6, #0]
   87b7e:	bd70      	pop	{r4, r5, r6, pc}
   87b80:	2007acb8 	.word	0x2007acb8

00087b84 <_read_r>:
   87b84:	b570      	push	{r4, r5, r6, lr}
   87b86:	4c08      	ldr	r4, [pc, #32]	; (87ba8 <_read_r+0x24>)
   87b88:	4606      	mov	r6, r0
   87b8a:	2500      	movs	r5, #0
   87b8c:	4608      	mov	r0, r1
   87b8e:	4611      	mov	r1, r2
   87b90:	461a      	mov	r2, r3
   87b92:	6025      	str	r5, [r4, #0]
   87b94:	f7f8 fb3a 	bl	8020c <_read>
   87b98:	1c43      	adds	r3, r0, #1
   87b9a:	d000      	beq.n	87b9e <_read_r+0x1a>
   87b9c:	bd70      	pop	{r4, r5, r6, pc}
   87b9e:	6823      	ldr	r3, [r4, #0]
   87ba0:	2b00      	cmp	r3, #0
   87ba2:	d0fb      	beq.n	87b9c <_read_r+0x18>
   87ba4:	6033      	str	r3, [r6, #0]
   87ba6:	bd70      	pop	{r4, r5, r6, pc}
   87ba8:	2007acb8 	.word	0x2007acb8

00087bac <__aeabi_drsub>:
   87bac:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
   87bb0:	e002      	b.n	87bb8 <__adddf3>
   87bb2:	bf00      	nop

00087bb4 <__aeabi_dsub>:
   87bb4:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

00087bb8 <__adddf3>:
   87bb8:	b530      	push	{r4, r5, lr}
   87bba:	ea4f 0441 	mov.w	r4, r1, lsl #1
   87bbe:	ea4f 0543 	mov.w	r5, r3, lsl #1
   87bc2:	ea94 0f05 	teq	r4, r5
   87bc6:	bf08      	it	eq
   87bc8:	ea90 0f02 	teqeq	r0, r2
   87bcc:	bf1f      	itttt	ne
   87bce:	ea54 0c00 	orrsne.w	ip, r4, r0
   87bd2:	ea55 0c02 	orrsne.w	ip, r5, r2
   87bd6:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
   87bda:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87bde:	f000 80e2 	beq.w	87da6 <__adddf3+0x1ee>
   87be2:	ea4f 5454 	mov.w	r4, r4, lsr #21
   87be6:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
   87bea:	bfb8      	it	lt
   87bec:	426d      	neglt	r5, r5
   87bee:	dd0c      	ble.n	87c0a <__adddf3+0x52>
   87bf0:	442c      	add	r4, r5
   87bf2:	ea80 0202 	eor.w	r2, r0, r2
   87bf6:	ea81 0303 	eor.w	r3, r1, r3
   87bfa:	ea82 0000 	eor.w	r0, r2, r0
   87bfe:	ea83 0101 	eor.w	r1, r3, r1
   87c02:	ea80 0202 	eor.w	r2, r0, r2
   87c06:	ea81 0303 	eor.w	r3, r1, r3
   87c0a:	2d36      	cmp	r5, #54	; 0x36
   87c0c:	bf88      	it	hi
   87c0e:	bd30      	pophi	{r4, r5, pc}
   87c10:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   87c14:	ea4f 3101 	mov.w	r1, r1, lsl #12
   87c18:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
   87c1c:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
   87c20:	d002      	beq.n	87c28 <__adddf3+0x70>
   87c22:	4240      	negs	r0, r0
   87c24:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87c28:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
   87c2c:	ea4f 3303 	mov.w	r3, r3, lsl #12
   87c30:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
   87c34:	d002      	beq.n	87c3c <__adddf3+0x84>
   87c36:	4252      	negs	r2, r2
   87c38:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   87c3c:	ea94 0f05 	teq	r4, r5
   87c40:	f000 80a7 	beq.w	87d92 <__adddf3+0x1da>
   87c44:	f1a4 0401 	sub.w	r4, r4, #1
   87c48:	f1d5 0e20 	rsbs	lr, r5, #32
   87c4c:	db0d      	blt.n	87c6a <__adddf3+0xb2>
   87c4e:	fa02 fc0e 	lsl.w	ip, r2, lr
   87c52:	fa22 f205 	lsr.w	r2, r2, r5
   87c56:	1880      	adds	r0, r0, r2
   87c58:	f141 0100 	adc.w	r1, r1, #0
   87c5c:	fa03 f20e 	lsl.w	r2, r3, lr
   87c60:	1880      	adds	r0, r0, r2
   87c62:	fa43 f305 	asr.w	r3, r3, r5
   87c66:	4159      	adcs	r1, r3
   87c68:	e00e      	b.n	87c88 <__adddf3+0xd0>
   87c6a:	f1a5 0520 	sub.w	r5, r5, #32
   87c6e:	f10e 0e20 	add.w	lr, lr, #32
   87c72:	2a01      	cmp	r2, #1
   87c74:	fa03 fc0e 	lsl.w	ip, r3, lr
   87c78:	bf28      	it	cs
   87c7a:	f04c 0c02 	orrcs.w	ip, ip, #2
   87c7e:	fa43 f305 	asr.w	r3, r3, r5
   87c82:	18c0      	adds	r0, r0, r3
   87c84:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
   87c88:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87c8c:	d507      	bpl.n	87c9e <__adddf3+0xe6>
   87c8e:	f04f 0e00 	mov.w	lr, #0
   87c92:	f1dc 0c00 	rsbs	ip, ip, #0
   87c96:	eb7e 0000 	sbcs.w	r0, lr, r0
   87c9a:	eb6e 0101 	sbc.w	r1, lr, r1
   87c9e:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
   87ca2:	d31b      	bcc.n	87cdc <__adddf3+0x124>
   87ca4:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
   87ca8:	d30c      	bcc.n	87cc4 <__adddf3+0x10c>
   87caa:	0849      	lsrs	r1, r1, #1
   87cac:	ea5f 0030 	movs.w	r0, r0, rrx
   87cb0:	ea4f 0c3c 	mov.w	ip, ip, rrx
   87cb4:	f104 0401 	add.w	r4, r4, #1
   87cb8:	ea4f 5244 	mov.w	r2, r4, lsl #21
   87cbc:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
   87cc0:	f080 809a 	bcs.w	87df8 <__adddf3+0x240>
   87cc4:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
   87cc8:	bf08      	it	eq
   87cca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   87cce:	f150 0000 	adcs.w	r0, r0, #0
   87cd2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87cd6:	ea41 0105 	orr.w	r1, r1, r5
   87cda:	bd30      	pop	{r4, r5, pc}
   87cdc:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
   87ce0:	4140      	adcs	r0, r0
   87ce2:	eb41 0101 	adc.w	r1, r1, r1
   87ce6:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   87cea:	f1a4 0401 	sub.w	r4, r4, #1
   87cee:	d1e9      	bne.n	87cc4 <__adddf3+0x10c>
   87cf0:	f091 0f00 	teq	r1, #0
   87cf4:	bf04      	itt	eq
   87cf6:	4601      	moveq	r1, r0
   87cf8:	2000      	moveq	r0, #0
   87cfa:	fab1 f381 	clz	r3, r1
   87cfe:	bf08      	it	eq
   87d00:	3320      	addeq	r3, #32
   87d02:	f1a3 030b 	sub.w	r3, r3, #11
   87d06:	f1b3 0220 	subs.w	r2, r3, #32
   87d0a:	da0c      	bge.n	87d26 <__adddf3+0x16e>
   87d0c:	320c      	adds	r2, #12
   87d0e:	dd08      	ble.n	87d22 <__adddf3+0x16a>
   87d10:	f102 0c14 	add.w	ip, r2, #20
   87d14:	f1c2 020c 	rsb	r2, r2, #12
   87d18:	fa01 f00c 	lsl.w	r0, r1, ip
   87d1c:	fa21 f102 	lsr.w	r1, r1, r2
   87d20:	e00c      	b.n	87d3c <__adddf3+0x184>
   87d22:	f102 0214 	add.w	r2, r2, #20
   87d26:	bfd8      	it	le
   87d28:	f1c2 0c20 	rsble	ip, r2, #32
   87d2c:	fa01 f102 	lsl.w	r1, r1, r2
   87d30:	fa20 fc0c 	lsr.w	ip, r0, ip
   87d34:	bfdc      	itt	le
   87d36:	ea41 010c 	orrle.w	r1, r1, ip
   87d3a:	4090      	lslle	r0, r2
   87d3c:	1ae4      	subs	r4, r4, r3
   87d3e:	bfa2      	ittt	ge
   87d40:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
   87d44:	4329      	orrge	r1, r5
   87d46:	bd30      	popge	{r4, r5, pc}
   87d48:	ea6f 0404 	mvn.w	r4, r4
   87d4c:	3c1f      	subs	r4, #31
   87d4e:	da1c      	bge.n	87d8a <__adddf3+0x1d2>
   87d50:	340c      	adds	r4, #12
   87d52:	dc0e      	bgt.n	87d72 <__adddf3+0x1ba>
   87d54:	f104 0414 	add.w	r4, r4, #20
   87d58:	f1c4 0220 	rsb	r2, r4, #32
   87d5c:	fa20 f004 	lsr.w	r0, r0, r4
   87d60:	fa01 f302 	lsl.w	r3, r1, r2
   87d64:	ea40 0003 	orr.w	r0, r0, r3
   87d68:	fa21 f304 	lsr.w	r3, r1, r4
   87d6c:	ea45 0103 	orr.w	r1, r5, r3
   87d70:	bd30      	pop	{r4, r5, pc}
   87d72:	f1c4 040c 	rsb	r4, r4, #12
   87d76:	f1c4 0220 	rsb	r2, r4, #32
   87d7a:	fa20 f002 	lsr.w	r0, r0, r2
   87d7e:	fa01 f304 	lsl.w	r3, r1, r4
   87d82:	ea40 0003 	orr.w	r0, r0, r3
   87d86:	4629      	mov	r1, r5
   87d88:	bd30      	pop	{r4, r5, pc}
   87d8a:	fa21 f004 	lsr.w	r0, r1, r4
   87d8e:	4629      	mov	r1, r5
   87d90:	bd30      	pop	{r4, r5, pc}
   87d92:	f094 0f00 	teq	r4, #0
   87d96:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
   87d9a:	bf06      	itte	eq
   87d9c:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
   87da0:	3401      	addeq	r4, #1
   87da2:	3d01      	subne	r5, #1
   87da4:	e74e      	b.n	87c44 <__adddf3+0x8c>
   87da6:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87daa:	bf18      	it	ne
   87dac:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
   87db0:	d029      	beq.n	87e06 <__adddf3+0x24e>
   87db2:	ea94 0f05 	teq	r4, r5
   87db6:	bf08      	it	eq
   87db8:	ea90 0f02 	teqeq	r0, r2
   87dbc:	d005      	beq.n	87dca <__adddf3+0x212>
   87dbe:	ea54 0c00 	orrs.w	ip, r4, r0
   87dc2:	bf04      	itt	eq
   87dc4:	4619      	moveq	r1, r3
   87dc6:	4610      	moveq	r0, r2
   87dc8:	bd30      	pop	{r4, r5, pc}
   87dca:	ea91 0f03 	teq	r1, r3
   87dce:	bf1e      	ittt	ne
   87dd0:	2100      	movne	r1, #0
   87dd2:	2000      	movne	r0, #0
   87dd4:	bd30      	popne	{r4, r5, pc}
   87dd6:	ea5f 5c54 	movs.w	ip, r4, lsr #21
   87dda:	d105      	bne.n	87de8 <__adddf3+0x230>
   87ddc:	0040      	lsls	r0, r0, #1
   87dde:	4149      	adcs	r1, r1
   87de0:	bf28      	it	cs
   87de2:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
   87de6:	bd30      	pop	{r4, r5, pc}
   87de8:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
   87dec:	bf3c      	itt	cc
   87dee:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
   87df2:	bd30      	popcc	{r4, r5, pc}
   87df4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87df8:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
   87dfc:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   87e00:	f04f 0000 	mov.w	r0, #0
   87e04:	bd30      	pop	{r4, r5, pc}
   87e06:	ea7f 5c64 	mvns.w	ip, r4, asr #21
   87e0a:	bf1a      	itte	ne
   87e0c:	4619      	movne	r1, r3
   87e0e:	4610      	movne	r0, r2
   87e10:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
   87e14:	bf1c      	itt	ne
   87e16:	460b      	movne	r3, r1
   87e18:	4602      	movne	r2, r0
   87e1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   87e1e:	bf06      	itte	eq
   87e20:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
   87e24:	ea91 0f03 	teqeq	r1, r3
   87e28:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
   87e2c:	bd30      	pop	{r4, r5, pc}
   87e2e:	bf00      	nop

00087e30 <__aeabi_ui2d>:
   87e30:	f090 0f00 	teq	r0, #0
   87e34:	bf04      	itt	eq
   87e36:	2100      	moveq	r1, #0
   87e38:	4770      	bxeq	lr
   87e3a:	b530      	push	{r4, r5, lr}
   87e3c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87e40:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87e44:	f04f 0500 	mov.w	r5, #0
   87e48:	f04f 0100 	mov.w	r1, #0
   87e4c:	e750      	b.n	87cf0 <__adddf3+0x138>
   87e4e:	bf00      	nop

00087e50 <__aeabi_i2d>:
   87e50:	f090 0f00 	teq	r0, #0
   87e54:	bf04      	itt	eq
   87e56:	2100      	moveq	r1, #0
   87e58:	4770      	bxeq	lr
   87e5a:	b530      	push	{r4, r5, lr}
   87e5c:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87e60:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87e64:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
   87e68:	bf48      	it	mi
   87e6a:	4240      	negmi	r0, r0
   87e6c:	f04f 0100 	mov.w	r1, #0
   87e70:	e73e      	b.n	87cf0 <__adddf3+0x138>
   87e72:	bf00      	nop

00087e74 <__aeabi_f2d>:
   87e74:	0042      	lsls	r2, r0, #1
   87e76:	ea4f 01e2 	mov.w	r1, r2, asr #3
   87e7a:	ea4f 0131 	mov.w	r1, r1, rrx
   87e7e:	ea4f 7002 	mov.w	r0, r2, lsl #28
   87e82:	bf1f      	itttt	ne
   87e84:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
   87e88:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87e8c:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
   87e90:	4770      	bxne	lr
   87e92:	f092 0f00 	teq	r2, #0
   87e96:	bf14      	ite	ne
   87e98:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
   87e9c:	4770      	bxeq	lr
   87e9e:	b530      	push	{r4, r5, lr}
   87ea0:	f44f 7460 	mov.w	r4, #896	; 0x380
   87ea4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
   87ea8:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   87eac:	e720      	b.n	87cf0 <__adddf3+0x138>
   87eae:	bf00      	nop

00087eb0 <__aeabi_ul2d>:
   87eb0:	ea50 0201 	orrs.w	r2, r0, r1
   87eb4:	bf08      	it	eq
   87eb6:	4770      	bxeq	lr
   87eb8:	b530      	push	{r4, r5, lr}
   87eba:	f04f 0500 	mov.w	r5, #0
   87ebe:	e00a      	b.n	87ed6 <__aeabi_l2d+0x16>

00087ec0 <__aeabi_l2d>:
   87ec0:	ea50 0201 	orrs.w	r2, r0, r1
   87ec4:	bf08      	it	eq
   87ec6:	4770      	bxeq	lr
   87ec8:	b530      	push	{r4, r5, lr}
   87eca:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
   87ece:	d502      	bpl.n	87ed6 <__aeabi_l2d+0x16>
   87ed0:	4240      	negs	r0, r0
   87ed2:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   87ed6:	f44f 6480 	mov.w	r4, #1024	; 0x400
   87eda:	f104 0432 	add.w	r4, r4, #50	; 0x32
   87ede:	ea5f 5c91 	movs.w	ip, r1, lsr #22
   87ee2:	f43f aedc 	beq.w	87c9e <__adddf3+0xe6>
   87ee6:	f04f 0203 	mov.w	r2, #3
   87eea:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87eee:	bf18      	it	ne
   87ef0:	3203      	addne	r2, #3
   87ef2:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
   87ef6:	bf18      	it	ne
   87ef8:	3203      	addne	r2, #3
   87efa:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
   87efe:	f1c2 0320 	rsb	r3, r2, #32
   87f02:	fa00 fc03 	lsl.w	ip, r0, r3
   87f06:	fa20 f002 	lsr.w	r0, r0, r2
   87f0a:	fa01 fe03 	lsl.w	lr, r1, r3
   87f0e:	ea40 000e 	orr.w	r0, r0, lr
   87f12:	fa21 f102 	lsr.w	r1, r1, r2
   87f16:	4414      	add	r4, r2
   87f18:	e6c1      	b.n	87c9e <__adddf3+0xe6>
   87f1a:	bf00      	nop

00087f1c <__aeabi_dmul>:
   87f1c:	b570      	push	{r4, r5, r6, lr}
   87f1e:	f04f 0cff 	mov.w	ip, #255	; 0xff
   87f22:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   87f26:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   87f2a:	bf1d      	ittte	ne
   87f2c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   87f30:	ea94 0f0c 	teqne	r4, ip
   87f34:	ea95 0f0c 	teqne	r5, ip
   87f38:	f000 f8de 	bleq	880f8 <__aeabi_dmul+0x1dc>
   87f3c:	442c      	add	r4, r5
   87f3e:	ea81 0603 	eor.w	r6, r1, r3
   87f42:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
   87f46:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
   87f4a:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
   87f4e:	bf18      	it	ne
   87f50:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
   87f54:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87f58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
   87f5c:	d038      	beq.n	87fd0 <__aeabi_dmul+0xb4>
   87f5e:	fba0 ce02 	umull	ip, lr, r0, r2
   87f62:	f04f 0500 	mov.w	r5, #0
   87f66:	fbe1 e502 	umlal	lr, r5, r1, r2
   87f6a:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
   87f6e:	fbe0 e503 	umlal	lr, r5, r0, r3
   87f72:	f04f 0600 	mov.w	r6, #0
   87f76:	fbe1 5603 	umlal	r5, r6, r1, r3
   87f7a:	f09c 0f00 	teq	ip, #0
   87f7e:	bf18      	it	ne
   87f80:	f04e 0e01 	orrne.w	lr, lr, #1
   87f84:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
   87f88:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
   87f8c:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
   87f90:	d204      	bcs.n	87f9c <__aeabi_dmul+0x80>
   87f92:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
   87f96:	416d      	adcs	r5, r5
   87f98:	eb46 0606 	adc.w	r6, r6, r6
   87f9c:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
   87fa0:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
   87fa4:	ea4f 20c5 	mov.w	r0, r5, lsl #11
   87fa8:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
   87fac:	ea4f 2ece 	mov.w	lr, lr, lsl #11
   87fb0:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   87fb4:	bf88      	it	hi
   87fb6:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   87fba:	d81e      	bhi.n	87ffa <__aeabi_dmul+0xde>
   87fbc:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
   87fc0:	bf08      	it	eq
   87fc2:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
   87fc6:	f150 0000 	adcs.w	r0, r0, #0
   87fca:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   87fce:	bd70      	pop	{r4, r5, r6, pc}
   87fd0:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
   87fd4:	ea46 0101 	orr.w	r1, r6, r1
   87fd8:	ea40 0002 	orr.w	r0, r0, r2
   87fdc:	ea81 0103 	eor.w	r1, r1, r3
   87fe0:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
   87fe4:	bfc2      	ittt	gt
   87fe6:	ebd4 050c 	rsbsgt	r5, r4, ip
   87fea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   87fee:	bd70      	popgt	{r4, r5, r6, pc}
   87ff0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   87ff4:	f04f 0e00 	mov.w	lr, #0
   87ff8:	3c01      	subs	r4, #1
   87ffa:	f300 80ab 	bgt.w	88154 <__aeabi_dmul+0x238>
   87ffe:	f114 0f36 	cmn.w	r4, #54	; 0x36
   88002:	bfde      	ittt	le
   88004:	2000      	movle	r0, #0
   88006:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
   8800a:	bd70      	pople	{r4, r5, r6, pc}
   8800c:	f1c4 0400 	rsb	r4, r4, #0
   88010:	3c20      	subs	r4, #32
   88012:	da35      	bge.n	88080 <__aeabi_dmul+0x164>
   88014:	340c      	adds	r4, #12
   88016:	dc1b      	bgt.n	88050 <__aeabi_dmul+0x134>
   88018:	f104 0414 	add.w	r4, r4, #20
   8801c:	f1c4 0520 	rsb	r5, r4, #32
   88020:	fa00 f305 	lsl.w	r3, r0, r5
   88024:	fa20 f004 	lsr.w	r0, r0, r4
   88028:	fa01 f205 	lsl.w	r2, r1, r5
   8802c:	ea40 0002 	orr.w	r0, r0, r2
   88030:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
   88034:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
   88038:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   8803c:	fa21 f604 	lsr.w	r6, r1, r4
   88040:	eb42 0106 	adc.w	r1, r2, r6
   88044:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88048:	bf08      	it	eq
   8804a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8804e:	bd70      	pop	{r4, r5, r6, pc}
   88050:	f1c4 040c 	rsb	r4, r4, #12
   88054:	f1c4 0520 	rsb	r5, r4, #32
   88058:	fa00 f304 	lsl.w	r3, r0, r4
   8805c:	fa20 f005 	lsr.w	r0, r0, r5
   88060:	fa01 f204 	lsl.w	r2, r1, r4
   88064:	ea40 0002 	orr.w	r0, r0, r2
   88068:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8806c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
   88070:	f141 0100 	adc.w	r1, r1, #0
   88074:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   88078:	bf08      	it	eq
   8807a:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   8807e:	bd70      	pop	{r4, r5, r6, pc}
   88080:	f1c4 0520 	rsb	r5, r4, #32
   88084:	fa00 f205 	lsl.w	r2, r0, r5
   88088:	ea4e 0e02 	orr.w	lr, lr, r2
   8808c:	fa20 f304 	lsr.w	r3, r0, r4
   88090:	fa01 f205 	lsl.w	r2, r1, r5
   88094:	ea43 0302 	orr.w	r3, r3, r2
   88098:	fa21 f004 	lsr.w	r0, r1, r4
   8809c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   880a0:	fa21 f204 	lsr.w	r2, r1, r4
   880a4:	ea20 0002 	bic.w	r0, r0, r2
   880a8:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
   880ac:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
   880b0:	bf08      	it	eq
   880b2:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
   880b6:	bd70      	pop	{r4, r5, r6, pc}
   880b8:	f094 0f00 	teq	r4, #0
   880bc:	d10f      	bne.n	880de <__aeabi_dmul+0x1c2>
   880be:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
   880c2:	0040      	lsls	r0, r0, #1
   880c4:	eb41 0101 	adc.w	r1, r1, r1
   880c8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   880cc:	bf08      	it	eq
   880ce:	3c01      	subeq	r4, #1
   880d0:	d0f7      	beq.n	880c2 <__aeabi_dmul+0x1a6>
   880d2:	ea41 0106 	orr.w	r1, r1, r6
   880d6:	f095 0f00 	teq	r5, #0
   880da:	bf18      	it	ne
   880dc:	4770      	bxne	lr
   880de:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
   880e2:	0052      	lsls	r2, r2, #1
   880e4:	eb43 0303 	adc.w	r3, r3, r3
   880e8:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
   880ec:	bf08      	it	eq
   880ee:	3d01      	subeq	r5, #1
   880f0:	d0f7      	beq.n	880e2 <__aeabi_dmul+0x1c6>
   880f2:	ea43 0306 	orr.w	r3, r3, r6
   880f6:	4770      	bx	lr
   880f8:	ea94 0f0c 	teq	r4, ip
   880fc:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   88100:	bf18      	it	ne
   88102:	ea95 0f0c 	teqne	r5, ip
   88106:	d00c      	beq.n	88122 <__aeabi_dmul+0x206>
   88108:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   8810c:	bf18      	it	ne
   8810e:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88112:	d1d1      	bne.n	880b8 <__aeabi_dmul+0x19c>
   88114:	ea81 0103 	eor.w	r1, r1, r3
   88118:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   8811c:	f04f 0000 	mov.w	r0, #0
   88120:	bd70      	pop	{r4, r5, r6, pc}
   88122:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88126:	bf06      	itte	eq
   88128:	4610      	moveq	r0, r2
   8812a:	4619      	moveq	r1, r3
   8812c:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   88130:	d019      	beq.n	88166 <__aeabi_dmul+0x24a>
   88132:	ea94 0f0c 	teq	r4, ip
   88136:	d102      	bne.n	8813e <__aeabi_dmul+0x222>
   88138:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
   8813c:	d113      	bne.n	88166 <__aeabi_dmul+0x24a>
   8813e:	ea95 0f0c 	teq	r5, ip
   88142:	d105      	bne.n	88150 <__aeabi_dmul+0x234>
   88144:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
   88148:	bf1c      	itt	ne
   8814a:	4610      	movne	r0, r2
   8814c:	4619      	movne	r1, r3
   8814e:	d10a      	bne.n	88166 <__aeabi_dmul+0x24a>
   88150:	ea81 0103 	eor.w	r1, r1, r3
   88154:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
   88158:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8815c:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
   88160:	f04f 0000 	mov.w	r0, #0
   88164:	bd70      	pop	{r4, r5, r6, pc}
   88166:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
   8816a:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
   8816e:	bd70      	pop	{r4, r5, r6, pc}

00088170 <__aeabi_ddiv>:
   88170:	b570      	push	{r4, r5, r6, lr}
   88172:	f04f 0cff 	mov.w	ip, #255	; 0xff
   88176:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
   8817a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
   8817e:	bf1d      	ittte	ne
   88180:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
   88184:	ea94 0f0c 	teqne	r4, ip
   88188:	ea95 0f0c 	teqne	r5, ip
   8818c:	f000 f8a7 	bleq	882de <__aeabi_ddiv+0x16e>
   88190:	eba4 0405 	sub.w	r4, r4, r5
   88194:	ea81 0e03 	eor.w	lr, r1, r3
   88198:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   8819c:	ea4f 3101 	mov.w	r1, r1, lsl #12
   881a0:	f000 8088 	beq.w	882b4 <__aeabi_ddiv+0x144>
   881a4:	ea4f 3303 	mov.w	r3, r3, lsl #12
   881a8:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
   881ac:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
   881b0:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
   881b4:	ea4f 2202 	mov.w	r2, r2, lsl #8
   881b8:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
   881bc:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
   881c0:	ea4f 2600 	mov.w	r6, r0, lsl #8
   881c4:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
   881c8:	429d      	cmp	r5, r3
   881ca:	bf08      	it	eq
   881cc:	4296      	cmpeq	r6, r2
   881ce:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
   881d2:	f504 7440 	add.w	r4, r4, #768	; 0x300
   881d6:	d202      	bcs.n	881de <__aeabi_ddiv+0x6e>
   881d8:	085b      	lsrs	r3, r3, #1
   881da:	ea4f 0232 	mov.w	r2, r2, rrx
   881de:	1ab6      	subs	r6, r6, r2
   881e0:	eb65 0503 	sbc.w	r5, r5, r3
   881e4:	085b      	lsrs	r3, r3, #1
   881e6:	ea4f 0232 	mov.w	r2, r2, rrx
   881ea:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
   881ee:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
   881f2:	ebb6 0e02 	subs.w	lr, r6, r2
   881f6:	eb75 0e03 	sbcs.w	lr, r5, r3
   881fa:	bf22      	ittt	cs
   881fc:	1ab6      	subcs	r6, r6, r2
   881fe:	4675      	movcs	r5, lr
   88200:	ea40 000c 	orrcs.w	r0, r0, ip
   88204:	085b      	lsrs	r3, r3, #1
   88206:	ea4f 0232 	mov.w	r2, r2, rrx
   8820a:	ebb6 0e02 	subs.w	lr, r6, r2
   8820e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88212:	bf22      	ittt	cs
   88214:	1ab6      	subcs	r6, r6, r2
   88216:	4675      	movcs	r5, lr
   88218:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
   8821c:	085b      	lsrs	r3, r3, #1
   8821e:	ea4f 0232 	mov.w	r2, r2, rrx
   88222:	ebb6 0e02 	subs.w	lr, r6, r2
   88226:	eb75 0e03 	sbcs.w	lr, r5, r3
   8822a:	bf22      	ittt	cs
   8822c:	1ab6      	subcs	r6, r6, r2
   8822e:	4675      	movcs	r5, lr
   88230:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
   88234:	085b      	lsrs	r3, r3, #1
   88236:	ea4f 0232 	mov.w	r2, r2, rrx
   8823a:	ebb6 0e02 	subs.w	lr, r6, r2
   8823e:	eb75 0e03 	sbcs.w	lr, r5, r3
   88242:	bf22      	ittt	cs
   88244:	1ab6      	subcs	r6, r6, r2
   88246:	4675      	movcs	r5, lr
   88248:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
   8824c:	ea55 0e06 	orrs.w	lr, r5, r6
   88250:	d018      	beq.n	88284 <__aeabi_ddiv+0x114>
   88252:	ea4f 1505 	mov.w	r5, r5, lsl #4
   88256:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
   8825a:	ea4f 1606 	mov.w	r6, r6, lsl #4
   8825e:	ea4f 03c3 	mov.w	r3, r3, lsl #3
   88262:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
   88266:	ea4f 02c2 	mov.w	r2, r2, lsl #3
   8826a:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
   8826e:	d1c0      	bne.n	881f2 <__aeabi_ddiv+0x82>
   88270:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88274:	d10b      	bne.n	8828e <__aeabi_ddiv+0x11e>
   88276:	ea41 0100 	orr.w	r1, r1, r0
   8827a:	f04f 0000 	mov.w	r0, #0
   8827e:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
   88282:	e7b6      	b.n	881f2 <__aeabi_ddiv+0x82>
   88284:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
   88288:	bf04      	itt	eq
   8828a:	4301      	orreq	r1, r0
   8828c:	2000      	moveq	r0, #0
   8828e:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
   88292:	bf88      	it	hi
   88294:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
   88298:	f63f aeaf 	bhi.w	87ffa <__aeabi_dmul+0xde>
   8829c:	ebb5 0c03 	subs.w	ip, r5, r3
   882a0:	bf04      	itt	eq
   882a2:	ebb6 0c02 	subseq.w	ip, r6, r2
   882a6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
   882aa:	f150 0000 	adcs.w	r0, r0, #0
   882ae:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
   882b2:	bd70      	pop	{r4, r5, r6, pc}
   882b4:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
   882b8:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
   882bc:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
   882c0:	bfc2      	ittt	gt
   882c2:	ebd4 050c 	rsbsgt	r5, r4, ip
   882c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
   882ca:	bd70      	popgt	{r4, r5, r6, pc}
   882cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
   882d0:	f04f 0e00 	mov.w	lr, #0
   882d4:	3c01      	subs	r4, #1
   882d6:	e690      	b.n	87ffa <__aeabi_dmul+0xde>
   882d8:	ea45 0e06 	orr.w	lr, r5, r6
   882dc:	e68d      	b.n	87ffa <__aeabi_dmul+0xde>
   882de:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
   882e2:	ea94 0f0c 	teq	r4, ip
   882e6:	bf08      	it	eq
   882e8:	ea95 0f0c 	teqeq	r5, ip
   882ec:	f43f af3b 	beq.w	88166 <__aeabi_dmul+0x24a>
   882f0:	ea94 0f0c 	teq	r4, ip
   882f4:	d10a      	bne.n	8830c <__aeabi_ddiv+0x19c>
   882f6:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
   882fa:	f47f af34 	bne.w	88166 <__aeabi_dmul+0x24a>
   882fe:	ea95 0f0c 	teq	r5, ip
   88302:	f47f af25 	bne.w	88150 <__aeabi_dmul+0x234>
   88306:	4610      	mov	r0, r2
   88308:	4619      	mov	r1, r3
   8830a:	e72c      	b.n	88166 <__aeabi_dmul+0x24a>
   8830c:	ea95 0f0c 	teq	r5, ip
   88310:	d106      	bne.n	88320 <__aeabi_ddiv+0x1b0>
   88312:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
   88316:	f43f aefd 	beq.w	88114 <__aeabi_dmul+0x1f8>
   8831a:	4610      	mov	r0, r2
   8831c:	4619      	mov	r1, r3
   8831e:	e722      	b.n	88166 <__aeabi_dmul+0x24a>
   88320:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
   88324:	bf18      	it	ne
   88326:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
   8832a:	f47f aec5 	bne.w	880b8 <__aeabi_dmul+0x19c>
   8832e:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
   88332:	f47f af0d 	bne.w	88150 <__aeabi_dmul+0x234>
   88336:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
   8833a:	f47f aeeb 	bne.w	88114 <__aeabi_dmul+0x1f8>
   8833e:	e712      	b.n	88166 <__aeabi_dmul+0x24a>

00088340 <__gedf2>:
   88340:	f04f 3cff 	mov.w	ip, #4294967295
   88344:	e006      	b.n	88354 <__cmpdf2+0x4>
   88346:	bf00      	nop

00088348 <__ledf2>:
   88348:	f04f 0c01 	mov.w	ip, #1
   8834c:	e002      	b.n	88354 <__cmpdf2+0x4>
   8834e:	bf00      	nop

00088350 <__cmpdf2>:
   88350:	f04f 0c01 	mov.w	ip, #1
   88354:	f84d cd04 	str.w	ip, [sp, #-4]!
   88358:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   8835c:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   88360:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   88364:	bf18      	it	ne
   88366:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
   8836a:	d01b      	beq.n	883a4 <__cmpdf2+0x54>
   8836c:	b001      	add	sp, #4
   8836e:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
   88372:	bf0c      	ite	eq
   88374:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
   88378:	ea91 0f03 	teqne	r1, r3
   8837c:	bf02      	ittt	eq
   8837e:	ea90 0f02 	teqeq	r0, r2
   88382:	2000      	moveq	r0, #0
   88384:	4770      	bxeq	lr
   88386:	f110 0f00 	cmn.w	r0, #0
   8838a:	ea91 0f03 	teq	r1, r3
   8838e:	bf58      	it	pl
   88390:	4299      	cmppl	r1, r3
   88392:	bf08      	it	eq
   88394:	4290      	cmpeq	r0, r2
   88396:	bf2c      	ite	cs
   88398:	17d8      	asrcs	r0, r3, #31
   8839a:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
   8839e:	f040 0001 	orr.w	r0, r0, #1
   883a2:	4770      	bx	lr
   883a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
   883a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   883ac:	d102      	bne.n	883b4 <__cmpdf2+0x64>
   883ae:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
   883b2:	d107      	bne.n	883c4 <__cmpdf2+0x74>
   883b4:	ea4f 0c43 	mov.w	ip, r3, lsl #1
   883b8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
   883bc:	d1d6      	bne.n	8836c <__cmpdf2+0x1c>
   883be:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
   883c2:	d0d3      	beq.n	8836c <__cmpdf2+0x1c>
   883c4:	f85d 0b04 	ldr.w	r0, [sp], #4
   883c8:	4770      	bx	lr
   883ca:	bf00      	nop

000883cc <__aeabi_cdrcmple>:
   883cc:	4684      	mov	ip, r0
   883ce:	4610      	mov	r0, r2
   883d0:	4662      	mov	r2, ip
   883d2:	468c      	mov	ip, r1
   883d4:	4619      	mov	r1, r3
   883d6:	4663      	mov	r3, ip
   883d8:	e000      	b.n	883dc <__aeabi_cdcmpeq>
   883da:	bf00      	nop

000883dc <__aeabi_cdcmpeq>:
   883dc:	b501      	push	{r0, lr}
   883de:	f7ff ffb7 	bl	88350 <__cmpdf2>
   883e2:	2800      	cmp	r0, #0
   883e4:	bf48      	it	mi
   883e6:	f110 0f00 	cmnmi.w	r0, #0
   883ea:	bd01      	pop	{r0, pc}

000883ec <__aeabi_dcmpeq>:
   883ec:	f84d ed08 	str.w	lr, [sp, #-8]!
   883f0:	f7ff fff4 	bl	883dc <__aeabi_cdcmpeq>
   883f4:	bf0c      	ite	eq
   883f6:	2001      	moveq	r0, #1
   883f8:	2000      	movne	r0, #0
   883fa:	f85d fb08 	ldr.w	pc, [sp], #8
   883fe:	bf00      	nop

00088400 <__aeabi_dcmplt>:
   88400:	f84d ed08 	str.w	lr, [sp, #-8]!
   88404:	f7ff ffea 	bl	883dc <__aeabi_cdcmpeq>
   88408:	bf34      	ite	cc
   8840a:	2001      	movcc	r0, #1
   8840c:	2000      	movcs	r0, #0
   8840e:	f85d fb08 	ldr.w	pc, [sp], #8
   88412:	bf00      	nop

00088414 <__aeabi_dcmple>:
   88414:	f84d ed08 	str.w	lr, [sp, #-8]!
   88418:	f7ff ffe0 	bl	883dc <__aeabi_cdcmpeq>
   8841c:	bf94      	ite	ls
   8841e:	2001      	movls	r0, #1
   88420:	2000      	movhi	r0, #0
   88422:	f85d fb08 	ldr.w	pc, [sp], #8
   88426:	bf00      	nop

00088428 <__aeabi_dcmpge>:
   88428:	f84d ed08 	str.w	lr, [sp, #-8]!
   8842c:	f7ff ffce 	bl	883cc <__aeabi_cdrcmple>
   88430:	bf94      	ite	ls
   88432:	2001      	movls	r0, #1
   88434:	2000      	movhi	r0, #0
   88436:	f85d fb08 	ldr.w	pc, [sp], #8
   8843a:	bf00      	nop

0008843c <__aeabi_dcmpgt>:
   8843c:	f84d ed08 	str.w	lr, [sp, #-8]!
   88440:	f7ff ffc4 	bl	883cc <__aeabi_cdrcmple>
   88444:	bf34      	ite	cc
   88446:	2001      	movcc	r0, #1
   88448:	2000      	movcs	r0, #0
   8844a:	f85d fb08 	ldr.w	pc, [sp], #8
   8844e:	bf00      	nop

00088450 <__aeabi_d2iz>:
   88450:	ea4f 0241 	mov.w	r2, r1, lsl #1
   88454:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
   88458:	d215      	bcs.n	88486 <__aeabi_d2iz+0x36>
   8845a:	d511      	bpl.n	88480 <__aeabi_d2iz+0x30>
   8845c:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
   88460:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
   88464:	d912      	bls.n	8848c <__aeabi_d2iz+0x3c>
   88466:	ea4f 23c1 	mov.w	r3, r1, lsl #11
   8846a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
   8846e:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
   88472:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
   88476:	fa23 f002 	lsr.w	r0, r3, r2
   8847a:	bf18      	it	ne
   8847c:	4240      	negne	r0, r0
   8847e:	4770      	bx	lr
   88480:	f04f 0000 	mov.w	r0, #0
   88484:	4770      	bx	lr
   88486:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
   8848a:	d105      	bne.n	88498 <__aeabi_d2iz+0x48>
   8848c:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
   88490:	bf08      	it	eq
   88492:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
   88496:	4770      	bx	lr
   88498:	f04f 0000 	mov.w	r0, #0
   8849c:	4770      	bx	lr
   8849e:	bf00      	nop

000884a0 <__aeabi_uldivmod>:
   884a0:	b94b      	cbnz	r3, 884b6 <__aeabi_uldivmod+0x16>
   884a2:	b942      	cbnz	r2, 884b6 <__aeabi_uldivmod+0x16>
   884a4:	2900      	cmp	r1, #0
   884a6:	bf08      	it	eq
   884a8:	2800      	cmpeq	r0, #0
   884aa:	d002      	beq.n	884b2 <__aeabi_uldivmod+0x12>
   884ac:	f04f 31ff 	mov.w	r1, #4294967295
   884b0:	4608      	mov	r0, r1
   884b2:	f000 b83b 	b.w	8852c <__aeabi_idiv0>
   884b6:	b082      	sub	sp, #8
   884b8:	46ec      	mov	ip, sp
   884ba:	e92d 5000 	stmdb	sp!, {ip, lr}
   884be:	f000 f81d 	bl	884fc <__gnu_uldivmod_helper>
   884c2:	f8dd e004 	ldr.w	lr, [sp, #4]
   884c6:	b002      	add	sp, #8
   884c8:	bc0c      	pop	{r2, r3}
   884ca:	4770      	bx	lr

000884cc <__gnu_ldivmod_helper>:
   884cc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   884d0:	9e08      	ldr	r6, [sp, #32]
   884d2:	4614      	mov	r4, r2
   884d4:	461d      	mov	r5, r3
   884d6:	4680      	mov	r8, r0
   884d8:	4689      	mov	r9, r1
   884da:	f000 f829 	bl	88530 <__divdi3>
   884de:	fb04 f301 	mul.w	r3, r4, r1
   884e2:	fba4 ab00 	umull	sl, fp, r4, r0
   884e6:	fb00 3205 	mla	r2, r0, r5, r3
   884ea:	4493      	add	fp, r2
   884ec:	ebb8 080a 	subs.w	r8, r8, sl
   884f0:	eb69 090b 	sbc.w	r9, r9, fp
   884f4:	e9c6 8900 	strd	r8, r9, [r6]
   884f8:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

000884fc <__gnu_uldivmod_helper>:
   884fc:	e92d 4f70 	stmdb	sp!, {r4, r5, r6, r8, r9, sl, fp, lr}
   88500:	9e08      	ldr	r6, [sp, #32]
   88502:	4614      	mov	r4, r2
   88504:	461d      	mov	r5, r3
   88506:	4680      	mov	r8, r0
   88508:	4689      	mov	r9, r1
   8850a:	f000 f961 	bl	887d0 <__udivdi3>
   8850e:	fb00 f505 	mul.w	r5, r0, r5
   88512:	fba0 ab04 	umull	sl, fp, r0, r4
   88516:	fb04 5401 	mla	r4, r4, r1, r5
   8851a:	44a3      	add	fp, r4
   8851c:	ebb8 080a 	subs.w	r8, r8, sl
   88520:	eb69 090b 	sbc.w	r9, r9, fp
   88524:	e9c6 8900 	strd	r8, r9, [r6]
   88528:	e8bd 8f70 	ldmia.w	sp!, {r4, r5, r6, r8, r9, sl, fp, pc}

0008852c <__aeabi_idiv0>:
   8852c:	4770      	bx	lr
   8852e:	bf00      	nop

00088530 <__divdi3>:
   88530:	2900      	cmp	r1, #0
   88532:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88536:	f2c0 80a1 	blt.w	8867c <__divdi3+0x14c>
   8853a:	2400      	movs	r4, #0
   8853c:	2b00      	cmp	r3, #0
   8853e:	f2c0 8098 	blt.w	88672 <__divdi3+0x142>
   88542:	4615      	mov	r5, r2
   88544:	4606      	mov	r6, r0
   88546:	460f      	mov	r7, r1
   88548:	2b00      	cmp	r3, #0
   8854a:	d13f      	bne.n	885cc <__divdi3+0x9c>
   8854c:	428a      	cmp	r2, r1
   8854e:	d958      	bls.n	88602 <__divdi3+0xd2>
   88550:	fab2 f382 	clz	r3, r2
   88554:	b14b      	cbz	r3, 8856a <__divdi3+0x3a>
   88556:	f1c3 0220 	rsb	r2, r3, #32
   8855a:	fa01 f703 	lsl.w	r7, r1, r3
   8855e:	fa20 f202 	lsr.w	r2, r0, r2
   88562:	409d      	lsls	r5, r3
   88564:	fa00 f603 	lsl.w	r6, r0, r3
   88568:	4317      	orrs	r7, r2
   8856a:	0c29      	lsrs	r1, r5, #16
   8856c:	fbb7 f2f1 	udiv	r2, r7, r1
   88570:	fb01 7712 	mls	r7, r1, r2, r7
   88574:	b2a8      	uxth	r0, r5
   88576:	fb00 f302 	mul.w	r3, r0, r2
   8857a:	ea4f 4c16 	mov.w	ip, r6, lsr #16
   8857e:	ea4c 4707 	orr.w	r7, ip, r7, lsl #16
   88582:	42bb      	cmp	r3, r7
   88584:	d909      	bls.n	8859a <__divdi3+0x6a>
   88586:	197f      	adds	r7, r7, r5
   88588:	f102 3cff 	add.w	ip, r2, #4294967295
   8858c:	f080 8105 	bcs.w	8879a <__divdi3+0x26a>
   88590:	42bb      	cmp	r3, r7
   88592:	f240 8102 	bls.w	8879a <__divdi3+0x26a>
   88596:	3a02      	subs	r2, #2
   88598:	442f      	add	r7, r5
   8859a:	1aff      	subs	r7, r7, r3
   8859c:	fbb7 f3f1 	udiv	r3, r7, r1
   885a0:	fb01 7113 	mls	r1, r1, r3, r7
   885a4:	fb00 f003 	mul.w	r0, r0, r3
   885a8:	b2b6      	uxth	r6, r6
   885aa:	ea46 4101 	orr.w	r1, r6, r1, lsl #16
   885ae:	4288      	cmp	r0, r1
   885b0:	d908      	bls.n	885c4 <__divdi3+0x94>
   885b2:	1949      	adds	r1, r1, r5
   885b4:	f103 37ff 	add.w	r7, r3, #4294967295
   885b8:	f080 80f1 	bcs.w	8879e <__divdi3+0x26e>
   885bc:	4288      	cmp	r0, r1
   885be:	f240 80ee 	bls.w	8879e <__divdi3+0x26e>
   885c2:	3b02      	subs	r3, #2
   885c4:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   885c8:	2300      	movs	r3, #0
   885ca:	e003      	b.n	885d4 <__divdi3+0xa4>
   885cc:	428b      	cmp	r3, r1
   885ce:	d90a      	bls.n	885e6 <__divdi3+0xb6>
   885d0:	2300      	movs	r3, #0
   885d2:	461a      	mov	r2, r3
   885d4:	4610      	mov	r0, r2
   885d6:	4619      	mov	r1, r3
   885d8:	b114      	cbz	r4, 885e0 <__divdi3+0xb0>
   885da:	4240      	negs	r0, r0
   885dc:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   885e0:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   885e4:	4770      	bx	lr
   885e6:	fab3 f883 	clz	r8, r3
   885ea:	f1b8 0f00 	cmp.w	r8, #0
   885ee:	f040 8088 	bne.w	88702 <__divdi3+0x1d2>
   885f2:	428b      	cmp	r3, r1
   885f4:	d302      	bcc.n	885fc <__divdi3+0xcc>
   885f6:	4282      	cmp	r2, r0
   885f8:	f200 80e2 	bhi.w	887c0 <__divdi3+0x290>
   885fc:	2300      	movs	r3, #0
   885fe:	2201      	movs	r2, #1
   88600:	e7e8      	b.n	885d4 <__divdi3+0xa4>
   88602:	b912      	cbnz	r2, 8860a <__divdi3+0xda>
   88604:	2301      	movs	r3, #1
   88606:	fbb3 f5f2 	udiv	r5, r3, r2
   8860a:	fab5 f285 	clz	r2, r5
   8860e:	2a00      	cmp	r2, #0
   88610:	d13a      	bne.n	88688 <__divdi3+0x158>
   88612:	1b7f      	subs	r7, r7, r5
   88614:	0c28      	lsrs	r0, r5, #16
   88616:	fa1f fc85 	uxth.w	ip, r5
   8861a:	2301      	movs	r3, #1
   8861c:	fbb7 f1f0 	udiv	r1, r7, r0
   88620:	fb00 7711 	mls	r7, r0, r1, r7
   88624:	fb0c f201 	mul.w	r2, ip, r1
   88628:	ea4f 4816 	mov.w	r8, r6, lsr #16
   8862c:	ea48 4707 	orr.w	r7, r8, r7, lsl #16
   88630:	42ba      	cmp	r2, r7
   88632:	d907      	bls.n	88644 <__divdi3+0x114>
   88634:	197f      	adds	r7, r7, r5
   88636:	f101 38ff 	add.w	r8, r1, #4294967295
   8863a:	d202      	bcs.n	88642 <__divdi3+0x112>
   8863c:	42ba      	cmp	r2, r7
   8863e:	f200 80c4 	bhi.w	887ca <__divdi3+0x29a>
   88642:	4641      	mov	r1, r8
   88644:	1abf      	subs	r7, r7, r2
   88646:	fbb7 f2f0 	udiv	r2, r7, r0
   8864a:	fb00 7012 	mls	r0, r0, r2, r7
   8864e:	fb0c fc02 	mul.w	ip, ip, r2
   88652:	b2b6      	uxth	r6, r6
   88654:	ea46 4000 	orr.w	r0, r6, r0, lsl #16
   88658:	4584      	cmp	ip, r0
   8865a:	d907      	bls.n	8866c <__divdi3+0x13c>
   8865c:	1940      	adds	r0, r0, r5
   8865e:	f102 37ff 	add.w	r7, r2, #4294967295
   88662:	d202      	bcs.n	8866a <__divdi3+0x13a>
   88664:	4584      	cmp	ip, r0
   88666:	f200 80ae 	bhi.w	887c6 <__divdi3+0x296>
   8866a:	463a      	mov	r2, r7
   8866c:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
   88670:	e7b0      	b.n	885d4 <__divdi3+0xa4>
   88672:	43e4      	mvns	r4, r4
   88674:	4252      	negs	r2, r2
   88676:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
   8867a:	e762      	b.n	88542 <__divdi3+0x12>
   8867c:	4240      	negs	r0, r0
   8867e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
   88682:	f04f 34ff 	mov.w	r4, #4294967295
   88686:	e759      	b.n	8853c <__divdi3+0xc>
   88688:	4095      	lsls	r5, r2
   8868a:	f1c2 0920 	rsb	r9, r2, #32
   8868e:	fa27 f109 	lsr.w	r1, r7, r9
   88692:	fa26 f909 	lsr.w	r9, r6, r9
   88696:	4097      	lsls	r7, r2
   88698:	0c28      	lsrs	r0, r5, #16
   8869a:	fbb1 f8f0 	udiv	r8, r1, r0
   8869e:	fb00 1118 	mls	r1, r0, r8, r1
   886a2:	fa1f fc85 	uxth.w	ip, r5
   886a6:	fb0c f308 	mul.w	r3, ip, r8
   886aa:	ea49 0907 	orr.w	r9, r9, r7
   886ae:	ea4f 4719 	mov.w	r7, r9, lsr #16
   886b2:	ea47 4101 	orr.w	r1, r7, r1, lsl #16
   886b6:	428b      	cmp	r3, r1
   886b8:	fa06 f602 	lsl.w	r6, r6, r2
   886bc:	d908      	bls.n	886d0 <__divdi3+0x1a0>
   886be:	1949      	adds	r1, r1, r5
   886c0:	f108 32ff 	add.w	r2, r8, #4294967295
   886c4:	d27a      	bcs.n	887bc <__divdi3+0x28c>
   886c6:	428b      	cmp	r3, r1
   886c8:	d978      	bls.n	887bc <__divdi3+0x28c>
   886ca:	f1a8 0802 	sub.w	r8, r8, #2
   886ce:	4429      	add	r1, r5
   886d0:	1ac9      	subs	r1, r1, r3
   886d2:	fbb1 f3f0 	udiv	r3, r1, r0
   886d6:	fb00 1713 	mls	r7, r0, r3, r1
   886da:	fb0c f203 	mul.w	r2, ip, r3
   886de:	fa1f f989 	uxth.w	r9, r9
   886e2:	ea49 4707 	orr.w	r7, r9, r7, lsl #16
   886e6:	42ba      	cmp	r2, r7
   886e8:	d907      	bls.n	886fa <__divdi3+0x1ca>
   886ea:	197f      	adds	r7, r7, r5
   886ec:	f103 31ff 	add.w	r1, r3, #4294967295
   886f0:	d260      	bcs.n	887b4 <__divdi3+0x284>
   886f2:	42ba      	cmp	r2, r7
   886f4:	d95e      	bls.n	887b4 <__divdi3+0x284>
   886f6:	3b02      	subs	r3, #2
   886f8:	442f      	add	r7, r5
   886fa:	1abf      	subs	r7, r7, r2
   886fc:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   88700:	e78c      	b.n	8861c <__divdi3+0xec>
   88702:	f1c8 0220 	rsb	r2, r8, #32
   88706:	fa25 f102 	lsr.w	r1, r5, r2
   8870a:	fa03 fc08 	lsl.w	ip, r3, r8
   8870e:	fa27 f302 	lsr.w	r3, r7, r2
   88712:	fa20 f202 	lsr.w	r2, r0, r2
   88716:	fa07 f708 	lsl.w	r7, r7, r8
   8871a:	ea41 0c0c 	orr.w	ip, r1, ip
   8871e:	ea4f 491c 	mov.w	r9, ip, lsr #16
   88722:	fbb3 f1f9 	udiv	r1, r3, r9
   88726:	fb09 3311 	mls	r3, r9, r1, r3
   8872a:	fa1f fa8c 	uxth.w	sl, ip
   8872e:	fb0a fb01 	mul.w	fp, sl, r1
   88732:	4317      	orrs	r7, r2
   88734:	0c3a      	lsrs	r2, r7, #16
   88736:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   8873a:	459b      	cmp	fp, r3
   8873c:	fa05 f008 	lsl.w	r0, r5, r8
   88740:	d908      	bls.n	88754 <__divdi3+0x224>
   88742:	eb13 030c 	adds.w	r3, r3, ip
   88746:	f101 32ff 	add.w	r2, r1, #4294967295
   8874a:	d235      	bcs.n	887b8 <__divdi3+0x288>
   8874c:	459b      	cmp	fp, r3
   8874e:	d933      	bls.n	887b8 <__divdi3+0x288>
   88750:	3902      	subs	r1, #2
   88752:	4463      	add	r3, ip
   88754:	ebcb 0303 	rsb	r3, fp, r3
   88758:	fbb3 f2f9 	udiv	r2, r3, r9
   8875c:	fb09 3312 	mls	r3, r9, r2, r3
   88760:	fb0a fa02 	mul.w	sl, sl, r2
   88764:	b2bf      	uxth	r7, r7
   88766:	ea47 4703 	orr.w	r7, r7, r3, lsl #16
   8876a:	45ba      	cmp	sl, r7
   8876c:	d908      	bls.n	88780 <__divdi3+0x250>
   8876e:	eb17 070c 	adds.w	r7, r7, ip
   88772:	f102 33ff 	add.w	r3, r2, #4294967295
   88776:	d21b      	bcs.n	887b0 <__divdi3+0x280>
   88778:	45ba      	cmp	sl, r7
   8877a:	d919      	bls.n	887b0 <__divdi3+0x280>
   8877c:	3a02      	subs	r2, #2
   8877e:	4467      	add	r7, ip
   88780:	ea42 4501 	orr.w	r5, r2, r1, lsl #16
   88784:	fba5 0100 	umull	r0, r1, r5, r0
   88788:	ebca 0707 	rsb	r7, sl, r7
   8878c:	428f      	cmp	r7, r1
   8878e:	f04f 0300 	mov.w	r3, #0
   88792:	d30a      	bcc.n	887aa <__divdi3+0x27a>
   88794:	d005      	beq.n	887a2 <__divdi3+0x272>
   88796:	462a      	mov	r2, r5
   88798:	e71c      	b.n	885d4 <__divdi3+0xa4>
   8879a:	4662      	mov	r2, ip
   8879c:	e6fd      	b.n	8859a <__divdi3+0x6a>
   8879e:	463b      	mov	r3, r7
   887a0:	e710      	b.n	885c4 <__divdi3+0x94>
   887a2:	fa06 f608 	lsl.w	r6, r6, r8
   887a6:	4286      	cmp	r6, r0
   887a8:	d2f5      	bcs.n	88796 <__divdi3+0x266>
   887aa:	1e6a      	subs	r2, r5, #1
   887ac:	2300      	movs	r3, #0
   887ae:	e711      	b.n	885d4 <__divdi3+0xa4>
   887b0:	461a      	mov	r2, r3
   887b2:	e7e5      	b.n	88780 <__divdi3+0x250>
   887b4:	460b      	mov	r3, r1
   887b6:	e7a0      	b.n	886fa <__divdi3+0x1ca>
   887b8:	4611      	mov	r1, r2
   887ba:	e7cb      	b.n	88754 <__divdi3+0x224>
   887bc:	4690      	mov	r8, r2
   887be:	e787      	b.n	886d0 <__divdi3+0x1a0>
   887c0:	4643      	mov	r3, r8
   887c2:	4642      	mov	r2, r8
   887c4:	e706      	b.n	885d4 <__divdi3+0xa4>
   887c6:	3a02      	subs	r2, #2
   887c8:	e750      	b.n	8866c <__divdi3+0x13c>
   887ca:	3902      	subs	r1, #2
   887cc:	442f      	add	r7, r5
   887ce:	e739      	b.n	88644 <__divdi3+0x114>

000887d0 <__udivdi3>:
   887d0:	e92d 0ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   887d4:	4614      	mov	r4, r2
   887d6:	4605      	mov	r5, r0
   887d8:	460e      	mov	r6, r1
   887da:	2b00      	cmp	r3, #0
   887dc:	d143      	bne.n	88866 <__udivdi3+0x96>
   887de:	428a      	cmp	r2, r1
   887e0:	d953      	bls.n	8888a <__udivdi3+0xba>
   887e2:	fab2 f782 	clz	r7, r2
   887e6:	b157      	cbz	r7, 887fe <__udivdi3+0x2e>
   887e8:	f1c7 0620 	rsb	r6, r7, #32
   887ec:	fa20 f606 	lsr.w	r6, r0, r6
   887f0:	fa01 f307 	lsl.w	r3, r1, r7
   887f4:	fa02 f407 	lsl.w	r4, r2, r7
   887f8:	fa00 f507 	lsl.w	r5, r0, r7
   887fc:	431e      	orrs	r6, r3
   887fe:	0c21      	lsrs	r1, r4, #16
   88800:	fbb6 f2f1 	udiv	r2, r6, r1
   88804:	fb01 6612 	mls	r6, r1, r2, r6
   88808:	b2a0      	uxth	r0, r4
   8880a:	fb00 f302 	mul.w	r3, r0, r2
   8880e:	0c2f      	lsrs	r7, r5, #16
   88810:	ea47 4606 	orr.w	r6, r7, r6, lsl #16
   88814:	42b3      	cmp	r3, r6
   88816:	d909      	bls.n	8882c <__udivdi3+0x5c>
   88818:	1936      	adds	r6, r6, r4
   8881a:	f102 37ff 	add.w	r7, r2, #4294967295
   8881e:	f080 80fd 	bcs.w	88a1c <__udivdi3+0x24c>
   88822:	42b3      	cmp	r3, r6
   88824:	f240 80fa 	bls.w	88a1c <__udivdi3+0x24c>
   88828:	3a02      	subs	r2, #2
   8882a:	4426      	add	r6, r4
   8882c:	1af6      	subs	r6, r6, r3
   8882e:	fbb6 f3f1 	udiv	r3, r6, r1
   88832:	fb01 6113 	mls	r1, r1, r3, r6
   88836:	fb00 f003 	mul.w	r0, r0, r3
   8883a:	b2ad      	uxth	r5, r5
   8883c:	ea45 4101 	orr.w	r1, r5, r1, lsl #16
   88840:	4288      	cmp	r0, r1
   88842:	d908      	bls.n	88856 <__udivdi3+0x86>
   88844:	1909      	adds	r1, r1, r4
   88846:	f103 36ff 	add.w	r6, r3, #4294967295
   8884a:	f080 80e9 	bcs.w	88a20 <__udivdi3+0x250>
   8884e:	4288      	cmp	r0, r1
   88850:	f240 80e6 	bls.w	88a20 <__udivdi3+0x250>
   88854:	3b02      	subs	r3, #2
   88856:	ea43 4202 	orr.w	r2, r3, r2, lsl #16
   8885a:	2300      	movs	r3, #0
   8885c:	4610      	mov	r0, r2
   8885e:	4619      	mov	r1, r3
   88860:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88864:	4770      	bx	lr
   88866:	428b      	cmp	r3, r1
   88868:	d84c      	bhi.n	88904 <__udivdi3+0x134>
   8886a:	fab3 f683 	clz	r6, r3
   8886e:	2e00      	cmp	r6, #0
   88870:	d14f      	bne.n	88912 <__udivdi3+0x142>
   88872:	428b      	cmp	r3, r1
   88874:	d302      	bcc.n	8887c <__udivdi3+0xac>
   88876:	4282      	cmp	r2, r0
   88878:	f200 80dd 	bhi.w	88a36 <__udivdi3+0x266>
   8887c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88880:	2300      	movs	r3, #0
   88882:	2201      	movs	r2, #1
   88884:	4610      	mov	r0, r2
   88886:	4619      	mov	r1, r3
   88888:	4770      	bx	lr
   8888a:	b912      	cbnz	r2, 88892 <__udivdi3+0xc2>
   8888c:	2401      	movs	r4, #1
   8888e:	fbb4 f4f2 	udiv	r4, r4, r2
   88892:	fab4 f284 	clz	r2, r4
   88896:	2a00      	cmp	r2, #0
   88898:	f040 8082 	bne.w	889a0 <__udivdi3+0x1d0>
   8889c:	1b09      	subs	r1, r1, r4
   8889e:	0c26      	lsrs	r6, r4, #16
   888a0:	b2a7      	uxth	r7, r4
   888a2:	2301      	movs	r3, #1
   888a4:	fbb1 f0f6 	udiv	r0, r1, r6
   888a8:	fb06 1110 	mls	r1, r6, r0, r1
   888ac:	fb07 f200 	mul.w	r2, r7, r0
   888b0:	ea4f 4c15 	mov.w	ip, r5, lsr #16
   888b4:	ea4c 4101 	orr.w	r1, ip, r1, lsl #16
   888b8:	428a      	cmp	r2, r1
   888ba:	d907      	bls.n	888cc <__udivdi3+0xfc>
   888bc:	1909      	adds	r1, r1, r4
   888be:	f100 3cff 	add.w	ip, r0, #4294967295
   888c2:	d202      	bcs.n	888ca <__udivdi3+0xfa>
   888c4:	428a      	cmp	r2, r1
   888c6:	f200 80c8 	bhi.w	88a5a <__udivdi3+0x28a>
   888ca:	4660      	mov	r0, ip
   888cc:	1a89      	subs	r1, r1, r2
   888ce:	fbb1 f2f6 	udiv	r2, r1, r6
   888d2:	fb06 1112 	mls	r1, r6, r2, r1
   888d6:	fb07 f702 	mul.w	r7, r7, r2
   888da:	b2ad      	uxth	r5, r5
   888dc:	ea45 4501 	orr.w	r5, r5, r1, lsl #16
   888e0:	42af      	cmp	r7, r5
   888e2:	d908      	bls.n	888f6 <__udivdi3+0x126>
   888e4:	192c      	adds	r4, r5, r4
   888e6:	f102 31ff 	add.w	r1, r2, #4294967295
   888ea:	f080 809b 	bcs.w	88a24 <__udivdi3+0x254>
   888ee:	42a7      	cmp	r7, r4
   888f0:	f240 8098 	bls.w	88a24 <__udivdi3+0x254>
   888f4:	3a02      	subs	r2, #2
   888f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
   888fa:	4610      	mov	r0, r2
   888fc:	4619      	mov	r1, r3
   888fe:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88902:	4770      	bx	lr
   88904:	2300      	movs	r3, #0
   88906:	461a      	mov	r2, r3
   88908:	4610      	mov	r0, r2
   8890a:	4619      	mov	r1, r3
   8890c:	e8bd 0ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp}
   88910:	4770      	bx	lr
   88912:	f1c6 0520 	rsb	r5, r6, #32
   88916:	fa22 f705 	lsr.w	r7, r2, r5
   8891a:	fa03 f406 	lsl.w	r4, r3, r6
   8891e:	fa21 f305 	lsr.w	r3, r1, r5
   88922:	fa01 fb06 	lsl.w	fp, r1, r6
   88926:	fa20 f505 	lsr.w	r5, r0, r5
   8892a:	433c      	orrs	r4, r7
   8892c:	ea4f 4814 	mov.w	r8, r4, lsr #16
   88930:	fbb3 fcf8 	udiv	ip, r3, r8
   88934:	fb08 331c 	mls	r3, r8, ip, r3
   88938:	fa1f f984 	uxth.w	r9, r4
   8893c:	fb09 fa0c 	mul.w	sl, r9, ip
   88940:	ea45 0b0b 	orr.w	fp, r5, fp
   88944:	ea4f 451b 	mov.w	r5, fp, lsr #16
   88948:	ea45 4303 	orr.w	r3, r5, r3, lsl #16
   8894c:	459a      	cmp	sl, r3
   8894e:	fa02 f206 	lsl.w	r2, r2, r6
   88952:	d904      	bls.n	8895e <__udivdi3+0x18e>
   88954:	191b      	adds	r3, r3, r4
   88956:	f10c 35ff 	add.w	r5, ip, #4294967295
   8895a:	d36f      	bcc.n	88a3c <__udivdi3+0x26c>
   8895c:	46ac      	mov	ip, r5
   8895e:	ebca 0303 	rsb	r3, sl, r3
   88962:	fbb3 f5f8 	udiv	r5, r3, r8
   88966:	fb08 3315 	mls	r3, r8, r5, r3
   8896a:	fb09 f905 	mul.w	r9, r9, r5
   8896e:	fa1f fb8b 	uxth.w	fp, fp
   88972:	ea4b 4703 	orr.w	r7, fp, r3, lsl #16
   88976:	45b9      	cmp	r9, r7
   88978:	d904      	bls.n	88984 <__udivdi3+0x1b4>
   8897a:	193f      	adds	r7, r7, r4
   8897c:	f105 33ff 	add.w	r3, r5, #4294967295
   88980:	d362      	bcc.n	88a48 <__udivdi3+0x278>
   88982:	461d      	mov	r5, r3
   88984:	ea45 4c0c 	orr.w	ip, r5, ip, lsl #16
   88988:	fbac 2302 	umull	r2, r3, ip, r2
   8898c:	ebc9 0707 	rsb	r7, r9, r7
   88990:	429f      	cmp	r7, r3
   88992:	f04f 0500 	mov.w	r5, #0
   88996:	d34a      	bcc.n	88a2e <__udivdi3+0x25e>
   88998:	d046      	beq.n	88a28 <__udivdi3+0x258>
   8899a:	4662      	mov	r2, ip
   8899c:	462b      	mov	r3, r5
   8899e:	e75d      	b.n	8885c <__udivdi3+0x8c>
   889a0:	4094      	lsls	r4, r2
   889a2:	f1c2 0920 	rsb	r9, r2, #32
   889a6:	fa21 fc09 	lsr.w	ip, r1, r9
   889aa:	4091      	lsls	r1, r2
   889ac:	fa20 f909 	lsr.w	r9, r0, r9
   889b0:	0c26      	lsrs	r6, r4, #16
   889b2:	fbbc f8f6 	udiv	r8, ip, r6
   889b6:	fb06 cc18 	mls	ip, r6, r8, ip
   889ba:	b2a7      	uxth	r7, r4
   889bc:	fb07 f308 	mul.w	r3, r7, r8
   889c0:	ea49 0901 	orr.w	r9, r9, r1
   889c4:	ea4f 4119 	mov.w	r1, r9, lsr #16
   889c8:	ea41 4c0c 	orr.w	ip, r1, ip, lsl #16
   889cc:	4563      	cmp	r3, ip
   889ce:	fa00 f502 	lsl.w	r5, r0, r2
   889d2:	d909      	bls.n	889e8 <__udivdi3+0x218>
   889d4:	eb1c 0c04 	adds.w	ip, ip, r4
   889d8:	f108 32ff 	add.w	r2, r8, #4294967295
   889dc:	d23b      	bcs.n	88a56 <__udivdi3+0x286>
   889de:	4563      	cmp	r3, ip
   889e0:	d939      	bls.n	88a56 <__udivdi3+0x286>
   889e2:	f1a8 0802 	sub.w	r8, r8, #2
   889e6:	44a4      	add	ip, r4
   889e8:	ebc3 0c0c 	rsb	ip, r3, ip
   889ec:	fbbc f3f6 	udiv	r3, ip, r6
   889f0:	fb06 c113 	mls	r1, r6, r3, ip
   889f4:	fb07 f203 	mul.w	r2, r7, r3
   889f8:	fa1f f989 	uxth.w	r9, r9
   889fc:	ea49 4101 	orr.w	r1, r9, r1, lsl #16
   88a00:	428a      	cmp	r2, r1
   88a02:	d907      	bls.n	88a14 <__udivdi3+0x244>
   88a04:	1909      	adds	r1, r1, r4
   88a06:	f103 30ff 	add.w	r0, r3, #4294967295
   88a0a:	d222      	bcs.n	88a52 <__udivdi3+0x282>
   88a0c:	428a      	cmp	r2, r1
   88a0e:	d920      	bls.n	88a52 <__udivdi3+0x282>
   88a10:	3b02      	subs	r3, #2
   88a12:	4421      	add	r1, r4
   88a14:	1a89      	subs	r1, r1, r2
   88a16:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
   88a1a:	e743      	b.n	888a4 <__udivdi3+0xd4>
   88a1c:	463a      	mov	r2, r7
   88a1e:	e705      	b.n	8882c <__udivdi3+0x5c>
   88a20:	4633      	mov	r3, r6
   88a22:	e718      	b.n	88856 <__udivdi3+0x86>
   88a24:	460a      	mov	r2, r1
   88a26:	e766      	b.n	888f6 <__udivdi3+0x126>
   88a28:	40b0      	lsls	r0, r6
   88a2a:	4290      	cmp	r0, r2
   88a2c:	d2b5      	bcs.n	8899a <__udivdi3+0x1ca>
   88a2e:	f10c 32ff 	add.w	r2, ip, #4294967295
   88a32:	2300      	movs	r3, #0
   88a34:	e712      	b.n	8885c <__udivdi3+0x8c>
   88a36:	4633      	mov	r3, r6
   88a38:	4632      	mov	r2, r6
   88a3a:	e70f      	b.n	8885c <__udivdi3+0x8c>
   88a3c:	459a      	cmp	sl, r3
   88a3e:	d98d      	bls.n	8895c <__udivdi3+0x18c>
   88a40:	f1ac 0c02 	sub.w	ip, ip, #2
   88a44:	4423      	add	r3, r4
   88a46:	e78a      	b.n	8895e <__udivdi3+0x18e>
   88a48:	45b9      	cmp	r9, r7
   88a4a:	d99a      	bls.n	88982 <__udivdi3+0x1b2>
   88a4c:	3d02      	subs	r5, #2
   88a4e:	4427      	add	r7, r4
   88a50:	e798      	b.n	88984 <__udivdi3+0x1b4>
   88a52:	4603      	mov	r3, r0
   88a54:	e7de      	b.n	88a14 <__udivdi3+0x244>
   88a56:	4690      	mov	r8, r2
   88a58:	e7c6      	b.n	889e8 <__udivdi3+0x218>
   88a5a:	3802      	subs	r0, #2
   88a5c:	4421      	add	r1, r4
   88a5e:	e735      	b.n	888cc <__udivdi3+0xfc>
   88a60:	00006425 	.word	0x00006425
   88a64:	25203a31 	.word	0x25203a31
   88a68:	00000a73 	.word	0x00000a73
   88a6c:	09097325 	.word	0x09097325
   88a70:	25096325 	.word	0x25096325
   88a74:	75250975 	.word	0x75250975
   88a78:	0d752509 	.word	0x0d752509
   88a7c:	0000000a 	.word	0x0000000a
   88a80:	454c4449 	.word	0x454c4449
   88a84:	00000000 	.word	0x00000000
   88a88:	00000a0d 	.word	0x00000a0d
   88a8c:	20726d54 	.word	0x20726d54
   88a90:	00637653 	.word	0x00637653
   88a94:	000a7325 	.word	0x000a7325
   88a98:	6b736174 	.word	0x6b736174
   88a9c:	6d75645f 	.word	0x6d75645f
   88aa0:	0031796d 	.word	0x0031796d
   88aa4:	6b736174 	.word	0x6b736174
   88aa8:	6d75645f 	.word	0x6d75645f
   88aac:	0032796d 	.word	0x0032796d
   88ab0:	6b736174 	.word	0x6b736174
   88ab4:	7261755f 	.word	0x7261755f
   88ab8:	00000074 	.word	0x00000074
   88abc:	00000043 	.word	0x00000043

00088ac0 <_global_impure_ptr>:
   88ac0:	20070150                                P.. 

00088ac4 <zeroes.6763>:
   88ac4:	30303030 30303030 30303030 30303030     0000000000000000
   88ad4:	00464e49 00666e69 004e414e 006e616e     INF.inf.NAN.nan.
   88ae4:	33323130 37363534 42413938 46454443     0123456789ABCDEF
   88af4:	00000000 33323130 37363534 62613938     ....0123456789ab
   88b04:	66656463 00000000 6c756e28 0000296c     cdef....(null)..
   88b14:	00000030                                0...

00088b18 <blanks.6762>:
   88b18:	20202020 20202020 20202020 20202020                     

00088b28 <zeroes.6721>:
   88b28:	30303030 30303030 30303030 30303030     0000000000000000

00088b38 <blanks.6720>:
   88b38:	20202020 20202020 20202020 20202020                     
   88b48:	69666e49 7974696e 00000000 004e614e     Infinity....NaN.
   88b58:	49534f50 00000058 0000002e 00000000     POSIX...........

00088b68 <__mprec_tens>:
   88b68:	00000000 3ff00000 00000000 40240000     .......?......$@
   88b78:	00000000 40590000 00000000 408f4000     ......Y@.....@.@
   88b88:	00000000 40c38800 00000000 40f86a00     .......@.....j.@
   88b98:	00000000 412e8480 00000000 416312d0     .......A......cA
   88ba8:	00000000 4197d784 00000000 41cdcd65     .......A....e..A
   88bb8:	20000000 4202a05f e8000000 42374876     ... _..B....vH7B
   88bc8:	a2000000 426d1a94 e5400000 42a2309c     ......mB..@..0.B
   88bd8:	1e900000 42d6bcc4 26340000 430c6bf5     .......B..4&.k.C
   88be8:	37e08000 4341c379 85d8a000 43763457     ...7y.AC....W4vC
   88bf8:	674ec800 43abc16d 60913d00 43e158e4     ..Ngm..C.=.`.X.C
   88c08:	78b58c40 4415af1d d6e2ef50 444b1ae4     @..x...DP.....KD
   88c18:	064dd592 4480f0cf c7e14af6 44b52d02     ..M....D.J...-.D
   88c28:	79d99db4 44ea7843                       ...yCx.D

00088c30 <__mprec_bigtens>:
   88c30:	37e08000 4341c379 b5056e17 4693b8b5     ...7y.AC.n.....F
   88c40:	e93ff9f5 4d384f03 f9301d32 5a827748     ..?..O8M2.0.Hw.Z
   88c50:	7f73bf3c 75154fdd                       <.s..O.u

00088c58 <p05.5269>:
   88c58:	00000005 00000019 0000007d              ........}...

00088c64 <_init>:
   88c64:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88c66:	bf00      	nop
   88c68:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88c6a:	bc08      	pop	{r3}
   88c6c:	469e      	mov	lr, r3
   88c6e:	4770      	bx	lr

00088c70 <__init_array_start>:
   88c70:	00084c11 	.word	0x00084c11

00088c74 <__frame_dummy_init_array_entry>:
   88c74:	00080119                                ....

00088c78 <_fini>:
   88c78:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   88c7a:	bf00      	nop
   88c7c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   88c7e:	bc08      	pop	{r3}
   88c80:	469e      	mov	lr, r3
   88c82:	4770      	bx	lr

00088c84 <__fini_array_start>:
   88c84:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <portable_delay_cycles>:
RAMFUNC
void portable_delay_cycles(unsigned long n)
{
	UNUSED(n);

	__asm (
20070000:	f3bf 8f5f 	dmb	sy
20070004:	3801      	subs	r0, #1
20070006:	d1fb      	bne.n	20070000 <portable_delay_cycles>
20070008:	4770      	bx	lr
2007000a:	bf00      	nop

2007000c <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007000c:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070010:	4a20      	ldr	r2, [pc, #128]	; (20070094 <SystemInit+0x88>)
20070012:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070014:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070018:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007001a:	4b1f      	ldr	r3, [pc, #124]	; (20070098 <SystemInit+0x8c>)
2007001c:	6a1b      	ldr	r3, [r3, #32]
2007001e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070022:	d107      	bne.n	20070034 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070024:	4a1d      	ldr	r2, [pc, #116]	; (2007009c <SystemInit+0x90>)
20070026:	4b1c      	ldr	r3, [pc, #112]	; (20070098 <SystemInit+0x8c>)
20070028:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007002a:	461a      	mov	r2, r3
2007002c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007002e:	f013 0f01 	tst.w	r3, #1
20070032:	d0fb      	beq.n	2007002c <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070034:	4a1a      	ldr	r2, [pc, #104]	; (200700a0 <SystemInit+0x94>)
20070036:	4b18      	ldr	r3, [pc, #96]	; (20070098 <SystemInit+0x8c>)
20070038:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007003a:	461a      	mov	r2, r3
2007003c:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007003e:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070042:	d0fb      	beq.n	2007003c <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070044:	4b14      	ldr	r3, [pc, #80]	; (20070098 <SystemInit+0x8c>)
20070046:	6b1a      	ldr	r2, [r3, #48]	; 0x30
20070048:	f022 0203 	bic.w	r2, r2, #3
2007004c:	f042 0201 	orr.w	r2, r2, #1
20070050:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070052:	461a      	mov	r2, r3
20070054:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070056:	f013 0f08 	tst.w	r3, #8
2007005a:	d0fb      	beq.n	20070054 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
2007005c:	4a11      	ldr	r2, [pc, #68]	; (200700a4 <SystemInit+0x98>)
2007005e:	4b0e      	ldr	r3, [pc, #56]	; (20070098 <SystemInit+0x8c>)
20070060:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070062:	461a      	mov	r2, r3
20070064:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070066:	f013 0f02 	tst.w	r3, #2
2007006a:	d0fb      	beq.n	20070064 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
2007006c:	2211      	movs	r2, #17
2007006e:	4b0a      	ldr	r3, [pc, #40]	; (20070098 <SystemInit+0x8c>)
20070070:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070072:	461a      	mov	r2, r3
20070074:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070076:	f013 0f08 	tst.w	r3, #8
2007007a:	d0fb      	beq.n	20070074 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
2007007c:	2212      	movs	r2, #18
2007007e:	4b06      	ldr	r3, [pc, #24]	; (20070098 <SystemInit+0x8c>)
20070080:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070082:	461a      	mov	r2, r3
20070084:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070086:	f013 0f08 	tst.w	r3, #8
2007008a:	d0fb      	beq.n	20070084 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
2007008c:	4a06      	ldr	r2, [pc, #24]	; (200700a8 <SystemInit+0x9c>)
2007008e:	4b07      	ldr	r3, [pc, #28]	; (200700ac <SystemInit+0xa0>)
20070090:	601a      	str	r2, [r3, #0]
20070092:	4770      	bx	lr
20070094:	400e0a00 	.word	0x400e0a00
20070098:	400e0600 	.word	0x400e0600
2007009c:	00370809 	.word	0x00370809
200700a0:	01370809 	.word	0x01370809
200700a4:	200d3f01 	.word	0x200d3f01
200700a8:	0501bd00 	.word	0x0501bd00
200700ac:	2007013c 	.word	0x2007013c

200700b0 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700b0:	4b1b      	ldr	r3, [pc, #108]	; (20070120 <system_init_flash+0x70>)
200700b2:	4298      	cmp	r0, r3
200700b4:	d806      	bhi.n	200700c4 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700b6:	2300      	movs	r3, #0
200700b8:	4a1a      	ldr	r2, [pc, #104]	; (20070124 <system_init_flash+0x74>)
200700ba:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700bc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700c0:	6013      	str	r3, [r2, #0]
200700c2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700c4:	4b18      	ldr	r3, [pc, #96]	; (20070128 <system_init_flash+0x78>)
200700c6:	4298      	cmp	r0, r3
200700c8:	d807      	bhi.n	200700da <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700ca:	f44f 7380 	mov.w	r3, #256	; 0x100
200700ce:	4a15      	ldr	r2, [pc, #84]	; (20070124 <system_init_flash+0x74>)
200700d0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700d2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700d6:	6013      	str	r3, [r2, #0]
200700d8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700da:	4b14      	ldr	r3, [pc, #80]	; (2007012c <system_init_flash+0x7c>)
200700dc:	4298      	cmp	r0, r3
200700de:	d807      	bhi.n	200700f0 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700e0:	f44f 7300 	mov.w	r3, #512	; 0x200
200700e4:	4a0f      	ldr	r2, [pc, #60]	; (20070124 <system_init_flash+0x74>)
200700e6:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700e8:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ec:	6013      	str	r3, [r2, #0]
200700ee:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700f0:	4b0f      	ldr	r3, [pc, #60]	; (20070130 <system_init_flash+0x80>)
200700f2:	4298      	cmp	r0, r3
200700f4:	d807      	bhi.n	20070106 <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700f6:	f44f 7340 	mov.w	r3, #768	; 0x300
200700fa:	4a0a      	ldr	r2, [pc, #40]	; (20070124 <system_init_flash+0x74>)
200700fc:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700fe:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070102:	6013      	str	r3, [r2, #0]
20070104:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
20070106:	4b0b      	ldr	r3, [pc, #44]	; (20070134 <system_init_flash+0x84>)
20070108:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
2007010a:	bf94      	ite	ls
2007010c:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070110:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070114:	4a03      	ldr	r2, [pc, #12]	; (20070124 <system_init_flash+0x74>)
20070116:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
20070118:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007011c:	6013      	str	r3, [r2, #0]
2007011e:	4770      	bx	lr
20070120:	0121eabf 	.word	0x0121eabf
20070124:	400e0a00 	.word	0x400e0a00
20070128:	02faf07f 	.word	0x02faf07f
2007012c:	03d08fff 	.word	0x03d08fff
20070130:	04c4b3ff 	.word	0x04c4b3ff
20070134:	055d4a7f 	.word	0x055d4a7f

20070138 <g_interrupt_enabled>:
20070138:	00000001                                ....

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <uxCriticalNesting>:
20070140:	aaaaaaaa                                ....

20070144 <xFreeBytesRemaining>:
20070144:	0000a000                                ....

20070148 <xNextTaskUnblockTime>:
20070148:	ffffffff 00000000                       ........

20070150 <impure_data>:
20070150:	00000000 2007043c 200704a4 2007050c     ....<.. ... ... 
	...
20070184:	00088abc 00000000 00000000 00000000     ................
	...
200701f8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070208:	0005deec 0000000b 00000000 00000000     ................
	...

20070578 <_impure_ptr>:
20070578:	20070150                                P.. 

2007057c <lconv>:
2007057c:	00088b60 00088a84 00088a84 00088a84     `...............
2007058c:	00088a84 00088a84 00088a84 00088a84     ................
2007059c:	00088a84 00088a84 ffffffff ffffffff     ................
200705ac:	ffffffff 0000ffff                       ........

200705b4 <lc_ctype_charset>:
200705b4:	49435341 00000049 00000000 00000000     ASCII...........
	...

200705d4 <__mb_cur_max>:
200705d4:	00000001                                ....

200705d8 <__malloc_av_>:
	...
200705e0:	200705d8 200705d8 200705e0 200705e0     ... ... ... ... 
200705f0:	200705e8 200705e8 200705f0 200705f0     ... ... ... ... 
20070600:	200705f8 200705f8 20070600 20070600     ... ... ... ... 
20070610:	20070608 20070608 20070610 20070610     ... ... ... ... 
20070620:	20070618 20070618 20070620 20070620     ... ...  ..  .. 
20070630:	20070628 20070628 20070630 20070630     (.. (.. 0.. 0.. 
20070640:	20070638 20070638 20070640 20070640     8.. 8.. @.. @.. 
20070650:	20070648 20070648 20070650 20070650     H.. H.. P.. P.. 
20070660:	20070658 20070658 20070660 20070660     X.. X.. `.. `.. 
20070670:	20070668 20070668 20070670 20070670     h.. h.. p.. p.. 
20070680:	20070678 20070678 20070680 20070680     x.. x.. ... ... 
20070690:	20070688 20070688 20070690 20070690     ... ... ... ... 
200706a0:	20070698 20070698 200706a0 200706a0     ... ... ... ... 
200706b0:	200706a8 200706a8 200706b0 200706b0     ... ... ... ... 
200706c0:	200706b8 200706b8 200706c0 200706c0     ... ... ... ... 
200706d0:	200706c8 200706c8 200706d0 200706d0     ... ... ... ... 
200706e0:	200706d8 200706d8 200706e0 200706e0     ... ... ... ... 
200706f0:	200706e8 200706e8 200706f0 200706f0     ... ... ... ... 
20070700:	200706f8 200706f8 20070700 20070700     ... ... ... ... 
20070710:	20070708 20070708 20070710 20070710     ... ... ... ... 
20070720:	20070718 20070718 20070720 20070720     ... ...  ..  .. 
20070730:	20070728 20070728 20070730 20070730     (.. (.. 0.. 0.. 
20070740:	20070738 20070738 20070740 20070740     8.. 8.. @.. @.. 
20070750:	20070748 20070748 20070750 20070750     H.. H.. P.. P.. 
20070760:	20070758 20070758 20070760 20070760     X.. X.. `.. `.. 
20070770:	20070768 20070768 20070770 20070770     h.. h.. p.. p.. 
20070780:	20070778 20070778 20070780 20070780     x.. x.. ... ... 
20070790:	20070788 20070788 20070790 20070790     ... ... ... ... 
200707a0:	20070798 20070798 200707a0 200707a0     ... ... ... ... 
200707b0:	200707a8 200707a8 200707b0 200707b0     ... ... ... ... 
200707c0:	200707b8 200707b8 200707c0 200707c0     ... ... ... ... 
200707d0:	200707c8 200707c8 200707d0 200707d0     ... ... ... ... 
200707e0:	200707d8 200707d8 200707e0 200707e0     ... ... ... ... 
200707f0:	200707e8 200707e8 200707f0 200707f0     ... ... ... ... 
20070800:	200707f8 200707f8 20070800 20070800     ... ... ... ... 
20070810:	20070808 20070808 20070810 20070810     ... ... ... ... 
20070820:	20070818 20070818 20070820 20070820     ... ...  ..  .. 
20070830:	20070828 20070828 20070830 20070830     (.. (.. 0.. 0.. 
20070840:	20070838 20070838 20070840 20070840     8.. 8.. @.. @.. 
20070850:	20070848 20070848 20070850 20070850     H.. H.. P.. P.. 
20070860:	20070858 20070858 20070860 20070860     X.. X.. `.. `.. 
20070870:	20070868 20070868 20070870 20070870     h.. h.. p.. p.. 
20070880:	20070878 20070878 20070880 20070880     x.. x.. ... ... 
20070890:	20070888 20070888 20070890 20070890     ... ... ... ... 
200708a0:	20070898 20070898 200708a0 200708a0     ... ... ... ... 
200708b0:	200708a8 200708a8 200708b0 200708b0     ... ... ... ... 
200708c0:	200708b8 200708b8 200708c0 200708c0     ... ... ... ... 
200708d0:	200708c8 200708c8 200708d0 200708d0     ... ... ... ... 
200708e0:	200708d8 200708d8 200708e0 200708e0     ... ... ... ... 
200708f0:	200708e8 200708e8 200708f0 200708f0     ... ... ... ... 
20070900:	200708f8 200708f8 20070900 20070900     ... ... ... ... 
20070910:	20070908 20070908 20070910 20070910     ... ... ... ... 
20070920:	20070918 20070918 20070920 20070920     ... ...  ..  .. 
20070930:	20070928 20070928 20070930 20070930     (.. (.. 0.. 0.. 
20070940:	20070938 20070938 20070940 20070940     8.. 8.. @.. @.. 
20070950:	20070948 20070948 20070950 20070950     H.. H.. P.. P.. 
20070960:	20070958 20070958 20070960 20070960     X.. X.. `.. `.. 
20070970:	20070968 20070968 20070970 20070970     h.. h.. p.. p.. 
20070980:	20070978 20070978 20070980 20070980     x.. x.. ... ... 
20070990:	20070988 20070988 20070990 20070990     ... ... ... ... 
200709a0:	20070998 20070998 200709a0 200709a0     ... ... ... ... 
200709b0:	200709a8 200709a8 200709b0 200709b0     ... ... ... ... 
200709c0:	200709b8 200709b8 200709c0 200709c0     ... ... ... ... 
200709d0:	200709c8 200709c8 200709d0 200709d0     ... ... ... ... 

200709e0 <__malloc_trim_threshold>:
200709e0:	00020000                                ....

200709e4 <__malloc_sbrk_base>:
200709e4:	ffffffff                                ....

200709e8 <__wctomb>:
200709e8:	00087911                                .y..
