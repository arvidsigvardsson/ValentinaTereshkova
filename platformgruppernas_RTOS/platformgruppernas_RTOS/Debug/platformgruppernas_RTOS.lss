
platformgruppernas_RTOS.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         000031e0  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000588  20070000  000831e0  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000a29c  20070588  00083768  00010588  2**3
                  ALLOC
  3 .stack        00002004  2007a824  0008da04  00010588  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010588  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  000105b1  2**0
                  CONTENTS, READONLY
  6 .debug_info   0000f212  00000000  00000000  0001060c  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002e56  00000000  00000000  0001f81e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00008415  00000000  00000000  00022674  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000d88  00000000  00000000  0002aa89  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000cb0  00000000  00000000  0002b811  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  0001a015  00000000  00000000  0002c4c1  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00013b3b  00000000  00000000  000464d6  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00067138  00000000  00000000  0005a011  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00001f70  00000000  00000000  000c114c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	2007c828 	.word	0x2007c828
   80004:	00081525 	.word	0x00081525
   80008:	00081521 	.word	0x00081521
   8000c:	00081521 	.word	0x00081521
   80010:	00081521 	.word	0x00081521
   80014:	00081521 	.word	0x00081521
   80018:	00081521 	.word	0x00081521
	...
   8002c:	000817c1 	.word	0x000817c1
   80030:	00081521 	.word	0x00081521
   80034:	00000000 	.word	0x00000000
   80038:	0008183d 	.word	0x0008183d
   8003c:	00081879 	.word	0x00081879
   80040:	00081521 	.word	0x00081521
   80044:	00081521 	.word	0x00081521
   80048:	00081521 	.word	0x00081521
   8004c:	00081521 	.word	0x00081521
   80050:	00081521 	.word	0x00081521
   80054:	00081521 	.word	0x00081521
   80058:	00081521 	.word	0x00081521
   8005c:	00081521 	.word	0x00081521
   80060:	00080431 	.word	0x00080431
   80064:	00081521 	.word	0x00081521
   80068:	00000000 	.word	0x00000000
   8006c:	000811fd 	.word	0x000811fd
   80070:	00081211 	.word	0x00081211
   80074:	00081225 	.word	0x00081225
   80078:	00081239 	.word	0x00081239
	...
   80084:	00080f19 	.word	0x00080f19
   80088:	00080f29 	.word	0x00080f29
   8008c:	00080f39 	.word	0x00080f39
   80090:	00080f49 	.word	0x00080f49
   80094:	00081521 	.word	0x00081521
   80098:	00081521 	.word	0x00081521
   8009c:	00081521 	.word	0x00081521
   800a0:	00081521 	.word	0x00081521
   800a4:	00000000 	.word	0x00000000
   800a8:	00081521 	.word	0x00081521
   800ac:	00081521 	.word	0x00081521
   800b0:	00081521 	.word	0x00081521
   800b4:	00081521 	.word	0x00081521
   800b8:	00081521 	.word	0x00081521
   800bc:	00081521 	.word	0x00081521
   800c0:	00081521 	.word	0x00081521
   800c4:	00081521 	.word	0x00081521
   800c8:	00081521 	.word	0x00081521
   800cc:	00081521 	.word	0x00081521
   800d0:	00081521 	.word	0x00081521
   800d4:	00081521 	.word	0x00081521
   800d8:	00081521 	.word	0x00081521
   800dc:	00081521 	.word	0x00081521
   800e0:	00081521 	.word	0x00081521
   800e4:	00081521 	.word	0x00081521
   800e8:	00081521 	.word	0x00081521
   800ec:	00081521 	.word	0x00081521
   800f0:	00081521 	.word	0x00081521

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070588 	.word	0x20070588
   80110:	00000000 	.word	0x00000000
   80114:	000831e0 	.word	0x000831e0

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	000831e0 	.word	0x000831e0
   8013c:	2007058c 	.word	0x2007058c
   80140:	000831e0 	.word	0x000831e0
   80144:	00000000 	.word	0x00000000

00080148 <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t uart_index,
		enum buffer_operations operation_performed)
{
   80148:	b570      	push	{r4, r5, r6, lr}
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);
   8014a:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   8014e:	4b1f      	ldr	r3, [pc, #124]	; (801cc <configure_rx_dma+0x84>)
   80150:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   80154:	699c      	ldr	r4, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
   80156:	689a      	ldr	r2, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   80158:	4294      	cmp	r4, r2
   8015a:	d10a      	bne.n	80172 <configure_rx_dma+0x2a>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
   8015c:	b929      	cbnz	r1, 8016a <configure_rx_dma+0x22>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
   8015e:	2200      	movs	r2, #0
   80160:	60da      	str	r2, [r3, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
   80162:	685b      	ldr	r3, [r3, #4]
   80164:	429c      	cmp	r4, r3
   80166:	d929      	bls.n	801bc <configure_rx_dma+0x74>
   80168:	e010      	b.n	8018c <configure_rx_dma+0x44>
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   8016a:	6859      	ldr	r1, [r3, #4]
   8016c:	1b09      	subs	r1, r1, r4
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   8016e:	60d9      	str	r1, [r3, #12]
   80170:	e007      	b.n	80182 <configure_rx_dma+0x3a>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
   80172:	4294      	cmp	r4, r2
   80174:	d902      	bls.n	8017c <configure_rx_dma+0x34>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   80176:	1aa4      	subs	r4, r4, r2
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   80178:	60dc      	str	r4, [r3, #12]
   8017a:	e002      	b.n	80182 <configure_rx_dma+0x3a>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   8017c:	6859      	ldr	r1, [r3, #4]
   8017e:	1a89      	subs	r1, r1, r2
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   80180:	60d9      	str	r1, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr+
   80182:	68d9      	ldr	r1, [r3, #12]
   80184:	440a      	add	r2, r1
   80186:	685c      	ldr	r4, [r3, #4]
   80188:	42a2      	cmp	r2, r4
   8018a:	d903      	bls.n	80194 <configure_rx_dma+0x4c>
   8018c:	4b10      	ldr	r3, [pc, #64]	; (801d0 <configure_rx_dma+0x88>)
   8018e:	4798      	blx	r3
   80190:	bf00      	nop
   80192:	e7fd      	b.n	80190 <configure_rx_dma+0x48>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
   80194:	b191      	cbz	r1, 801bc <configure_rx_dma+0x74>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
   80196:	4d0f      	ldr	r5, [pc, #60]	; (801d4 <configure_rx_dma+0x8c>)
   80198:	0104      	lsls	r4, r0, #4
   8019a:	192a      	adds	r2, r5, r4
   8019c:	6856      	ldr	r6, [r2, #4]
   8019e:	4630      	mov	r0, r6
   801a0:	f103 0108 	add.w	r1, r3, #8
   801a4:	2200      	movs	r2, #0
   801a6:	4b0c      	ldr	r3, [pc, #48]	; (801d8 <configure_rx_dma+0x90>)
   801a8:	4798      	blx	r3
				all_uart_definitions[uart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
   801aa:	4630      	mov	r0, r6
   801ac:	2101      	movs	r1, #1
   801ae:	4b0b      	ldr	r3, [pc, #44]	; (801dc <configure_rx_dma+0x94>)
   801b0:	4798      	blx	r3
				all_uart_definitions[uart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		uart_enable_interrupt(
   801b2:	5928      	ldr	r0, [r5, r4]
   801b4:	2109      	movs	r1, #9
   801b6:	4b0a      	ldr	r3, [pc, #40]	; (801e0 <configure_rx_dma+0x98>)
   801b8:	4798      	blx	r3
   801ba:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		uart_disable_interrupt(
				all_uart_definitions[uart_index].peripheral_base_address,
   801bc:	0100      	lsls	r0, r0, #4
				UART_IER_ENDRX | UART_IER_RXRDY);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		uart_disable_interrupt(
   801be:	4b05      	ldr	r3, [pc, #20]	; (801d4 <configure_rx_dma+0x8c>)
   801c0:	5818      	ldr	r0, [r3, r0]
   801c2:	2109      	movs	r1, #9
   801c4:	4b07      	ldr	r3, [pc, #28]	; (801e4 <configure_rx_dma+0x9c>)
   801c6:	4798      	blx	r3
   801c8:	bd70      	pop	{r4, r5, r6, pc}
   801ca:	bf00      	nop
   801cc:	200705a4 	.word	0x200705a4
   801d0:	000817f1 	.word	0x000817f1
   801d4:	000830e8 	.word	0x000830e8
   801d8:	00080ff9 	.word	0x00080ff9
   801dc:	00081011 	.word	0x00081011
   801e0:	000813e5 	.word	0x000813e5
   801e4:	000813e9 	.word	0x000813e9

000801e8 <freertos_uart_serial_init>:
 *     the initialisation fails then NULL is returned.
 */
freertos_uart_if freertos_uart_serial_init(Uart *p_uart,
		const sam_uart_opt_t *const uart_parameters,
		const freertos_peripheral_options_t *const freertos_driver_parameters)
{
   801e8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   801ec:	b082      	sub	sp, #8
   801ee:	4605      	mov	r5, r0
   801f0:	4689      	mov	r9, r1
   801f2:	4616      	mov	r6, r2
	portBASE_TYPE uart_index;
	bool is_valid_operating_mode;
	freertos_uart_if return_value;
	const enum peripheral_operation_mode valid_operating_modes[] = {UART_RS232};
   801f4:	2701      	movs	r7, #1
   801f6:	f10d 0808 	add.w	r8, sp, #8
   801fa:	f808 7d04 	strb.w	r7, [r8, #-4]!

	/* Find the index into the all_uart_definitions array that holds details of
	the p_uart peripheral. */
	uart_index = get_pdc_peripheral_details(all_uart_definitions,
   801fe:	4856      	ldr	r0, [pc, #344]	; (80358 <freertos_uart_serial_init+0x170>)
   80200:	4639      	mov	r1, r7
   80202:	462a      	mov	r2, r5
   80204:	4b55      	ldr	r3, [pc, #340]	; (8035c <freertos_uart_serial_init+0x174>)
   80206:	4798      	blx	r3
   80208:	4604      	mov	r4, r0
			MAX_UARTS,
			(void *) p_uart);

	/* Check the requested operating mode is valid for the peripheral. */
	is_valid_operating_mode = check_requested_operating_mode(
   8020a:	7b30      	ldrb	r0, [r6, #12]
   8020c:	4641      	mov	r1, r8
   8020e:	463a      	mov	r2, r7
   80210:	4b53      	ldr	r3, [pc, #332]	; (80360 <freertos_uart_serial_init+0x178>)
   80212:	4798      	blx	r3
			sizeof(valid_operating_modes) /
			sizeof(enum peripheral_operation_mode));

	/* Don't do anything unless a valid p_uart pointer was used, and a valid
	operating mode was requested. */
	if ((uart_index < MAX_UARTS) && (is_valid_operating_mode == true)) {
   80214:	2c00      	cmp	r4, #0
   80216:	f300 8098 	bgt.w	8034a <freertos_uart_serial_init+0x162>
   8021a:	2800      	cmp	r0, #0
   8021c:	f000 8097 	beq.w	8034e <freertos_uart_serial_init+0x166>
		/* This function must be called exactly once per supported UART.  Check it
		has not been called	before. */
		configASSERT(rx_buffer_definitions[uart_index].next_byte_to_read == NULL);
   80220:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80224:	4b4f      	ldr	r3, [pc, #316]	; (80364 <freertos_uart_serial_init+0x17c>)
   80226:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   8022a:	699b      	ldr	r3, [r3, #24]
   8022c:	b11b      	cbz	r3, 80236 <freertos_uart_serial_init+0x4e>
   8022e:	4b4e      	ldr	r3, [pc, #312]	; (80368 <freertos_uart_serial_init+0x180>)
   80230:	4798      	blx	r3
   80232:	bf00      	nop
   80234:	e7fd      	b.n	80232 <freertos_uart_serial_init+0x4a>

		/* Disable everything before enabling the clock. */
		uart_disable_tx(p_uart);
   80236:	4628      	mov	r0, r5
   80238:	4b4c      	ldr	r3, [pc, #304]	; (8036c <freertos_uart_serial_init+0x184>)
   8023a:	4798      	blx	r3
		uart_disable_rx(p_uart);
   8023c:	4628      	mov	r0, r5
   8023e:	4b4c      	ldr	r3, [pc, #304]	; (80370 <freertos_uart_serial_init+0x188>)
   80240:	4798      	blx	r3
		pdc_disable_transfer(all_uart_definitions[uart_index].pdc_base_address,
   80242:	4f45      	ldr	r7, [pc, #276]	; (80358 <freertos_uart_serial_init+0x170>)
   80244:	eb07 1704 	add.w	r7, r7, r4, lsl #4
   80248:	f8d7 8004 	ldr.w	r8, [r7, #4]
   8024c:	4640      	mov	r0, r8
   8024e:	f240 2102 	movw	r1, #514	; 0x202
   80252:	4b48      	ldr	r3, [pc, #288]	; (80374 <freertos_uart_serial_init+0x18c>)
   80254:	4798      	blx	r3
				(PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS));

		/* Enable the peripheral clock in the PMC. */
		pmc_enable_periph_clk(
   80256:	68b8      	ldr	r0, [r7, #8]
   80258:	4b47      	ldr	r3, [pc, #284]	; (80378 <freertos_uart_serial_init+0x190>)
   8025a:	4798      	blx	r3
				all_uart_definitions[uart_index].peripheral_id);

		switch (freertos_driver_parameters->operation_mode) {
   8025c:	7b33      	ldrb	r3, [r6, #12]
   8025e:	2b01      	cmp	r3, #1
   80260:	d103      	bne.n	8026a <freertos_uart_serial_init+0x82>
		case UART_RS232:
			/* Call the standard ASF init function. */
			uart_init(p_uart, uart_parameters);
   80262:	4628      	mov	r0, r5
   80264:	4649      	mov	r1, r9
   80266:	4b45      	ldr	r3, [pc, #276]	; (8037c <freertos_uart_serial_init+0x194>)
   80268:	4798      	blx	r3
			/* Other modes are not currently supported. */
			break;
		}

		/* Disable all the interrupts. */
		uart_disable_interrupt(p_uart, MASK_ALL_INTERRUPTS);
   8026a:	4628      	mov	r0, r5
   8026c:	f04f 31ff 	mov.w	r1, #4294967295
   80270:	4b43      	ldr	r3, [pc, #268]	; (80380 <freertos_uart_serial_init+0x198>)
   80272:	4798      	blx	r3

		/* Create any required peripheral access mutexes and transaction complete
		semaphores.  This peripheral is full duplex so only the Tx semaphores
		are created in the following function.  The the Rx semaphores are
		created	separately. */
		create_peripheral_control_semaphores(
   80274:	7b70      	ldrb	r0, [r6, #13]
   80276:	4943      	ldr	r1, [pc, #268]	; (80384 <freertos_uart_serial_init+0x19c>)
   80278:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   8027c:	2200      	movs	r2, #0
   8027e:	4b42      	ldr	r3, [pc, #264]	; (80388 <freertos_uart_serial_init+0x1a0>)
   80280:	4798      	blx	r3
				freertos_driver_parameters->options_flags,
				&(tx_dma_control[uart_index]),
				NULL /* The rx structures are not created in this function. */);

		/* Is the driver also going to receive? */
		if (freertos_driver_parameters->receive_buffer != NULL) {
   80282:	6833      	ldr	r3, [r6, #0]
   80284:	2b00      	cmp	r3, #0
   80286:	d046      	beq.n	80316 <freertos_uart_serial_init+0x12e>
			capped to that available up to the end of the buffer only.  If this
			semaphore was a binary semaphore, it would then be 'taken' even
			though, unknown to the reading task, unread and therefore available
			data remained at the beginning of the buffer. */
			rx_buffer_definitions[uart_index].rx_event_semaphore =
					xSemaphoreCreateCounting(portMAX_DELAY, 0);
   80288:	f04f 30ff 	mov.w	r0, #4294967295
   8028c:	2100      	movs	r1, #0
   8028e:	4b3f      	ldr	r3, [pc, #252]	; (8038c <freertos_uart_serial_init+0x1a4>)
   80290:	4798      	blx	r3
			and the end of the buffer, the actual amount returned will be
			capped to that available up to the end of the buffer only.  If this
			semaphore was a binary semaphore, it would then be 'taken' even
			though, unknown to the reading task, unread and therefore available
			data remained at the beginning of the buffer. */
			rx_buffer_definitions[uart_index].rx_event_semaphore =
   80292:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80296:	4b33      	ldr	r3, [pc, #204]	; (80364 <freertos_uart_serial_init+0x17c>)
   80298:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   8029c:	6118      	str	r0, [r3, #16]
					xSemaphoreCreateCounting(portMAX_DELAY, 0);
			configASSERT(rx_buffer_definitions[uart_index].rx_event_semaphore);
   8029e:	b918      	cbnz	r0, 802a8 <freertos_uart_serial_init+0xc0>
   802a0:	4b31      	ldr	r3, [pc, #196]	; (80368 <freertos_uart_serial_init+0x180>)
   802a2:	4798      	blx	r3
   802a4:	bf00      	nop
   802a6:	e7fd      	b.n	802a4 <freertos_uart_serial_init+0xbc>

			/* The receive buffer is currently empty, so the DMA has control
			over the entire buffer. */
			rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_addr =
   802a8:	f8df 90b8 	ldr.w	r9, [pc, #184]	; 80364 <freertos_uart_serial_init+0x17c>
   802ac:	00e3      	lsls	r3, r4, #3
   802ae:	ebc4 0a03 	rsb	sl, r4, r3
   802b2:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   802b6:	eb09 070a 	add.w	r7, r9, sl
   802ba:	6832      	ldr	r2, [r6, #0]
   802bc:	60ba      	str	r2, [r7, #8]
					(uint32_t)freertos_driver_parameters->receive_buffer;
			rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_size =
					freertos_driver_parameters->receive_buffer_size;
   802be:	6872      	ldr	r2, [r6, #4]

			/* The receive buffer is currently empty, so the DMA has control
			over the entire buffer. */
			rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_addr =
					(uint32_t)freertos_driver_parameters->receive_buffer;
			rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_size =
   802c0:	60fa      	str	r2, [r7, #12]
					freertos_driver_parameters->receive_buffer_size;
			pdc_rx_init(
   802c2:	1b1b      	subs	r3, r3, r4
   802c4:	eb09 0183 	add.w	r1, r9, r3, lsl #2
   802c8:	4640      	mov	r0, r8
   802ca:	3108      	adds	r1, #8
   802cc:	2200      	movs	r2, #0
   802ce:	4b30      	ldr	r3, [pc, #192]	; (80390 <freertos_uart_serial_init+0x1a8>)
   802d0:	4798      	blx	r3
					NULL);

			/* Set the next byte to read to the start of the buffer as no data
			has yet been read. */
			rx_buffer_definitions[uart_index].next_byte_to_read =
					freertos_driver_parameters->receive_buffer;
   802d2:	6833      	ldr	r3, [r6, #0]
					&(rx_buffer_definitions[uart_index].rx_pdc_parameters),
					NULL);

			/* Set the next byte to read to the start of the buffer as no data
			has yet been read. */
			rx_buffer_definitions[uart_index].next_byte_to_read =
   802d4:	61bb      	str	r3, [r7, #24]
					freertos_driver_parameters->receive_buffer;

			/* Remember the limits of entire buffer. */
			rx_buffer_definitions[uart_index].rx_buffer_start_address =
					rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_addr;
   802d6:	68bb      	ldr	r3, [r7, #8]
			has yet been read. */
			rx_buffer_definitions[uart_index].next_byte_to_read =
					freertos_driver_parameters->receive_buffer;

			/* Remember the limits of entire buffer. */
			rx_buffer_definitions[uart_index].rx_buffer_start_address =
   802d8:	f849 300a 	str.w	r3, [r9, sl]
					rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_addr;
			rx_buffer_definitions[uart_index].past_rx_buffer_end_address =
					rx_buffer_definitions[uart_index].rx_buffer_start_address +
   802dc:	6872      	ldr	r2, [r6, #4]
   802de:	4413      	add	r3, r2
					freertos_driver_parameters->receive_buffer;

			/* Remember the limits of entire buffer. */
			rx_buffer_definitions[uart_index].rx_buffer_start_address =
					rx_buffer_definitions[uart_index].rx_pdc_parameters.ul_addr;
			rx_buffer_definitions[uart_index].past_rx_buffer_end_address =
   802e0:	607b      	str	r3, [r7, #4]
					rx_buffer_definitions[uart_index].rx_buffer_start_address +
					freertos_driver_parameters->receive_buffer_size;

			/* If the rx driver is to be thread aware, create an access control
			mutex. */
			if ((freertos_driver_parameters->options_flags &
   802e2:	7b73      	ldrb	r3, [r6, #13]
   802e4:	f013 0f02 	tst.w	r3, #2
   802e8:	d00c      	beq.n	80304 <freertos_uart_serial_init+0x11c>
					USE_RX_ACCESS_MUTEX) != 0) {
				rx_buffer_definitions[uart_index].rx_access_mutex =
					xSemaphoreCreateMutex();
   802ea:	2001      	movs	r0, #1
   802ec:	4b29      	ldr	r3, [pc, #164]	; (80394 <freertos_uart_serial_init+0x1ac>)
   802ee:	4798      	blx	r3

			/* If the rx driver is to be thread aware, create an access control
			mutex. */
			if ((freertos_driver_parameters->options_flags &
					USE_RX_ACCESS_MUTEX) != 0) {
				rx_buffer_definitions[uart_index].rx_access_mutex =
   802f0:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   802f4:	eb09 0382 	add.w	r3, r9, r2, lsl #2
   802f8:	6158      	str	r0, [r3, #20]
					xSemaphoreCreateMutex();
				configASSERT(rx_buffer_definitions[uart_index].rx_access_mutex);
   802fa:	b918      	cbnz	r0, 80304 <freertos_uart_serial_init+0x11c>
   802fc:	4b1a      	ldr	r3, [pc, #104]	; (80368 <freertos_uart_serial_init+0x180>)
   802fe:	4798      	blx	r3
   80300:	bf00      	nop
   80302:	e7fd      	b.n	80300 <freertos_uart_serial_init+0x118>
			}

			/* Catch the DMA running out of Rx space, and gaps in the
			reception.  These events are both used to signal that there is
			data available in the Rx buffer. */
			uart_enable_interrupt(p_uart, UART_IER_ENDRX | UART_IER_RXRDY);
   80304:	4628      	mov	r0, r5
   80306:	2109      	movs	r1, #9
   80308:	4b23      	ldr	r3, [pc, #140]	; (80398 <freertos_uart_serial_init+0x1b0>)
   8030a:	4798      	blx	r3

			/* The Rx DMA is running all the time, so enable it now. */
			pdc_enable_transfer(
   8030c:	4640      	mov	r0, r8
   8030e:	2101      	movs	r1, #1
   80310:	4b22      	ldr	r3, [pc, #136]	; (8039c <freertos_uart_serial_init+0x1b4>)
   80312:	4798      	blx	r3
   80314:	e006      	b.n	80324 <freertos_uart_serial_init+0x13c>
		} else {
			/* next_byte_to_read is used to check to see if this function
			has been called before, so it must be set to something, even if
			it is not going to be used.  The value it is set to is not
			important, provided it is not zero (NULL). */
			rx_buffer_definitions[uart_index].next_byte_to_read = RX_NOT_USED;
   80316:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   8031a:	4b12      	ldr	r3, [pc, #72]	; (80364 <freertos_uart_serial_init+0x17c>)
   8031c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80320:	2201      	movs	r2, #1
   80322:	619a      	str	r2, [r3, #24]
		}

		/* Configure and enable the UART interrupt in the interrupt controller. */
		configure_interrupt_controller(all_uart_definitions[uart_index].peripheral_irq,
   80324:	4f0c      	ldr	r7, [pc, #48]	; (80358 <freertos_uart_serial_init+0x170>)
   80326:	0124      	lsls	r4, r4, #4
   80328:	193b      	adds	r3, r7, r4
   8032a:	f993 000c 	ldrsb.w	r0, [r3, #12]
   8032e:	68b1      	ldr	r1, [r6, #8]
   80330:	4b1b      	ldr	r3, [pc, #108]	; (803a0 <freertos_uart_serial_init+0x1b8>)
   80332:	4798      	blx	r3
				freertos_driver_parameters->interrupt_priority);

		/* Error interrupts are always enabled. */
		uart_enable_interrupt(
   80334:	5938      	ldr	r0, [r7, r4]
   80336:	21e0      	movs	r1, #224	; 0xe0
   80338:	4b17      	ldr	r3, [pc, #92]	; (80398 <freertos_uart_serial_init+0x1b0>)
   8033a:	4798      	blx	r3
				all_uart_definitions[uart_index].peripheral_base_address,
				IER_ERROR_INTERRUPTS);

		/* Finally, enable the receiver and transmitter. */
		uart_enable_tx(p_uart);
   8033c:	4628      	mov	r0, r5
   8033e:	4b19      	ldr	r3, [pc, #100]	; (803a4 <freertos_uart_serial_init+0x1bc>)
   80340:	4798      	blx	r3
		uart_enable_rx(p_uart);
   80342:	4628      	mov	r0, r5
   80344:	4b18      	ldr	r3, [pc, #96]	; (803a8 <freertos_uart_serial_init+0x1c0>)
   80346:	4798      	blx	r3

		return_value = (freertos_uart_if) p_uart;
   80348:	e002      	b.n	80350 <freertos_uart_serial_init+0x168>
	} else {
		return_value = NULL;
   8034a:	2500      	movs	r5, #0
   8034c:	e000      	b.n	80350 <freertos_uart_serial_init+0x168>
   8034e:	2500      	movs	r5, #0
	}

	return return_value;
}
   80350:	4628      	mov	r0, r5
   80352:	b002      	add	sp, #8
   80354:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80358:	000830e8 	.word	0x000830e8
   8035c:	00080691 	.word	0x00080691
   80360:	000806bd 	.word	0x000806bd
   80364:	200705a4 	.word	0x200705a4
   80368:	000817f1 	.word	0x000817f1
   8036c:	000813cd 	.word	0x000813cd
   80370:	000813dd 	.word	0x000813dd
   80374:	0008101d 	.word	0x0008101d
   80378:	00081335 	.word	0x00081335
   8037c:	0008138d 	.word	0x0008138d
   80380:	000813e9 	.word	0x000813e9
   80384:	200705c0 	.word	0x200705c0
   80388:	000806ed 	.word	0x000806ed
   8038c:	00081c31 	.word	0x00081c31
   80390:	00080ff9 	.word	0x00080ff9
   80394:	00081d75 	.word	0x00081d75
   80398:	000813e5 	.word	0x000813e5
   8039c:	00081011 	.word	0x00081011
   803a0:	00080799 	.word	0x00080799
   803a4:	000813c5 	.word	0x000813c5
   803a8:	000813d5 	.word	0x000813d5

000803ac <freertos_uart_write_packet_async>:
 *     operation.
 */
status_code_t freertos_uart_write_packet_async(freertos_uart_if p_uart,
		const uint8_t *data, size_t len, portTickType block_time_ticks,
		xSemaphoreHandle notification_semaphore)
{
   803ac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   803b0:	b084      	sub	sp, #16
   803b2:	4604      	mov	r4, r0
   803b4:	4688      	mov	r8, r1
   803b6:	4617      	mov	r7, r2
   803b8:	9303      	str	r3, [sp, #12]
	status_code_t return_value;
	portBASE_TYPE uart_index;
	Uart *uart_base;

	uart_base = (Uart *) p_uart;
	uart_index = get_pdc_peripheral_details(all_uart_definitions,
   803ba:	4816      	ldr	r0, [pc, #88]	; (80414 <freertos_uart_write_packet_async+0x68>)
   803bc:	2101      	movs	r1, #1
   803be:	4622      	mov	r2, r4
   803c0:	4b15      	ldr	r3, [pc, #84]	; (80418 <freertos_uart_write_packet_async+0x6c>)
   803c2:	4798      	blx	r3
			MAX_UARTS,
			(void *) uart_base);

	/* Don't do anything unless a valid UART pointer was used. */
	if (uart_index < MAX_UARTS) {
   803c4:	1e06      	subs	r6, r0, #0
   803c6:	dc20      	bgt.n	8040a <freertos_uart_write_packet_async+0x5e>
		return_value = freertos_obtain_peripheral_access_mutex(
   803c8:	4d14      	ldr	r5, [pc, #80]	; (8041c <freertos_uart_write_packet_async+0x70>)
   803ca:	eb05 05c6 	add.w	r5, r5, r6, lsl #3
   803ce:	4628      	mov	r0, r5
   803d0:	a903      	add	r1, sp, #12
   803d2:	4b13      	ldr	r3, [pc, #76]	; (80420 <freertos_uart_write_packet_async+0x74>)
   803d4:	4798      	blx	r3
				&(tx_dma_control[uart_index]),
				&block_time_ticks);

		if (return_value == STATUS_OK) {
   803d6:	4603      	mov	r3, r0
   803d8:	b9c0      	cbnz	r0, 8040c <freertos_uart_write_packet_async+0x60>
			freertos_start_pdc_tx(&(tx_dma_control[uart_index]),
   803da:	4b0e      	ldr	r3, [pc, #56]	; (80414 <freertos_uart_write_packet_async+0x68>)
   803dc:	eb03 1606 	add.w	r6, r3, r6, lsl #4
   803e0:	6873      	ldr	r3, [r6, #4]
   803e2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   803e4:	9200      	str	r2, [sp, #0]
   803e6:	2201      	movs	r2, #1
   803e8:	9201      	str	r2, [sp, #4]
   803ea:	4628      	mov	r0, r5
   803ec:	4641      	mov	r1, r8
   803ee:	463a      	mov	r2, r7
   803f0:	4e0c      	ldr	r6, [pc, #48]	; (80424 <freertos_uart_write_packet_async+0x78>)
   803f2:	47b0      	blx	r6
			/* Catch the end of transmission so the access mutex can be
			returned, and the task notified (if it supplied a notification
			semaphore).  The interrupt can be enabled here because the ENDTX
			signal from the PDC to the UART will have been de-asserted when
			the next transfer was configured. */
			uart_enable_interrupt(uart_base, UART_IER_ENDTX);
   803f4:	4620      	mov	r0, r4
   803f6:	2110      	movs	r1, #16
   803f8:	4b0b      	ldr	r3, [pc, #44]	; (80428 <freertos_uart_write_packet_async+0x7c>)
   803fa:	4798      	blx	r3

			return_value = freertos_optionally_wait_transfer_completion(
   803fc:	4628      	mov	r0, r5
   803fe:	990a      	ldr	r1, [sp, #40]	; 0x28
   80400:	9a03      	ldr	r2, [sp, #12]
   80402:	4b0a      	ldr	r3, [pc, #40]	; (8042c <freertos_uart_write_packet_async+0x80>)
   80404:	4798      	blx	r3
   80406:	4603      	mov	r3, r0
   80408:	e000      	b.n	8040c <freertos_uart_write_packet_async+0x60>
					&(tx_dma_control[uart_index]),
					notification_semaphore,
					block_time_ticks);
		}
	} else {
		return_value = ERR_INVALID_ARG;
   8040a:	23f8      	movs	r3, #248	; 0xf8
	}

	return return_value;
}
   8040c:	b258      	sxtb	r0, r3
   8040e:	b004      	add	sp, #16
   80410:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80414:	000830e8 	.word	0x000830e8
   80418:	00080691 	.word	0x00080691
   8041c:	200705c0 	.word	0x200705c0
   80420:	00080885 	.word	0x00080885
   80424:	000808d5 	.word	0x000808d5
   80428:	000813e5 	.word	0x000813e5
   8042c:	00080955 	.word	0x00080955

00080430 <UART_Handler>:
 */

#ifdef UART

void UART_Handler(void)
{
   80430:	b530      	push	{r4, r5, lr}
   80432:	b083      	sub	sp, #12
 * For internal use only.
 * A common UART interrupt handler that is called for all UART peripherals.
 */
static void local_uart_handler(const portBASE_TYPE uart_index)
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
   80434:	2300      	movs	r3, #0
   80436:	9301      	str	r3, [sp, #4]
	uint32_t uart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	uart_status = uart_get_status(
   80438:	4d32      	ldr	r5, [pc, #200]	; (80504 <UART_Handler+0xd4>)
   8043a:	4628      	mov	r0, r5
   8043c:	4b32      	ldr	r3, [pc, #200]	; (80508 <UART_Handler+0xd8>)
   8043e:	4798      	blx	r3
   80440:	4604      	mov	r4, r0
			all_uart_definitions[uart_index].peripheral_base_address);
	uart_status &= uart_get_interrupt_mask(
   80442:	4628      	mov	r0, r5
   80444:	4b31      	ldr	r3, [pc, #196]	; (8050c <UART_Handler+0xdc>)
   80446:	4798      	blx	r3
   80448:	4004      	ands	r4, r0
			all_uart_definitions[uart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[uart_index]);

	/* Has the PDC completed a transmission? */
	if ((uart_status & UART_SR_ENDTX) != 0UL) {
   8044a:	f014 0f10 	tst.w	r4, #16
   8044e:	d013      	beq.n	80478 <UART_Handler+0x48>
		uart_disable_interrupt(
   80450:	4628      	mov	r0, r5
   80452:	2110      	movs	r1, #16
   80454:	4b2e      	ldr	r3, [pc, #184]	; (80510 <UART_Handler+0xe0>)
   80456:	4798      	blx	r3
				all_uart_definitions[uart_index].peripheral_base_address,
				UART_IDR_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[uart_index].peripheral_access_mutex != NULL) {
   80458:	4b2e      	ldr	r3, [pc, #184]	; (80514 <UART_Handler+0xe4>)
   8045a:	6858      	ldr	r0, [r3, #4]
   8045c:	b120      	cbz	r0, 80468 <UART_Handler+0x38>
			xSemaphoreGiveFromISR(
   8045e:	2100      	movs	r1, #0
   80460:	aa01      	add	r2, sp, #4
   80462:	460b      	mov	r3, r1
   80464:	4d2c      	ldr	r5, [pc, #176]	; (80518 <UART_Handler+0xe8>)
   80466:	47a8      	blx	r5
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[uart_index].transaction_complete_notification_semaphore != NULL) {
   80468:	4b2a      	ldr	r3, [pc, #168]	; (80514 <UART_Handler+0xe4>)
   8046a:	6818      	ldr	r0, [r3, #0]
   8046c:	b120      	cbz	r0, 80478 <UART_Handler+0x48>
			xSemaphoreGiveFromISR(
   8046e:	2100      	movs	r1, #0
   80470:	aa01      	add	r2, sp, #4
   80472:	460b      	mov	r3, r1
   80474:	4d28      	ldr	r5, [pc, #160]	; (80518 <UART_Handler+0xe8>)
   80476:	47a8      	blx	r5
					tx_dma_control[uart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((uart_status & UART_SR_ENDRX) != 0UL) {
   80478:	f014 0f08 	tst.w	r4, #8
   8047c:	d023      	beq.n	804c6 <UART_Handler+0x96>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
   8047e:	4b27      	ldr	r3, [pc, #156]	; (8051c <UART_Handler+0xec>)
   80480:	699b      	ldr	r3, [r3, #24]
   80482:	b91b      	cbnz	r3, 8048c <UART_Handler+0x5c>
   80484:	4b26      	ldr	r3, [pc, #152]	; (80520 <UART_Handler+0xf0>)
   80486:	4798      	blx	r3
   80488:	bf00      	nop
   8048a:	e7fd      	b.n	80488 <UART_Handler+0x58>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   8048c:	2b01      	cmp	r3, #1
   8048e:	d103      	bne.n	80498 <UART_Handler+0x68>
   80490:	4b23      	ldr	r3, [pc, #140]	; (80520 <UART_Handler+0xf0>)
   80492:	4798      	blx	r3
   80494:	bf00      	nop
   80496:	e7fd      	b.n	80494 <UART_Handler+0x64>

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
				rx_buffer_definition->rx_pdc_parameters.ul_size;
   80498:	4b20      	ldr	r3, [pc, #128]	; (8051c <UART_Handler+0xec>)
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
   8049a:	68d9      	ldr	r1, [r3, #12]
   8049c:	689a      	ldr	r2, [r3, #8]
   8049e:	440a      	add	r2, r1
   804a0:	609a      	str	r2, [r3, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
   804a2:	685b      	ldr	r3, [r3, #4]
   804a4:	429a      	cmp	r2, r3
   804a6:	d302      	bcc.n	804ae <UART_Handler+0x7e>
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
   804a8:	4b1c      	ldr	r3, [pc, #112]	; (8051c <UART_Handler+0xec>)
   804aa:	681a      	ldr	r2, [r3, #0]
   804ac:	609a      	str	r2, [r3, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(uart_index, data_added);
   804ae:	2000      	movs	r0, #0
   804b0:	4601      	mov	r1, r0
   804b2:	4b1c      	ldr	r3, [pc, #112]	; (80524 <UART_Handler+0xf4>)
   804b4:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   804b6:	4b19      	ldr	r3, [pc, #100]	; (8051c <UART_Handler+0xec>)
   804b8:	6918      	ldr	r0, [r3, #16]
   804ba:	b120      	cbz	r0, 804c6 <UART_Handler+0x96>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
   804bc:	2100      	movs	r1, #0
   804be:	aa01      	add	r2, sp, #4
   804c0:	460b      	mov	r3, r1
   804c2:	4d15      	ldr	r5, [pc, #84]	; (80518 <UART_Handler+0xe8>)
   804c4:	47a8      	blx	r5
	 * It happened only when in PDC mode with TXRDY and RXRDY interrupts since
	 * the flags has been cleared by PDC.
	 * As the TXRDY is never enabled in this service, here we
	 * check the RXRDY interrupt case.
	 */
	if (uart_status == 0UL) {
   804c6:	b944      	cbnz	r4, 804da <UART_Handler+0xaa>
		/* Character has been placed into the Rx buffer. */
		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   804c8:	4b14      	ldr	r3, [pc, #80]	; (8051c <UART_Handler+0xec>)
   804ca:	6918      	ldr	r0, [r3, #16]
   804cc:	b198      	cbz	r0, 804f6 <UART_Handler+0xc6>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
   804ce:	2100      	movs	r1, #0
   804d0:	aa01      	add	r2, sp, #4
   804d2:	460b      	mov	r3, r1
   804d4:	4c10      	ldr	r4, [pc, #64]	; (80518 <UART_Handler+0xe8>)
   804d6:	47a0      	blx	r4
   804d8:	e00d      	b.n	804f6 <UART_Handler+0xc6>
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((uart_status & SR_ERROR_INTERRUPTS) != 0) {
   804da:	f014 0fe0 	tst.w	r4, #224	; 0xe0
   804de:	d00a      	beq.n	804f6 <UART_Handler+0xc6>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		uart_reset_status(
   804e0:	4808      	ldr	r0, [pc, #32]	; (80504 <UART_Handler+0xd4>)
   804e2:	4b11      	ldr	r3, [pc, #68]	; (80528 <UART_Handler+0xf8>)
   804e4:	4798      	blx	r3
				all_uart_definitions[uart_index].peripheral_base_address);
		if (tx_dma_control[uart_index].peripheral_access_mutex != NULL) {
   804e6:	4b0b      	ldr	r3, [pc, #44]	; (80514 <UART_Handler+0xe4>)
   804e8:	6858      	ldr	r0, [r3, #4]
   804ea:	b120      	cbz	r0, 804f6 <UART_Handler+0xc6>
			xSemaphoreGiveFromISR(
   804ec:	2100      	movs	r1, #0
   804ee:	aa01      	add	r2, sp, #4
   804f0:	460b      	mov	r3, r1
   804f2:	4c09      	ldr	r4, [pc, #36]	; (80518 <UART_Handler+0xe8>)
   804f4:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   804f6:	9b01      	ldr	r3, [sp, #4]
   804f8:	b10b      	cbz	r3, 804fe <UART_Handler+0xce>
   804fa:	4b0c      	ldr	r3, [pc, #48]	; (8052c <UART_Handler+0xfc>)
   804fc:	4798      	blx	r3
#ifdef UART

void UART_Handler(void)
{
	local_uart_handler(0);
}
   804fe:	b003      	add	sp, #12
   80500:	bd30      	pop	{r4, r5, pc}
   80502:	bf00      	nop
   80504:	400e0800 	.word	0x400e0800
   80508:	000813f1 	.word	0x000813f1
   8050c:	000813ed 	.word	0x000813ed
   80510:	000813e9 	.word	0x000813e9
   80514:	200705c0 	.word	0x200705c0
   80518:	00081dd9 	.word	0x00081dd9
   8051c:	200705a4 	.word	0x200705a4
   80520:	000817f1 	.word	0x000817f1
   80524:	00080149 	.word	0x00080149
   80528:	000813f5 	.word	0x000813f5
   8052c:	000817e1 	.word	0x000817e1

00080530 <task_dummy1>:
#include "asf.h"
#include "dummyTask1.h"


void task_dummy1(void *pvParameters)
{
   80530:	b570      	push	{r4, r5, r6, lr}
   80532:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	
	xLastWakeTime = xTaskGetTickCount();
   80534:	4b05      	ldr	r3, [pc, #20]	; (8054c <task_dummy1+0x1c>)
   80536:	4798      	blx	r3
   80538:	ac02      	add	r4, sp, #8
   8053a:	f844 0d04 	str.w	r0, [r4, #-4]!
	
	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   8053e:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   80542:	4d03      	ldr	r5, [pc, #12]	; (80550 <task_dummy1+0x20>)
   80544:	4620      	mov	r0, r4
   80546:	4631      	mov	r1, r6
   80548:	47a8      	blx	r5
   8054a:	e7fb      	b.n	80544 <task_dummy1+0x14>
   8054c:	000822e9 	.word	0x000822e9
   80550:	00082531 	.word	0x00082531

00080554 <task_dummy2>:
#include "asf.h"
#include "dummyTask2.h"


void task_dummy2(void *pvParameters)
{
   80554:	b570      	push	{r4, r5, r6, lr}
   80556:	b082      	sub	sp, #8
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	
	xLastWakeTime = xTaskGetTickCount();
   80558:	4b05      	ldr	r3, [pc, #20]	; (80570 <task_dummy2+0x1c>)
   8055a:	4798      	blx	r3
   8055c:	ac02      	add	r4, sp, #8
   8055e:	f844 0d04 	str.w	r0, [r4, #-4]!
	
	while(1)
	{
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   80562:	f44f 76fa 	mov.w	r6, #500	; 0x1f4
   80566:	4d03      	ldr	r5, [pc, #12]	; (80574 <task_dummy2+0x20>)
   80568:	4620      	mov	r0, r4
   8056a:	4631      	mov	r1, r6
   8056c:	47a8      	blx	r5
   8056e:	e7fb      	b.n	80568 <task_dummy2+0x14>
   80570:	000822e9 	.word	0x000822e9
   80574:	00082531 	.word	0x00082531

00080578 <task_uart>:
#include "task1.h"
#include "usb_print.h"


void task_uart(freertos_usart_if *pvParameters)
{
   80578:	b5f0      	push	{r4, r5, r6, r7, lr}
   8057a:	b089      	sub	sp, #36	; 0x24
   8057c:	4604      	mov	r4, r0
	
	const char req[] = "request!";
   8057e:	4a12      	ldr	r2, [pc, #72]	; (805c8 <task_uart+0x50>)
   80580:	ab05      	add	r3, sp, #20
   80582:	ca07      	ldmia	r2, {r0, r1, r2}
   80584:	c303      	stmia	r3!, {r0, r1}
   80586:	701a      	strb	r2, [r3, #0]
	const char ok[] = "okx";
	portTickType xLastWakeTime;
	const portTickType xTimeIncrement = 500;
	freertos_usart_if *freertos_usart = *pvParameters;
   80588:	6824      	ldr	r4, [r4, #0]
	xLastWakeTime = xTaskGetTickCount();
   8058a:	4b10      	ldr	r3, [pc, #64]	; (805cc <task_uart+0x54>)
   8058c:	4798      	blx	r3
   8058e:	9004      	str	r0, [sp, #16]
	uint8_t rx[8];
	
	while(1)
	{
		freertos_usart_serial_read_packet(freertos_usart, &rx, 8, 10);
   80590:	4d0f      	ldr	r5, [pc, #60]	; (805d0 <task_uart+0x58>)
		if (rx[1] == 200)
		{
			print(&rx, 8);
		}
		else {
			freertos_usart_write_packet(freertos_usart, (const uint8_t*)req, sizeof(req) - 1, 0);
   80592:	4e10      	ldr	r6, [pc, #64]	; (805d4 <task_uart+0x5c>)
	while(1)
	{
		freertos_usart_serial_read_packet(freertos_usart, &rx, 8, 10);
		if (rx[1] == 200)
		{
			print(&rx, 8);
   80594:	4f10      	ldr	r7, [pc, #64]	; (805d8 <task_uart+0x60>)
	xLastWakeTime = xTaskGetTickCount();
	uint8_t rx[8];
	
	while(1)
	{
		freertos_usart_serial_read_packet(freertos_usart, &rx, 8, 10);
   80596:	4620      	mov	r0, r4
   80598:	a902      	add	r1, sp, #8
   8059a:	2208      	movs	r2, #8
   8059c:	230a      	movs	r3, #10
   8059e:	47a8      	blx	r5
		if (rx[1] == 200)
   805a0:	f89d 3009 	ldrb.w	r3, [sp, #9]
   805a4:	2bc8      	cmp	r3, #200	; 0xc8
   805a6:	d103      	bne.n	805b0 <task_uart+0x38>
		{
			print(&rx, 8);
   805a8:	a802      	add	r0, sp, #8
   805aa:	2108      	movs	r1, #8
   805ac:	47b8      	blx	r7
   805ae:	e005      	b.n	805bc <task_uart+0x44>
		}
		else {
			freertos_usart_write_packet(freertos_usart, (const uint8_t*)req, sizeof(req) - 1, 0);
   805b0:	2300      	movs	r3, #0
   805b2:	9300      	str	r3, [sp, #0]
   805b4:	4620      	mov	r0, r4
   805b6:	a905      	add	r1, sp, #20
   805b8:	2208      	movs	r2, #8
   805ba:	47b0      	blx	r6
		}
		vTaskDelayUntil(&xLastWakeTime, xTimeIncrement);
   805bc:	a804      	add	r0, sp, #16
   805be:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
   805c2:	4b06      	ldr	r3, [pc, #24]	; (805dc <task_uart+0x64>)
   805c4:	4798      	blx	r3
	}
   805c6:	e7e6      	b.n	80596 <task_uart+0x1e>
   805c8:	000830f8 	.word	0x000830f8
   805cc:	000822e9 	.word	0x000822e9
   805d0:	00080dc1 	.word	0x00080dc1
   805d4:	00080d39 	.word	0x00080d39
   805d8:	00080609 	.word	0x00080609
   805dc:	00082531 	.word	0x00082531

000805e0 <init>:
	0 // Only used in IrDA mode, so all values are ignored.
};
// Call the UART specific FreeRTOS ASF driver initialization function,
// storing the return value as the driver handle.

void init(void) {
   805e0:	b508      	push	{r3, lr}
	freertos_uart = freertos_uart_serial_init(CONF_UART_CONSOLE, &uart_settings,
   805e2:	4804      	ldr	r0, [pc, #16]	; (805f4 <init+0x14>)
   805e4:	4904      	ldr	r1, [pc, #16]	; (805f8 <init+0x18>)
   805e6:	4a05      	ldr	r2, [pc, #20]	; (805fc <init+0x1c>)
   805e8:	4b05      	ldr	r3, [pc, #20]	; (80600 <init+0x20>)
   805ea:	4798      	blx	r3
   805ec:	4b05      	ldr	r3, [pc, #20]	; (80604 <init+0x24>)
   805ee:	6018      	str	r0, [r3, #0]
   805f0:	bd08      	pop	{r3, pc}
   805f2:	bf00      	nop
   805f4:	400e0800 	.word	0x400e0800
   805f8:	00083104 	.word	0x00083104
   805fc:	2007012c 	.word	0x2007012c
   80600:	000801e9 	.word	0x000801e9
   80604:	2007a814 	.word	0x2007a814

00080608 <print>:
	&driver_options_uart);
}


void print(char *p_mess, uint8_t len) {
   80608:	b510      	push	{r4, lr}
   8060a:	b082      	sub	sp, #8
   8060c:	4604      	mov	r4, r0
   8060e:	460a      	mov	r2, r1
	freertos_uart_write_packet(freertos_uart, p_mess, len, 0);
   80610:	4b04      	ldr	r3, [pc, #16]	; (80624 <print+0x1c>)
   80612:	6818      	ldr	r0, [r3, #0]
   80614:	2300      	movs	r3, #0
   80616:	9300      	str	r3, [sp, #0]
   80618:	4621      	mov	r1, r4
   8061a:	4c03      	ldr	r4, [pc, #12]	; (80628 <print+0x20>)
   8061c:	47a0      	blx	r4
   8061e:	b002      	add	sp, #8
   80620:	bd10      	pop	{r4, pc}
   80622:	bf00      	nop
   80624:	2007a814 	.word	0x2007a814
   80628:	000803ad 	.word	0x000803ad

0008062c <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   8062c:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8062e:	480e      	ldr	r0, [pc, #56]	; (80668 <sysclk_init+0x3c>)
   80630:	4b0e      	ldr	r3, [pc, #56]	; (8066c <sysclk_init+0x40>)
   80632:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80634:	2000      	movs	r0, #0
   80636:	213e      	movs	r1, #62	; 0x3e
   80638:	4b0d      	ldr	r3, [pc, #52]	; (80670 <sysclk_init+0x44>)
   8063a:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   8063c:	4c0d      	ldr	r4, [pc, #52]	; (80674 <sysclk_init+0x48>)
   8063e:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   80640:	2800      	cmp	r0, #0
   80642:	d0fc      	beq.n	8063e <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80644:	4b0c      	ldr	r3, [pc, #48]	; (80678 <sysclk_init+0x4c>)
   80646:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80648:	4a0c      	ldr	r2, [pc, #48]	; (8067c <sysclk_init+0x50>)
   8064a:	4b0d      	ldr	r3, [pc, #52]	; (80680 <sysclk_init+0x54>)
   8064c:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8064e:	4c0d      	ldr	r4, [pc, #52]	; (80684 <sysclk_init+0x58>)
   80650:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   80652:	2800      	cmp	r0, #0
   80654:	d0fc      	beq.n	80650 <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80656:	2010      	movs	r0, #16
   80658:	4b0b      	ldr	r3, [pc, #44]	; (80688 <sysclk_init+0x5c>)
   8065a:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   8065c:	4b0b      	ldr	r3, [pc, #44]	; (8068c <sysclk_init+0x60>)
   8065e:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   80660:	4801      	ldr	r0, [pc, #4]	; (80668 <sysclk_init+0x3c>)
   80662:	4b02      	ldr	r3, [pc, #8]	; (8066c <sysclk_init+0x40>)
   80664:	4798      	blx	r3
   80666:	bd10      	pop	{r4, pc}
   80668:	0501bd00 	.word	0x0501bd00
   8066c:	200700a5 	.word	0x200700a5
   80670:	000812b1 	.word	0x000812b1
   80674:	00081305 	.word	0x00081305
   80678:	00081315 	.word	0x00081315
   8067c:	200d3f01 	.word	0x200d3f01
   80680:	400e0600 	.word	0x400e0600
   80684:	00081325 	.word	0x00081325
   80688:	0008124d 	.word	0x0008124d
   8068c:	000815d5 	.word	0x000815d5

00080690 <get_pdc_peripheral_details>:
 * peripheral that has the start address specified by peripheral_to_find.
 */
portBASE_TYPE get_pdc_peripheral_details(
		const freertos_pdc_peripheral_parameters_t peripheral_array[],
		size_t array_size, void *peripheral_to_find)
{
   80690:	b430      	push	{r4, r5}
	size_t x;

	for (x = 0; x < array_size; x++) {
   80692:	460d      	mov	r5, r1
   80694:	b169      	cbz	r1, 806b2 <get_pdc_peripheral_details+0x22>
		if (peripheral_array[x].peripheral_base_address ==
   80696:	6803      	ldr	r3, [r0, #0]
   80698:	4293      	cmp	r3, r2
   8069a:	d00c      	beq.n	806b6 <get_pdc_peripheral_details+0x26>
   8069c:	4603      	mov	r3, r0
		const freertos_pdc_peripheral_parameters_t peripheral_array[],
		size_t array_size, void *peripheral_to_find)
{
	size_t x;

	for (x = 0; x < array_size; x++) {
   8069e:	2000      	movs	r0, #0
   806a0:	e003      	b.n	806aa <get_pdc_peripheral_details+0x1a>
		if (peripheral_array[x].peripheral_base_address ==
   806a2:	f853 4f10 	ldr.w	r4, [r3, #16]!
   806a6:	4294      	cmp	r4, r2
   806a8:	d006      	beq.n	806b8 <get_pdc_peripheral_details+0x28>
		const freertos_pdc_peripheral_parameters_t peripheral_array[],
		size_t array_size, void *peripheral_to_find)
{
	size_t x;

	for (x = 0; x < array_size; x++) {
   806aa:	3001      	adds	r0, #1
   806ac:	42a8      	cmp	r0, r5
   806ae:	d1f8      	bne.n	806a2 <get_pdc_peripheral_details+0x12>
   806b0:	e002      	b.n	806b8 <get_pdc_peripheral_details+0x28>
   806b2:	2000      	movs	r0, #0
   806b4:	e000      	b.n	806b8 <get_pdc_peripheral_details+0x28>
   806b6:	2000      	movs	r0, #0
			break;
		}
	}

	return x;
}
   806b8:	bc30      	pop	{r4, r5}
   806ba:	4770      	bx	lr

000806bc <check_requested_operating_mode>:
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
	portBASE_TYPE index_position;

	for (index_position = 0; index_position < num_valid_operating_modes;
   806bc:	2a00      	cmp	r2, #0
   806be:	dd0e      	ble.n	806de <check_requested_operating_mode+0x22>
			index_position++) {
		if (requested_operation_mode ==
   806c0:	780b      	ldrb	r3, [r1, #0]
   806c2:	4283      	cmp	r3, r0
   806c4:	d00d      	beq.n	806e2 <check_requested_operating_mode+0x26>
   806c6:	460b      	mov	r3, r1
   806c8:	3901      	subs	r1, #1
   806ca:	4411      	add	r1, r2
   806cc:	e003      	b.n	806d6 <check_requested_operating_mode+0x1a>
   806ce:	f813 2f01 	ldrb.w	r2, [r3, #1]!
   806d2:	4282      	cmp	r2, r0
   806d4:	d007      	beq.n	806e6 <check_requested_operating_mode+0x2a>
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
	portBASE_TYPE index_position;

	for (index_position = 0; index_position < num_valid_operating_modes;
   806d6:	428b      	cmp	r3, r1
   806d8:	d1f9      	bne.n	806ce <check_requested_operating_mode+0x12>
bool check_requested_operating_mode(
		const enum peripheral_operation_mode requested_operation_mode,
		const enum peripheral_operation_mode valid_operating_modes[],
		portBASE_TYPE num_valid_operating_modes)
{
	bool return_value = false;
   806da:	2000      	movs	r0, #0
   806dc:	4770      	bx	lr
   806de:	2000      	movs	r0, #0
   806e0:	4770      	bx	lr

	for (index_position = 0; index_position < num_valid_operating_modes;
			index_position++) {
		if (requested_operation_mode ==
				valid_operating_modes[index_position]) {
			return_value = true;
   806e2:	2001      	movs	r0, #1
   806e4:	4770      	bx	lr
   806e6:	2001      	movs	r0, #1
			break;
		}
	}

	return return_value;
}
   806e8:	4770      	bx	lr
   806ea:	bf00      	nop

000806ec <create_peripheral_control_semaphores>:
 * with the bits set in the options_flags value.
 */
void create_peripheral_control_semaphores(const uint8_t options_flags,
		freertos_dma_event_control_t *tx_dma_control,
		freertos_dma_event_control_t *rx_dma_control)
{
   806ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   806ee:	4606      	mov	r6, r0
   806f0:	460d      	mov	r5, r1
   806f2:	4614      	mov	r4, r2
	/* If the tx driver is to be thread aware then create an access control
	mutex.  An Rx access mutex is not created in this function as half duplex
	peripherals need only use a single access mutex, and the Tx mutex is used
	for the purpose.  Full duplex peripherals have extra configuration steps
	that are performed separately. */
	if ((options_flags & USE_TX_ACCESS_MUTEX) != 0) {
   806f4:	f010 0f01 	tst.w	r0, #1
   806f8:	d008      	beq.n	8070c <create_peripheral_control_semaphores+0x20>
		tx_dma_control->peripheral_access_mutex = xSemaphoreCreateMutex();
   806fa:	2001      	movs	r0, #1
   806fc:	4b21      	ldr	r3, [pc, #132]	; (80784 <create_peripheral_control_semaphores+0x98>)
   806fe:	4798      	blx	r3
   80700:	6068      	str	r0, [r5, #4]
		configASSERT(tx_dma_control->peripheral_access_mutex);
   80702:	b918      	cbnz	r0, 8070c <create_peripheral_control_semaphores+0x20>
   80704:	4b20      	ldr	r3, [pc, #128]	; (80788 <create_peripheral_control_semaphores+0x9c>)
   80706:	4798      	blx	r3
   80708:	bf00      	nop
   8070a:	e7fd      	b.n	80708 <create_peripheral_control_semaphores+0x1c>
	}

	/* If the transmit function is only going to return once the transmit is
	complete then create an internal notification semaphore. */
	if ((options_flags & WAIT_TX_COMPLETE) != 0) {
   8070c:	f016 0f04 	tst.w	r6, #4
   80710:	d017      	beq.n	80742 <create_peripheral_control_semaphores+0x56>
		vSemaphoreCreateBinary(
   80712:	2001      	movs	r0, #1
   80714:	2100      	movs	r1, #0
   80716:	2203      	movs	r2, #3
   80718:	4b1c      	ldr	r3, [pc, #112]	; (8078c <create_peripheral_control_semaphores+0xa0>)
   8071a:	4798      	blx	r3
   8071c:	6028      	str	r0, [r5, #0]
   8071e:	b130      	cbz	r0, 8072e <create_peripheral_control_semaphores+0x42>
   80720:	2100      	movs	r1, #0
   80722:	460a      	mov	r2, r1
   80724:	460b      	mov	r3, r1
   80726:	4f1a      	ldr	r7, [pc, #104]	; (80790 <create_peripheral_control_semaphores+0xa4>)
   80728:	47b8      	blx	r7
				tx_dma_control->transaction_complete_notification_semaphore);
		configASSERT(
   8072a:	6828      	ldr	r0, [r5, #0]
   8072c:	b918      	cbnz	r0, 80736 <create_peripheral_control_semaphores+0x4a>
   8072e:	4b16      	ldr	r3, [pc, #88]	; (80788 <create_peripheral_control_semaphores+0x9c>)
   80730:	4798      	blx	r3
   80732:	bf00      	nop
   80734:	e7fd      	b.n	80732 <create_peripheral_control_semaphores+0x46>
				tx_dma_control->transaction_complete_notification_semaphore);

		/* Ensure the semaphore starts in the expected state.  A block time
		of zero can be used here as the semaphore is guaranteed to be
		available (it has only just been created). */
		xSemaphoreTake(
   80736:	2100      	movs	r1, #0
   80738:	460a      	mov	r2, r1
   8073a:	460b      	mov	r3, r1
   8073c:	4d15      	ldr	r5, [pc, #84]	; (80794 <create_peripheral_control_semaphores+0xa8>)
   8073e:	47a8      	blx	r5
   80740:	e001      	b.n	80746 <create_peripheral_control_semaphores+0x5a>
				tx_dma_control->transaction_complete_notification_semaphore,
				0);
	} else {
		tx_dma_control->transaction_complete_notification_semaphore = NULL;
   80742:	2300      	movs	r3, #0
   80744:	602b      	str	r3, [r5, #0]
	}

	/* If the receive function is only going to return once the receive
	is complete then create an internal notification semaphore. */
	if (((options_flags & WAIT_RX_COMPLETE) != 0) &&
   80746:	f016 0f08 	tst.w	r6, #8
   8074a:	d018      	beq.n	8077e <create_peripheral_control_semaphores+0x92>
   8074c:	b1bc      	cbz	r4, 8077e <create_peripheral_control_semaphores+0x92>
			(rx_dma_control != NULL)) {
		vSemaphoreCreateBinary(
   8074e:	2001      	movs	r0, #1
   80750:	2100      	movs	r1, #0
   80752:	2203      	movs	r2, #3
   80754:	4b0d      	ldr	r3, [pc, #52]	; (8078c <create_peripheral_control_semaphores+0xa0>)
   80756:	4798      	blx	r3
   80758:	6020      	str	r0, [r4, #0]
   8075a:	b130      	cbz	r0, 8076a <create_peripheral_control_semaphores+0x7e>
   8075c:	2100      	movs	r1, #0
   8075e:	460a      	mov	r2, r1
   80760:	460b      	mov	r3, r1
   80762:	4d0b      	ldr	r5, [pc, #44]	; (80790 <create_peripheral_control_semaphores+0xa4>)
   80764:	47a8      	blx	r5
				rx_dma_control->transaction_complete_notification_semaphore);
		configASSERT(
   80766:	6820      	ldr	r0, [r4, #0]
   80768:	b918      	cbnz	r0, 80772 <create_peripheral_control_semaphores+0x86>
   8076a:	4b07      	ldr	r3, [pc, #28]	; (80788 <create_peripheral_control_semaphores+0x9c>)
   8076c:	4798      	blx	r3
   8076e:	bf00      	nop
   80770:	e7fd      	b.n	8076e <create_peripheral_control_semaphores+0x82>
				rx_dma_control->transaction_complete_notification_semaphore);

		/* Ensure the semaphore starts in the expected state.  A block time
		of zero can be used here as the semaphore is guaranteed to be
		available (it has only just been created. */
		xSemaphoreTake(
   80772:	2100      	movs	r1, #0
   80774:	460a      	mov	r2, r1
   80776:	460b      	mov	r3, r1
   80778:	4c06      	ldr	r4, [pc, #24]	; (80794 <create_peripheral_control_semaphores+0xa8>)
   8077a:	47a0      	blx	r4
   8077c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
				rx_dma_control->transaction_complete_notification_semaphore,
				0);
	} else {
		rx_dma_control->transaction_complete_notification_semaphore = NULL;
   8077e:	2300      	movs	r3, #0
   80780:	6023      	str	r3, [r4, #0]
   80782:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80784:	00081d75 	.word	0x00081d75
   80788:	000817f1 	.word	0x000817f1
   8078c:	00081bd9 	.word	0x00081bd9
   80790:	00081c59 	.word	0x00081c59
   80794:	00081e69 	.word	0x00081e69

00080798 <configure_interrupt_controller>:
 * Configure the NVIC to enable, and set the priority of, the interrupt
 * specified by peripheral_irq.
 */
void configure_interrupt_controller(const enum IRQn peripheral_irq,
		uint32_t interrupt_priority)
{
   80798:	b510      	push	{r4, lr}
	configASSERT(interrupt_priority <=
   8079a:	290f      	cmp	r1, #15
   8079c:	d903      	bls.n	807a6 <configure_interrupt_controller+0xe>
   8079e:	4b15      	ldr	r3, [pc, #84]	; (807f4 <configure_interrupt_controller+0x5c>)
   807a0:	4798      	blx	r3
   807a2:	bf00      	nop
   807a4:	e7fd      	b.n	807a2 <configure_interrupt_controller+0xa>
            configLIBRARY_LOWEST_INTERRUPT_PRIORITY);
	configASSERT(interrupt_priority >=
   807a6:	2909      	cmp	r1, #9
   807a8:	d803      	bhi.n	807b2 <configure_interrupt_controller+0x1a>
   807aa:	4b12      	ldr	r3, [pc, #72]	; (807f4 <configure_interrupt_controller+0x5c>)
   807ac:	4798      	blx	r3
   807ae:	bf00      	nop
   807b0:	e7fd      	b.n	807ae <configure_interrupt_controller+0x16>

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_ClearPendingIRQ(IRQn_Type IRQn)
{
  NVIC->ICPR[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* Clear pending interrupt */
   807b2:	b2c2      	uxtb	r2, r0
   807b4:	f002 031f 	and.w	r3, r2, #31
   807b8:	2401      	movs	r4, #1
   807ba:	409c      	lsls	r4, r3
   807bc:	0943      	lsrs	r3, r0, #5
   807be:	009b      	lsls	r3, r3, #2
   807c0:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
   807c4:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
   807c8:	f8c3 4180 	str.w	r4, [r3, #384]	; 0x180
    \param [in]      IRQn  Interrupt number. 
    \param [in]  priority  Priority to set.
 */
__STATIC_INLINE void NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
  if(IRQn < 0) {
   807cc:	2800      	cmp	r0, #0
   807ce:	da06      	bge.n	807de <configure_interrupt_controller+0x46>
    SCB->SHP[((uint32_t)(IRQn) & 0xF)-4] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff); } /* set Priority for Cortex-M  System Interrupts */
   807d0:	f002 000f 	and.w	r0, r2, #15
   807d4:	0109      	lsls	r1, r1, #4
   807d6:	b2c9      	uxtb	r1, r1
   807d8:	4a07      	ldr	r2, [pc, #28]	; (807f8 <configure_interrupt_controller+0x60>)
   807da:	5411      	strb	r1, [r2, r0]
   807dc:	e007      	b.n	807ee <configure_interrupt_controller+0x56>
  else {
    NVIC->IP[(uint32_t)(IRQn)] = ((priority << (8 - __NVIC_PRIO_BITS)) & 0xff);    }        /* set Priority for device specific Interrupts  */
   807de:	010a      	lsls	r2, r1, #4
   807e0:	b2d2      	uxtb	r2, r2
   807e2:	f100 4060 	add.w	r0, r0, #3758096384	; 0xe0000000
   807e6:	f500 4061 	add.w	r0, r0, #57600	; 0xe100
   807ea:	f880 2300 	strb.w	r2, [r0, #768]	; 0x300

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   807ee:	601c      	str	r4, [r3, #0]
   807f0:	bd10      	pop	{r4, pc}
   807f2:	bf00      	nop
   807f4:	000817f1 	.word	0x000817f1
   807f8:	e000ed14 	.word	0xe000ed14

000807fc <freertos_copy_bytes_from_pdc_circular_buffer>:
 */
uint32_t freertos_copy_bytes_from_pdc_circular_buffer(
		freertos_pdc_rx_control_t *p_rx_buffer_details,
		uint32_t next_byte_to_be_written, uint8_t *buf,
		uint32_t bytes_to_read)
{
   807fc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80800:	4604      	mov	r4, r0
   80802:	4690      	mov	r8, r2
   80804:	461f      	mov	r7, r3
	uint32_t number_of_bytes_available, next_byte_to_read;

	/* Locate the position that data will be read from next. */
	next_byte_to_read = (uint32_t) p_rx_buffer_details->next_byte_to_read;
   80806:	6986      	ldr	r6, [r0, #24]

	if (next_byte_to_be_written == next_byte_to_read) {
   80808:	42b1      	cmp	r1, r6
   8080a:	d104      	bne.n	80816 <freertos_copy_bytes_from_pdc_circular_buffer+0x1a>
		if (p_rx_buffer_details->rx_pdc_parameters.ul_size == 0) {
   8080c:	68c3      	ldr	r3, [r0, #12]
   8080e:	b953      	cbnz	r3, 80826 <freertos_copy_bytes_from_pdc_circular_buffer+0x2a>
			/* The read and write pointers are equal, but as the Rx DMA has been
			stopped, the buffer must be full, not empty.  Data from the read
			pointer up to the end of the buffer is available. */
			number_of_bytes_available =
   80810:	6845      	ldr	r5, [r0, #4]
   80812:	1a6d      	subs	r5, r5, r1
   80814:	e008      	b.n	80828 <freertos_copy_bytes_from_pdc_circular_buffer+0x2c>
		} else {
			/* The read and write pointers are equal, but the Rx DMA is still
			in operation, so the buffer must be empty. */
			number_of_bytes_available = 0;
		}
	} else if (next_byte_to_be_written > next_byte_to_read) {
   80816:	428e      	cmp	r6, r1
		/* The write pointer has not wrapped around from the read pointer, or
		the write and read pointer are the same indicating a buffer overflow.
		Calculate the bytes available between the write and read pointers. */
		number_of_bytes_available = next_byte_to_be_written -
   80818:	bf32      	itee	cc
   8081a:	ebc6 0501 	rsbcc	r5, r6, r1
				next_byte_to_read;
	} else {
		/* The write pointer has wrapped around from the read pointer.
		Calculate the bytes available between the end of the buffer and the
		read pointer. */
		number_of_bytes_available =
   8081e:	6845      	ldrcs	r5, [r0, #4]
   80820:	ebc6 0505 	rsbcs	r5, r6, r5
   80824:	e000      	b.n	80828 <freertos_copy_bytes_from_pdc_circular_buffer+0x2c>
					p_rx_buffer_details->past_rx_buffer_end_address
					- next_byte_to_read;
		} else {
			/* The read and write pointers are equal, but the Rx DMA is still
			in operation, so the buffer must be empty. */
			number_of_bytes_available = 0;
   80826:	2500      	movs	r5, #0
				p_rx_buffer_details->past_rx_buffer_end_address
				- next_byte_to_read;
	}

	/* Cap the number of requested bytes to those available. */
	if (bytes_to_read > number_of_bytes_available) {
   80828:	42bd      	cmp	r5, r7
   8082a:	d30a      	bcc.n	80842 <freertos_copy_bytes_from_pdc_circular_buffer+0x46>
		bytes_to_read = number_of_bytes_available;
	} else if (bytes_to_read != number_of_bytes_available) {
   8082c:	42af      	cmp	r7, r5
   8082e:	d007      	beq.n	80840 <freertos_copy_bytes_from_pdc_circular_buffer+0x44>
		/* There are more bytes available than being read now, so there is no
		need to wait for the interrupt to give the semaphore to indicate that
		new data is available. */
		xSemaphoreGive(p_rx_buffer_details->rx_event_semaphore);
   80830:	6920      	ldr	r0, [r4, #16]
   80832:	2100      	movs	r1, #0
   80834:	460a      	mov	r2, r1
   80836:	460b      	mov	r3, r1
   80838:	4d0e      	ldr	r5, [pc, #56]	; (80874 <freertos_copy_bytes_from_pdc_circular_buffer+0x78>)
   8083a:	47a8      	blx	r5
   8083c:	463d      	mov	r5, r7
   8083e:	e000      	b.n	80842 <freertos_copy_bytes_from_pdc_circular_buffer+0x46>
   80840:	463d      	mov	r5, r7
	}

	/* Copy the bytes into the user buffer. */
	memcpy(buf, (void *) p_rx_buffer_details->next_byte_to_read,
   80842:	4640      	mov	r0, r8
   80844:	69a1      	ldr	r1, [r4, #24]
   80846:	462a      	mov	r2, r5
   80848:	4b0b      	ldr	r3, [pc, #44]	; (80878 <freertos_copy_bytes_from_pdc_circular_buffer+0x7c>)
   8084a:	4798      	blx	r3
			bytes_to_read);

	/* Move up the read buffer accordingly, wrapping around if it reaches the
	end of the buffer. */
	next_byte_to_read += bytes_to_read;
   8084c:	442e      	add	r6, r5

	if (next_byte_to_read >=
   8084e:	6863      	ldr	r3, [r4, #4]
   80850:	429e      	cmp	r6, r3
   80852:	d306      	bcc.n	80862 <freertos_copy_bytes_from_pdc_circular_buffer+0x66>
			p_rx_buffer_details->past_rx_buffer_end_address) {
		/* The next_byte_to_read pointer is only read by the ISR, so the
		critical section is probably not needed on 32-bit machines. */
		taskENTER_CRITICAL();
   80854:	4b09      	ldr	r3, [pc, #36]	; (8087c <freertos_copy_bytes_from_pdc_circular_buffer+0x80>)
   80856:	4798      	blx	r3
		{
			p_rx_buffer_details->next_byte_to_read =
   80858:	6823      	ldr	r3, [r4, #0]
   8085a:	61a3      	str	r3, [r4, #24]
					(uint8_t *) p_rx_buffer_details->rx_buffer_start_address;
		}
		taskEXIT_CRITICAL();
   8085c:	4b08      	ldr	r3, [pc, #32]	; (80880 <freertos_copy_bytes_from_pdc_circular_buffer+0x84>)
   8085e:	4798      	blx	r3
   80860:	e004      	b.n	8086c <freertos_copy_bytes_from_pdc_circular_buffer+0x70>
	} else {
		/* The next_byte_to_read pointer is only read by the ISR, so the
		critical section is probably not needed on 32-bit machines. */
		taskENTER_CRITICAL();
   80862:	4b06      	ldr	r3, [pc, #24]	; (8087c <freertos_copy_bytes_from_pdc_circular_buffer+0x80>)
   80864:	4798      	blx	r3
		{
			p_rx_buffer_details->next_byte_to_read =
   80866:	61a6      	str	r6, [r4, #24]
					(uint8_t *) next_byte_to_read;
		}
		taskEXIT_CRITICAL();
   80868:	4b05      	ldr	r3, [pc, #20]	; (80880 <freertos_copy_bytes_from_pdc_circular_buffer+0x84>)
   8086a:	4798      	blx	r3
	}

	/* Return the number of bytes actually read. */
	return bytes_to_read;
}
   8086c:	4628      	mov	r0, r5
   8086e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80872:	bf00      	nop
   80874:	00081c59 	.word	0x00081c59
   80878:	00082e0d 	.word	0x00082e0d
   8087c:	00081801 	.word	0x00081801
   80880:	00081821 	.word	0x00081821

00080884 <freertos_obtain_peripheral_access_mutex>:
 * did not become available within max_block_time_ticks tick periods.
 */
status_code_t freertos_obtain_peripheral_access_mutex(
		freertos_dma_event_control_t *dma_event_control,
		portTickType *max_block_time_ticks)
{
   80884:	b530      	push	{r4, r5, lr}
   80886:	b083      	sub	sp, #12
   80888:	4604      	mov	r4, r0
   8088a:	460d      	mov	r5, r1
	status_code_t return_value = STATUS_OK;
	xTimeOutType time_out_definition;

	if (dma_event_control->peripheral_access_mutex != NULL) {
   8088c:	6843      	ldr	r3, [r0, #4]
   8088e:	b193      	cbz	r3, 808b6 <freertos_obtain_peripheral_access_mutex+0x32>
		/* Remember the time on entry. */
		vTaskSetTimeOutState(&time_out_definition);
   80890:	4668      	mov	r0, sp
   80892:	4b0d      	ldr	r3, [pc, #52]	; (808c8 <freertos_obtain_peripheral_access_mutex+0x44>)
   80894:	4798      	blx	r3

		/* Wait to get exclusive access to the peripheral. */
		if (xSemaphoreTake(dma_event_control->peripheral_access_mutex,
   80896:	6860      	ldr	r0, [r4, #4]
   80898:	2100      	movs	r1, #0
   8089a:	682a      	ldr	r2, [r5, #0]
   8089c:	460b      	mov	r3, r1
   8089e:	4c0b      	ldr	r4, [pc, #44]	; (808cc <freertos_obtain_peripheral_access_mutex+0x48>)
   808a0:	47a0      	blx	r4
   808a2:	b150      	cbz	r0, 808ba <freertos_obtain_peripheral_access_mutex+0x36>
				*max_block_time_ticks) == pdFAIL) {
			return_value = ERR_TIMEOUT;
		} else {
			/* Adjust the time out value in case the task had to block to
			wait for the semaphore. */
			if (xTaskCheckForTimeOut(&time_out_definition,
   808a4:	4668      	mov	r0, sp
   808a6:	4629      	mov	r1, r5
   808a8:	4b09      	ldr	r3, [pc, #36]	; (808d0 <freertos_obtain_peripheral_access_mutex+0x4c>)
   808aa:	4798      	blx	r3
   808ac:	2801      	cmp	r0, #1
   808ae:	d106      	bne.n	808be <freertos_obtain_peripheral_access_mutex+0x3a>
					max_block_time_ticks) == pdTRUE) {
				*max_block_time_ticks = 0;
   808b0:	2000      	movs	r0, #0
   808b2:	6028      	str	r0, [r5, #0]
   808b4:	e004      	b.n	808c0 <freertos_obtain_peripheral_access_mutex+0x3c>
 */
status_code_t freertos_obtain_peripheral_access_mutex(
		freertos_dma_event_control_t *dma_event_control,
		portTickType *max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
   808b6:	2000      	movs	r0, #0
   808b8:	e002      	b.n	808c0 <freertos_obtain_peripheral_access_mutex+0x3c>
		vTaskSetTimeOutState(&time_out_definition);

		/* Wait to get exclusive access to the peripheral. */
		if (xSemaphoreTake(dma_event_control->peripheral_access_mutex,
				*max_block_time_ticks) == pdFAIL) {
			return_value = ERR_TIMEOUT;
   808ba:	20fd      	movs	r0, #253	; 0xfd
   808bc:	e000      	b.n	808c0 <freertos_obtain_peripheral_access_mutex+0x3c>
 */
status_code_t freertos_obtain_peripheral_access_mutex(
		freertos_dma_event_control_t *dma_event_control,
		portTickType *max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
   808be:	2000      	movs	r0, #0
			}
		}
	}

	return return_value;
}
   808c0:	b240      	sxtb	r0, r0
   808c2:	b003      	add	sp, #12
   808c4:	bd30      	pop	{r4, r5, pc}
   808c6:	bf00      	nop
   808c8:	000827fd 	.word	0x000827fd
   808cc:	00081e69 	.word	0x00081e69
   808d0:	00082825 	.word	0x00082825

000808d4 <freertos_start_pdc_transfer>:
 */
void freertos_start_pdc_transfer(
		freertos_dma_event_control_t *dma_event_control,
		const uint8_t *data, size_t len, void *pdc_base_address,
		xSemaphoreHandle notification_semaphore, bool is_transmitting)
{
   808d4:	b5f0      	push	{r4, r5, r6, r7, lr}
   808d6:	b083      	sub	sp, #12
   808d8:	460e      	mov	r6, r1
   808da:	4615      	mov	r5, r2
   808dc:	461c      	mov	r4, r3
   808de:	9b08      	ldr	r3, [sp, #32]
	/* Remember which semaphore is to be used to indicate the end of
	transmission.  If notification_semaphore is NULL then either no
	semaphore is being used, or the driver is using an internal notification
	semaphore because it is configured to wait until the transmit has
	completed before returning. */
	if (notification_semaphore != NULL) {
   808e0:	b113      	cbz	r3, 808e8 <freertos_start_pdc_transfer+0x14>
		dma_event_control->transaction_complete_notification_semaphore =
   808e2:	6003      	str	r3, [r0, #0]
				notification_semaphore;
	}

	/* Ensure the notification semaphore starts in the expected state in case
	the previous PDC transfer didn't complete for any reason. */
	if (dma_event_control->transaction_complete_notification_semaphore !=
   808e4:	4618      	mov	r0, r3
   808e6:	e001      	b.n	808ec <freertos_start_pdc_transfer+0x18>
   808e8:	6800      	ldr	r0, [r0, #0]
   808ea:	b120      	cbz	r0, 808f6 <freertos_start_pdc_transfer+0x22>
			NULL) {
		xSemaphoreTake(
   808ec:	2100      	movs	r1, #0
   808ee:	460a      	mov	r2, r1
   808f0:	460b      	mov	r3, r1
   808f2:	4f13      	ldr	r7, [pc, #76]	; (80940 <freertos_start_pdc_transfer+0x6c>)
   808f4:	47b8      	blx	r7
				dma_event_control->transaction_complete_notification_semaphore,
				0);
	}

	/* Configure the PDC to transmit or receive parameters. */
	pdc_packet.ul_addr = (uint32_t) data;
   808f6:	9600      	str	r6, [sp, #0]
	pdc_packet.ul_size = (uint32_t) len;
   808f8:	9501      	str	r5, [sp, #4]

	if (is_transmitting == true) {
   808fa:	f89d 3024 	ldrb.w	r3, [sp, #36]	; 0x24
   808fe:	b17b      	cbz	r3, 80920 <freertos_start_pdc_transfer+0x4c>
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_TXTDIS);
   80900:	4620      	mov	r0, r4
   80902:	f44f 7100 	mov.w	r1, #512	; 0x200
   80906:	4b0f      	ldr	r3, [pc, #60]	; (80944 <freertos_start_pdc_transfer+0x70>)
   80908:	4798      	blx	r3
		pdc_tx_init(pdc_base_address, &pdc_packet, NULL);
   8090a:	4620      	mov	r0, r4
   8090c:	4669      	mov	r1, sp
   8090e:	2200      	movs	r2, #0
   80910:	4b0d      	ldr	r3, [pc, #52]	; (80948 <freertos_start_pdc_transfer+0x74>)
   80912:	4798      	blx	r3
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_TXTEN);
   80914:	4620      	mov	r0, r4
   80916:	f44f 7180 	mov.w	r1, #256	; 0x100
   8091a:	4b0c      	ldr	r3, [pc, #48]	; (8094c <freertos_start_pdc_transfer+0x78>)
   8091c:	4798      	blx	r3
   8091e:	e00c      	b.n	8093a <freertos_start_pdc_transfer+0x66>
	} else {
		pdc_disable_transfer(pdc_base_address, PERIPH_PTCR_RXTDIS);
   80920:	4620      	mov	r0, r4
   80922:	2102      	movs	r1, #2
   80924:	4b07      	ldr	r3, [pc, #28]	; (80944 <freertos_start_pdc_transfer+0x70>)
   80926:	4798      	blx	r3
		pdc_rx_init(pdc_base_address, &pdc_packet, NULL);
   80928:	4620      	mov	r0, r4
   8092a:	4669      	mov	r1, sp
   8092c:	2200      	movs	r2, #0
   8092e:	4b08      	ldr	r3, [pc, #32]	; (80950 <freertos_start_pdc_transfer+0x7c>)
   80930:	4798      	blx	r3
		pdc_enable_transfer(pdc_base_address, PERIPH_PTCR_RXTEN);
   80932:	4620      	mov	r0, r4
   80934:	2101      	movs	r1, #1
   80936:	4b05      	ldr	r3, [pc, #20]	; (8094c <freertos_start_pdc_transfer+0x78>)
   80938:	4798      	blx	r3
	}
}
   8093a:	b003      	add	sp, #12
   8093c:	bdf0      	pop	{r4, r5, r6, r7, pc}
   8093e:	bf00      	nop
   80940:	00081e69 	.word	0x00081e69
   80944:	0008101d 	.word	0x0008101d
   80948:	00080fe1 	.word	0x00080fe1
   8094c:	00081011 	.word	0x00081011
   80950:	00080ff9 	.word	0x00080ff9

00080954 <freertos_optionally_wait_transfer_completion>:
 */
status_code_t freertos_optionally_wait_transfer_completion(
		freertos_dma_event_control_t *dma_event_control,
		xSemaphoreHandle notification_semaphore,
		portTickType max_block_time_ticks)
{
   80954:	b510      	push	{r4, lr}
	status_code_t return_value = STATUS_OK;

	if (notification_semaphore == NULL) {
   80956:	b949      	cbnz	r1, 8096c <freertos_optionally_wait_transfer_completion+0x18>
		if (dma_event_control->transaction_complete_notification_semaphore !=
   80958:	6800      	ldr	r0, [r0, #0]
   8095a:	b148      	cbz	r0, 80970 <freertos_optionally_wait_transfer_completion+0x1c>
				NULL) {
			/* Wait until notified by the ISR that transmission is
			complete. */
			if (xSemaphoreTake(dma_event_control->
   8095c:	460b      	mov	r3, r1
   8095e:	4c06      	ldr	r4, [pc, #24]	; (80978 <freertos_optionally_wait_transfer_completion+0x24>)
   80960:	47a0      	blx	r4
status_code_t freertos_optionally_wait_transfer_completion(
		freertos_dma_event_control_t *dma_event_control,
		xSemaphoreHandle notification_semaphore,
		portTickType max_block_time_ticks)
{
	status_code_t return_value = STATUS_OK;
   80962:	2801      	cmp	r0, #1
   80964:	bf14      	ite	ne
   80966:	20fd      	movne	r0, #253	; 0xfd
   80968:	2000      	moveq	r0, #0
   8096a:	e002      	b.n	80972 <freertos_optionally_wait_transfer_completion+0x1e>
   8096c:	2000      	movs	r0, #0
   8096e:	e000      	b.n	80972 <freertos_optionally_wait_transfer_completion+0x1e>
   80970:	2000      	movs	r0, #0
			}
		}
	}

	return return_value;
}
   80972:	b240      	sxtb	r0, r0
   80974:	bd10      	pop	{r4, pc}
   80976:	bf00      	nop
   80978:	00081e69 	.word	0x00081e69

0008097c <configure_rx_dma>:
 * For internal use only.
 * Configures the Rx DMA to receive data into free space within the Rx buffer.
 */
static void configure_rx_dma(uint32_t usart_index,
		enum buffer_operations operation_performed)
{
   8097c:	b570      	push	{r4, r5, r6, lr}
	freertos_pdc_rx_control_t *rx_buffer_definition;

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
   8097e:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80982:	4b20      	ldr	r3, [pc, #128]	; (80a04 <configure_rx_dma+0x88>)
   80984:	eb03 0382 	add.w	r3, r3, r2, lsl #2

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   80988:	699c      	ldr	r4, [r3, #24]
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
   8098a:	689a      	ldr	r2, [r3, #8]
	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);

	/* How much space is there between the start of the DMA buffer and the
	current read pointer?  */

	if (((uint32_t)rx_buffer_definition->next_byte_to_read) ==
   8098c:	4294      	cmp	r4, r2
   8098e:	d10a      	bne.n	809a6 <configure_rx_dma+0x2a>
		/* The read pointer and the write pointer are equal.  If this function
		was called because data was added to the buffer, then there is no free
		space in the buffer remaining.  If this function was called because data
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
   80990:	b929      	cbnz	r1, 8099e <configure_rx_dma+0x22>
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
   80992:	2200      	movs	r2, #0
   80994:	60da      	str	r2, [r3, #12]
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
   80996:	685b      	ldr	r3, [r3, #4]
   80998:	429c      	cmp	r4, r3
   8099a:	d92a      	bls.n	809f2 <configure_rx_dma+0x76>
   8099c:	e010      	b.n	809c0 <configure_rx_dma+0x44>
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   8099e:	6859      	ldr	r1, [r3, #4]
   809a0:	1b09      	subs	r1, r1, r4
		was removed from the buffer, then the space remaining is from the write
		pointer up to the end of the buffer. */
		if (operation_performed == data_added) {
			rx_buffer_definition->rx_pdc_parameters.ul_size = 0UL;
		} else {
			rx_buffer_definition->rx_pdc_parameters.ul_size =
   809a2:	60d9      	str	r1, [r3, #12]
   809a4:	e007      	b.n	809b6 <configure_rx_dma+0x3a>
				rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
   809a6:	4294      	cmp	r4, r2
   809a8:	d902      	bls.n	809b0 <configure_rx_dma+0x34>
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   809aa:	1aa4      	subs	r4, r4, r2
		}
	} else if (((uint32_t)rx_buffer_definition->next_byte_to_read) >
			rx_buffer_definition->rx_pdc_parameters.ul_addr) {
		/* The read pointer is ahead of the write pointer.  The space available
		is up to the write pointer to ensure unread data is not overwritten. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   809ac:	60dc      	str	r4, [r3, #12]
   809ae:	e002      	b.n	809b6 <configure_rx_dma+0x3a>
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
   809b0:	6859      	ldr	r1, [r3, #4]
   809b2:	1a89      	subs	r1, r1, r2
		rx_buffer_definition->rx_pdc_parameters.ul_size =
			((uint32_t) rx_buffer_definition->next_byte_to_read) - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	} else {
		/* The write pointer is ahead of the read pointer so the space
		available is up to the end of the buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_size =
   809b4:	60d9      	str	r1, [r3, #12]
			rx_buffer_definition->past_rx_buffer_end_address - rx_buffer_definition->rx_pdc_parameters.ul_addr;
	}

	configASSERT((rx_buffer_definition->rx_pdc_parameters.ul_addr +
   809b6:	68d9      	ldr	r1, [r3, #12]
   809b8:	440a      	add	r2, r1
   809ba:	685c      	ldr	r4, [r3, #4]
   809bc:	42a2      	cmp	r2, r4
   809be:	d903      	bls.n	809c8 <configure_rx_dma+0x4c>
   809c0:	4b11      	ldr	r3, [pc, #68]	; (80a08 <configure_rx_dma+0x8c>)
   809c2:	4798      	blx	r3
   809c4:	bf00      	nop
   809c6:	e7fd      	b.n	809c4 <configure_rx_dma+0x48>
			rx_buffer_definition->rx_pdc_parameters.ul_size) <=
			rx_buffer_definition->past_rx_buffer_end_address);

	if (rx_buffer_definition->rx_pdc_parameters.ul_size > 0) {
   809c8:	b199      	cbz	r1, 809f2 <configure_rx_dma+0x76>
		/* Restart the DMA to receive into whichever space was calculated
		as remaining.  First clear any characters that might already be in the
		registers. */
		pdc_rx_init(
   809ca:	4d10      	ldr	r5, [pc, #64]	; (80a0c <configure_rx_dma+0x90>)
   809cc:	0104      	lsls	r4, r0, #4
   809ce:	192a      	adds	r2, r5, r4
   809d0:	6856      	ldr	r6, [r2, #4]
   809d2:	4630      	mov	r0, r6
   809d4:	f103 0108 	add.w	r1, r3, #8
   809d8:	2200      	movs	r2, #0
   809da:	4b0d      	ldr	r3, [pc, #52]	; (80a10 <configure_rx_dma+0x94>)
   809dc:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address, &rx_buffer_definition->rx_pdc_parameters,
				NULL);
		pdc_enable_transfer(
   809de:	4630      	mov	r0, r6
   809e0:	2101      	movs	r1, #1
   809e2:	4b0c      	ldr	r3, [pc, #48]	; (80a14 <configure_rx_dma+0x98>)
   809e4:	4798      	blx	r3
				all_usart_definitions[usart_index].pdc_base_address,
				PERIPH_PTCR_RXTEN);
		usart_enable_interrupt(
   809e6:	5928      	ldr	r0, [r5, r4]
   809e8:	f44f 7184 	mov.w	r1, #264	; 0x108
   809ec:	4b0a      	ldr	r3, [pc, #40]	; (80a18 <configure_rx_dma+0x9c>)
   809ee:	4798      	blx	r3
   809f0:	bd70      	pop	{r4, r5, r6, pc}
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
				all_usart_definitions[usart_index].peripheral_base_address, US_IER_ENDRX |
   809f2:	0100      	lsls	r0, r0, #4
				US_IER_TIMEOUT);
	} else {
		/* The write pointer has reached the read pointer.  There is no
		more room so the DMA is not re-enabled until a read has created
		space. */
		usart_disable_interrupt(
   809f4:	4b05      	ldr	r3, [pc, #20]	; (80a0c <configure_rx_dma+0x90>)
   809f6:	5818      	ldr	r0, [r3, r0]
   809f8:	f44f 7184 	mov.w	r1, #264	; 0x108
   809fc:	4b07      	ldr	r3, [pc, #28]	; (80a1c <configure_rx_dma+0xa0>)
   809fe:	4798      	blx	r3
   80a00:	bd70      	pop	{r4, r5, r6, pc}
   80a02:	bf00      	nop
   80a04:	200705c8 	.word	0x200705c8
   80a08:	000817f1 	.word	0x000817f1
   80a0c:	00083110 	.word	0x00083110
   80a10:	00080ff9 	.word	0x00080ff9
   80a14:	00081011 	.word	0x00081011
   80a18:	00081501 	.word	0x00081501
   80a1c:	00081505 	.word	0x00081505

00080a20 <local_usart_handler>:
/*
 * For internal use only.
 * A common USART interrupt handler that is called for all USART peripherals.
 */
static void local_usart_handler(const portBASE_TYPE usart_index)
{
   80a20:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   80a24:	b083      	sub	sp, #12
   80a26:	4604      	mov	r4, r0
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
   80a28:	2300      	movs	r3, #0
   80a2a:	9301      	str	r3, [sp, #4]
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
			all_usart_definitions[usart_index].peripheral_base_address);
   80a2c:	0103      	lsls	r3, r0, #4
   80a2e:	4a3b      	ldr	r2, [pc, #236]	; (80b1c <local_usart_handler+0xfc>)
   80a30:	58d6      	ldr	r6, [r2, r3]
{
	portBASE_TYPE higher_priority_task_woken = pdFALSE;
	uint32_t usart_status;
	freertos_pdc_rx_control_t *rx_buffer_definition;

	usart_status = usart_get_status(
   80a32:	4630      	mov	r0, r6
   80a34:	4b3a      	ldr	r3, [pc, #232]	; (80b20 <local_usart_handler+0x100>)
   80a36:	4798      	blx	r3
   80a38:	4605      	mov	r5, r0
			all_usart_definitions[usart_index].peripheral_base_address);
	usart_status &= usart_get_interrupt_mask(
   80a3a:	4630      	mov	r0, r6
   80a3c:	4b39      	ldr	r3, [pc, #228]	; (80b24 <local_usart_handler+0x104>)
   80a3e:	4798      	blx	r3
   80a40:	4005      	ands	r5, r0
			all_usart_definitions[usart_index].peripheral_base_address);

	rx_buffer_definition = &(rx_buffer_definitions[usart_index]);
   80a42:	f8df 9104 	ldr.w	r9, [pc, #260]	; 80b48 <local_usart_handler+0x128>
   80a46:	ebc4 08c4 	rsb	r8, r4, r4, lsl #3
   80a4a:	ea4f 0888 	mov.w	r8, r8, lsl #2
   80a4e:	eb09 0708 	add.w	r7, r9, r8

	/* Has the PDC completed a transmission? */
	if ((usart_status & US_CSR_ENDTX) != 0UL) {
   80a52:	f015 0f10 	tst.w	r5, #16
   80a56:	d018      	beq.n	80a8a <local_usart_handler+0x6a>
		usart_disable_interrupt(
   80a58:	4630      	mov	r0, r6
   80a5a:	2110      	movs	r1, #16
   80a5c:	4b32      	ldr	r3, [pc, #200]	; (80b28 <local_usart_handler+0x108>)
   80a5e:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				US_IER_ENDTX);

		/* If the driver is supporting multi-threading, then return the access
		mutex. */
		if (tx_dma_control[usart_index].peripheral_access_mutex != NULL) {
   80a60:	4b32      	ldr	r3, [pc, #200]	; (80b2c <local_usart_handler+0x10c>)
   80a62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
   80a66:	6858      	ldr	r0, [r3, #4]
   80a68:	b128      	cbz	r0, 80a76 <local_usart_handler+0x56>
			xSemaphoreGiveFromISR(
   80a6a:	2100      	movs	r1, #0
   80a6c:	aa01      	add	r2, sp, #4
   80a6e:	460b      	mov	r3, r1
   80a70:	f8df c0c8 	ldr.w	ip, [pc, #200]	; 80b3c <local_usart_handler+0x11c>
   80a74:	47e0      	blx	ip
					&higher_priority_task_woken);
		}

		/* if the sending task supplied a notification semaphore, then
		notify the task that the transmission has completed. */
		if (tx_dma_control[usart_index].transaction_complete_notification_semaphore != NULL) {
   80a76:	4b2d      	ldr	r3, [pc, #180]	; (80b2c <local_usart_handler+0x10c>)
   80a78:	f853 0034 	ldr.w	r0, [r3, r4, lsl #3]
   80a7c:	b128      	cbz	r0, 80a8a <local_usart_handler+0x6a>
			xSemaphoreGiveFromISR(
   80a7e:	2100      	movs	r1, #0
   80a80:	aa01      	add	r2, sp, #4
   80a82:	460b      	mov	r3, r1
   80a84:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80b3c <local_usart_handler+0x11c>
   80a88:	47e0      	blx	ip
					tx_dma_control[usart_index].transaction_complete_notification_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_CSR_ENDRX) != 0UL) {
   80a8a:	f015 0f08 	tst.w	r5, #8
   80a8e:	d021      	beq.n	80ad4 <local_usart_handler+0xb4>
		/* It is possible to initialise the peripheral to only use Tx and not Rx.
		Check that Rx has been initialised. */
		configASSERT(rx_buffer_definition->next_byte_to_read);
   80a90:	69bb      	ldr	r3, [r7, #24]
   80a92:	b91b      	cbnz	r3, 80a9c <local_usart_handler+0x7c>
   80a94:	4b26      	ldr	r3, [pc, #152]	; (80b30 <local_usart_handler+0x110>)
   80a96:	4798      	blx	r3
   80a98:	bf00      	nop
   80a9a:	e7fd      	b.n	80a98 <local_usart_handler+0x78>
		configASSERT(rx_buffer_definition->next_byte_to_read !=
   80a9c:	2b01      	cmp	r3, #1
   80a9e:	d103      	bne.n	80aa8 <local_usart_handler+0x88>
   80aa0:	4b23      	ldr	r3, [pc, #140]	; (80b30 <local_usart_handler+0x110>)
   80aa2:	4798      	blx	r3
   80aa4:	bf00      	nop
   80aa6:	e7fd      	b.n	80aa4 <local_usart_handler+0x84>
				RX_NOT_USED);

		/* Out of DMA buffer, configure the next buffer.  Start by moving
		the DMA buffer start address up to the end of the previously defined
		buffer. */
		rx_buffer_definition->rx_pdc_parameters.ul_addr +=
   80aa8:	68fa      	ldr	r2, [r7, #12]
   80aaa:	68bb      	ldr	r3, [r7, #8]
   80aac:	4413      	add	r3, r2
   80aae:	60bb      	str	r3, [r7, #8]
				rx_buffer_definition->rx_pdc_parameters.ul_size;

		/* If the end of the buffer has been reached, wrap back to the start. */
		if (rx_buffer_definition->rx_pdc_parameters.ul_addr >=
   80ab0:	687a      	ldr	r2, [r7, #4]
   80ab2:	4293      	cmp	r3, r2
				rx_buffer_definition->past_rx_buffer_end_address)
		{
			rx_buffer_definition->rx_pdc_parameters.ul_addr =
   80ab4:	bf24      	itt	cs
   80ab6:	f859 3008 	ldrcs.w	r3, [r9, r8]
   80aba:	60bb      	strcs	r3, [r7, #8]
					rx_buffer_definition->rx_buffer_start_address;
		}

		/* Reset the Rx DMA to receive data into whatever free space remains in
		the Rx buffer. */
		configure_rx_dma(usart_index, data_added);
   80abc:	4620      	mov	r0, r4
   80abe:	2100      	movs	r1, #0
   80ac0:	4b1c      	ldr	r3, [pc, #112]	; (80b34 <local_usart_handler+0x114>)
   80ac2:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80ac4:	6938      	ldr	r0, [r7, #16]
   80ac6:	b128      	cbz	r0, 80ad4 <local_usart_handler+0xb4>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
   80ac8:	2100      	movs	r1, #0
   80aca:	aa01      	add	r2, sp, #4
   80acc:	460b      	mov	r3, r1
   80ace:	f8df c06c 	ldr.w	ip, [pc, #108]	; 80b3c <local_usart_handler+0x11c>
   80ad2:	47e0      	blx	ip
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & US_IER_TIMEOUT) != 0UL) {
   80ad4:	f415 7f80 	tst.w	r5, #256	; 0x100
   80ad8:	d009      	beq.n	80aee <local_usart_handler+0xce>
		/* More characters have been placed into the Rx buffer.

		Restart the timeout after more data has been received. */
		usart_start_rx_timeout(all_usart_definitions[usart_index].peripheral_base_address);
   80ada:	4630      	mov	r0, r6
   80adc:	4b16      	ldr	r3, [pc, #88]	; (80b38 <local_usart_handler+0x118>)
   80ade:	4798      	blx	r3

		if (rx_buffer_definition->rx_event_semaphore != NULL) {
   80ae0:	6938      	ldr	r0, [r7, #16]
   80ae2:	b120      	cbz	r0, 80aee <local_usart_handler+0xce>
			/* Notify that new data is available. */
			xSemaphoreGiveFromISR(
   80ae4:	2100      	movs	r1, #0
   80ae6:	aa01      	add	r2, sp, #4
   80ae8:	460b      	mov	r3, r1
   80aea:	4f14      	ldr	r7, [pc, #80]	; (80b3c <local_usart_handler+0x11c>)
   80aec:	47b8      	blx	r7
					rx_buffer_definition->rx_event_semaphore,
					&higher_priority_task_woken);
		}
	}

	if ((usart_status & SR_ERROR_INTERRUPTS) != 0) {
   80aee:	f015 0fe0 	tst.w	r5, #224	; 0xe0
   80af2:	d00c      	beq.n	80b0e <local_usart_handler+0xee>
		/* An error occurred in either a transmission or reception.  Abort, and
		ensure the peripheral access mutex is made available to tasks. */
		usart_reset_status(
   80af4:	4630      	mov	r0, r6
   80af6:	4b12      	ldr	r3, [pc, #72]	; (80b40 <local_usart_handler+0x120>)
   80af8:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address);
		if (tx_dma_control[usart_index].peripheral_access_mutex != NULL) {
   80afa:	4b0c      	ldr	r3, [pc, #48]	; (80b2c <local_usart_handler+0x10c>)
   80afc:	eb03 04c4 	add.w	r4, r3, r4, lsl #3
   80b00:	6860      	ldr	r0, [r4, #4]
   80b02:	b120      	cbz	r0, 80b0e <local_usart_handler+0xee>
			xSemaphoreGiveFromISR(
   80b04:	2100      	movs	r1, #0
   80b06:	aa01      	add	r2, sp, #4
   80b08:	460b      	mov	r3, r1
   80b0a:	4c0c      	ldr	r4, [pc, #48]	; (80b3c <local_usart_handler+0x11c>)
   80b0c:	47a0      	blx	r4
	has a priority equal to or higher than the currently running task (the task
	this ISR interrupted), then higher_priority_task_woken will have
	automatically been set to pdTRUE within the semaphore function.
	portEND_SWITCHING_ISR() will then ensure that this ISR returns directly to
	the higher priority unblocked task. */
	portEND_SWITCHING_ISR(higher_priority_task_woken);
   80b0e:	9b01      	ldr	r3, [sp, #4]
   80b10:	b10b      	cbz	r3, 80b16 <local_usart_handler+0xf6>
   80b12:	4b0c      	ldr	r3, [pc, #48]	; (80b44 <local_usart_handler+0x124>)
   80b14:	4798      	blx	r3
}
   80b16:	b003      	add	sp, #12
   80b18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
   80b1c:	00083110 	.word	0x00083110
   80b20:	0008150d 	.word	0x0008150d
   80b24:	00081509 	.word	0x00081509
   80b28:	00081505 	.word	0x00081505
   80b2c:	20070638 	.word	0x20070638
   80b30:	000817f1 	.word	0x000817f1
   80b34:	0008097d 	.word	0x0008097d
   80b38:	00081519 	.word	0x00081519
   80b3c:	00081dd9 	.word	0x00081dd9
   80b40:	00081511 	.word	0x00081511
   80b44:	000817e1 	.word	0x000817e1
   80b48:	200705c8 	.word	0x200705c8

00080b4c <freertos_usart_serial_init>:
 *     the initialisation fails then NULL is returned.
 */
freertos_usart_if freertos_usart_serial_init(Usart *p_usart,
		const sam_usart_opt_t *const uart_parameters,
		const freertos_peripheral_options_t *const freertos_driver_parameters)
{
   80b4c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   80b50:	b082      	sub	sp, #8
   80b52:	4605      	mov	r5, r0
   80b54:	4689      	mov	r9, r1
   80b56:	4616      	mov	r6, r2
	portBASE_TYPE usart_index;
	bool is_valid_operating_mode;
	freertos_usart_if return_value;
	const enum peripheral_operation_mode valid_operating_modes[] = {USART_RS232};
   80b58:	af02      	add	r7, sp, #8
   80b5a:	2300      	movs	r3, #0
   80b5c:	f807 3d04 	strb.w	r3, [r7, #-4]!

	/* Find the index into the all_usart_definitions array that holds details of
	the p_usart peripheral. */
	usart_index = get_pdc_peripheral_details(all_usart_definitions,
   80b60:	485c      	ldr	r0, [pc, #368]	; (80cd4 <freertos_usart_serial_init+0x188>)
   80b62:	2104      	movs	r1, #4
   80b64:	462a      	mov	r2, r5
   80b66:	4b5c      	ldr	r3, [pc, #368]	; (80cd8 <freertos_usart_serial_init+0x18c>)
   80b68:	4798      	blx	r3
   80b6a:	4604      	mov	r4, r0
			MAX_USARTS,
			(void *) p_usart);

	/* Check the requested operating mode is valid for the peripheral. */
	is_valid_operating_mode = check_requested_operating_mode(
   80b6c:	7b30      	ldrb	r0, [r6, #12]
   80b6e:	4639      	mov	r1, r7
   80b70:	2201      	movs	r2, #1
   80b72:	4b5a      	ldr	r3, [pc, #360]	; (80cdc <freertos_usart_serial_init+0x190>)
   80b74:	4798      	blx	r3
			sizeof(valid_operating_modes) /
			sizeof(enum peripheral_operation_mode));

	/* Don't do anything unless a valid p_usart pointer was used, and a valid
	operating mode was requested. */
	if ((usart_index < MAX_USARTS) && (is_valid_operating_mode == true)) {
   80b76:	2c03      	cmp	r4, #3
   80b78:	f300 80a5 	bgt.w	80cc6 <freertos_usart_serial_init+0x17a>
   80b7c:	2800      	cmp	r0, #0
   80b7e:	f000 80a4 	beq.w	80cca <freertos_usart_serial_init+0x17e>
		/* This function must be called exactly once per supported USART.  Check it
		has not been called	before. */
		configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read == NULL);
   80b82:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80b86:	4b56      	ldr	r3, [pc, #344]	; (80ce0 <freertos_usart_serial_init+0x194>)
   80b88:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80b8c:	699b      	ldr	r3, [r3, #24]
   80b8e:	b11b      	cbz	r3, 80b98 <freertos_usart_serial_init+0x4c>
   80b90:	4b54      	ldr	r3, [pc, #336]	; (80ce4 <freertos_usart_serial_init+0x198>)
   80b92:	4798      	blx	r3
   80b94:	bf00      	nop
   80b96:	e7fd      	b.n	80b94 <freertos_usart_serial_init+0x48>

		/* Disable everything before enabling the clock. */
		usart_disable_tx(p_usart);
   80b98:	4628      	mov	r0, r5
   80b9a:	4b53      	ldr	r3, [pc, #332]	; (80ce8 <freertos_usart_serial_init+0x19c>)
   80b9c:	4798      	blx	r3
		usart_disable_rx(p_usart);
   80b9e:	4628      	mov	r0, r5
   80ba0:	4b52      	ldr	r3, [pc, #328]	; (80cec <freertos_usart_serial_init+0x1a0>)
   80ba2:	4798      	blx	r3
		pdc_disable_transfer(all_usart_definitions[usart_index].pdc_base_address,
   80ba4:	4f4b      	ldr	r7, [pc, #300]	; (80cd4 <freertos_usart_serial_init+0x188>)
   80ba6:	eb07 1704 	add.w	r7, r7, r4, lsl #4
   80baa:	f8d7 8004 	ldr.w	r8, [r7, #4]
   80bae:	4640      	mov	r0, r8
   80bb0:	f240 2102 	movw	r1, #514	; 0x202
   80bb4:	4b4e      	ldr	r3, [pc, #312]	; (80cf0 <freertos_usart_serial_init+0x1a4>)
   80bb6:	4798      	blx	r3
		Flexcom *p_flexcom = (Flexcom *)temp;
		flexcom_enable(p_flexcom);
		flexcom_set_opmode(p_flexcom, FLEXCOM_USART);
#else
		/* Enable the peripheral clock in the PMC. */
		pmc_enable_periph_clk(
   80bb8:	68b8      	ldr	r0, [r7, #8]
   80bba:	4b4e      	ldr	r3, [pc, #312]	; (80cf4 <freertos_usart_serial_init+0x1a8>)
   80bbc:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_id);
#endif

		switch (freertos_driver_parameters->operation_mode) {
   80bbe:	7b33      	ldrb	r3, [r6, #12]
   80bc0:	b923      	cbnz	r3, 80bcc <freertos_usart_serial_init+0x80>
		case USART_RS232:
			/* Call the standard ASF init function. */
			usart_init_rs232(p_usart, uart_parameters,
   80bc2:	4628      	mov	r0, r5
   80bc4:	4649      	mov	r1, r9
   80bc6:	4a4c      	ldr	r2, [pc, #304]	; (80cf8 <freertos_usart_serial_init+0x1ac>)
   80bc8:	4b4c      	ldr	r3, [pc, #304]	; (80cfc <freertos_usart_serial_init+0x1b0>)
   80bca:	4798      	blx	r3
			/* Other modes are not currently supported. */
			break;
		}

		/* Disable all the interrupts. */
		usart_disable_interrupt(p_usart, MASK_ALL_INTERRUPTS);
   80bcc:	4628      	mov	r0, r5
   80bce:	f04f 31ff 	mov.w	r1, #4294967295
   80bd2:	4b4b      	ldr	r3, [pc, #300]	; (80d00 <freertos_usart_serial_init+0x1b4>)
   80bd4:	4798      	blx	r3

		/* Create any required peripheral access mutexes and transaction complete
		semaphores.  This peripheral is full duplex so only the Tx semaphores
		are created in the following function.  The the Rx semaphores are
		created	separately. */
		create_peripheral_control_semaphores(
   80bd6:	7b70      	ldrb	r0, [r6, #13]
   80bd8:	494a      	ldr	r1, [pc, #296]	; (80d04 <freertos_usart_serial_init+0x1b8>)
   80bda:	eb01 01c4 	add.w	r1, r1, r4, lsl #3
   80bde:	2200      	movs	r2, #0
   80be0:	4b49      	ldr	r3, [pc, #292]	; (80d08 <freertos_usart_serial_init+0x1bc>)
   80be2:	4798      	blx	r3
				freertos_driver_parameters->options_flags,
				&(tx_dma_control[usart_index]),
				NULL /* The rx structures are not created in this function. */);

		/* Is the driver also going to receive? */
		if (freertos_driver_parameters->receive_buffer != NULL) {
   80be4:	6833      	ldr	r3, [r6, #0]
   80be6:	2b00      	cmp	r3, #0
   80be8:	d053      	beq.n	80c92 <freertos_usart_serial_init+0x146>
			capped to that available up to the end of the buffer only.  If this
			semaphore was a binary semaphore, it would then be 'taken' even
			though, unknown to the reading task, unread and therefore available
			data remained at the beginning of the buffer. */
			rx_buffer_definitions[usart_index].rx_event_semaphore =
					xSemaphoreCreateCounting(portMAX_DELAY, 0);
   80bea:	f04f 30ff 	mov.w	r0, #4294967295
   80bee:	2100      	movs	r1, #0
   80bf0:	4b46      	ldr	r3, [pc, #280]	; (80d0c <freertos_usart_serial_init+0x1c0>)
   80bf2:	4798      	blx	r3
			and the end of the buffer, the actual amount returned will be
			capped to that available up to the end of the buffer only.  If this
			semaphore was a binary semaphore, it would then be 'taken' even
			though, unknown to the reading task, unread and therefore available
			data remained at the beginning of the buffer. */
			rx_buffer_definitions[usart_index].rx_event_semaphore =
   80bf4:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80bf8:	4b39      	ldr	r3, [pc, #228]	; (80ce0 <freertos_usart_serial_init+0x194>)
   80bfa:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80bfe:	6118      	str	r0, [r3, #16]
					xSemaphoreCreateCounting(portMAX_DELAY, 0);
			configASSERT(rx_buffer_definitions[usart_index].rx_event_semaphore);
   80c00:	b918      	cbnz	r0, 80c0a <freertos_usart_serial_init+0xbe>
   80c02:	4b38      	ldr	r3, [pc, #224]	; (80ce4 <freertos_usart_serial_init+0x198>)
   80c04:	4798      	blx	r3
   80c06:	bf00      	nop
   80c08:	e7fd      	b.n	80c06 <freertos_usart_serial_init+0xba>

			/* Set the timeout to 5ms, then start waiting for a character (the
			timeout is not started until characters have started to	be
			received). */
			usart_set_rx_timeout(p_usart,
   80c0a:	f8d9 1000 	ldr.w	r1, [r9]
   80c0e:	4b40      	ldr	r3, [pc, #256]	; (80d10 <freertos_usart_serial_init+0x1c4>)
   80c10:	fba3 2101 	umull	r2, r1, r3, r1
   80c14:	4628      	mov	r0, r5
   80c16:	0989      	lsrs	r1, r1, #6
   80c18:	4b3e      	ldr	r3, [pc, #248]	; (80d14 <freertos_usart_serial_init+0x1c8>)
   80c1a:	4798      	blx	r3
					(uart_parameters->baudrate / BITS_PER_5_MS));
			usart_start_rx_timeout(p_usart);
   80c1c:	4628      	mov	r0, r5
   80c1e:	4b3e      	ldr	r3, [pc, #248]	; (80d18 <freertos_usart_serial_init+0x1cc>)
   80c20:	4798      	blx	r3

			/* The receive buffer is currently empty, so the DMA has control
			over the entire buffer. */
			rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr =
   80c22:	f8df 90bc 	ldr.w	r9, [pc, #188]	; 80ce0 <freertos_usart_serial_init+0x194>
   80c26:	00e3      	lsls	r3, r4, #3
   80c28:	ebc4 0a03 	rsb	sl, r4, r3
   80c2c:	ea4f 0a8a 	mov.w	sl, sl, lsl #2
   80c30:	eb09 070a 	add.w	r7, r9, sl
   80c34:	6832      	ldr	r2, [r6, #0]
   80c36:	60ba      	str	r2, [r7, #8]
					(uint32_t)freertos_driver_parameters->receive_buffer;
			rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_size =
					freertos_driver_parameters->receive_buffer_size;
   80c38:	6872      	ldr	r2, [r6, #4]

			/* The receive buffer is currently empty, so the DMA has control
			over the entire buffer. */
			rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr =
					(uint32_t)freertos_driver_parameters->receive_buffer;
			rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_size =
   80c3a:	60fa      	str	r2, [r7, #12]
					freertos_driver_parameters->receive_buffer_size;
			pdc_rx_init(
   80c3c:	1b1b      	subs	r3, r3, r4
   80c3e:	eb09 0183 	add.w	r1, r9, r3, lsl #2
   80c42:	4640      	mov	r0, r8
   80c44:	3108      	adds	r1, #8
   80c46:	2200      	movs	r2, #0
   80c48:	4b34      	ldr	r3, [pc, #208]	; (80d1c <freertos_usart_serial_init+0x1d0>)
   80c4a:	4798      	blx	r3
					NULL);

			/* Set the next byte to read to the start of the buffer as no data
			has yet been read. */
			rx_buffer_definitions[usart_index].next_byte_to_read =
					freertos_driver_parameters->receive_buffer;
   80c4c:	6833      	ldr	r3, [r6, #0]
					&(rx_buffer_definitions[usart_index].rx_pdc_parameters),
					NULL);

			/* Set the next byte to read to the start of the buffer as no data
			has yet been read. */
			rx_buffer_definitions[usart_index].next_byte_to_read =
   80c4e:	61bb      	str	r3, [r7, #24]
					freertos_driver_parameters->receive_buffer;

			/* Remember the limits of entire buffer. */
			rx_buffer_definitions[usart_index].rx_buffer_start_address =
					rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr;
   80c50:	68bb      	ldr	r3, [r7, #8]
			has yet been read. */
			rx_buffer_definitions[usart_index].next_byte_to_read =
					freertos_driver_parameters->receive_buffer;

			/* Remember the limits of entire buffer. */
			rx_buffer_definitions[usart_index].rx_buffer_start_address =
   80c52:	f849 300a 	str.w	r3, [r9, sl]
					rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr;
			rx_buffer_definitions[usart_index].past_rx_buffer_end_address =
					rx_buffer_definitions[usart_index].rx_buffer_start_address +
   80c56:	6872      	ldr	r2, [r6, #4]
   80c58:	4413      	add	r3, r2
					freertos_driver_parameters->receive_buffer;

			/* Remember the limits of entire buffer. */
			rx_buffer_definitions[usart_index].rx_buffer_start_address =
					rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_addr;
			rx_buffer_definitions[usart_index].past_rx_buffer_end_address =
   80c5a:	607b      	str	r3, [r7, #4]
					rx_buffer_definitions[usart_index].rx_buffer_start_address +
					freertos_driver_parameters->receive_buffer_size;

			/* If the rx driver is to be thread aware, create an access control
			mutex. */
			if ((freertos_driver_parameters->options_flags &
   80c5c:	7b73      	ldrb	r3, [r6, #13]
   80c5e:	f013 0f02 	tst.w	r3, #2
   80c62:	d00c      	beq.n	80c7e <freertos_usart_serial_init+0x132>
					USE_RX_ACCESS_MUTEX) != 0) {
				rx_buffer_definitions[usart_index].rx_access_mutex =
					xSemaphoreCreateMutex();
   80c64:	2001      	movs	r0, #1
   80c66:	4b2e      	ldr	r3, [pc, #184]	; (80d20 <freertos_usart_serial_init+0x1d4>)
   80c68:	4798      	blx	r3

			/* If the rx driver is to be thread aware, create an access control
			mutex. */
			if ((freertos_driver_parameters->options_flags &
					USE_RX_ACCESS_MUTEX) != 0) {
				rx_buffer_definitions[usart_index].rx_access_mutex =
   80c6a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80c6e:	eb09 0382 	add.w	r3, r9, r2, lsl #2
   80c72:	6158      	str	r0, [r3, #20]
					xSemaphoreCreateMutex();
				configASSERT(rx_buffer_definitions[usart_index].rx_access_mutex);
   80c74:	b918      	cbnz	r0, 80c7e <freertos_usart_serial_init+0x132>
   80c76:	4b1b      	ldr	r3, [pc, #108]	; (80ce4 <freertos_usart_serial_init+0x198>)
   80c78:	4798      	blx	r3
   80c7a:	bf00      	nop
   80c7c:	e7fd      	b.n	80c7a <freertos_usart_serial_init+0x12e>
			}

			/* Catch the DMA running out of Rx space, and gaps in the
			reception.  These events are both used to signal that there is
			data available in the Rx buffer. */
			usart_enable_interrupt(p_usart, US_IER_ENDRX | US_IER_TIMEOUT);
   80c7e:	4628      	mov	r0, r5
   80c80:	f44f 7184 	mov.w	r1, #264	; 0x108
   80c84:	4b27      	ldr	r3, [pc, #156]	; (80d24 <freertos_usart_serial_init+0x1d8>)
   80c86:	4798      	blx	r3

			/* The Rx DMA is running all the time, so enable it now. */
			pdc_enable_transfer(
   80c88:	4640      	mov	r0, r8
   80c8a:	2101      	movs	r1, #1
   80c8c:	4b26      	ldr	r3, [pc, #152]	; (80d28 <freertos_usart_serial_init+0x1dc>)
   80c8e:	4798      	blx	r3
   80c90:	e006      	b.n	80ca0 <freertos_usart_serial_init+0x154>
		} else {
			/* next_byte_to_read is used to check to see if this function
			has been called before, so it must be set to something, even if
			it is not going to be used.  The value it is set to is not
			important, provided it is not zero (NULL). */
			rx_buffer_definitions[usart_index].next_byte_to_read = RX_NOT_USED;
   80c92:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80c96:	4b12      	ldr	r3, [pc, #72]	; (80ce0 <freertos_usart_serial_init+0x194>)
   80c98:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80c9c:	2201      	movs	r2, #1
   80c9e:	619a      	str	r2, [r3, #24]
		}

		/* Configure and enable the USART interrupt in the interrupt controller. */
		configure_interrupt_controller(all_usart_definitions[usart_index].peripheral_irq,
   80ca0:	4f0c      	ldr	r7, [pc, #48]	; (80cd4 <freertos_usart_serial_init+0x188>)
   80ca2:	0124      	lsls	r4, r4, #4
   80ca4:	193b      	adds	r3, r7, r4
   80ca6:	f993 000c 	ldrsb.w	r0, [r3, #12]
   80caa:	68b1      	ldr	r1, [r6, #8]
   80cac:	4b1f      	ldr	r3, [pc, #124]	; (80d2c <freertos_usart_serial_init+0x1e0>)
   80cae:	4798      	blx	r3
				freertos_driver_parameters->interrupt_priority);

		/* Error interrupts are always enabled. */
		usart_enable_interrupt(
   80cb0:	5938      	ldr	r0, [r7, r4]
   80cb2:	21e0      	movs	r1, #224	; 0xe0
   80cb4:	4b1b      	ldr	r3, [pc, #108]	; (80d24 <freertos_usart_serial_init+0x1d8>)
   80cb6:	4798      	blx	r3
				all_usart_definitions[usart_index].peripheral_base_address,
				IER_ERROR_INTERRUPTS);

		/* Finally, enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   80cb8:	4628      	mov	r0, r5
   80cba:	4b1d      	ldr	r3, [pc, #116]	; (80d30 <freertos_usart_serial_init+0x1e4>)
   80cbc:	4798      	blx	r3
		usart_enable_rx(p_usart);
   80cbe:	4628      	mov	r0, r5
   80cc0:	4b1c      	ldr	r3, [pc, #112]	; (80d34 <freertos_usart_serial_init+0x1e8>)
   80cc2:	4798      	blx	r3

		return_value = (freertos_usart_if) p_usart;
   80cc4:	e002      	b.n	80ccc <freertos_usart_serial_init+0x180>
	} else {
		return_value = NULL;
   80cc6:	2500      	movs	r5, #0
   80cc8:	e000      	b.n	80ccc <freertos_usart_serial_init+0x180>
   80cca:	2500      	movs	r5, #0
	}

	return return_value;
}
   80ccc:	4628      	mov	r0, r5
   80cce:	b002      	add	sp, #8
   80cd0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80cd4:	00083110 	.word	0x00083110
   80cd8:	00080691 	.word	0x00080691
   80cdc:	000806bd 	.word	0x000806bd
   80ce0:	200705c8 	.word	0x200705c8
   80ce4:	000817f1 	.word	0x000817f1
   80ce8:	000814e5 	.word	0x000814e5
   80cec:	000814f5 	.word	0x000814f5
   80cf0:	0008101d 	.word	0x0008101d
   80cf4:	00081335 	.word	0x00081335
   80cf8:	0501bd00 	.word	0x0501bd00
   80cfc:	00081489 	.word	0x00081489
   80d00:	00081505 	.word	0x00081505
   80d04:	20070638 	.word	0x20070638
   80d08:	000806ed 	.word	0x000806ed
   80d0c:	00081c31 	.word	0x00081c31
   80d10:	51eb851f 	.word	0x51eb851f
   80d14:	000814fd 	.word	0x000814fd
   80d18:	00081519 	.word	0x00081519
   80d1c:	00080ff9 	.word	0x00080ff9
   80d20:	00081d75 	.word	0x00081d75
   80d24:	00081501 	.word	0x00081501
   80d28:	00081011 	.word	0x00081011
   80d2c:	00080799 	.word	0x00080799
   80d30:	000814dd 	.word	0x000814dd
   80d34:	000814ed 	.word	0x000814ed

00080d38 <freertos_usart_write_packet_async>:
 *     operation.
 */
status_code_t freertos_usart_write_packet_async(freertos_usart_if p_usart,
		const uint8_t *data, size_t len, portTickType block_time_ticks,
		xSemaphoreHandle notification_semaphore)
{
   80d38:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80d3c:	b084      	sub	sp, #16
   80d3e:	4606      	mov	r6, r0
   80d40:	4688      	mov	r8, r1
   80d42:	4617      	mov	r7, r2
   80d44:	9303      	str	r3, [sp, #12]
	status_code_t return_value;
	portBASE_TYPE usart_index;
	Usart *usart_base;

	usart_base = (Usart *) p_usart;
	usart_index = get_pdc_peripheral_details(all_usart_definitions,
   80d46:	4817      	ldr	r0, [pc, #92]	; (80da4 <freertos_usart_write_packet_async+0x6c>)
   80d48:	2104      	movs	r1, #4
   80d4a:	4632      	mov	r2, r6
   80d4c:	4b16      	ldr	r3, [pc, #88]	; (80da8 <freertos_usart_write_packet_async+0x70>)
   80d4e:	4798      	blx	r3
   80d50:	4604      	mov	r4, r0
			MAX_USARTS,
			(void *) usart_base);

	/* Don't do anything unless a valid USART pointer was used. */
	if (usart_index < MAX_USARTS) {
   80d52:	2803      	cmp	r0, #3
   80d54:	dc20      	bgt.n	80d98 <freertos_usart_write_packet_async+0x60>
		return_value = freertos_obtain_peripheral_access_mutex(
   80d56:	4d15      	ldr	r5, [pc, #84]	; (80dac <freertos_usart_write_packet_async+0x74>)
   80d58:	eb05 05c0 	add.w	r5, r5, r0, lsl #3
   80d5c:	4628      	mov	r0, r5
   80d5e:	a903      	add	r1, sp, #12
   80d60:	4b13      	ldr	r3, [pc, #76]	; (80db0 <freertos_usart_write_packet_async+0x78>)
   80d62:	4798      	blx	r3
				&(tx_dma_control[usart_index]),
				&block_time_ticks);

		if (return_value == STATUS_OK) {
   80d64:	4603      	mov	r3, r0
   80d66:	b9c0      	cbnz	r0, 80d9a <freertos_usart_write_packet_async+0x62>
			freertos_start_pdc_tx(&(tx_dma_control[usart_index]),
   80d68:	4b0e      	ldr	r3, [pc, #56]	; (80da4 <freertos_usart_write_packet_async+0x6c>)
   80d6a:	eb03 1404 	add.w	r4, r3, r4, lsl #4
   80d6e:	6863      	ldr	r3, [r4, #4]
   80d70:	9a0a      	ldr	r2, [sp, #40]	; 0x28
   80d72:	9200      	str	r2, [sp, #0]
   80d74:	2201      	movs	r2, #1
   80d76:	9201      	str	r2, [sp, #4]
   80d78:	4628      	mov	r0, r5
   80d7a:	4641      	mov	r1, r8
   80d7c:	463a      	mov	r2, r7
   80d7e:	4c0d      	ldr	r4, [pc, #52]	; (80db4 <freertos_usart_write_packet_async+0x7c>)
   80d80:	47a0      	blx	r4
			/* Catch the end of transmission so the access mutex can be
			returned, and the task notified (if it supplied a notification
			semaphore).  The interrupt can be enabled here because the ENDTX
			signal from the PDC to the USART will have been de-asserted when
			the next transfer was configured. */
			usart_enable_interrupt(usart_base, US_IER_ENDTX);
   80d82:	4630      	mov	r0, r6
   80d84:	2110      	movs	r1, #16
   80d86:	4b0c      	ldr	r3, [pc, #48]	; (80db8 <freertos_usart_write_packet_async+0x80>)
   80d88:	4798      	blx	r3

			return_value = freertos_optionally_wait_transfer_completion(
   80d8a:	4628      	mov	r0, r5
   80d8c:	990a      	ldr	r1, [sp, #40]	; 0x28
   80d8e:	9a03      	ldr	r2, [sp, #12]
   80d90:	4b0a      	ldr	r3, [pc, #40]	; (80dbc <freertos_usart_write_packet_async+0x84>)
   80d92:	4798      	blx	r3
   80d94:	4603      	mov	r3, r0
   80d96:	e000      	b.n	80d9a <freertos_usart_write_packet_async+0x62>
					&(tx_dma_control[usart_index]),
					notification_semaphore,
					block_time_ticks);
		}
	} else {
		return_value = ERR_INVALID_ARG;
   80d98:	23f8      	movs	r3, #248	; 0xf8
	}

	return return_value;
}
   80d9a:	b258      	sxtb	r0, r3
   80d9c:	b004      	add	sp, #16
   80d9e:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80da2:	bf00      	nop
   80da4:	00083110 	.word	0x00083110
   80da8:	00080691 	.word	0x00080691
   80dac:	20070638 	.word	0x20070638
   80db0:	00080885 	.word	0x00080885
   80db4:	000808d5 	.word	0x000808d5
   80db8:	00081501 	.word	0x00081501
   80dbc:	00080955 	.word	0x00080955

00080dc0 <freertos_usart_serial_read_packet>:
 * \return     The number of bytes that were copied into data.  This will be
 *     less than the requested number of bytes if a time out occurred.
 */
uint32_t freertos_usart_serial_read_packet(freertos_usart_if p_usart,
		uint8_t *data, uint32_t len, portTickType block_time_ticks)
{
   80dc0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   80dc4:	b085      	sub	sp, #20
   80dc6:	4604      	mov	r4, r0
   80dc8:	4688      	mov	r8, r1
   80dca:	4617      	mov	r7, r2
   80dcc:	9301      	str	r3, [sp, #4]
	Usart *usart_base;
	xTimeOutType time_out_definition;
	uint32_t bytes_read = 0;

	usart_base = (Usart *) p_usart;
	usart_index = get_pdc_peripheral_details(all_usart_definitions,
   80dce:	4846      	ldr	r0, [pc, #280]	; (80ee8 <freertos_usart_serial_read_packet+0x128>)
   80dd0:	2104      	movs	r1, #4
   80dd2:	4622      	mov	r2, r4
   80dd4:	4b45      	ldr	r3, [pc, #276]	; (80eec <freertos_usart_serial_read_packet+0x12c>)
   80dd6:	4798      	blx	r3
   80dd8:	4604      	mov	r4, r0
			MAX_USARTS,
			(void *) usart_base);

	/* It is possible to initialise the peripheral to only use Tx and not Rx.
	Check that Rx has been initialised. */
	configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read);
   80dda:	ebc0 02c0 	rsb	r2, r0, r0, lsl #3
   80dde:	4b44      	ldr	r3, [pc, #272]	; (80ef0 <freertos_usart_serial_read_packet+0x130>)
   80de0:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80de4:	699b      	ldr	r3, [r3, #24]
   80de6:	b91b      	cbnz	r3, 80df0 <freertos_usart_serial_read_packet+0x30>
   80de8:	4b42      	ldr	r3, [pc, #264]	; (80ef4 <freertos_usart_serial_read_packet+0x134>)
   80dea:	4798      	blx	r3
   80dec:	bf00      	nop
   80dee:	e7fd      	b.n	80dec <freertos_usart_serial_read_packet+0x2c>
	configASSERT(rx_buffer_definitions[usart_index].next_byte_to_read !=
   80df0:	2b01      	cmp	r3, #1
   80df2:	d103      	bne.n	80dfc <freertos_usart_serial_read_packet+0x3c>
   80df4:	4b3f      	ldr	r3, [pc, #252]	; (80ef4 <freertos_usart_serial_read_packet+0x134>)
   80df6:	4798      	blx	r3
   80df8:	bf00      	nop
   80dfa:	e7fd      	b.n	80df8 <freertos_usart_serial_read_packet+0x38>
			RX_NOT_USED);

	/* Only do anything if the USART is valid. */
	if (usart_index < MAX_USARTS) {
   80dfc:	2803      	cmp	r0, #3
   80dfe:	dc5b      	bgt.n	80eb8 <freertos_usart_serial_read_packet+0xf8>
		/* Must not request more bytes than will fit in the buffer. */
		if (len <=
				(rx_buffer_definitions[usart_index].past_rx_buffer_end_address
   80e00:	4a3b      	ldr	r2, [pc, #236]	; (80ef0 <freertos_usart_serial_read_packet+0x130>)
   80e02:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
   80e06:	009b      	lsls	r3, r3, #2
   80e08:	18d1      	adds	r1, r2, r3
				- rx_buffer_definitions[usart_index].rx_buffer_start_address)) {
   80e0a:	6849      	ldr	r1, [r1, #4]
   80e0c:	58d3      	ldr	r3, [r2, r3]
   80e0e:	1acb      	subs	r3, r1, r3
			RX_NOT_USED);

	/* Only do anything if the USART is valid. */
	if (usart_index < MAX_USARTS) {
		/* Must not request more bytes than will fit in the buffer. */
		if (len <=
   80e10:	42bb      	cmp	r3, r7
   80e12:	d353      	bcc.n	80ebc <freertos_usart_serial_read_packet+0xfc>
				(rx_buffer_definitions[usart_index].past_rx_buffer_end_address
				- rx_buffer_definitions[usart_index].rx_buffer_start_address)) {
			/* Remember the time on entry. */
			vTaskSetTimeOutState(&time_out_definition);
   80e14:	a802      	add	r0, sp, #8
   80e16:	4b38      	ldr	r3, [pc, #224]	; (80ef8 <freertos_usart_serial_read_packet+0x138>)
   80e18:	4798      	blx	r3

			/* If an Rx mutex is in use, attempt to obtain it. */
			if (rx_buffer_definitions[usart_index].rx_access_mutex != NULL) {
   80e1a:	ebc4 02c4 	rsb	r2, r4, r4, lsl #3
   80e1e:	4b34      	ldr	r3, [pc, #208]	; (80ef0 <freertos_usart_serial_read_packet+0x130>)
   80e20:	eb03 0382 	add.w	r3, r3, r2, lsl #2
   80e24:	6958      	ldr	r0, [r3, #20]
   80e26:	2800      	cmp	r0, #0
   80e28:	d04a      	beq.n	80ec0 <freertos_usart_serial_read_packet+0x100>
				/* Attempt to obtain the mutex. */
				attempt_read = xSemaphoreTake(
   80e2a:	2100      	movs	r1, #0
   80e2c:	9a01      	ldr	r2, [sp, #4]
   80e2e:	460b      	mov	r3, r1
   80e30:	4d32      	ldr	r5, [pc, #200]	; (80efc <freertos_usart_serial_read_packet+0x13c>)
   80e32:	47a8      	blx	r5
						rx_buffer_definitions[usart_index].rx_access_mutex,
						block_time_ticks);

				if (attempt_read == pdTRUE) {
   80e34:	2801      	cmp	r0, #1
   80e36:	d151      	bne.n	80edc <freertos_usart_serial_read_packet+0x11c>
					/* The semaphore was obtained, adjust the block_time_ticks to take
					into account the time taken to obtain the semaphore. */
					if (xTaskCheckForTimeOut(&time_out_definition,
   80e38:	a802      	add	r0, sp, #8
   80e3a:	a901      	add	r1, sp, #4
   80e3c:	4b30      	ldr	r3, [pc, #192]	; (80f00 <freertos_usart_serial_read_packet+0x140>)
   80e3e:	4798      	blx	r3
   80e40:	2801      	cmp	r0, #1
   80e42:	d13d      	bne.n	80ec0 <freertos_usart_serial_read_packet+0x100>
							&block_time_ticks) == pdTRUE) {
						attempt_read = pdFALSE;

						/* The port is not going to be used, so return the
						mutex now. */
						xSemaphoreGive(rx_buffer_definitions[usart_index].rx_access_mutex);
   80e44:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   80e48:	4b29      	ldr	r3, [pc, #164]	; (80ef0 <freertos_usart_serial_read_packet+0x130>)
   80e4a:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   80e4e:	6958      	ldr	r0, [r3, #20]
   80e50:	2100      	movs	r1, #0
   80e52:	460a      	mov	r2, r1
   80e54:	460b      	mov	r3, r1
   80e56:	4c2b      	ldr	r4, [pc, #172]	; (80f04 <freertos_usart_serial_read_packet+0x144>)
   80e58:	47a0      	blx	r4
   80e5a:	e03f      	b.n	80edc <freertos_usart_serial_read_packet+0x11c>
			}

			if (attempt_read == pdTRUE) {
				do {
					/* Wait until data is available. */
					xSemaphoreTake(rx_buffer_definitions[usart_index].rx_event_semaphore,
   80e5c:	6930      	ldr	r0, [r6, #16]
   80e5e:	2100      	movs	r1, #0
   80e60:	9a01      	ldr	r2, [sp, #4]
   80e62:	460b      	mov	r3, r1
   80e64:	47d8      	blx	fp

					/* Copy as much data as is available, up to however much
					a maximum of the total number of requested bytes. */
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
							&(rx_buffer_definitions[usart_index]),
							all_usart_definitions[usart_index].pdc_base_address->PERIPH_RPR,
   80e66:	f8da 3004 	ldr.w	r3, [sl, #4]
					xSemaphoreTake(rx_buffer_definitions[usart_index].rx_event_semaphore,
							block_time_ticks);

					/* Copy as much data as is available, up to however much
					a maximum of the total number of requested bytes. */
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
   80e6a:	6819      	ldr	r1, [r3, #0]
   80e6c:	4630      	mov	r0, r6
   80e6e:	eb08 0205 	add.w	r2, r8, r5
   80e72:	1b7b      	subs	r3, r7, r5
   80e74:	47c8      	blx	r9

					/* The Rx DMA will have stopped if the Rx buffer had become
					full before this read operation.  If bytes were removed by
					this read then there is guaranteed to be space in the Rx
					buffer and the Rx DMA can be restarted. */
					if (bytes_read > 0) {
   80e76:	182d      	adds	r5, r5, r0
   80e78:	d009      	beq.n	80e8e <freertos_usart_serial_read_packet+0xce>
						taskENTER_CRITICAL();
   80e7a:	4b23      	ldr	r3, [pc, #140]	; (80f08 <freertos_usart_serial_read_packet+0x148>)
   80e7c:	4798      	blx	r3
						{
							if(rx_buffer_definitions[usart_index].rx_pdc_parameters.ul_size == 0UL) {
   80e7e:	68f3      	ldr	r3, [r6, #12]
   80e80:	b91b      	cbnz	r3, 80e8a <freertos_usart_serial_read_packet+0xca>
								configure_rx_dma(usart_index, data_removed);
   80e82:	4620      	mov	r0, r4
   80e84:	2101      	movs	r1, #1
   80e86:	4b21      	ldr	r3, [pc, #132]	; (80f0c <freertos_usart_serial_read_packet+0x14c>)
   80e88:	4798      	blx	r3
							}
						}
						taskEXIT_CRITICAL();
   80e8a:	4b21      	ldr	r3, [pc, #132]	; (80f10 <freertos_usart_serial_read_packet+0x150>)
   80e8c:	4798      	blx	r3

				  /* Until all the requested bytes are received, or the function
				  runs out of time. */
				} while ((bytes_read < len) && (xTaskCheckForTimeOut(
						&time_out_definition,
						&block_time_ticks) == pdFALSE));
   80e8e:	42af      	cmp	r7, r5
   80e90:	d905      	bls.n	80e9e <freertos_usart_serial_read_packet+0xde>
						taskEXIT_CRITICAL();
					}

				  /* Until all the requested bytes are received, or the function
				  runs out of time. */
				} while ((bytes_read < len) && (xTaskCheckForTimeOut(
   80e92:	a802      	add	r0, sp, #8
   80e94:	a901      	add	r1, sp, #4
   80e96:	4b1a      	ldr	r3, [pc, #104]	; (80f00 <freertos_usart_serial_read_packet+0x140>)
   80e98:	4798      	blx	r3
   80e9a:	2800      	cmp	r0, #0
   80e9c:	d0de      	beq.n	80e5c <freertos_usart_serial_read_packet+0x9c>
						&time_out_definition,
						&block_time_ticks) == pdFALSE));

				if (rx_buffer_definitions[usart_index].rx_access_mutex != NULL) {
   80e9e:	ebc4 04c4 	rsb	r4, r4, r4, lsl #3
   80ea2:	4b13      	ldr	r3, [pc, #76]	; (80ef0 <freertos_usart_serial_read_packet+0x130>)
   80ea4:	eb03 0384 	add.w	r3, r3, r4, lsl #2
   80ea8:	6958      	ldr	r0, [r3, #20]
   80eaa:	b1c0      	cbz	r0, 80ede <freertos_usart_serial_read_packet+0x11e>
					/* Return the mutex. */
					xSemaphoreGive(rx_buffer_definitions[usart_index].rx_access_mutex);
   80eac:	2100      	movs	r1, #0
   80eae:	460a      	mov	r2, r1
   80eb0:	460b      	mov	r3, r1
   80eb2:	4c14      	ldr	r4, [pc, #80]	; (80f04 <freertos_usart_serial_read_packet+0x144>)
   80eb4:	47a0      	blx	r4
   80eb6:	e012      	b.n	80ede <freertos_usart_serial_read_packet+0x11e>
		uint8_t *data, uint32_t len, portTickType block_time_ticks)
{
	portBASE_TYPE usart_index, attempt_read;
	Usart *usart_base;
	xTimeOutType time_out_definition;
	uint32_t bytes_read = 0;
   80eb8:	2500      	movs	r5, #0
   80eba:	e010      	b.n	80ede <freertos_usart_serial_read_packet+0x11e>
   80ebc:	2500      	movs	r5, #0
   80ebe:	e00e      	b.n	80ede <freertos_usart_serial_read_packet+0x11e>
 * \return     The number of bytes that were copied into data.  This will be
 *     less than the requested number of bytes if a time out occurred.
 */
uint32_t freertos_usart_serial_read_packet(freertos_usart_if p_usart,
		uint8_t *data, uint32_t len, portTickType block_time_ticks)
{
   80ec0:	2500      	movs	r5, #0
			}

			if (attempt_read == pdTRUE) {
				do {
					/* Wait until data is available. */
					xSemaphoreTake(rx_buffer_definitions[usart_index].rx_event_semaphore,
   80ec2:	ebc4 06c4 	rsb	r6, r4, r4, lsl #3
   80ec6:	4b0a      	ldr	r3, [pc, #40]	; (80ef0 <freertos_usart_serial_read_packet+0x130>)
   80ec8:	eb03 0686 	add.w	r6, r3, r6, lsl #2
   80ecc:	f8df b02c 	ldr.w	fp, [pc, #44]	; 80efc <freertos_usart_serial_read_packet+0x13c>

					/* Copy as much data as is available, up to however much
					a maximum of the total number of requested bytes. */
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
							&(rx_buffer_definitions[usart_index]),
							all_usart_definitions[usart_index].pdc_base_address->PERIPH_RPR,
   80ed0:	4b05      	ldr	r3, [pc, #20]	; (80ee8 <freertos_usart_serial_read_packet+0x128>)
   80ed2:	eb03 1a04 	add.w	sl, r3, r4, lsl #4
					xSemaphoreTake(rx_buffer_definitions[usart_index].rx_event_semaphore,
							block_time_ticks);

					/* Copy as much data as is available, up to however much
					a maximum of the total number of requested bytes. */
					bytes_read += freertos_copy_bytes_from_pdc_circular_buffer(
   80ed6:	f8df 903c 	ldr.w	r9, [pc, #60]	; 80f14 <freertos_usart_serial_read_packet+0x154>
   80eda:	e7bf      	b.n	80e5c <freertos_usart_serial_read_packet+0x9c>
		uint8_t *data, uint32_t len, portTickType block_time_ticks)
{
	portBASE_TYPE usart_index, attempt_read;
	Usart *usart_base;
	xTimeOutType time_out_definition;
	uint32_t bytes_read = 0;
   80edc:	2500      	movs	r5, #0
			}
		}
	}

	return bytes_read;
}
   80ede:	4628      	mov	r0, r5
   80ee0:	b005      	add	sp, #20
   80ee2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80ee6:	bf00      	nop
   80ee8:	00083110 	.word	0x00083110
   80eec:	00080691 	.word	0x00080691
   80ef0:	200705c8 	.word	0x200705c8
   80ef4:	000817f1 	.word	0x000817f1
   80ef8:	000827fd 	.word	0x000827fd
   80efc:	00081e69 	.word	0x00081e69
   80f00:	00082825 	.word	0x00082825
   80f04:	00081c59 	.word	0x00081c59
   80f08:	00081801 	.word	0x00081801
   80f0c:	0008097d 	.word	0x0008097d
   80f10:	00081821 	.word	0x00081821
   80f14:	000807fd 	.word	0x000807fd

00080f18 <USART0_Handler>:
#endif /* USART */

#ifdef USART0

void USART0_Handler(void)
{
   80f18:	b508      	push	{r3, lr}
	local_usart_handler(0);
   80f1a:	2000      	movs	r0, #0
   80f1c:	4b01      	ldr	r3, [pc, #4]	; (80f24 <USART0_Handler+0xc>)
   80f1e:	4798      	blx	r3
   80f20:	bd08      	pop	{r3, pc}
   80f22:	bf00      	nop
   80f24:	00080a21 	.word	0x00080a21

00080f28 <USART1_Handler>:
#endif /* USART0 */

#ifdef USART1

void USART1_Handler(void)
{
   80f28:	b508      	push	{r3, lr}
	local_usart_handler(1);
   80f2a:	2001      	movs	r0, #1
   80f2c:	4b01      	ldr	r3, [pc, #4]	; (80f34 <USART1_Handler+0xc>)
   80f2e:	4798      	blx	r3
   80f30:	bd08      	pop	{r3, pc}
   80f32:	bf00      	nop
   80f34:	00080a21 	.word	0x00080a21

00080f38 <USART2_Handler>:
#endif /* USART1 */

#ifdef USART2

void USART2_Handler(void)
{
   80f38:	b508      	push	{r3, lr}
	local_usart_handler(2);
   80f3a:	2002      	movs	r0, #2
   80f3c:	4b01      	ldr	r3, [pc, #4]	; (80f44 <USART2_Handler+0xc>)
   80f3e:	4798      	blx	r3
   80f40:	bd08      	pop	{r3, pc}
   80f42:	bf00      	nop
   80f44:	00080a21 	.word	0x00080a21

00080f48 <USART3_Handler>:
#endif /* USART2 */

#ifdef USART3

void USART3_Handler(void)
{
   80f48:	b508      	push	{r3, lr}
	local_usart_handler(3);
   80f4a:	2003      	movs	r0, #3
   80f4c:	4b01      	ldr	r3, [pc, #4]	; (80f54 <USART3_Handler+0xc>)
   80f4e:	4798      	blx	r3
   80f50:	bd08      	pop	{r3, pc}
   80f52:	bf00      	nop
   80f54:	00080a21 	.word	0x00080a21

00080f58 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80f58:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80f5a:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80f5e:	4b1a      	ldr	r3, [pc, #104]	; (80fc8 <board_init+0x70>)
   80f60:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   80f62:	200b      	movs	r0, #11
   80f64:	4c19      	ldr	r4, [pc, #100]	; (80fcc <board_init+0x74>)
   80f66:	47a0      	blx	r4
   80f68:	200c      	movs	r0, #12
   80f6a:	47a0      	blx	r4
   80f6c:	200d      	movs	r0, #13
   80f6e:	47a0      	blx	r4
   80f70:	200e      	movs	r0, #14
   80f72:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   80f74:	203b      	movs	r0, #59	; 0x3b
   80f76:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f7a:	4c15      	ldr	r4, [pc, #84]	; (80fd0 <board_init+0x78>)
   80f7c:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80f7e:	2055      	movs	r0, #85	; 0x55
   80f80:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f84:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   80f86:	2056      	movs	r0, #86	; 0x56
   80f88:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80f8c:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   80f8e:	2068      	movs	r0, #104	; 0x68
   80f90:	4910      	ldr	r1, [pc, #64]	; (80fd4 <board_init+0x7c>)
   80f92:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   80f94:	205c      	movs	r0, #92	; 0x5c
   80f96:	4910      	ldr	r1, [pc, #64]	; (80fd8 <board_init+0x80>)
   80f98:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   80f9a:	4b10      	ldr	r3, [pc, #64]	; (80fdc <board_init+0x84>)
   80f9c:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   80fa0:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   80fa2:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   80fa4:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   80fa6:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   80faa:	6f19      	ldr	r1, [r3, #112]	; 0x70
   80fac:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
   80fb0:	6719      	str	r1, [r3, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   80fb2:	605a      	str	r2, [r3, #4]
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   80fb4:	202b      	movs	r0, #43	; 0x2b
   80fb6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fba:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   80fbc:	202a      	movs	r0, #42	; 0x2a
   80fbe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80fc2:	47a0      	blx	r4
   80fc4:	bd10      	pop	{r4, pc}
   80fc6:	bf00      	nop
   80fc8:	400e1a50 	.word	0x400e1a50
   80fcc:	00081335 	.word	0x00081335
   80fd0:	000810d1 	.word	0x000810d1
   80fd4:	28000079 	.word	0x28000079
   80fd8:	28000001 	.word	0x28000001
   80fdc:	400e0e00 	.word	0x400e0e00

00080fe0 <pdc_tx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80fe0:	460b      	mov	r3, r1
   80fe2:	b119      	cbz	r1, 80fec <pdc_tx_init+0xc>
		p_pdc->PERIPH_TPR = p_packet->ul_addr;
   80fe4:	6809      	ldr	r1, [r1, #0]
   80fe6:	6081      	str	r1, [r0, #8]
		p_pdc->PERIPH_TCR = p_packet->ul_size;
   80fe8:	685b      	ldr	r3, [r3, #4]
   80fea:	60c3      	str	r3, [r0, #12]
	}
	if (p_next_packet) {
   80fec:	b11a      	cbz	r2, 80ff6 <pdc_tx_init+0x16>
		p_pdc->PERIPH_TNPR = p_next_packet->ul_addr;
   80fee:	6813      	ldr	r3, [r2, #0]
   80ff0:	6183      	str	r3, [r0, #24]
		p_pdc->PERIPH_TNCR = p_next_packet->ul_size;
   80ff2:	6853      	ldr	r3, [r2, #4]
   80ff4:	61c3      	str	r3, [r0, #28]
   80ff6:	4770      	bx	lr

00080ff8 <pdc_rx_init>:
		pdc_packet_t *p_next_packet)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	if (p_packet) {
   80ff8:	460b      	mov	r3, r1
   80ffa:	b119      	cbz	r1, 81004 <pdc_rx_init+0xc>
		p_pdc->PERIPH_RPR = p_packet->ul_addr;
   80ffc:	6809      	ldr	r1, [r1, #0]
   80ffe:	6001      	str	r1, [r0, #0]
		p_pdc->PERIPH_RCR = p_packet->ul_size;
   81000:	685b      	ldr	r3, [r3, #4]
   81002:	6043      	str	r3, [r0, #4]
	}
	if (p_next_packet) {
   81004:	b11a      	cbz	r2, 8100e <pdc_rx_init+0x16>
		p_pdc->PERIPH_RNPR = p_next_packet->ul_addr;
   81006:	6813      	ldr	r3, [r2, #0]
   81008:	6103      	str	r3, [r0, #16]
		p_pdc->PERIPH_RNCR = p_next_packet->ul_size;
   8100a:	6853      	ldr	r3, [r2, #4]
   8100c:	6143      	str	r3, [r0, #20]
   8100e:	4770      	bx	lr

00081010 <pdc_enable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTEN | PERIPH_PTCR_TXTEN);
   81010:	f021 01fe 	bic.w	r1, r1, #254	; 0xfe
   81014:	05c9      	lsls	r1, r1, #23
   81016:	0dc9      	lsrs	r1, r1, #23
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
   81018:	6201      	str	r1, [r0, #32]
   8101a:	4770      	bx	lr

0008101c <pdc_disable_transfer>:
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
			ul_controls & (PERIPH_PTCR_RXTDIS | PERIPH_PTCR_TXTDIS);
   8101c:	f421 71fe 	bic.w	r1, r1, #508	; 0x1fc
   81020:	f021 0101 	bic.w	r1, r1, #1
   81024:	0589      	lsls	r1, r1, #22
   81026:	0d89      	lsrs	r1, r1, #22
		uint32_t ul_controls)
{
	/* Validate inputs. */
	Assert(p_pdc);
	
	p_pdc->PERIPH_PTCR =
   81028:	6201      	str	r1, [r0, #32]
   8102a:	4770      	bx	lr

0008102c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8102c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8102e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   81032:	d016      	beq.n	81062 <pio_set_peripheral+0x36>
   81034:	d804      	bhi.n	81040 <pio_set_peripheral+0x14>
   81036:	b1c1      	cbz	r1, 8106a <pio_set_peripheral+0x3e>
   81038:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8103c:	d00a      	beq.n	81054 <pio_set_peripheral+0x28>
   8103e:	e013      	b.n	81068 <pio_set_peripheral+0x3c>
   81040:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   81044:	d011      	beq.n	8106a <pio_set_peripheral+0x3e>
   81046:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8104a:	d00e      	beq.n	8106a <pio_set_peripheral+0x3e>
   8104c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   81050:	d10a      	bne.n	81068 <pio_set_peripheral+0x3c>
   81052:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   81054:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   81056:	6f01      	ldr	r1, [r0, #112]	; 0x70
   81058:	400b      	ands	r3, r1
   8105a:	ea23 0302 	bic.w	r3, r3, r2
   8105e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   81060:	e002      	b.n	81068 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   81062:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   81064:	4313      	orrs	r3, r2
   81066:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   81068:	6042      	str	r2, [r0, #4]
   8106a:	4770      	bx	lr

0008106c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8106c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8106e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   81072:	bf14      	ite	ne
   81074:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81076:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   81078:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8107c:	bf14      	ite	ne
   8107e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   81080:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   81082:	f012 0f02 	tst.w	r2, #2
   81086:	d002      	beq.n	8108e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   81088:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8108c:	e004      	b.n	81098 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8108e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   81092:	bf18      	it	ne
   81094:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   81098:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8109a:	6001      	str	r1, [r0, #0]
   8109c:	4770      	bx	lr
   8109e:	bf00      	nop

000810a0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   810a0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   810a2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   810a4:	9c01      	ldr	r4, [sp, #4]
   810a6:	b10c      	cbz	r4, 810ac <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   810a8:	6641      	str	r1, [r0, #100]	; 0x64
   810aa:	e000      	b.n	810ae <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   810ac:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   810ae:	b10b      	cbz	r3, 810b4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   810b0:	6501      	str	r1, [r0, #80]	; 0x50
   810b2:	e000      	b.n	810b6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   810b4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   810b6:	b10a      	cbz	r2, 810bc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   810b8:	6301      	str	r1, [r0, #48]	; 0x30
   810ba:	e000      	b.n	810be <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   810bc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   810be:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   810c0:	6001      	str	r1, [r0, #0]
}
   810c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   810c6:	4770      	bx	lr

000810c8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   810c8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   810ca:	4770      	bx	lr

000810cc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   810cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   810ce:	4770      	bx	lr

000810d0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   810d0:	b570      	push	{r4, r5, r6, lr}
   810d2:	b082      	sub	sp, #8
   810d4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   810d6:	0944      	lsrs	r4, r0, #5
   810d8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   810dc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   810e0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   810e2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   810e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   810ea:	d030      	beq.n	8114e <pio_configure_pin+0x7e>
   810ec:	d806      	bhi.n	810fc <pio_configure_pin+0x2c>
   810ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   810f2:	d00a      	beq.n	8110a <pio_configure_pin+0x3a>
   810f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   810f8:	d018      	beq.n	8112c <pio_configure_pin+0x5c>
   810fa:	e049      	b.n	81190 <pio_configure_pin+0xc0>
   810fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   81100:	d030      	beq.n	81164 <pio_configure_pin+0x94>
   81102:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   81106:	d02d      	beq.n	81164 <pio_configure_pin+0x94>
   81108:	e042      	b.n	81190 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8110a:	f000 001f 	and.w	r0, r0, #31
   8110e:	2401      	movs	r4, #1
   81110:	4084      	lsls	r4, r0
   81112:	4630      	mov	r0, r6
   81114:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   81118:	4622      	mov	r2, r4
   8111a:	4b1f      	ldr	r3, [pc, #124]	; (81198 <pio_configure_pin+0xc8>)
   8111c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8111e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81122:	bf14      	ite	ne
   81124:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81126:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   81128:	2001      	movs	r0, #1
   8112a:	e032      	b.n	81192 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8112c:	f000 001f 	and.w	r0, r0, #31
   81130:	2401      	movs	r4, #1
   81132:	4084      	lsls	r4, r0
   81134:	4630      	mov	r0, r6
   81136:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8113a:	4622      	mov	r2, r4
   8113c:	4b16      	ldr	r3, [pc, #88]	; (81198 <pio_configure_pin+0xc8>)
   8113e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   81140:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   81144:	bf14      	ite	ne
   81146:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   81148:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8114a:	2001      	movs	r0, #1
   8114c:	e021      	b.n	81192 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8114e:	f000 011f 	and.w	r1, r0, #31
   81152:	2401      	movs	r4, #1
   81154:	4630      	mov	r0, r6
   81156:	fa04 f101 	lsl.w	r1, r4, r1
   8115a:	462a      	mov	r2, r5
   8115c:	4b0f      	ldr	r3, [pc, #60]	; (8119c <pio_configure_pin+0xcc>)
   8115e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   81160:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   81162:	e016      	b.n	81192 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   81164:	f000 011f 	and.w	r1, r0, #31
   81168:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8116a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8116e:	ea05 0304 	and.w	r3, r5, r4
   81172:	9300      	str	r3, [sp, #0]
   81174:	4630      	mov	r0, r6
   81176:	fa04 f101 	lsl.w	r1, r4, r1
   8117a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8117e:	bf14      	ite	ne
   81180:	2200      	movne	r2, #0
   81182:	2201      	moveq	r2, #1
   81184:	f3c5 0380 	ubfx	r3, r5, #2, #1
   81188:	4d05      	ldr	r5, [pc, #20]	; (811a0 <pio_configure_pin+0xd0>)
   8118a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8118c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8118e:	e000      	b.n	81192 <pio_configure_pin+0xc2>

	default:
		return 0;
   81190:	2000      	movs	r0, #0
	}

	return 1;
}
   81192:	b002      	add	sp, #8
   81194:	bd70      	pop	{r4, r5, r6, pc}
   81196:	bf00      	nop
   81198:	0008102d 	.word	0x0008102d
   8119c:	0008106d 	.word	0x0008106d
   811a0:	000810a1 	.word	0x000810a1

000811a4 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   811a4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   811a8:	4604      	mov	r4, r0
   811aa:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   811ac:	4b10      	ldr	r3, [pc, #64]	; (811f0 <pio_handler_process+0x4c>)
   811ae:	4798      	blx	r3
   811b0:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   811b2:	4620      	mov	r0, r4
   811b4:	4b0f      	ldr	r3, [pc, #60]	; (811f4 <pio_handler_process+0x50>)
   811b6:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   811b8:	4005      	ands	r5, r0
   811ba:	d017      	beq.n	811ec <pio_handler_process+0x48>
   811bc:	4f0e      	ldr	r7, [pc, #56]	; (811f8 <pio_handler_process+0x54>)
   811be:	f107 040c 	add.w	r4, r7, #12
   811c2:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   811c4:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   811c8:	42b3      	cmp	r3, r6
   811ca:	d10a      	bne.n	811e2 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   811cc:	f854 1c08 	ldr.w	r1, [r4, #-8]
   811d0:	4229      	tst	r1, r5
   811d2:	d006      	beq.n	811e2 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   811d4:	6823      	ldr	r3, [r4, #0]
   811d6:	4630      	mov	r0, r6
   811d8:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   811da:	f854 3c08 	ldr.w	r3, [r4, #-8]
   811de:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   811e2:	42bc      	cmp	r4, r7
   811e4:	d002      	beq.n	811ec <pio_handler_process+0x48>
   811e6:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   811e8:	2d00      	cmp	r5, #0
   811ea:	d1eb      	bne.n	811c4 <pio_handler_process+0x20>
   811ec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   811f0:	000810c9 	.word	0x000810c9
   811f4:	000810cd 	.word	0x000810cd
   811f8:	20070658 	.word	0x20070658

000811fc <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   811fc:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   811fe:	4802      	ldr	r0, [pc, #8]	; (81208 <PIOA_Handler+0xc>)
   81200:	210b      	movs	r1, #11
   81202:	4b02      	ldr	r3, [pc, #8]	; (8120c <PIOA_Handler+0x10>)
   81204:	4798      	blx	r3
   81206:	bd08      	pop	{r3, pc}
   81208:	400e0e00 	.word	0x400e0e00
   8120c:	000811a5 	.word	0x000811a5

00081210 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   81210:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   81212:	4802      	ldr	r0, [pc, #8]	; (8121c <PIOB_Handler+0xc>)
   81214:	210c      	movs	r1, #12
   81216:	4b02      	ldr	r3, [pc, #8]	; (81220 <PIOB_Handler+0x10>)
   81218:	4798      	blx	r3
   8121a:	bd08      	pop	{r3, pc}
   8121c:	400e1000 	.word	0x400e1000
   81220:	000811a5 	.word	0x000811a5

00081224 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   81224:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   81226:	4802      	ldr	r0, [pc, #8]	; (81230 <PIOC_Handler+0xc>)
   81228:	210d      	movs	r1, #13
   8122a:	4b02      	ldr	r3, [pc, #8]	; (81234 <PIOC_Handler+0x10>)
   8122c:	4798      	blx	r3
   8122e:	bd08      	pop	{r3, pc}
   81230:	400e1200 	.word	0x400e1200
   81234:	000811a5 	.word	0x000811a5

00081238 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   81238:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   8123a:	4802      	ldr	r0, [pc, #8]	; (81244 <PIOD_Handler+0xc>)
   8123c:	210e      	movs	r1, #14
   8123e:	4b02      	ldr	r3, [pc, #8]	; (81248 <PIOD_Handler+0x10>)
   81240:	4798      	blx	r3
   81242:	bd08      	pop	{r3, pc}
   81244:	400e1400 	.word	0x400e1400
   81248:	000811a5 	.word	0x000811a5

0008124c <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   8124c:	4b17      	ldr	r3, [pc, #92]	; (812ac <pmc_switch_mck_to_pllack+0x60>)
   8124e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81250:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   81254:	4310      	orrs	r0, r2
   81256:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81258:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   8125a:	f013 0f08 	tst.w	r3, #8
   8125e:	d109      	bne.n	81274 <pmc_switch_mck_to_pllack+0x28>
   81260:	f44f 6300 	mov.w	r3, #2048	; 0x800
   81264:	4911      	ldr	r1, [pc, #68]	; (812ac <pmc_switch_mck_to_pllack+0x60>)
   81266:	e001      	b.n	8126c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81268:	3b01      	subs	r3, #1
   8126a:	d019      	beq.n	812a0 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8126c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8126e:	f012 0f08 	tst.w	r2, #8
   81272:	d0f9      	beq.n	81268 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   81274:	4b0d      	ldr	r3, [pc, #52]	; (812ac <pmc_switch_mck_to_pllack+0x60>)
   81276:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   81278:	f022 0203 	bic.w	r2, r2, #3
   8127c:	f042 0202 	orr.w	r2, r2, #2
   81280:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81282:	6e98      	ldr	r0, [r3, #104]	; 0x68
   81284:	f010 0008 	ands.w	r0, r0, #8
   81288:	d10c      	bne.n	812a4 <pmc_switch_mck_to_pllack+0x58>
   8128a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8128e:	4907      	ldr	r1, [pc, #28]	; (812ac <pmc_switch_mck_to_pllack+0x60>)
   81290:	e001      	b.n	81296 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   81292:	3b01      	subs	r3, #1
   81294:	d008      	beq.n	812a8 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   81296:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   81298:	f012 0f08 	tst.w	r2, #8
   8129c:	d0f9      	beq.n	81292 <pmc_switch_mck_to_pllack+0x46>
   8129e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   812a0:	2001      	movs	r0, #1
   812a2:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   812a4:	2000      	movs	r0, #0
   812a6:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   812a8:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   812aa:	4770      	bx	lr
   812ac:	400e0600 	.word	0x400e0600

000812b0 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   812b0:	b138      	cbz	r0, 812c2 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812b2:	4911      	ldr	r1, [pc, #68]	; (812f8 <pmc_switch_mainck_to_xtal+0x48>)
   812b4:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   812b6:	4a11      	ldr	r2, [pc, #68]	; (812fc <pmc_switch_mainck_to_xtal+0x4c>)
   812b8:	401a      	ands	r2, r3
   812ba:	4b11      	ldr	r3, [pc, #68]	; (81300 <pmc_switch_mainck_to_xtal+0x50>)
   812bc:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   812be:	620b      	str	r3, [r1, #32]
   812c0:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   812c2:	4a0d      	ldr	r2, [pc, #52]	; (812f8 <pmc_switch_mainck_to_xtal+0x48>)
   812c4:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   812c6:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   812ca:	f023 0303 	bic.w	r3, r3, #3
   812ce:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   812d2:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   812d6:	0209      	lsls	r1, r1, #8
   812d8:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   812da:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   812dc:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   812de:	6e93      	ldr	r3, [r2, #104]	; 0x68
   812e0:	f013 0f01 	tst.w	r3, #1
   812e4:	d0fb      	beq.n	812de <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   812e6:	4a04      	ldr	r2, [pc, #16]	; (812f8 <pmc_switch_mainck_to_xtal+0x48>)
   812e8:	6a13      	ldr	r3, [r2, #32]
   812ea:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   812ee:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   812f2:	6213      	str	r3, [r2, #32]
   812f4:	4770      	bx	lr
   812f6:	bf00      	nop
   812f8:	400e0600 	.word	0x400e0600
   812fc:	fec8fffc 	.word	0xfec8fffc
   81300:	01370002 	.word	0x01370002

00081304 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   81304:	4b02      	ldr	r3, [pc, #8]	; (81310 <pmc_osc_is_ready_mainck+0xc>)
   81306:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81308:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   8130c:	4770      	bx	lr
   8130e:	bf00      	nop
   81310:	400e0600 	.word	0x400e0600

00081314 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   81314:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   81318:	4b01      	ldr	r3, [pc, #4]	; (81320 <pmc_disable_pllack+0xc>)
   8131a:	629a      	str	r2, [r3, #40]	; 0x28
   8131c:	4770      	bx	lr
   8131e:	bf00      	nop
   81320:	400e0600 	.word	0x400e0600

00081324 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   81324:	4b02      	ldr	r3, [pc, #8]	; (81330 <pmc_is_locked_pllack+0xc>)
   81326:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   81328:	f000 0002 	and.w	r0, r0, #2
   8132c:	4770      	bx	lr
   8132e:	bf00      	nop
   81330:	400e0600 	.word	0x400e0600

00081334 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   81334:	282c      	cmp	r0, #44	; 0x2c
   81336:	d820      	bhi.n	8137a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   81338:	281f      	cmp	r0, #31
   8133a:	d80d      	bhi.n	81358 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   8133c:	4b12      	ldr	r3, [pc, #72]	; (81388 <pmc_enable_periph_clk+0x54>)
   8133e:	699a      	ldr	r2, [r3, #24]
   81340:	2301      	movs	r3, #1
   81342:	4083      	lsls	r3, r0
   81344:	401a      	ands	r2, r3
   81346:	4293      	cmp	r3, r2
   81348:	d019      	beq.n	8137e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   8134a:	2301      	movs	r3, #1
   8134c:	fa03 f000 	lsl.w	r0, r3, r0
   81350:	4b0d      	ldr	r3, [pc, #52]	; (81388 <pmc_enable_periph_clk+0x54>)
   81352:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   81354:	2000      	movs	r0, #0
   81356:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81358:	4b0b      	ldr	r3, [pc, #44]	; (81388 <pmc_enable_periph_clk+0x54>)
   8135a:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   8135e:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   81360:	2301      	movs	r3, #1
   81362:	4083      	lsls	r3, r0
   81364:	401a      	ands	r2, r3
   81366:	4293      	cmp	r3, r2
   81368:	d00b      	beq.n	81382 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8136a:	2301      	movs	r3, #1
   8136c:	fa03 f000 	lsl.w	r0, r3, r0
   81370:	4b05      	ldr	r3, [pc, #20]	; (81388 <pmc_enable_periph_clk+0x54>)
   81372:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   81376:	2000      	movs	r0, #0
   81378:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8137a:	2001      	movs	r0, #1
   8137c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8137e:	2000      	movs	r0, #0
   81380:	4770      	bx	lr
   81382:	2000      	movs	r0, #0
}
   81384:	4770      	bx	lr
   81386:	bf00      	nop
   81388:	400e0600 	.word	0x400e0600

0008138c <uart_init>:
 *
 * \retval 0 Success.
 * \retval 1 Bad baud rate generator value.
 */
uint32_t uart_init(Uart *p_uart, const sam_uart_opt_t *p_uart_opt)
{
   8138c:	b410      	push	{r4}
	uint32_t cd = 0;

	/* Reset and disable receiver & transmitter */
	p_uart->UART_CR = UART_CR_RSTRX | UART_CR_RSTTX
   8138e:	23ac      	movs	r3, #172	; 0xac
   81390:	6003      	str	r3, [r0, #0]
			| UART_CR_RXDIS | UART_CR_TXDIS;

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
   81392:	680a      	ldr	r2, [r1, #0]
   81394:	684b      	ldr	r3, [r1, #4]
   81396:	fbb2 f3f3 	udiv	r3, r2, r3
   8139a:	091b      	lsrs	r3, r3, #4
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
   8139c:	1e5c      	subs	r4, r3, #1
   8139e:	f64f 72fe 	movw	r2, #65534	; 0xfffe
   813a2:	4294      	cmp	r4, r2
   813a4:	d80a      	bhi.n	813bc <uart_init+0x30>
		return 1;

	p_uart->UART_BRGR = cd;
   813a6:	6203      	str	r3, [r0, #32]
	/* Configure mode */
	p_uart->UART_MR = p_uart_opt->ul_mode;
   813a8:	688b      	ldr	r3, [r1, #8]
   813aa:	6043      	str	r3, [r0, #4]

	/* Disable PDC channel */
	p_uart->UART_PTCR = UART_PTCR_RXTDIS | UART_PTCR_TXTDIS;
   813ac:	f240 2302 	movw	r3, #514	; 0x202
   813b0:	f8c0 3120 	str.w	r3, [r0, #288]	; 0x120

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;
   813b4:	2350      	movs	r3, #80	; 0x50
   813b6:	6003      	str	r3, [r0, #0]

	return 0;
   813b8:	2000      	movs	r0, #0
   813ba:	e000      	b.n	813be <uart_init+0x32>

	/* Check and configure baudrate */
	/* Asynchronous, no oversampling */
	cd = (p_uart_opt->ul_mck / p_uart_opt->ul_baudrate) / UART_MCK_DIV;
	if (cd < UART_MCK_DIV_MIN_FACTOR || cd > UART_MCK_DIV_MAX_FACTOR)
		return 1;
   813bc:	2001      	movs	r0, #1

	/* Enable receiver and transmitter */
	p_uart->UART_CR = UART_CR_RXEN | UART_CR_TXEN;

	return 0;
}
   813be:	f85d 4b04 	ldr.w	r4, [sp], #4
   813c2:	4770      	bx	lr

000813c4 <uart_enable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_tx(Uart *p_uart)
{
	/* Enable transmitter */
	p_uart->UART_CR = UART_CR_TXEN;
   813c4:	2340      	movs	r3, #64	; 0x40
   813c6:	6003      	str	r3, [r0, #0]
   813c8:	4770      	bx	lr
   813ca:	bf00      	nop

000813cc <uart_disable_tx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_tx(Uart *p_uart)
{
	/* Disable transmitter */
	p_uart->UART_CR = UART_CR_TXDIS;
   813cc:	2380      	movs	r3, #128	; 0x80
   813ce:	6003      	str	r3, [r0, #0]
   813d0:	4770      	bx	lr
   813d2:	bf00      	nop

000813d4 <uart_enable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_enable_rx(Uart *p_uart)
{
	/* Enable receiver */
	p_uart->UART_CR = UART_CR_RXEN;
   813d4:	2310      	movs	r3, #16
   813d6:	6003      	str	r3, [r0, #0]
   813d8:	4770      	bx	lr
   813da:	bf00      	nop

000813dc <uart_disable_rx>:
 * \param p_uart Pointer to a UART instance.
 */
void uart_disable_rx(Uart *p_uart)
{
	/* Disable receiver */
	p_uart->UART_CR = UART_CR_RXDIS;
   813dc:	2320      	movs	r3, #32
   813de:	6003      	str	r3, [r0, #0]
   813e0:	4770      	bx	lr
   813e2:	bf00      	nop

000813e4 <uart_enable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be enabled.
 */
void uart_enable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IER = ul_sources;
   813e4:	6081      	str	r1, [r0, #8]
   813e6:	4770      	bx	lr

000813e8 <uart_disable_interrupt>:
 * \param p_uart Pointer to a UART instance.
 *  \param ul_sources Interrupts to be disabled.
 */
void uart_disable_interrupt(Uart *p_uart, uint32_t ul_sources)
{
	p_uart->UART_IDR = ul_sources;
   813e8:	60c1      	str	r1, [r0, #12]
   813ea:	4770      	bx	lr

000813ec <uart_get_interrupt_mask>:
 *
 *  \return The interrupt mask value.
 */
uint32_t uart_get_interrupt_mask(Uart *p_uart)
{
	return p_uart->UART_IMR;
   813ec:	6900      	ldr	r0, [r0, #16]
}
   813ee:	4770      	bx	lr

000813f0 <uart_get_status>:
 *
 * \return The current UART status.
 */
uint32_t uart_get_status(Uart *p_uart)
{
	return p_uart->UART_SR;
   813f0:	6940      	ldr	r0, [r0, #20]
}
   813f2:	4770      	bx	lr

000813f4 <uart_reset_status>:
 *
 * \param p_uart Pointer to a UART instance.
 */
void uart_reset_status(Uart *p_uart)
{
	p_uart->UART_CR = UART_CR_RSTSTA;
   813f4:	f44f 7380 	mov.w	r3, #256	; 0x100
   813f8:	6003      	str	r3, [r0, #0]
   813fa:	4770      	bx	lr

000813fc <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   813fc:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   813fe:	010b      	lsls	r3, r1, #4
   81400:	4293      	cmp	r3, r2
   81402:	d90d      	bls.n	81420 <usart_set_async_baudrate+0x24>
   81404:	e01a      	b.n	8143c <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   81406:	6841      	ldr	r1, [r0, #4]
   81408:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   8140c:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   8140e:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   81412:	6203      	str	r3, [r0, #32]

	return 0;
   81414:	2000      	movs	r0, #0
   81416:	e020      	b.n	8145a <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   81418:	2001      	movs	r0, #1
   8141a:	e01e      	b.n	8145a <usart_set_async_baudrate+0x5e>
   8141c:	2001      	movs	r0, #1
   8141e:	e01c      	b.n	8145a <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   81420:	00d2      	lsls	r2, r2, #3
   81422:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   81426:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   8142a:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   8142c:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   81430:	1e54      	subs	r4, r2, #1
   81432:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   81436:	428c      	cmp	r4, r1
   81438:	d9e9      	bls.n	8140e <usart_set_async_baudrate+0x12>
   8143a:	e7ed      	b.n	81418 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   8143c:	00c9      	lsls	r1, r1, #3
   8143e:	00d3      	lsls	r3, r2, #3
   81440:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   81444:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   81448:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   8144a:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   8144e:	1e54      	subs	r4, r2, #1
   81450:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   81454:	428c      	cmp	r4, r1
   81456:	d9d6      	bls.n	81406 <usart_set_async_baudrate+0xa>
   81458:	e7e0      	b.n	8141c <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   8145a:	f85d 4b04 	ldr.w	r4, [sp], #4
   8145e:	4770      	bx	lr

00081460 <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   81460:	4b08      	ldr	r3, [pc, #32]	; (81484 <usart_reset+0x24>)
   81462:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   81466:	2300      	movs	r3, #0
   81468:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   8146a:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   8146c:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8146e:	2388      	movs	r3, #136	; 0x88
   81470:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   81472:	2324      	movs	r3, #36	; 0x24
   81474:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   81476:	f44f 7380 	mov.w	r3, #256	; 0x100
   8147a:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   8147c:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   81480:	6003      	str	r3, [r0, #0]
   81482:	4770      	bx	lr
   81484:	55534100 	.word	0x55534100

00081488 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   81488:	b570      	push	{r4, r5, r6, lr}
   8148a:	4605      	mov	r5, r0
   8148c:	460c      	mov	r4, r1
   8148e:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   81490:	4b0f      	ldr	r3, [pc, #60]	; (814d0 <usart_init_rs232+0x48>)
   81492:	4798      	blx	r3

	ul_reg_val = 0;
   81494:	2100      	movs	r1, #0
   81496:	4b0f      	ldr	r3, [pc, #60]	; (814d4 <usart_init_rs232+0x4c>)
   81498:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   8149a:	b19c      	cbz	r4, 814c4 <usart_init_rs232+0x3c>
   8149c:	4628      	mov	r0, r5
   8149e:	6821      	ldr	r1, [r4, #0]
   814a0:	4632      	mov	r2, r6
   814a2:	4b0d      	ldr	r3, [pc, #52]	; (814d8 <usart_init_rs232+0x50>)
   814a4:	4798      	blx	r3
   814a6:	4603      	mov	r3, r0
   814a8:	b970      	cbnz	r0, 814c8 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   814aa:	68a1      	ldr	r1, [r4, #8]
   814ac:	6862      	ldr	r2, [r4, #4]
   814ae:	430a      	orrs	r2, r1
   814b0:	6921      	ldr	r1, [r4, #16]
   814b2:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   814b4:	68e0      	ldr	r0, [r4, #12]
   814b6:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   814b8:	4906      	ldr	r1, [pc, #24]	; (814d4 <usart_init_rs232+0x4c>)
   814ba:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   814bc:	6869      	ldr	r1, [r5, #4]
   814be:	430a      	orrs	r2, r1
   814c0:	606a      	str	r2, [r5, #4]

	return 0;
   814c2:	e002      	b.n	814ca <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   814c4:	2301      	movs	r3, #1
   814c6:	e000      	b.n	814ca <usart_init_rs232+0x42>
   814c8:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   814ca:	4618      	mov	r0, r3
   814cc:	bd70      	pop	{r4, r5, r6, pc}
   814ce:	bf00      	nop
   814d0:	00081461 	.word	0x00081461
   814d4:	200706c8 	.word	0x200706c8
   814d8:	000813fd 	.word	0x000813fd

000814dc <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   814dc:	2340      	movs	r3, #64	; 0x40
   814de:	6003      	str	r3, [r0, #0]
   814e0:	4770      	bx	lr
   814e2:	bf00      	nop

000814e4 <usart_disable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXDIS;
   814e4:	2380      	movs	r3, #128	; 0x80
   814e6:	6003      	str	r3, [r0, #0]
   814e8:	4770      	bx	lr
   814ea:	bf00      	nop

000814ec <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   814ec:	2310      	movs	r3, #16
   814ee:	6003      	str	r3, [r0, #0]
   814f0:	4770      	bx	lr
   814f2:	bf00      	nop

000814f4 <usart_disable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXDIS;
   814f4:	2320      	movs	r3, #32
   814f6:	6003      	str	r3, [r0, #0]
   814f8:	4770      	bx	lr
   814fa:	bf00      	nop

000814fc <usart_set_rx_timeout>:
 * \param p_usart Pointer to a USART instance.
 * \param timeout The value of receive timeout.
 */
void usart_set_rx_timeout(Usart *p_usart, uint32_t timeout)
{
	p_usart->US_RTOR = timeout;
   814fc:	6241      	str	r1, [r0, #36]	; 0x24
   814fe:	4770      	bx	lr

00081500 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
   81500:	6081      	str	r1, [r0, #8]
   81502:	4770      	bx	lr

00081504 <usart_disable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_disable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IDR = ul_sources;
   81504:	60c1      	str	r1, [r0, #12]
   81506:	4770      	bx	lr

00081508 <usart_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t usart_get_interrupt_mask(Usart *p_usart)
{
	return p_usart->US_IMR;
   81508:	6900      	ldr	r0, [r0, #16]
}
   8150a:	4770      	bx	lr

0008150c <usart_get_status>:
 *
 * \return The current USART status.
 */
uint32_t usart_get_status(Usart *p_usart)
{
	return p_usart->US_CSR;
   8150c:	6940      	ldr	r0, [r0, #20]
}
   8150e:	4770      	bx	lr

00081510 <usart_reset_status>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   81510:	f44f 7380 	mov.w	r3, #256	; 0x100
   81514:	6003      	str	r3, [r0, #0]
   81516:	4770      	bx	lr

00081518 <usart_start_rx_timeout>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_start_rx_timeout(Usart *p_usart)
{
	p_usart->US_CR = US_CR_STTTO;
   81518:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8151c:	6003      	str	r3, [r0, #0]
   8151e:	4770      	bx	lr

00081520 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   81520:	e7fe      	b.n	81520 <Dummy_Handler>
   81522:	bf00      	nop

00081524 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   81524:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   81526:	4b1e      	ldr	r3, [pc, #120]	; (815a0 <Reset_Handler+0x7c>)
   81528:	4a1e      	ldr	r2, [pc, #120]	; (815a4 <Reset_Handler+0x80>)
   8152a:	429a      	cmp	r2, r3
   8152c:	d003      	beq.n	81536 <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   8152e:	4b1e      	ldr	r3, [pc, #120]	; (815a8 <Reset_Handler+0x84>)
   81530:	4a1b      	ldr	r2, [pc, #108]	; (815a0 <Reset_Handler+0x7c>)
   81532:	429a      	cmp	r2, r3
   81534:	d304      	bcc.n	81540 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81536:	4b1d      	ldr	r3, [pc, #116]	; (815ac <Reset_Handler+0x88>)
   81538:	4a1d      	ldr	r2, [pc, #116]	; (815b0 <Reset_Handler+0x8c>)
   8153a:	429a      	cmp	r2, r3
   8153c:	d30f      	bcc.n	8155e <Reset_Handler+0x3a>
   8153e:	e01a      	b.n	81576 <Reset_Handler+0x52>
   81540:	4b1c      	ldr	r3, [pc, #112]	; (815b4 <Reset_Handler+0x90>)
   81542:	4c1d      	ldr	r4, [pc, #116]	; (815b8 <Reset_Handler+0x94>)
   81544:	1ae4      	subs	r4, r4, r3
   81546:	f024 0403 	bic.w	r4, r4, #3
   8154a:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   8154c:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   8154e:	4814      	ldr	r0, [pc, #80]	; (815a0 <Reset_Handler+0x7c>)
   81550:	4914      	ldr	r1, [pc, #80]	; (815a4 <Reset_Handler+0x80>)
   81552:	585a      	ldr	r2, [r3, r1]
   81554:	501a      	str	r2, [r3, r0]
   81556:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   81558:	42a3      	cmp	r3, r4
   8155a:	d1fa      	bne.n	81552 <Reset_Handler+0x2e>
   8155c:	e7eb      	b.n	81536 <Reset_Handler+0x12>
   8155e:	4b17      	ldr	r3, [pc, #92]	; (815bc <Reset_Handler+0x98>)
   81560:	4917      	ldr	r1, [pc, #92]	; (815c0 <Reset_Handler+0x9c>)
   81562:	1ac9      	subs	r1, r1, r3
   81564:	f021 0103 	bic.w	r1, r1, #3
   81568:	1d1a      	adds	r2, r3, #4
   8156a:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   8156c:	2200      	movs	r2, #0
   8156e:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   81572:	428b      	cmp	r3, r1
   81574:	d1fb      	bne.n	8156e <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   81576:	4a13      	ldr	r2, [pc, #76]	; (815c4 <Reset_Handler+0xa0>)
   81578:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   8157c:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   81580:	4911      	ldr	r1, [pc, #68]	; (815c8 <Reset_Handler+0xa4>)
   81582:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   81584:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   81588:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   8158c:	d203      	bcs.n	81596 <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   8158e:	688a      	ldr	r2, [r1, #8]
   81590:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   81594:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   81596:	4b0d      	ldr	r3, [pc, #52]	; (815cc <Reset_Handler+0xa8>)
   81598:	4798      	blx	r3

	/* Branch to main function */
	main();
   8159a:	4b0d      	ldr	r3, [pc, #52]	; (815d0 <Reset_Handler+0xac>)
   8159c:	4798      	blx	r3
   8159e:	e7fe      	b.n	8159e <Reset_Handler+0x7a>
   815a0:	20070000 	.word	0x20070000
   815a4:	000831e0 	.word	0x000831e0
   815a8:	20070588 	.word	0x20070588
   815ac:	2007a824 	.word	0x2007a824
   815b0:	20070588 	.word	0x20070588
   815b4:	20070004 	.word	0x20070004
   815b8:	2007058b 	.word	0x2007058b
   815bc:	20070584 	.word	0x20070584
   815c0:	2007a81f 	.word	0x2007a81f
   815c4:	00080000 	.word	0x00080000
   815c8:	e000ed00 	.word	0xe000ed00
   815cc:	00082dbd 	.word	0x00082dbd
   815d0:	00082d19 	.word	0x00082d19

000815d4 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   815d4:	4b3e      	ldr	r3, [pc, #248]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   815d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   815d8:	f003 0303 	and.w	r3, r3, #3
   815dc:	2b03      	cmp	r3, #3
   815de:	d85f      	bhi.n	816a0 <SystemCoreClockUpdate+0xcc>
   815e0:	e8df f003 	tbb	[pc, r3]
   815e4:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   815e8:	4b3a      	ldr	r3, [pc, #232]	; (816d4 <SystemCoreClockUpdate+0x100>)
   815ea:	695b      	ldr	r3, [r3, #20]
   815ec:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   815f0:	bf14      	ite	ne
   815f2:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   815f6:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   815fa:	4b37      	ldr	r3, [pc, #220]	; (816d8 <SystemCoreClockUpdate+0x104>)
   815fc:	601a      	str	r2, [r3, #0]
   815fe:	e04f      	b.n	816a0 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   81600:	4b33      	ldr	r3, [pc, #204]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   81602:	6a1b      	ldr	r3, [r3, #32]
   81604:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81608:	d003      	beq.n	81612 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8160a:	4a34      	ldr	r2, [pc, #208]	; (816dc <SystemCoreClockUpdate+0x108>)
   8160c:	4b32      	ldr	r3, [pc, #200]	; (816d8 <SystemCoreClockUpdate+0x104>)
   8160e:	601a      	str	r2, [r3, #0]
   81610:	e046      	b.n	816a0 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   81612:	4a33      	ldr	r2, [pc, #204]	; (816e0 <SystemCoreClockUpdate+0x10c>)
   81614:	4b30      	ldr	r3, [pc, #192]	; (816d8 <SystemCoreClockUpdate+0x104>)
   81616:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81618:	4b2d      	ldr	r3, [pc, #180]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   8161a:	6a1b      	ldr	r3, [r3, #32]
   8161c:	f003 0370 	and.w	r3, r3, #112	; 0x70
   81620:	2b10      	cmp	r3, #16
   81622:	d002      	beq.n	8162a <SystemCoreClockUpdate+0x56>
   81624:	2b20      	cmp	r3, #32
   81626:	d004      	beq.n	81632 <SystemCoreClockUpdate+0x5e>
   81628:	e03a      	b.n	816a0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   8162a:	4a2e      	ldr	r2, [pc, #184]	; (816e4 <SystemCoreClockUpdate+0x110>)
   8162c:	4b2a      	ldr	r3, [pc, #168]	; (816d8 <SystemCoreClockUpdate+0x104>)
   8162e:	601a      	str	r2, [r3, #0]
				break;
   81630:	e036      	b.n	816a0 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   81632:	4a2a      	ldr	r2, [pc, #168]	; (816dc <SystemCoreClockUpdate+0x108>)
   81634:	4b28      	ldr	r3, [pc, #160]	; (816d8 <SystemCoreClockUpdate+0x104>)
   81636:	601a      	str	r2, [r3, #0]
				break;
   81638:	e032      	b.n	816a0 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   8163a:	4b25      	ldr	r3, [pc, #148]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   8163c:	6a1b      	ldr	r3, [r3, #32]
   8163e:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   81642:	d003      	beq.n	8164c <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   81644:	4a25      	ldr	r2, [pc, #148]	; (816dc <SystemCoreClockUpdate+0x108>)
   81646:	4b24      	ldr	r3, [pc, #144]	; (816d8 <SystemCoreClockUpdate+0x104>)
   81648:	601a      	str	r2, [r3, #0]
   8164a:	e012      	b.n	81672 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8164c:	4a24      	ldr	r2, [pc, #144]	; (816e0 <SystemCoreClockUpdate+0x10c>)
   8164e:	4b22      	ldr	r3, [pc, #136]	; (816d8 <SystemCoreClockUpdate+0x104>)
   81650:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   81652:	4b1f      	ldr	r3, [pc, #124]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   81654:	6a1b      	ldr	r3, [r3, #32]
   81656:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8165a:	2b10      	cmp	r3, #16
   8165c:	d002      	beq.n	81664 <SystemCoreClockUpdate+0x90>
   8165e:	2b20      	cmp	r3, #32
   81660:	d004      	beq.n	8166c <SystemCoreClockUpdate+0x98>
   81662:	e006      	b.n	81672 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   81664:	4a1f      	ldr	r2, [pc, #124]	; (816e4 <SystemCoreClockUpdate+0x110>)
   81666:	4b1c      	ldr	r3, [pc, #112]	; (816d8 <SystemCoreClockUpdate+0x104>)
   81668:	601a      	str	r2, [r3, #0]
				break;
   8166a:	e002      	b.n	81672 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8166c:	4a1b      	ldr	r2, [pc, #108]	; (816dc <SystemCoreClockUpdate+0x108>)
   8166e:	4b1a      	ldr	r3, [pc, #104]	; (816d8 <SystemCoreClockUpdate+0x104>)
   81670:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   81672:	4b17      	ldr	r3, [pc, #92]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   81674:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   81676:	f003 0303 	and.w	r3, r3, #3
   8167a:	2b02      	cmp	r3, #2
   8167c:	d10d      	bne.n	8169a <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8167e:	4b14      	ldr	r3, [pc, #80]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   81680:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81682:	6a99      	ldr	r1, [r3, #40]	; 0x28
   81684:	4b14      	ldr	r3, [pc, #80]	; (816d8 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   81686:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8168a:	681a      	ldr	r2, [r3, #0]
   8168c:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   81690:	b2c9      	uxtb	r1, r1
   81692:	fbb2 f2f1 	udiv	r2, r2, r1
   81696:	601a      	str	r2, [r3, #0]
   81698:	e002      	b.n	816a0 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8169a:	4a13      	ldr	r2, [pc, #76]	; (816e8 <SystemCoreClockUpdate+0x114>)
   8169c:	4b0e      	ldr	r3, [pc, #56]	; (816d8 <SystemCoreClockUpdate+0x104>)
   8169e:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   816a0:	4b0b      	ldr	r3, [pc, #44]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   816a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   816a4:	f003 0370 	and.w	r3, r3, #112	; 0x70
   816a8:	2b70      	cmp	r3, #112	; 0x70
   816aa:	d107      	bne.n	816bc <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   816ac:	4b0a      	ldr	r3, [pc, #40]	; (816d8 <SystemCoreClockUpdate+0x104>)
   816ae:	681a      	ldr	r2, [r3, #0]
   816b0:	490e      	ldr	r1, [pc, #56]	; (816ec <SystemCoreClockUpdate+0x118>)
   816b2:	fba1 0202 	umull	r0, r2, r1, r2
   816b6:	0852      	lsrs	r2, r2, #1
   816b8:	601a      	str	r2, [r3, #0]
   816ba:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   816bc:	4b04      	ldr	r3, [pc, #16]	; (816d0 <SystemCoreClockUpdate+0xfc>)
   816be:	6b19      	ldr	r1, [r3, #48]	; 0x30
   816c0:	4b05      	ldr	r3, [pc, #20]	; (816d8 <SystemCoreClockUpdate+0x104>)
   816c2:	f3c1 1102 	ubfx	r1, r1, #4, #3
   816c6:	681a      	ldr	r2, [r3, #0]
   816c8:	40ca      	lsrs	r2, r1
   816ca:	601a      	str	r2, [r3, #0]
   816cc:	4770      	bx	lr
   816ce:	bf00      	nop
   816d0:	400e0600 	.word	0x400e0600
   816d4:	400e1a10 	.word	0x400e1a10
   816d8:	2007013c 	.word	0x2007013c
   816dc:	00b71b00 	.word	0x00b71b00
   816e0:	003d0900 	.word	0x003d0900
   816e4:	007a1200 	.word	0x007a1200
   816e8:	0e4e1c00 	.word	0x0e4e1c00
   816ec:	aaaaaaab 	.word	0xaaaaaaab

000816f0 <vListInitialise>:
void vListInitialise( xList *pxList )
{
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( xListItem * ) &( pxList->xListEnd );
   816f0:	f100 0308 	add.w	r3, r0, #8
   816f4:	6043      	str	r3, [r0, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
   816f6:	f04f 32ff 	mov.w	r2, #4294967295
   816fa:	6082      	str	r2, [r0, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( xListItem * ) &( pxList->xListEnd );
   816fc:	60c3      	str	r3, [r0, #12]
	pxList->xListEnd.pxPrevious = ( xListItem * ) &( pxList->xListEnd );
   816fe:	6103      	str	r3, [r0, #16]

	pxList->uxNumberOfItems = ( unsigned portBASE_TYPE ) 0U;
   81700:	2300      	movs	r3, #0
   81702:	6003      	str	r3, [r0, #0]
   81704:	4770      	bx	lr
   81706:	bf00      	nop

00081708 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( xListItem *pxItem )
{
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pvContainer = NULL;
   81708:	2300      	movs	r3, #0
   8170a:	6103      	str	r3, [r0, #16]
   8170c:	4770      	bx	lr
   8170e:	bf00      	nop

00081710 <vListInsertEnd>:

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	pvListGetOwnerOfNextEntry.  This means it has to be the item pointed to by
	the pxIndex member. */
	pxIndex = pxList->pxIndex;
   81710:	6843      	ldr	r3, [r0, #4]

	pxNewListItem->pxNext = pxIndex->pxNext;
   81712:	685a      	ldr	r2, [r3, #4]
   81714:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxPrevious = pxList->pxIndex;
   81716:	6842      	ldr	r2, [r0, #4]
   81718:	608a      	str	r2, [r1, #8]
	pxIndex->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   8171a:	685a      	ldr	r2, [r3, #4]
   8171c:	6091      	str	r1, [r2, #8]
	pxIndex->pxNext = ( volatile xListItem * ) pxNewListItem;
   8171e:	6059      	str	r1, [r3, #4]
	pxList->pxIndex = ( volatile xListItem * ) pxNewListItem;
   81720:	6041      	str	r1, [r0, #4]

	/* Remember which list the item is in. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   81722:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   81724:	6803      	ldr	r3, [r0, #0]
   81726:	3301      	adds	r3, #1
   81728:	6003      	str	r3, [r0, #0]
   8172a:	4770      	bx	lr

0008172c <vListInsert>:
}
/*-----------------------------------------------------------*/

void vListInsert( xList *pxList, xListItem *pxNewListItem )
{
   8172c:	b410      	push	{r4}
volatile xListItem *pxIterator;
portTickType xValueOfInsertion;

	/* Insert the new list item into the list, sorted in ulListItem order. */
	xValueOfInsertion = pxNewListItem->xItemValue;
   8172e:	680c      	ldr	r4, [r1, #0]
	are stored in ready lists (all of which have the same ulListItem value)
	get an equal share of the CPU.  However, if the xItemValue is the same as
	the back marker the iteration loop below will not end.  This means we need
	to guard against this by checking the value first and modifying the
	algorithm slightly if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
   81730:	f1b4 3fff 	cmp.w	r4, #4294967295
   81734:	d101      	bne.n	8173a <vListInsert+0xe>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
   81736:	6903      	ldr	r3, [r0, #16]
   81738:	e00a      	b.n	81750 <vListInsert+0x24>
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		See http://www.freertos.org/FAQHelp.html for more tips.
		**********************************************************************/

		for( pxIterator = ( xListItem * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext )
   8173a:	f100 0308 	add.w	r3, r0, #8
   8173e:	68c2      	ldr	r2, [r0, #12]
   81740:	6812      	ldr	r2, [r2, #0]
   81742:	4294      	cmp	r4, r2
   81744:	d304      	bcc.n	81750 <vListInsert+0x24>
   81746:	685b      	ldr	r3, [r3, #4]
   81748:	685a      	ldr	r2, [r3, #4]
   8174a:	6812      	ldr	r2, [r2, #0]
   8174c:	4294      	cmp	r4, r2
   8174e:	d2fa      	bcs.n	81746 <vListInsert+0x1a>
			/* There is nothing to do here, we are just iterating to the
			wanted insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
   81750:	685a      	ldr	r2, [r3, #4]
   81752:	604a      	str	r2, [r1, #4]
	pxNewListItem->pxNext->pxPrevious = ( volatile xListItem * ) pxNewListItem;
   81754:	6091      	str	r1, [r2, #8]
	pxNewListItem->pxPrevious = pxIterator;
   81756:	608b      	str	r3, [r1, #8]
	pxIterator->pxNext = ( volatile xListItem * ) pxNewListItem;
   81758:	6059      	str	r1, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pvContainer = ( void * ) pxList;
   8175a:	6108      	str	r0, [r1, #16]

	( pxList->uxNumberOfItems )++;
   8175c:	6803      	ldr	r3, [r0, #0]
   8175e:	3301      	adds	r3, #1
   81760:	6003      	str	r3, [r0, #0]
}
   81762:	f85d 4b04 	ldr.w	r4, [sp], #4
   81766:	4770      	bx	lr

00081768 <uxListRemove>:

unsigned portBASE_TYPE uxListRemove( xListItem *pxItemToRemove )
{
xList * pxList;

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
   81768:	6843      	ldr	r3, [r0, #4]
   8176a:	6882      	ldr	r2, [r0, #8]
   8176c:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
   8176e:	6883      	ldr	r3, [r0, #8]
   81770:	6842      	ldr	r2, [r0, #4]
   81772:	605a      	str	r2, [r3, #4]

	/* The list item knows which list it is in.  Obtain the list from the list
	item. */
	pxList = ( xList * ) pxItemToRemove->pvContainer;
   81774:	6903      	ldr	r3, [r0, #16]

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
   81776:	685a      	ldr	r2, [r3, #4]
   81778:	4282      	cmp	r2, r0
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
   8177a:	bf04      	itt	eq
   8177c:	6882      	ldreq	r2, [r0, #8]
   8177e:	605a      	streq	r2, [r3, #4]
	}

	pxItemToRemove->pvContainer = NULL;
   81780:	2200      	movs	r2, #0
   81782:	6102      	str	r2, [r0, #16]
	( pxList->uxNumberOfItems )--;
   81784:	681a      	ldr	r2, [r3, #0]
   81786:	3a01      	subs	r2, #1
   81788:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
   8178a:	6818      	ldr	r0, [r3, #0]
}
   8178c:	4770      	bx	lr
   8178e:	bf00      	nop

00081790 <prvPortStartFirstTask>:
}
/*-----------------------------------------------------------*/

static void prvPortStartFirstTask( void )
{
	__asm volatile(
   81790:	4803      	ldr	r0, [pc, #12]	; (817a0 <prvPortStartFirstTask+0x10>)
   81792:	6800      	ldr	r0, [r0, #0]
   81794:	6800      	ldr	r0, [r0, #0]
   81796:	f380 8808 	msr	MSP, r0
   8179a:	b662      	cpsie	i
   8179c:	df00      	svc	0
   8179e:	bf00      	nop
   817a0:	e000ed08 	.word	0xe000ed08

000817a4 <pxPortInitialiseStack>:
portSTACK_TYPE *pxPortInitialiseStack( portSTACK_TYPE *pxTopOfStack, pdTASK_CODE pxCode, void *pvParameters )
{
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */
	pxTopOfStack--; /* Offset added to account for the way the MCU uses the stack on entry/exit of interrupts. */
	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
   817a4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
   817a8:	f840 3c04 	str.w	r3, [r0, #-4]
	pxTopOfStack--;
	*pxTopOfStack = ( portSTACK_TYPE ) pxCode;	/* PC */
   817ac:	f840 1c08 	str.w	r1, [r0, #-8]
	pxTopOfStack--;
	*pxTopOfStack = 0;	/* LR */
   817b0:	2300      	movs	r3, #0
   817b2:	f840 3c0c 	str.w	r3, [r0, #-12]
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
	*pxTopOfStack = ( portSTACK_TYPE ) pvParameters;	/* R0 */
   817b6:	f840 2c20 	str.w	r2, [r0, #-32]
	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */

	return pxTopOfStack;
}
   817ba:	3840      	subs	r0, #64	; 0x40
   817bc:	4770      	bx	lr
   817be:	bf00      	nop

000817c0 <SVC_Handler>:
/*-----------------------------------------------------------*/

__attribute__ (( naked )) void SVC_Handler( void )
{
	__asm volatile (
   817c0:	4b06      	ldr	r3, [pc, #24]	; (817dc <pxCurrentTCBConst2>)
   817c2:	6819      	ldr	r1, [r3, #0]
   817c4:	6808      	ldr	r0, [r1, #0]
   817c6:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   817ca:	f380 8809 	msr	PSP, r0
   817ce:	f04f 0000 	mov.w	r0, #0
   817d2:	f380 8811 	msr	BASEPRI, r0
   817d6:	f04e 0e0d 	orr.w	lr, lr, #13
   817da:	4770      	bx	lr

000817dc <pxCurrentTCBConst2>:
   817dc:	2007a794 	.word	0x2007a794

000817e0 <vPortYieldFromISR>:
/*-----------------------------------------------------------*/

void vPortYieldFromISR( void )
{
	/* Set a PendSV to request a context switch. */
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   817e0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   817e4:	4b01      	ldr	r3, [pc, #4]	; (817ec <vPortYieldFromISR+0xc>)
   817e6:	601a      	str	r2, [r3, #0]
   817e8:	4770      	bx	lr
   817ea:	bf00      	nop
   817ec:	e000ed04 	.word	0xe000ed04

000817f0 <ulPortSetInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) unsigned long ulPortSetInterruptMask( void )
{
	__asm volatile														\
   817f0:	f3ef 8011 	mrs	r0, BASEPRI
   817f4:	f04f 01a0 	mov.w	r1, #160	; 0xa0
   817f8:	f381 8811 	msr	BASEPRI, r1
   817fc:	4770      	bx	lr
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return 0;
}
   817fe:	2000      	movs	r0, #0

00081800 <vPortEnterCritical>:
	portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
   81800:	b508      	push	{r3, lr}
	portDISABLE_INTERRUPTS();
   81802:	4b03      	ldr	r3, [pc, #12]	; (81810 <vPortEnterCritical+0x10>)
   81804:	4798      	blx	r3
	uxCriticalNesting++;
   81806:	4b03      	ldr	r3, [pc, #12]	; (81814 <vPortEnterCritical+0x14>)
   81808:	681a      	ldr	r2, [r3, #0]
   8180a:	3201      	adds	r2, #1
   8180c:	601a      	str	r2, [r3, #0]
   8180e:	bd08      	pop	{r3, pc}
   81810:	000817f1 	.word	0x000817f1
   81814:	20070140 	.word	0x20070140

00081818 <vPortClearInterruptMask>:
}
/*-----------------------------------------------------------*/

__attribute__(( naked )) void vPortClearInterruptMask( unsigned long ulNewMaskValue )
{
	__asm volatile													\
   81818:	f380 8811 	msr	BASEPRI, r0
   8181c:	4770      	bx	lr
   8181e:	bf00      	nop

00081820 <vPortExitCritical>:
	uxCriticalNesting++;
}
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
   81820:	b508      	push	{r3, lr}
	uxCriticalNesting--;
   81822:	4a04      	ldr	r2, [pc, #16]	; (81834 <vPortExitCritical+0x14>)
   81824:	6813      	ldr	r3, [r2, #0]
   81826:	3b01      	subs	r3, #1
   81828:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
   8182a:	b913      	cbnz	r3, 81832 <vPortExitCritical+0x12>
	{
		portENABLE_INTERRUPTS();
   8182c:	2000      	movs	r0, #0
   8182e:	4b02      	ldr	r3, [pc, #8]	; (81838 <vPortExitCritical+0x18>)
   81830:	4798      	blx	r3
   81832:	bd08      	pop	{r3, pc}
   81834:	20070140 	.word	0x20070140
   81838:	00081819 	.word	0x00081819

0008183c <PendSV_Handler>:

__attribute__(( naked )) void PendSV_Handler( void )
{
	/* This is a naked function. */

	__asm volatile
   8183c:	f3ef 8009 	mrs	r0, PSP
   81840:	4b0c      	ldr	r3, [pc, #48]	; (81874 <pxCurrentTCBConst>)
   81842:	681a      	ldr	r2, [r3, #0]
   81844:	e920 0ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   81848:	6010      	str	r0, [r2, #0]
   8184a:	e92d 4008 	stmdb	sp!, {r3, lr}
   8184e:	f04f 00a0 	mov.w	r0, #160	; 0xa0
   81852:	f380 8811 	msr	BASEPRI, r0
   81856:	f000 fef5 	bl	82644 <vTaskSwitchContext>
   8185a:	f04f 0000 	mov.w	r0, #0
   8185e:	f380 8811 	msr	BASEPRI, r0
   81862:	e8bd 4008 	ldmia.w	sp!, {r3, lr}
   81866:	6819      	ldr	r1, [r3, #0]
   81868:	6808      	ldr	r0, [r1, #0]
   8186a:	e8b0 0ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp}
   8186e:	f380 8809 	msr	PSP, r0
   81872:	4770      	bx	lr

00081874 <pxCurrentTCBConst>:
   81874:	2007a794 	.word	0x2007a794

00081878 <SysTick_Handler>:
	);
}
/*-----------------------------------------------------------*/

void SysTick_Handler( void )
{
   81878:	b508      	push	{r3, lr}
	/* If using preemption, also force a context switch. */
	#if configUSE_PREEMPTION == 1
		portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
   8187a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
   8187e:	4b05      	ldr	r3, [pc, #20]	; (81894 <SysTick_Handler+0x1c>)
   81880:	601a      	str	r2, [r3, #0]
	to generate the tick interrupt. */
	#if configUSE_TICKLESS_IDLE == 1
		portNVIC_SYSTICK_LOAD_REG = ulTimerReloadValueForOneTick;
	#endif

	( void ) portSET_INTERRUPT_MASK_FROM_ISR();
   81882:	4b05      	ldr	r3, [pc, #20]	; (81898 <SysTick_Handler+0x20>)
   81884:	4798      	blx	r3
	{
		vTaskIncrementTick();
   81886:	4b05      	ldr	r3, [pc, #20]	; (8189c <SysTick_Handler+0x24>)
   81888:	4798      	blx	r3
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( 0 );
   8188a:	2000      	movs	r0, #0
   8188c:	4b04      	ldr	r3, [pc, #16]	; (818a0 <SysTick_Handler+0x28>)
   8188e:	4798      	blx	r3
   81890:	bd08      	pop	{r3, pc}
   81892:	bf00      	nop
   81894:	e000ed04 	.word	0xe000ed04
   81898:	000817f1 	.word	0x000817f1
   8189c:	00082309 	.word	0x00082309
   818a0:	00081819 	.word	0x00081819

000818a4 <vPortSetupTimerInterrupt>:
		ulStoppedTimerCompensation = 45UL / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;;
   818a4:	4a03      	ldr	r2, [pc, #12]	; (818b4 <vPortSetupTimerInterrupt+0x10>)
   818a6:	4b04      	ldr	r3, [pc, #16]	; (818b8 <vPortSetupTimerInterrupt+0x14>)
   818a8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CTRL_REG = portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT;
   818aa:	2207      	movs	r2, #7
   818ac:	3b04      	subs	r3, #4
   818ae:	601a      	str	r2, [r3, #0]
   818b0:	4770      	bx	lr
   818b2:	bf00      	nop
   818b4:	0001481f 	.word	0x0001481f
   818b8:	e000e014 	.word	0xe000e014

000818bc <xPortStartScheduler>:

/*
 * See header file for description.
 */
portBASE_TYPE xPortStartScheduler( void )
{
   818bc:	b510      	push	{r4, lr}
	/* configMAX_SYSCALL_INTERRUPT_PRIORITY must not be set to 0.
	See http://www.FreeRTOS.org/RTOS-Cortex-M3-M4.html */
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* Make PendSV, CallSV and SysTick the same priroity as the kernel. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
   818be:	4b09      	ldr	r3, [pc, #36]	; (818e4 <xPortStartScheduler+0x28>)
   818c0:	681a      	ldr	r2, [r3, #0]
   818c2:	f442 0270 	orr.w	r2, r2, #15728640	; 0xf00000
   818c6:	601a      	str	r2, [r3, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
   818c8:	681a      	ldr	r2, [r3, #0]
   818ca:	f042 4270 	orr.w	r2, r2, #4026531840	; 0xf0000000
   818ce:	601a      	str	r2, [r3, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
   818d0:	4b05      	ldr	r3, [pc, #20]	; (818e8 <xPortStartScheduler+0x2c>)
   818d2:	4798      	blx	r3

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
   818d4:	2400      	movs	r4, #0
   818d6:	4b05      	ldr	r3, [pc, #20]	; (818ec <xPortStartScheduler+0x30>)
   818d8:	601c      	str	r4, [r3, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
   818da:	4b05      	ldr	r3, [pc, #20]	; (818f0 <xPortStartScheduler+0x34>)
   818dc:	4798      	blx	r3

	/* Should not get here! */
	return 0;
}
   818de:	4620      	mov	r0, r4
   818e0:	bd10      	pop	{r4, pc}
   818e2:	bf00      	nop
   818e4:	e000ed20 	.word	0xe000ed20
   818e8:	000818a5 	.word	0x000818a5
   818ec:	20070140 	.word	0x20070140
   818f0:	00081791 	.word	0x00081791

000818f4 <prvInsertBlockIntoFreeList>:
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
}
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( xBlockLink *pxBlockToInsert )
{
   818f4:	b430      	push	{r4, r5}
xBlockLink *pxIterator;
unsigned char *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
   818f6:	4a13      	ldr	r2, [pc, #76]	; (81944 <prvInsertBlockIntoFreeList+0x50>)
   818f8:	6813      	ldr	r3, [r2, #0]
   818fa:	4283      	cmp	r3, r0
   818fc:	d201      	bcs.n	81902 <prvInsertBlockIntoFreeList+0xe>
   818fe:	461a      	mov	r2, r3
   81900:	e7fa      	b.n	818f8 <prvInsertBlockIntoFreeList+0x4>
   81902:	4611      	mov	r1, r2
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */	
	puc = ( unsigned char * ) pxIterator;
	if( ( puc + pxIterator->xBlockSize ) == ( unsigned char * ) pxBlockToInsert )
   81904:	6854      	ldr	r4, [r2, #4]
   81906:	1915      	adds	r5, r2, r4
   81908:	4285      	cmp	r5, r0
   8190a:	d103      	bne.n	81914 <prvInsertBlockIntoFreeList+0x20>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
   8190c:	6868      	ldr	r0, [r5, #4]
   8190e:	4404      	add	r4, r0
   81910:	6054      	str	r4, [r2, #4]
   81912:	4610      	mov	r0, r2
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( unsigned char * ) pxBlockToInsert;
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( unsigned char * ) pxIterator->pxNextFreeBlock )
   81914:	6842      	ldr	r2, [r0, #4]
   81916:	1884      	adds	r4, r0, r2
   81918:	42a3      	cmp	r3, r4
   8191a:	d10c      	bne.n	81936 <prvInsertBlockIntoFreeList+0x42>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
   8191c:	4c0a      	ldr	r4, [pc, #40]	; (81948 <prvInsertBlockIntoFreeList+0x54>)
   8191e:	6824      	ldr	r4, [r4, #0]
   81920:	429c      	cmp	r4, r3
   81922:	d006      	beq.n	81932 <prvInsertBlockIntoFreeList+0x3e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
   81924:	685b      	ldr	r3, [r3, #4]
   81926:	441a      	add	r2, r3
   81928:	6042      	str	r2, [r0, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
   8192a:	680b      	ldr	r3, [r1, #0]
   8192c:	681b      	ldr	r3, [r3, #0]
   8192e:	6003      	str	r3, [r0, #0]
   81930:	e002      	b.n	81938 <prvInsertBlockIntoFreeList+0x44>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
   81932:	6003      	str	r3, [r0, #0]
   81934:	e000      	b.n	81938 <prvInsertBlockIntoFreeList+0x44>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;		
   81936:	6003      	str	r3, [r0, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
   81938:	4281      	cmp	r1, r0
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
   8193a:	bf18      	it	ne
   8193c:	6008      	strne	r0, [r1, #0]
	}
}
   8193e:	bc30      	pop	{r4, r5}
   81940:	4770      	bx	lr
   81942:	bf00      	nop
   81944:	2007a6d4 	.word	0x2007a6d4
   81948:	2007a6d0 	.word	0x2007a6d0

0008194c <pvPortMalloc>:
/* STATIC FUNCTIONS ARE DEFINED AS MACROS TO MINIMIZE THE FUNCTION CALL DEPTH. */

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
   8194c:	b538      	push	{r3, r4, r5, lr}
   8194e:	4604      	mov	r4, r0
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;

	vTaskSuspendAll();
   81950:	4b28      	ldr	r3, [pc, #160]	; (819f4 <pvPortMalloc+0xa8>)
   81952:	4798      	blx	r3
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
   81954:	4b28      	ldr	r3, [pc, #160]	; (819f8 <pvPortMalloc+0xac>)
   81956:	681b      	ldr	r3, [r3, #0]
   81958:	b99b      	cbnz	r3, 81982 <pvPortMalloc+0x36>
	/* Ensure the start of the heap is aligned. */
	configASSERT( ( ( ( unsigned long ) xHeap.ucHeap ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) xHeap.ucHeap;
   8195a:	4a28      	ldr	r2, [pc, #160]	; (819fc <pvPortMalloc+0xb0>)
   8195c:	4b28      	ldr	r3, [pc, #160]	; (81a00 <pvPortMalloc+0xb4>)
   8195e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
   81960:	2100      	movs	r1, #0
   81962:	6051      	str	r1, [r2, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	pucHeapEnd = xHeap.ucHeap + xTotalHeapSize;
	pucHeapEnd -= heapSTRUCT_SIZE;
	pxEnd = ( void * ) pucHeapEnd;
   81964:	f649 72f0 	movw	r2, #40944	; 0x9ff0
   81968:	1898      	adds	r0, r3, r2
   8196a:	4d23      	ldr	r5, [pc, #140]	; (819f8 <pvPortMalloc+0xac>)
   8196c:	6028      	str	r0, [r5, #0]
	configASSERT( ( ( ( unsigned long ) pxEnd ) & ( ( unsigned long ) portBYTE_ALIGNMENT_MASK ) ) == 0UL );
	pxEnd->xBlockSize = 0;
   8196e:	f649 75f4 	movw	r5, #40948	; 0x9ff4
   81972:	5159      	str	r1, [r3, r5]
	pxEnd->pxNextFreeBlock = NULL;
   81974:	5099      	str	r1, [r3, r2]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) xHeap.ucHeap;
	pxFirstFreeBlock->xBlockSize = xTotalHeapSize - heapSTRUCT_SIZE;
   81976:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
   81978:	6018      	str	r0, [r3, #0]

	/* The heap now contains pxEnd. */
	xFreeBytesRemaining -= heapSTRUCT_SIZE;
   8197a:	4b22      	ldr	r3, [pc, #136]	; (81a04 <pvPortMalloc+0xb8>)
   8197c:	681a      	ldr	r2, [r3, #0]
   8197e:	3a10      	subs	r2, #16
   81980:	601a      	str	r2, [r3, #0]
			prvHeapInit();
		}

		/* The wanted size is increased so it can contain a xBlockLink
		structure in addition to the requested amount of bytes. */
		if( xWantedSize > 0 )
   81982:	2c00      	cmp	r4, #0
   81984:	d02d      	beq.n	819e2 <pvPortMalloc+0x96>
		{
			xWantedSize += heapSTRUCT_SIZE;
   81986:	f104 0210 	add.w	r2, r4, #16

			/* Ensure that blocks are always aligned to the required number of 
			bytes. */
			if( xWantedSize & portBYTE_ALIGNMENT_MASK )
   8198a:	f012 0f07 	tst.w	r2, #7
			{
				/* Byte alignment required. */
				xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
   8198e:	bf1c      	itt	ne
   81990:	f022 0207 	bicne.w	r2, r2, #7
   81994:	3208      	addne	r2, #8
			}
		}

		if( ( xWantedSize > 0 ) && ( xWantedSize < xTotalHeapSize ) )
   81996:	1e51      	subs	r1, r2, #1
   81998:	f649 73fe 	movw	r3, #40958	; 0x9ffe
   8199c:	4299      	cmp	r1, r3
   8199e:	d822      	bhi.n	819e6 <pvPortMalloc+0x9a>
		{
			/* Traverse the list from the start	(lowest address) block until one
			of adequate size is found. */
			pxPreviousBlock = &xStart;
			pxBlock = xStart.pxNextFreeBlock;
   819a0:	4916      	ldr	r1, [pc, #88]	; (819fc <pvPortMalloc+0xb0>)
   819a2:	680c      	ldr	r4, [r1, #0]
			while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
   819a4:	6863      	ldr	r3, [r4, #4]
   819a6:	429a      	cmp	r2, r3
   819a8:	d904      	bls.n	819b4 <pvPortMalloc+0x68>
   819aa:	6823      	ldr	r3, [r4, #0]
   819ac:	b113      	cbz	r3, 819b4 <pvPortMalloc+0x68>
   819ae:	4621      	mov	r1, r4
			{
				pxPreviousBlock = pxBlock;
				pxBlock = pxBlock->pxNextFreeBlock;
   819b0:	461c      	mov	r4, r3
   819b2:	e7f7      	b.n	819a4 <pvPortMalloc+0x58>
			}

			/* If the end marker was reached then a block of adequate size was
			not found. */
			if( pxBlock != pxEnd )
   819b4:	4b10      	ldr	r3, [pc, #64]	; (819f8 <pvPortMalloc+0xac>)
   819b6:	681b      	ldr	r3, [r3, #0]
   819b8:	429c      	cmp	r4, r3
   819ba:	d016      	beq.n	819ea <pvPortMalloc+0x9e>
			{
				/* Return the memory space - jumping over the xBlockLink structure
				at its start. */
				pvReturn = ( void * ) ( ( ( unsigned char * ) pxPreviousBlock->pxNextFreeBlock ) + heapSTRUCT_SIZE );
   819bc:	680d      	ldr	r5, [r1, #0]
   819be:	3510      	adds	r5, #16

				/* This block is being returned for use so must be taken out of
				the	list of free blocks. */
				pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
   819c0:	6823      	ldr	r3, [r4, #0]
   819c2:	600b      	str	r3, [r1, #0]

				/* If the block is larger than required it can be split into two. */
				if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
   819c4:	6863      	ldr	r3, [r4, #4]
   819c6:	1a9b      	subs	r3, r3, r2
   819c8:	2b20      	cmp	r3, #32
   819ca:	d904      	bls.n	819d6 <pvPortMalloc+0x8a>
				{
					/* This block is to be split into two.  Create a new block
					following the number of bytes requested. The void cast is
					used to prevent byte alignment warnings from the compiler. */
					pxNewBlockLink = ( void * ) ( ( ( unsigned char * ) pxBlock ) + xWantedSize );
   819cc:	18a0      	adds	r0, r4, r2

					/* Calculate the sizes of two blocks split from the single
					block. */
					pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
   819ce:	6043      	str	r3, [r0, #4]
					pxBlock->xBlockSize = xWantedSize;
   819d0:	6062      	str	r2, [r4, #4]

					/* Insert the new block into the list of free blocks. */
					prvInsertBlockIntoFreeList( ( pxNewBlockLink ) );
   819d2:	4b0d      	ldr	r3, [pc, #52]	; (81a08 <pvPortMalloc+0xbc>)
   819d4:	4798      	blx	r3
				}

				xFreeBytesRemaining -= pxBlock->xBlockSize;
   819d6:	4b0b      	ldr	r3, [pc, #44]	; (81a04 <pvPortMalloc+0xb8>)
   819d8:	681a      	ldr	r2, [r3, #0]
   819da:	6861      	ldr	r1, [r4, #4]
   819dc:	1a52      	subs	r2, r2, r1
   819de:	601a      	str	r2, [r3, #0]
   819e0:	e004      	b.n	819ec <pvPortMalloc+0xa0>
/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
xBlockLink *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
   819e2:	2500      	movs	r5, #0
   819e4:	e002      	b.n	819ec <pvPortMalloc+0xa0>
   819e6:	2500      	movs	r5, #0
   819e8:	e000      	b.n	819ec <pvPortMalloc+0xa0>
   819ea:	2500      	movs	r5, #0

				xFreeBytesRemaining -= pxBlock->xBlockSize;
			}
		}
	}
	xTaskResumeAll();
   819ec:	4b07      	ldr	r3, [pc, #28]	; (81a0c <pvPortMalloc+0xc0>)
   819ee:	4798      	blx	r3
		}
	}
	#endif

	return pvReturn;
}
   819f0:	4628      	mov	r0, r5
   819f2:	bd38      	pop	{r3, r4, r5, pc}
   819f4:	000822d9 	.word	0x000822d9
   819f8:	2007a6d0 	.word	0x2007a6d0
   819fc:	2007a6d4 	.word	0x2007a6d4
   81a00:	200706d0 	.word	0x200706d0
   81a04:	20070144 	.word	0x20070144
   81a08:	000818f5 	.word	0x000818f5
   81a0c:	00082429 	.word	0x00082429

00081a10 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
   81a10:	b510      	push	{r4, lr}
unsigned char *puc = ( unsigned char * ) pv;
xBlockLink *pxLink;

	if( pv != NULL )
   81a12:	4604      	mov	r4, r0
   81a14:	b168      	cbz	r0, 81a32 <vPortFree+0x22>
		puc -= heapSTRUCT_SIZE;

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;

		vTaskSuspendAll();
   81a16:	4b07      	ldr	r3, [pc, #28]	; (81a34 <vPortFree+0x24>)
   81a18:	4798      	blx	r3
		{
			/* Add this block to the list of free blocks. */
			xFreeBytesRemaining += pxLink->xBlockSize;
   81a1a:	4b07      	ldr	r3, [pc, #28]	; (81a38 <vPortFree+0x28>)
   81a1c:	6819      	ldr	r1, [r3, #0]
   81a1e:	f854 2c0c 	ldr.w	r2, [r4, #-12]
   81a22:	440a      	add	r2, r1
   81a24:	601a      	str	r2, [r3, #0]
			prvInsertBlockIntoFreeList( ( ( xBlockLink * ) pxLink ) );			
   81a26:	f1a4 0010 	sub.w	r0, r4, #16
   81a2a:	4b04      	ldr	r3, [pc, #16]	; (81a3c <vPortFree+0x2c>)
   81a2c:	4798      	blx	r3
		}
		xTaskResumeAll();
   81a2e:	4b04      	ldr	r3, [pc, #16]	; (81a40 <vPortFree+0x30>)
   81a30:	4798      	blx	r3
   81a32:	bd10      	pop	{r4, pc}
   81a34:	000822d9 	.word	0x000822d9
   81a38:	20070144 	.word	0x20070144
   81a3c:	000818f5 	.word	0x000818f5
   81a40:	00082429 	.word	0x00082429

00081a44 <prvCopyDataToQueue>:

#endif
/*-----------------------------------------------------------*/

static void prvCopyDataToQueue( xQUEUE *pxQueue, const void *pvItemToQueue, portBASE_TYPE xPosition )
{
   81a44:	b510      	push	{r4, lr}
   81a46:	4604      	mov	r4, r0
	if( pxQueue->uxItemSize == ( unsigned portBASE_TYPE ) 0 )
   81a48:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81a4a:	b93b      	cbnz	r3, 81a5c <prvCopyDataToQueue+0x18>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81a4c:	6803      	ldr	r3, [r0, #0]
   81a4e:	bb1b      	cbnz	r3, 81a98 <prvCopyDataToQueue+0x54>
			{
				/* The mutex is no longer being held. */
				vTaskPriorityDisinherit( ( void * ) pxQueue->pxMutexHolder );
   81a50:	6840      	ldr	r0, [r0, #4]
   81a52:	4b13      	ldr	r3, [pc, #76]	; (81aa0 <prvCopyDataToQueue+0x5c>)
   81a54:	4798      	blx	r3
				pxQueue->pxMutexHolder = NULL;
   81a56:	2300      	movs	r3, #0
   81a58:	6063      	str	r3, [r4, #4]
   81a5a:	e01d      	b.n	81a98 <prvCopyDataToQueue+0x54>
			}
		}
		#endif
	}
	else if( xPosition == queueSEND_TO_BACK )
   81a5c:	b96a      	cbnz	r2, 81a7a <prvCopyDataToQueue+0x36>
	{
		memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81a5e:	6880      	ldr	r0, [r0, #8]
   81a60:	461a      	mov	r2, r3
   81a62:	4b10      	ldr	r3, [pc, #64]	; (81aa4 <prvCopyDataToQueue+0x60>)
   81a64:	4798      	blx	r3
		pxQueue->pcWriteTo += pxQueue->uxItemSize;
   81a66:	68a2      	ldr	r2, [r4, #8]
   81a68:	6c23      	ldr	r3, [r4, #64]	; 0x40
   81a6a:	4413      	add	r3, r2
   81a6c:	60a3      	str	r3, [r4, #8]
		if( pxQueue->pcWriteTo >= pxQueue->pcTail )
   81a6e:	6862      	ldr	r2, [r4, #4]
   81a70:	4293      	cmp	r3, r2
   81a72:	d311      	bcc.n	81a98 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
   81a74:	6823      	ldr	r3, [r4, #0]
   81a76:	60a3      	str	r3, [r4, #8]
   81a78:	e00e      	b.n	81a98 <prvCopyDataToQueue+0x54>
		}
	}
	else
	{
		memcpy( ( void * ) pxQueue->pcReadFrom, pvItemToQueue, ( unsigned ) pxQueue->uxItemSize );
   81a7a:	68c0      	ldr	r0, [r0, #12]
   81a7c:	461a      	mov	r2, r3
   81a7e:	4b09      	ldr	r3, [pc, #36]	; (81aa4 <prvCopyDataToQueue+0x60>)
   81a80:	4798      	blx	r3
		pxQueue->pcReadFrom -= pxQueue->uxItemSize;
   81a82:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81a84:	4252      	negs	r2, r2
   81a86:	68e3      	ldr	r3, [r4, #12]
   81a88:	4413      	add	r3, r2
   81a8a:	60e3      	str	r3, [r4, #12]
		if( pxQueue->pcReadFrom < pxQueue->pcHead )
   81a8c:	6821      	ldr	r1, [r4, #0]
   81a8e:	428b      	cmp	r3, r1
   81a90:	d202      	bcs.n	81a98 <prvCopyDataToQueue+0x54>
		{
			pxQueue->pcReadFrom = ( pxQueue->pcTail - pxQueue->uxItemSize );
   81a92:	6863      	ldr	r3, [r4, #4]
   81a94:	441a      	add	r2, r3
   81a96:	60e2      	str	r2, [r4, #12]
		}
	}

	++( pxQueue->uxMessagesWaiting );
   81a98:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81a9a:	3301      	adds	r3, #1
   81a9c:	63a3      	str	r3, [r4, #56]	; 0x38
   81a9e:	bd10      	pop	{r4, pc}
   81aa0:	0008295d 	.word	0x0008295d
   81aa4:	00082e0d 	.word	0x00082e0d

00081aa8 <prvCopyDataFromQueue>:
}
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( xQUEUE * const pxQueue, const void *pvBuffer )
{
   81aa8:	b538      	push	{r3, r4, r5, lr}
   81aaa:	4603      	mov	r3, r0
	if( pxQueue->uxQueueType != queueQUEUE_IS_MUTEX )
   81aac:	6805      	ldr	r5, [r0, #0]
   81aae:	b15d      	cbz	r5, 81ac8 <prvCopyDataFromQueue+0x20>
	{
		pxQueue->pcReadFrom += pxQueue->uxItemSize;
   81ab0:	6c02      	ldr	r2, [r0, #64]	; 0x40
   81ab2:	68c4      	ldr	r4, [r0, #12]
   81ab4:	4414      	add	r4, r2
   81ab6:	60c4      	str	r4, [r0, #12]
		if( pxQueue->pcReadFrom >= pxQueue->pcTail )
   81ab8:	6840      	ldr	r0, [r0, #4]
   81aba:	4284      	cmp	r4, r0
		{
			pxQueue->pcReadFrom = pxQueue->pcHead;
   81abc:	bf28      	it	cs
   81abe:	60dd      	strcs	r5, [r3, #12]
		}
		memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->pcReadFrom, ( unsigned ) pxQueue->uxItemSize );
   81ac0:	4608      	mov	r0, r1
   81ac2:	68d9      	ldr	r1, [r3, #12]
   81ac4:	4b01      	ldr	r3, [pc, #4]	; (81acc <prvCopyDataFromQueue+0x24>)
   81ac6:	4798      	blx	r3
   81ac8:	bd38      	pop	{r3, r4, r5, pc}
   81aca:	bf00      	nop
   81acc:	00082e0d 	.word	0x00082e0d

00081ad0 <prvUnlockQueue>:
	}
}
/*-----------------------------------------------------------*/

static void prvUnlockQueue( xQueueHandle pxQueue )
{
   81ad0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81ad2:	4604      	mov	r4, r0

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
   81ad4:	4b1d      	ldr	r3, [pc, #116]	; (81b4c <prvUnlockQueue+0x7c>)
   81ad6:	4798      	blx	r3
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81ad8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81ada:	2b00      	cmp	r3, #0
   81adc:	dd12      	ble.n	81b04 <prvUnlockQueue+0x34>
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81ade:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81ae0:	b183      	cbz	r3, 81b04 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81ae2:	f104 0624 	add.w	r6, r4, #36	; 0x24
   81ae6:	4d1a      	ldr	r5, [pc, #104]	; (81b50 <prvUnlockQueue+0x80>)
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81ae8:	4f1a      	ldr	r7, [pc, #104]	; (81b54 <prvUnlockQueue+0x84>)
   81aea:	e001      	b.n	81af0 <prvUnlockQueue+0x20>
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
		{
			/* Data was posted while the queue was locked.  Are any tasks
			blocked waiting for data to become available? */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81aec:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81aee:	b14b      	cbz	r3, 81b04 <prvUnlockQueue+0x34>
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81af0:	4630      	mov	r0, r6
   81af2:	47a8      	blx	r5
   81af4:	b100      	cbz	r0, 81af8 <prvUnlockQueue+0x28>
				{
					/* The task waiting has a higher priority so record that a
					context	switch is required. */
					vTaskMissedYield();
   81af6:	47b8      	blx	r7
				}

				--( pxQueue->xTxLock );
   81af8:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81afa:	3b01      	subs	r3, #1
   81afc:	64a3      	str	r3, [r4, #72]	; 0x48
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
	{
		/* See if data was added to the queue while it was locked. */
		while( pxQueue->xTxLock > queueLOCKED_UNMODIFIED )
   81afe:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81b00:	2b00      	cmp	r3, #0
   81b02:	dcf3      	bgt.n	81aec <prvUnlockQueue+0x1c>
			{
				break;
			}
		}

		pxQueue->xTxLock = queueUNLOCKED;
   81b04:	f04f 33ff 	mov.w	r3, #4294967295
   81b08:	64a3      	str	r3, [r4, #72]	; 0x48
	}
	taskEXIT_CRITICAL();
   81b0a:	4b13      	ldr	r3, [pc, #76]	; (81b58 <prvUnlockQueue+0x88>)
   81b0c:	4798      	blx	r3

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
   81b0e:	4b0f      	ldr	r3, [pc, #60]	; (81b4c <prvUnlockQueue+0x7c>)
   81b10:	4798      	blx	r3
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81b12:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81b14:	2b00      	cmp	r3, #0
   81b16:	dd12      	ble.n	81b3e <prvUnlockQueue+0x6e>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81b18:	6923      	ldr	r3, [r4, #16]
   81b1a:	b183      	cbz	r3, 81b3e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81b1c:	f104 0610 	add.w	r6, r4, #16
   81b20:	4d0b      	ldr	r5, [pc, #44]	; (81b50 <prvUnlockQueue+0x80>)
				{
					vTaskMissedYield();
   81b22:	4f0c      	ldr	r7, [pc, #48]	; (81b54 <prvUnlockQueue+0x84>)
   81b24:	e001      	b.n	81b2a <prvUnlockQueue+0x5a>
	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81b26:	6923      	ldr	r3, [r4, #16]
   81b28:	b14b      	cbz	r3, 81b3e <prvUnlockQueue+0x6e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
   81b2a:	4630      	mov	r0, r6
   81b2c:	47a8      	blx	r5
   81b2e:	b100      	cbz	r0, 81b32 <prvUnlockQueue+0x62>
				{
					vTaskMissedYield();
   81b30:	47b8      	blx	r7
				}

				--( pxQueue->xRxLock );
   81b32:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81b34:	3b01      	subs	r3, #1
   81b36:	6463      	str	r3, [r4, #68]	; 0x44
	taskEXIT_CRITICAL();

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
	{
		while( pxQueue->xRxLock > queueLOCKED_UNMODIFIED )
   81b38:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81b3a:	2b00      	cmp	r3, #0
   81b3c:	dcf3      	bgt.n	81b26 <prvUnlockQueue+0x56>
			{
				break;
			}
		}

		pxQueue->xRxLock = queueUNLOCKED;
   81b3e:	f04f 33ff 	mov.w	r3, #4294967295
   81b42:	6463      	str	r3, [r4, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
   81b44:	4b04      	ldr	r3, [pc, #16]	; (81b58 <prvUnlockQueue+0x88>)
   81b46:	4798      	blx	r3
   81b48:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81b4a:	bf00      	nop
   81b4c:	00081801 	.word	0x00081801
   81b50:	00082779 	.word	0x00082779
   81b54:	000828a9 	.word	0x000828a9
   81b58:	00081821 	.word	0x00081821

00081b5c <xQueueGenericReset>:
/*-----------------------------------------------------------
 * PUBLIC QUEUE MANAGEMENT API documented in queue.h
 *----------------------------------------------------------*/

portBASE_TYPE xQueueGenericReset( xQueueHandle pxQueue, portBASE_TYPE xNewQueue )
{
   81b5c:	b538      	push	{r3, r4, r5, lr}
   81b5e:	460d      	mov	r5, r1
	configASSERT( pxQueue );
   81b60:	4604      	mov	r4, r0
   81b62:	b918      	cbnz	r0, 81b6c <xQueueGenericReset+0x10>
   81b64:	4b16      	ldr	r3, [pc, #88]	; (81bc0 <xQueueGenericReset+0x64>)
   81b66:	4798      	blx	r3
   81b68:	bf00      	nop
   81b6a:	e7fd      	b.n	81b68 <xQueueGenericReset+0xc>

	taskENTER_CRITICAL();
   81b6c:	4b15      	ldr	r3, [pc, #84]	; (81bc4 <xQueueGenericReset+0x68>)
   81b6e:	4798      	blx	r3
	{
		pxQueue->pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize );
   81b70:	6823      	ldr	r3, [r4, #0]
   81b72:	6c22      	ldr	r2, [r4, #64]	; 0x40
   81b74:	6be0      	ldr	r0, [r4, #60]	; 0x3c
   81b76:	fb00 f002 	mul.w	r0, r0, r2
   81b7a:	1819      	adds	r1, r3, r0
   81b7c:	6061      	str	r1, [r4, #4]
		pxQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81b7e:	2100      	movs	r1, #0
   81b80:	63a1      	str	r1, [r4, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
   81b82:	60a3      	str	r3, [r4, #8]
		pxQueue->pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - ( unsigned portBASE_TYPE ) 1U ) * pxQueue->uxItemSize );
   81b84:	1a82      	subs	r2, r0, r2
   81b86:	4413      	add	r3, r2
   81b88:	60e3      	str	r3, [r4, #12]
		pxQueue->xRxLock = queueUNLOCKED;
   81b8a:	f04f 33ff 	mov.w	r3, #4294967295
   81b8e:	6463      	str	r3, [r4, #68]	; 0x44
		pxQueue->xTxLock = queueUNLOCKED;
   81b90:	64a3      	str	r3, [r4, #72]	; 0x48

		if( xNewQueue == pdFALSE )
   81b92:	b955      	cbnz	r5, 81baa <xQueueGenericReset+0x4e>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to	write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81b94:	6923      	ldr	r3, [r4, #16]
   81b96:	b17b      	cbz	r3, 81bb8 <xQueueGenericReset+0x5c>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81b98:	f104 0010 	add.w	r0, r4, #16
   81b9c:	4b0a      	ldr	r3, [pc, #40]	; (81bc8 <xQueueGenericReset+0x6c>)
   81b9e:	4798      	blx	r3
   81ba0:	2801      	cmp	r0, #1
   81ba2:	d109      	bne.n	81bb8 <xQueueGenericReset+0x5c>
				{
					portYIELD_WITHIN_API();
   81ba4:	4b09      	ldr	r3, [pc, #36]	; (81bcc <xQueueGenericReset+0x70>)
   81ba6:	4798      	blx	r3
   81ba8:	e006      	b.n	81bb8 <xQueueGenericReset+0x5c>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
   81baa:	f104 0010 	add.w	r0, r4, #16
   81bae:	4d08      	ldr	r5, [pc, #32]	; (81bd0 <xQueueGenericReset+0x74>)
   81bb0:	47a8      	blx	r5
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
   81bb2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81bb6:	47a8      	blx	r5
		}
	}
	taskEXIT_CRITICAL();
   81bb8:	4b06      	ldr	r3, [pc, #24]	; (81bd4 <xQueueGenericReset+0x78>)
   81bba:	4798      	blx	r3

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
}
   81bbc:	2001      	movs	r0, #1
   81bbe:	bd38      	pop	{r3, r4, r5, pc}
   81bc0:	000817f1 	.word	0x000817f1
   81bc4:	00081801 	.word	0x00081801
   81bc8:	00082779 	.word	0x00082779
   81bcc:	000817e1 	.word	0x000817e1
   81bd0:	000816f1 	.word	0x000816f1
   81bd4:	00081821 	.word	0x00081821

00081bd8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

xQueueHandle xQueueGenericCreate( unsigned portBASE_TYPE uxQueueLength, unsigned portBASE_TYPE uxItemSize, unsigned char ucQueueType )
{
   81bd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   81bda:	460d      	mov	r5, r1
   81bdc:	4617      	mov	r7, r2
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	/* Allocate the new queue structure. */
	if( uxQueueLength > ( unsigned portBASE_TYPE ) 0 )
   81bde:	4606      	mov	r6, r0
   81be0:	b188      	cbz	r0, 81c06 <xQueueGenericCreate+0x2e>
	{
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81be2:	2050      	movs	r0, #80	; 0x50
   81be4:	4b0e      	ldr	r3, [pc, #56]	; (81c20 <xQueueGenericCreate+0x48>)
   81be6:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81be8:	4604      	mov	r4, r0
   81bea:	b160      	cbz	r0, 81c06 <xQueueGenericCreate+0x2e>
		{
			/* Create the list of pointers to queue items.  The queue is one byte
			longer than asked for to make wrap checking easier/faster. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ) + ( size_t ) 1;
   81bec:	fb05 f006 	mul.w	r0, r5, r6

			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
   81bf0:	3001      	adds	r0, #1
   81bf2:	4b0b      	ldr	r3, [pc, #44]	; (81c20 <xQueueGenericCreate+0x48>)
   81bf4:	4798      	blx	r3
   81bf6:	6020      	str	r0, [r4, #0]
			if( pxNewQueue->pcHead != NULL )
   81bf8:	b940      	cbnz	r0, 81c0c <xQueueGenericCreate+0x34>
				xReturn = pxNewQueue;
			}
			else
			{
				traceQUEUE_CREATE_FAILED( ucQueueType );
				vPortFree( pxNewQueue );
   81bfa:	4620      	mov	r0, r4
   81bfc:	4b09      	ldr	r3, [pc, #36]	; (81c24 <xQueueGenericCreate+0x4c>)
   81bfe:	4798      	blx	r3
   81c00:	e001      	b.n	81c06 <xQueueGenericCreate+0x2e>
			}
		}
	}

	configASSERT( xReturn );
   81c02:	bf00      	nop
   81c04:	e7fd      	b.n	81c02 <xQueueGenericCreate+0x2a>
   81c06:	4b08      	ldr	r3, [pc, #32]	; (81c28 <xQueueGenericCreate+0x50>)
   81c08:	4798      	blx	r3
   81c0a:	e7fa      	b.n	81c02 <xQueueGenericCreate+0x2a>
			pxNewQueue->pcHead = ( signed char * ) pvPortMalloc( xQueueSizeInBytes );
			if( pxNewQueue->pcHead != NULL )
			{
				/* Initialise the queue members as described above where the
				queue type is defined. */
				pxNewQueue->uxLength = uxQueueLength;
   81c0c:	63e6      	str	r6, [r4, #60]	; 0x3c
				pxNewQueue->uxItemSize = uxItemSize;
   81c0e:	6425      	str	r5, [r4, #64]	; 0x40
				xQueueGenericReset( pxNewQueue, pdTRUE );
   81c10:	4620      	mov	r0, r4
   81c12:	2101      	movs	r1, #1
   81c14:	4b05      	ldr	r3, [pc, #20]	; (81c2c <xQueueGenericCreate+0x54>)
   81c16:	4798      	blx	r3
				#if ( configUSE_TRACE_FACILITY == 1 )
				{
					pxNewQueue->ucQueueType = ucQueueType;
   81c18:	f884 704d 	strb.w	r7, [r4, #77]	; 0x4d
	}

	configASSERT( xReturn );

	return xReturn;
}
   81c1c:	4620      	mov	r0, r4
   81c1e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   81c20:	0008194d 	.word	0x0008194d
   81c24:	00081a11 	.word	0x00081a11
   81c28:	000817f1 	.word	0x000817f1
   81c2c:	00081b5d 	.word	0x00081b5d

00081c30 <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if configUSE_COUNTING_SEMAPHORES == 1

	xQueueHandle xQueueCreateCountingSemaphore( unsigned portBASE_TYPE uxCountValue, unsigned portBASE_TYPE uxInitialCount )
	{
   81c30:	b510      	push	{r4, lr}
   81c32:	460c      	mov	r4, r1
	xQueueHandle pxHandle;

		pxHandle = xQueueGenericCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
   81c34:	2100      	movs	r1, #0
   81c36:	2202      	movs	r2, #2
   81c38:	4b05      	ldr	r3, [pc, #20]	; (81c50 <xQueueCreateCountingSemaphore+0x20>)
   81c3a:	4798      	blx	r3

		if( pxHandle != NULL )
   81c3c:	b110      	cbz	r0, 81c44 <xQueueCreateCountingSemaphore+0x14>
   81c3e:	e004      	b.n	81c4a <xQueueCreateCountingSemaphore+0x1a>
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
   81c40:	bf00      	nop
   81c42:	e7fd      	b.n	81c40 <xQueueCreateCountingSemaphore+0x10>
   81c44:	4b03      	ldr	r3, [pc, #12]	; (81c54 <xQueueCreateCountingSemaphore+0x24>)
   81c46:	4798      	blx	r3
   81c48:	e7fa      	b.n	81c40 <xQueueCreateCountingSemaphore+0x10>

		pxHandle = xQueueGenericCreate( ( unsigned portBASE_TYPE ) uxCountValue, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );

		if( pxHandle != NULL )
		{
			pxHandle->uxMessagesWaiting = uxInitialCount;
   81c4a:	6384      	str	r4, [r0, #56]	; 0x38
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		configASSERT( pxHandle );
		return pxHandle;
	}
   81c4c:	bd10      	pop	{r4, pc}
   81c4e:	bf00      	nop
   81c50:	00081bd9 	.word	0x00081bd9
   81c54:	000817f1 	.word	0x000817f1

00081c58 <xQueueGenericSend>:

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81c58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81c5c:	b085      	sub	sp, #20
   81c5e:	468a      	mov	sl, r1
   81c60:	9201      	str	r2, [sp, #4]
   81c62:	469b      	mov	fp, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
   81c64:	4604      	mov	r4, r0
   81c66:	b918      	cbnz	r0, 81c70 <xQueueGenericSend+0x18>
   81c68:	4b36      	ldr	r3, [pc, #216]	; (81d44 <xQueueGenericSend+0xec>)
   81c6a:	4798      	blx	r3
   81c6c:	bf00      	nop
   81c6e:	e7fd      	b.n	81c6c <xQueueGenericSend+0x14>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81c70:	b909      	cbnz	r1, 81c76 <xQueueGenericSend+0x1e>
   81c72:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81c74:	b91b      	cbnz	r3, 81c7e <xQueueGenericSend+0x26>

#endif /* configUSE_COUNTING_SEMAPHORES */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSend( xQueueHandle pxQueue, const void * const pvItemToQueue, portTickType xTicksToWait, portBASE_TYPE xCopyPosition )
{
   81c76:	2700      	movs	r7, #0
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81c78:	4e33      	ldr	r6, [pc, #204]	; (81d48 <xQueueGenericSend+0xf0>)
					vTaskSetTimeOutState( &xTimeOut );
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81c7a:	4d34      	ldr	r5, [pc, #208]	; (81d4c <xQueueGenericSend+0xf4>)
   81c7c:	e003      	b.n	81c86 <xQueueGenericSend+0x2e>
{
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;

	configASSERT( pxQueue );
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81c7e:	4b31      	ldr	r3, [pc, #196]	; (81d44 <xQueueGenericSend+0xec>)
   81c80:	4798      	blx	r3
   81c82:	bf00      	nop
   81c84:	e7fd      	b.n	81c82 <xQueueGenericSend+0x2a>
	/* This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
   81c86:	47b0      	blx	r6
		{
			/* Is there room on the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81c88:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81c8a:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81c8c:	429a      	cmp	r2, r3
   81c8e:	d212      	bcs.n	81cb6 <xQueueGenericSend+0x5e>
			{
				traceQUEUE_SEND( pxQueue );
				prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81c90:	4620      	mov	r0, r4
   81c92:	4651      	mov	r1, sl
   81c94:	465a      	mov	r2, fp
   81c96:	4b2e      	ldr	r3, [pc, #184]	; (81d50 <xQueueGenericSend+0xf8>)
   81c98:	4798      	blx	r3

				/* If there was a task waiting for data to arrive on the
				queue then unblock it now. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81c9a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81c9c:	b13b      	cbz	r3, 81cae <xQueueGenericSend+0x56>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) == pdTRUE )
   81c9e:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81ca2:	4b2c      	ldr	r3, [pc, #176]	; (81d54 <xQueueGenericSend+0xfc>)
   81ca4:	4798      	blx	r3
   81ca6:	2801      	cmp	r0, #1
   81ca8:	d101      	bne.n	81cae <xQueueGenericSend+0x56>
					{
						/* The unblocked task has a priority higher than
						our own so yield immediately.  Yes it is ok to do
						this from within the critical section - the kernel
						takes care of that. */
						portYIELD_WITHIN_API();
   81caa:	4b2b      	ldr	r3, [pc, #172]	; (81d58 <xQueueGenericSend+0x100>)
   81cac:	4798      	blx	r3
					}
				}

				taskEXIT_CRITICAL();
   81cae:	4b27      	ldr	r3, [pc, #156]	; (81d4c <xQueueGenericSend+0xf4>)
   81cb0:	4798      	blx	r3

				/* Return to the original privilege level before exiting the
				function. */
				return pdPASS;
   81cb2:	2001      	movs	r0, #1
   81cb4:	e043      	b.n	81d3e <xQueueGenericSend+0xe6>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81cb6:	9b01      	ldr	r3, [sp, #4]
   81cb8:	b91b      	cbnz	r3, 81cc2 <xQueueGenericSend+0x6a>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81cba:	4b24      	ldr	r3, [pc, #144]	; (81d4c <xQueueGenericSend+0xf4>)
   81cbc:	4798      	blx	r3

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
   81cbe:	2000      	movs	r0, #0
   81cc0:	e03d      	b.n	81d3e <xQueueGenericSend+0xe6>
				}
				else if( xEntryTimeSet == pdFALSE )
   81cc2:	b91f      	cbnz	r7, 81ccc <xQueueGenericSend+0x74>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81cc4:	a802      	add	r0, sp, #8
   81cc6:	4b25      	ldr	r3, [pc, #148]	; (81d5c <xQueueGenericSend+0x104>)
   81cc8:	4798      	blx	r3
					xEntryTimeSet = pdTRUE;
   81cca:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81ccc:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81cce:	4b24      	ldr	r3, [pc, #144]	; (81d60 <xQueueGenericSend+0x108>)
   81cd0:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81cd2:	47b0      	blx	r6
   81cd4:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81cd6:	f1b3 3fff 	cmp.w	r3, #4294967295
   81cda:	bf04      	itt	eq
   81cdc:	2300      	moveq	r3, #0
   81cde:	6463      	streq	r3, [r4, #68]	; 0x44
   81ce0:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81ce2:	f1b3 3fff 	cmp.w	r3, #4294967295
   81ce6:	bf04      	itt	eq
   81ce8:	2300      	moveq	r3, #0
   81cea:	64a3      	streq	r3, [r4, #72]	; 0x48
   81cec:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81cee:	a802      	add	r0, sp, #8
   81cf0:	a901      	add	r1, sp, #4
   81cf2:	4b1c      	ldr	r3, [pc, #112]	; (81d64 <xQueueGenericSend+0x10c>)
   81cf4:	4798      	blx	r3
   81cf6:	b9e0      	cbnz	r0, 81d32 <xQueueGenericSend+0xda>

static signed portBASE_TYPE prvIsQueueFull( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81cf8:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == pxQueue->uxLength );
   81cfa:	f8d4 9038 	ldr.w	r9, [r4, #56]	; 0x38
   81cfe:	f8d4 803c 	ldr.w	r8, [r4, #60]	; 0x3c
	taskEXIT_CRITICAL();
   81d02:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
   81d04:	45c1      	cmp	r9, r8
   81d06:	d10e      	bne.n	81d26 <xQueueGenericSend+0xce>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
   81d08:	f104 0010 	add.w	r0, r4, #16
   81d0c:	9901      	ldr	r1, [sp, #4]
   81d0e:	4b16      	ldr	r3, [pc, #88]	; (81d68 <xQueueGenericSend+0x110>)
   81d10:	4798      	blx	r3
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible	that interrupts occurring now
				remove this task from the event	list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
   81d12:	4620      	mov	r0, r4
   81d14:	4b15      	ldr	r3, [pc, #84]	; (81d6c <xQueueGenericSend+0x114>)
   81d16:	4798      	blx	r3
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
   81d18:	4b15      	ldr	r3, [pc, #84]	; (81d70 <xQueueGenericSend+0x118>)
   81d1a:	4798      	blx	r3
   81d1c:	2800      	cmp	r0, #0
   81d1e:	d1b2      	bne.n	81c86 <xQueueGenericSend+0x2e>
				{
					portYIELD_WITHIN_API();
   81d20:	4b0d      	ldr	r3, [pc, #52]	; (81d58 <xQueueGenericSend+0x100>)
   81d22:	4798      	blx	r3
   81d24:	e7af      	b.n	81c86 <xQueueGenericSend+0x2e>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81d26:	4620      	mov	r0, r4
   81d28:	4b10      	ldr	r3, [pc, #64]	; (81d6c <xQueueGenericSend+0x114>)
   81d2a:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81d2c:	4b10      	ldr	r3, [pc, #64]	; (81d70 <xQueueGenericSend+0x118>)
   81d2e:	4798      	blx	r3
   81d30:	e7a9      	b.n	81c86 <xQueueGenericSend+0x2e>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
   81d32:	4620      	mov	r0, r4
   81d34:	4b0d      	ldr	r3, [pc, #52]	; (81d6c <xQueueGenericSend+0x114>)
   81d36:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81d38:	4b0d      	ldr	r3, [pc, #52]	; (81d70 <xQueueGenericSend+0x118>)
   81d3a:	4798      	blx	r3

			/* Return to the original privilege level before exiting the
			function. */
			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
   81d3c:	2000      	movs	r0, #0
		}
	}
}
   81d3e:	b005      	add	sp, #20
   81d40:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81d44:	000817f1 	.word	0x000817f1
   81d48:	00081801 	.word	0x00081801
   81d4c:	00081821 	.word	0x00081821
   81d50:	00081a45 	.word	0x00081a45
   81d54:	00082779 	.word	0x00082779
   81d58:	000817e1 	.word	0x000817e1
   81d5c:	000827fd 	.word	0x000827fd
   81d60:	000822d9 	.word	0x000822d9
   81d64:	00082825 	.word	0x00082825
   81d68:	000826d5 	.word	0x000826d5
   81d6c:	00081ad1 	.word	0x00081ad1
   81d70:	00082429 	.word	0x00082429

00081d74 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	xQueueHandle xQueueCreateMutex( unsigned char ucQueueType )
	{
   81d74:	b570      	push	{r4, r5, r6, lr}
   81d76:	4606      	mov	r6, r0
		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
   81d78:	2050      	movs	r0, #80	; 0x50
   81d7a:	4b13      	ldr	r3, [pc, #76]	; (81dc8 <xQueueCreateMutex+0x54>)
   81d7c:	4798      	blx	r3
		if( pxNewQueue != NULL )
   81d7e:	4604      	mov	r4, r0
   81d80:	b110      	cbz	r0, 81d88 <xQueueCreateMutex+0x14>
   81d82:	e004      	b.n	81d8e <xQueueCreateMutex+0x1a>
		else
		{
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
   81d84:	bf00      	nop
   81d86:	e7fd      	b.n	81d84 <xQueueCreateMutex+0x10>
   81d88:	4b10      	ldr	r3, [pc, #64]	; (81dcc <xQueueCreateMutex+0x58>)
   81d8a:	4798      	blx	r3
   81d8c:	e7fa      	b.n	81d84 <xQueueCreateMutex+0x10>
		/* Allocate the new queue structure. */
		pxNewQueue = ( xQUEUE * ) pvPortMalloc( sizeof( xQUEUE ) );
		if( pxNewQueue != NULL )
		{
			/* Information required for priority inheritance. */
			pxNewQueue->pxMutexHolder = NULL;
   81d8e:	2500      	movs	r5, #0
   81d90:	6045      	str	r5, [r0, #4]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
   81d92:	6005      	str	r5, [r0, #0]

			/* Queues used as a mutex no data is actually copied into or out
			of the queue. */
			pxNewQueue->pcWriteTo = NULL;
   81d94:	6085      	str	r5, [r0, #8]
			pxNewQueue->pcReadFrom = NULL;
   81d96:	60c5      	str	r5, [r0, #12]

			/* Each mutex has a length of 1 (like a binary semaphore) and
			an item size of 0 as nothing is actually copied into or out
			of the mutex. */
			pxNewQueue->uxMessagesWaiting = ( unsigned portBASE_TYPE ) 0U;
   81d98:	6385      	str	r5, [r0, #56]	; 0x38
			pxNewQueue->uxLength = ( unsigned portBASE_TYPE ) 1U;
   81d9a:	2301      	movs	r3, #1
   81d9c:	63c3      	str	r3, [r0, #60]	; 0x3c
			pxNewQueue->uxItemSize = ( unsigned portBASE_TYPE ) 0U;
   81d9e:	6405      	str	r5, [r0, #64]	; 0x40
			pxNewQueue->xRxLock = queueUNLOCKED;
   81da0:	f04f 33ff 	mov.w	r3, #4294967295
   81da4:	6443      	str	r3, [r0, #68]	; 0x44
			pxNewQueue->xTxLock = queueUNLOCKED;
   81da6:	6483      	str	r3, [r0, #72]	; 0x48

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				pxNewQueue->ucQueueType = ucQueueType;
   81da8:	f880 604d 	strb.w	r6, [r0, #77]	; 0x4d
			}
			#endif

			/* Ensure the event queues start with the correct state. */
			vListInitialise( &( pxNewQueue->xTasksWaitingToSend ) );
   81dac:	3010      	adds	r0, #16
   81dae:	4e08      	ldr	r6, [pc, #32]	; (81dd0 <xQueueCreateMutex+0x5c>)
   81db0:	47b0      	blx	r6
			vListInitialise( &( pxNewQueue->xTasksWaitingToReceive ) );
   81db2:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81db6:	47b0      	blx	r6

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			xQueueGenericSend( pxNewQueue, NULL, ( portTickType ) 0U, queueSEND_TO_BACK );
   81db8:	4620      	mov	r0, r4
   81dba:	4629      	mov	r1, r5
   81dbc:	462a      	mov	r2, r5
   81dbe:	462b      	mov	r3, r5
   81dc0:	4d04      	ldr	r5, [pc, #16]	; (81dd4 <xQueueCreateMutex+0x60>)
   81dc2:	47a8      	blx	r5
			traceCREATE_MUTEX_FAILED();
		}

		configASSERT( pxNewQueue );
		return pxNewQueue;
	}
   81dc4:	4620      	mov	r0, r4
   81dc6:	bd70      	pop	{r4, r5, r6, pc}
   81dc8:	0008194d 	.word	0x0008194d
   81dcc:	000817f1 	.word	0x000817f1
   81dd0:	000816f1 	.word	0x000816f1
   81dd4:	00081c59 	.word	0x00081c59

00081dd8 <xQueueGenericSendFromISR>:

#endif /* configUSE_ALTERNATIVE_API */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericSendFromISR( xQueueHandle pxQueue, const void * const pvItemToQueue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portBASE_TYPE xCopyPosition )
{
   81dd8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   81ddc:	460e      	mov	r6, r1
   81dde:	4615      	mov	r5, r2
   81de0:	4698      	mov	r8, r3
signed portBASE_TYPE xReturn;
unsigned portBASE_TYPE uxSavedInterruptStatus;

	configASSERT( pxQueue );
   81de2:	4604      	mov	r4, r0
   81de4:	b918      	cbnz	r0, 81dee <xQueueGenericSendFromISR+0x16>
   81de6:	4b1c      	ldr	r3, [pc, #112]	; (81e58 <xQueueGenericSendFromISR+0x80>)
   81de8:	4798      	blx	r3
   81dea:	bf00      	nop
   81dec:	e7fd      	b.n	81dea <xQueueGenericSendFromISR+0x12>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81dee:	b929      	cbnz	r1, 81dfc <xQueueGenericSendFromISR+0x24>
   81df0:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81df2:	b11b      	cbz	r3, 81dfc <xQueueGenericSendFromISR+0x24>
   81df4:	4b18      	ldr	r3, [pc, #96]	; (81e58 <xQueueGenericSendFromISR+0x80>)
   81df6:	4798      	blx	r3
   81df8:	bf00      	nop
   81dfa:	e7fd      	b.n	81df8 <xQueueGenericSendFromISR+0x20>
	/* Similar to xQueueGenericSend, except we don't block if there is no room
	in the queue.  Also we don't directly wake a task that was blocked on a
	queue read, instead we return a flag to say whether a context switch is
	required or not (i.e. has a task with a higher priority than us been woken
	by this	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
   81dfc:	4b16      	ldr	r3, [pc, #88]	; (81e58 <xQueueGenericSendFromISR+0x80>)
   81dfe:	4798      	blx	r3
   81e00:	4607      	mov	r7, r0
	{
		if( pxQueue->uxMessagesWaiting < pxQueue->uxLength )
   81e02:	6ba2      	ldr	r2, [r4, #56]	; 0x38
   81e04:	6be3      	ldr	r3, [r4, #60]	; 0x3c
   81e06:	429a      	cmp	r2, r3
   81e08:	d218      	bcs.n	81e3c <xQueueGenericSendFromISR+0x64>
		{
			traceQUEUE_SEND_FROM_ISR( pxQueue );

			prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
   81e0a:	4620      	mov	r0, r4
   81e0c:	4631      	mov	r1, r6
   81e0e:	4642      	mov	r2, r8
   81e10:	4b12      	ldr	r3, [pc, #72]	; (81e5c <xQueueGenericSendFromISR+0x84>)
   81e12:	4798      	blx	r3

			/* If the queue is locked we do not alter the event list.  This will
			be done when the queue is unlocked later. */
			if( pxQueue->xTxLock == queueUNLOCKED )
   81e14:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81e16:	f1b3 3fff 	cmp.w	r3, #4294967295
   81e1a:	d10a      	bne.n	81e32 <xQueueGenericSendFromISR+0x5a>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81e1c:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81e1e:	b17b      	cbz	r3, 81e40 <xQueueGenericSendFromISR+0x68>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81e20:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81e24:	4b0e      	ldr	r3, [pc, #56]	; (81e60 <xQueueGenericSendFromISR+0x88>)
   81e26:	4798      	blx	r3
   81e28:	b160      	cbz	r0, 81e44 <xQueueGenericSendFromISR+0x6c>
					{
						/* The task waiting has a higher priority so record that a
						context	switch is required. */
						if( pxHigherPriorityTaskWoken != NULL )
   81e2a:	b16d      	cbz	r5, 81e48 <xQueueGenericSendFromISR+0x70>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
   81e2c:	2401      	movs	r4, #1
   81e2e:	602c      	str	r4, [r5, #0]
   81e30:	e00b      	b.n	81e4a <xQueueGenericSendFromISR+0x72>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
   81e32:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81e34:	3301      	adds	r3, #1
   81e36:	64a3      	str	r3, [r4, #72]	; 0x48
			}

			xReturn = pdPASS;
   81e38:	2401      	movs	r4, #1
   81e3a:	e006      	b.n	81e4a <xQueueGenericSendFromISR+0x72>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
   81e3c:	2400      	movs	r4, #0
   81e3e:	e004      	b.n	81e4a <xQueueGenericSendFromISR+0x72>
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				++( pxQueue->xTxLock );
			}

			xReturn = pdPASS;
   81e40:	2401      	movs	r4, #1
   81e42:	e002      	b.n	81e4a <xQueueGenericSendFromISR+0x72>
   81e44:	2401      	movs	r4, #1
   81e46:	e000      	b.n	81e4a <xQueueGenericSendFromISR+0x72>
   81e48:	2401      	movs	r4, #1
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );
   81e4a:	4638      	mov	r0, r7
   81e4c:	4b05      	ldr	r3, [pc, #20]	; (81e64 <xQueueGenericSendFromISR+0x8c>)
   81e4e:	4798      	blx	r3

	return xReturn;
}
   81e50:	4620      	mov	r0, r4
   81e52:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   81e56:	bf00      	nop
   81e58:	000817f1 	.word	0x000817f1
   81e5c:	00081a45 	.word	0x00081a45
   81e60:	00082779 	.word	0x00082779
   81e64:	00081819 	.word	0x00081819

00081e68 <xQueueGenericReceive>:
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81e68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81e6c:	b085      	sub	sp, #20
   81e6e:	4689      	mov	r9, r1
   81e70:	9201      	str	r2, [sp, #4]
   81e72:	469a      	mov	sl, r3
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
   81e74:	4604      	mov	r4, r0
   81e76:	b918      	cbnz	r0, 81e80 <xQueueGenericReceive+0x18>
   81e78:	4b44      	ldr	r3, [pc, #272]	; (81f8c <xQueueGenericReceive+0x124>)
   81e7a:	4798      	blx	r3
   81e7c:	bf00      	nop
   81e7e:	e7fd      	b.n	81e7c <xQueueGenericReceive+0x14>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81e80:	b909      	cbnz	r1, 81e86 <xQueueGenericReceive+0x1e>
   81e82:	6c03      	ldr	r3, [r0, #64]	; 0x40
   81e84:	b92b      	cbnz	r3, 81e92 <xQueueGenericReceive+0x2a>
	return xReturn;
}
/*-----------------------------------------------------------*/

signed portBASE_TYPE xQueueGenericReceive( xQueueHandle pxQueue, void * const pvBuffer, portTickType xTicksToWait, portBASE_TYPE xJustPeeking )
{
   81e86:	2700      	movs	r7, #0
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81e88:	4e41      	ldr	r6, [pc, #260]	; (81f90 <xQueueGenericReceive+0x128>)
				}
				else if( xEntryTimeSet == pdFALSE )
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81e8a:	f8df b134 	ldr.w	fp, [pc, #308]	; 81fc0 <xQueueGenericReceive+0x158>
					xEntryTimeSet = pdTRUE;
				}
			}
		}
		taskEXIT_CRITICAL();
   81e8e:	4d41      	ldr	r5, [pc, #260]	; (81f94 <xQueueGenericReceive+0x12c>)
   81e90:	e003      	b.n	81e9a <xQueueGenericReceive+0x32>
signed portBASE_TYPE xEntryTimeSet = pdFALSE;
xTimeOutType xTimeOut;
signed char *pcOriginalReadPosition;

	configASSERT( pxQueue );
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( unsigned portBASE_TYPE ) 0U ) ) );
   81e92:	4b3e      	ldr	r3, [pc, #248]	; (81f8c <xQueueGenericReceive+0x124>)
   81e94:	4798      	blx	r3
   81e96:	bf00      	nop
   81e98:	e7fd      	b.n	81e96 <xQueueGenericReceive+0x2e>
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */

	for( ;; )
	{
		taskENTER_CRITICAL();
   81e9a:	47b0      	blx	r6
		{
			/* Is there data in the queue now?  To be running we must be
			the highest priority task wanting to access the queue. */
			if( pxQueue->uxMessagesWaiting > ( unsigned portBASE_TYPE ) 0 )
   81e9c:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81e9e:	2b00      	cmp	r3, #0
   81ea0:	d028      	beq.n	81ef4 <xQueueGenericReceive+0x8c>
			{
				/* Remember our read position in case we are just peeking. */
				pcOriginalReadPosition = pxQueue->pcReadFrom;
   81ea2:	68e5      	ldr	r5, [r4, #12]

				prvCopyDataFromQueue( pxQueue, pvBuffer );
   81ea4:	4620      	mov	r0, r4
   81ea6:	4649      	mov	r1, r9
   81ea8:	4b3b      	ldr	r3, [pc, #236]	; (81f98 <xQueueGenericReceive+0x130>)
   81eaa:	4798      	blx	r3

				if( xJustPeeking == pdFALSE )
   81eac:	f1ba 0f00 	cmp.w	sl, #0
   81eb0:	d112      	bne.n	81ed8 <xQueueGenericReceive+0x70>
				{
					traceQUEUE_RECEIVE( pxQueue );

					/* We are actually removing data. */
					--( pxQueue->uxMessagesWaiting );
   81eb2:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81eb4:	3b01      	subs	r3, #1
   81eb6:	63a3      	str	r3, [r4, #56]	; 0x38

					#if ( configUSE_MUTEXES == 1 )
					{
						if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81eb8:	6823      	ldr	r3, [r4, #0]
   81eba:	b913      	cbnz	r3, 81ec2 <xQueueGenericReceive+0x5a>
						{
							/* Record the information required to implement
							priority inheritance should it become necessary. */
							pxQueue->pxMutexHolder = xTaskGetCurrentTaskHandle();
   81ebc:	4b37      	ldr	r3, [pc, #220]	; (81f9c <xQueueGenericReceive+0x134>)
   81ebe:	4798      	blx	r3
   81ec0:	6060      	str	r0, [r4, #4]
						}
					}
					#endif

					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
   81ec2:	6923      	ldr	r3, [r4, #16]
   81ec4:	b193      	cbz	r3, 81eec <xQueueGenericReceive+0x84>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) == pdTRUE )
   81ec6:	f104 0010 	add.w	r0, r4, #16
   81eca:	4b35      	ldr	r3, [pc, #212]	; (81fa0 <xQueueGenericReceive+0x138>)
   81ecc:	4798      	blx	r3
   81ece:	2801      	cmp	r0, #1
   81ed0:	d10c      	bne.n	81eec <xQueueGenericReceive+0x84>
						{
							portYIELD_WITHIN_API();
   81ed2:	4b34      	ldr	r3, [pc, #208]	; (81fa4 <xQueueGenericReceive+0x13c>)
   81ed4:	4798      	blx	r3
   81ed6:	e009      	b.n	81eec <xQueueGenericReceive+0x84>
				{
					traceQUEUE_PEEK( pxQueue );

					/* We are not removing the data, so reset our read
					pointer. */
					pxQueue->pcReadFrom = pcOriginalReadPosition;
   81ed8:	60e5      	str	r5, [r4, #12]

					/* The data is being left in the queue, so see if there are
					any other tasks waiting for the data. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
   81eda:	6a63      	ldr	r3, [r4, #36]	; 0x24
   81edc:	b133      	cbz	r3, 81eec <xQueueGenericReceive+0x84>
					{
						/* Tasks that are removed from the event list will get added to
						the pending ready list as the scheduler is still suspended. */
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
   81ede:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81ee2:	4b2f      	ldr	r3, [pc, #188]	; (81fa0 <xQueueGenericReceive+0x138>)
   81ee4:	4798      	blx	r3
   81ee6:	b108      	cbz	r0, 81eec <xQueueGenericReceive+0x84>
						{
							/* The task waiting has a higher priority than this task. */
							portYIELD_WITHIN_API();
   81ee8:	4b2e      	ldr	r3, [pc, #184]	; (81fa4 <xQueueGenericReceive+0x13c>)
   81eea:	4798      	blx	r3
						}
					}
				}

				taskEXIT_CRITICAL();
   81eec:	4b29      	ldr	r3, [pc, #164]	; (81f94 <xQueueGenericReceive+0x12c>)
   81eee:	4798      	blx	r3
				return pdPASS;
   81ef0:	2001      	movs	r0, #1
   81ef2:	e048      	b.n	81f86 <xQueueGenericReceive+0x11e>
			}
			else
			{
				if( xTicksToWait == ( portTickType ) 0 )
   81ef4:	9b01      	ldr	r3, [sp, #4]
   81ef6:	b91b      	cbnz	r3, 81f00 <xQueueGenericReceive+0x98>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
   81ef8:	4b26      	ldr	r3, [pc, #152]	; (81f94 <xQueueGenericReceive+0x12c>)
   81efa:	4798      	blx	r3
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
   81efc:	2000      	movs	r0, #0
   81efe:	e042      	b.n	81f86 <xQueueGenericReceive+0x11e>
				}
				else if( xEntryTimeSet == pdFALSE )
   81f00:	b917      	cbnz	r7, 81f08 <xQueueGenericReceive+0xa0>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskSetTimeOutState( &xTimeOut );
   81f02:	a802      	add	r0, sp, #8
   81f04:	47d8      	blx	fp
					xEntryTimeSet = pdTRUE;
   81f06:	2701      	movs	r7, #1
				}
			}
		}
		taskEXIT_CRITICAL();
   81f08:	47a8      	blx	r5

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
   81f0a:	4b27      	ldr	r3, [pc, #156]	; (81fa8 <xQueueGenericReceive+0x140>)
   81f0c:	4798      	blx	r3
		prvLockQueue( pxQueue );
   81f0e:	47b0      	blx	r6
   81f10:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81f12:	f1b3 3fff 	cmp.w	r3, #4294967295
   81f16:	bf04      	itt	eq
   81f18:	2300      	moveq	r3, #0
   81f1a:	6463      	streq	r3, [r4, #68]	; 0x44
   81f1c:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81f1e:	f1b3 3fff 	cmp.w	r3, #4294967295
   81f22:	bf04      	itt	eq
   81f24:	2300      	moveq	r3, #0
   81f26:	64a3      	streq	r3, [r4, #72]	; 0x48
   81f28:	47a8      	blx	r5

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
   81f2a:	a802      	add	r0, sp, #8
   81f2c:	a901      	add	r1, sp, #4
   81f2e:	4b1f      	ldr	r3, [pc, #124]	; (81fac <xQueueGenericReceive+0x144>)
   81f30:	4798      	blx	r3
   81f32:	bb10      	cbnz	r0, 81f7a <xQueueGenericReceive+0x112>

static signed portBASE_TYPE prvIsQueueEmpty( const xQueueHandle pxQueue )
{
signed portBASE_TYPE xReturn;

	taskENTER_CRITICAL();
   81f34:	47b0      	blx	r6
		xReturn = ( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0 );
   81f36:	f8d4 8038 	ldr.w	r8, [r4, #56]	; 0x38
	taskEXIT_CRITICAL();
   81f3a:	47a8      	blx	r5
		prvLockQueue( pxQueue );

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
		{
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
   81f3c:	f1b8 0f00 	cmp.w	r8, #0
   81f40:	d115      	bne.n	81f6e <xQueueGenericReceive+0x106>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
   81f42:	6823      	ldr	r3, [r4, #0]
   81f44:	b923      	cbnz	r3, 81f50 <xQueueGenericReceive+0xe8>
					{
						portENTER_CRITICAL();
   81f46:	47b0      	blx	r6
						{
							vTaskPriorityInherit( ( void * ) pxQueue->pxMutexHolder );
   81f48:	6860      	ldr	r0, [r4, #4]
   81f4a:	4b19      	ldr	r3, [pc, #100]	; (81fb0 <xQueueGenericReceive+0x148>)
   81f4c:	4798      	blx	r3
						}
						portEXIT_CRITICAL();
   81f4e:	47a8      	blx	r5
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81f50:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81f54:	9901      	ldr	r1, [sp, #4]
   81f56:	4b17      	ldr	r3, [pc, #92]	; (81fb4 <xQueueGenericReceive+0x14c>)
   81f58:	4798      	blx	r3
				prvUnlockQueue( pxQueue );
   81f5a:	4620      	mov	r0, r4
   81f5c:	4b16      	ldr	r3, [pc, #88]	; (81fb8 <xQueueGenericReceive+0x150>)
   81f5e:	4798      	blx	r3
				if( xTaskResumeAll() == pdFALSE )
   81f60:	4b16      	ldr	r3, [pc, #88]	; (81fbc <xQueueGenericReceive+0x154>)
   81f62:	4798      	blx	r3
   81f64:	2800      	cmp	r0, #0
   81f66:	d198      	bne.n	81e9a <xQueueGenericReceive+0x32>
				{
					portYIELD_WITHIN_API();
   81f68:	4b0e      	ldr	r3, [pc, #56]	; (81fa4 <xQueueGenericReceive+0x13c>)
   81f6a:	4798      	blx	r3
   81f6c:	e795      	b.n	81e9a <xQueueGenericReceive+0x32>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
   81f6e:	4620      	mov	r0, r4
   81f70:	4b11      	ldr	r3, [pc, #68]	; (81fb8 <xQueueGenericReceive+0x150>)
   81f72:	4798      	blx	r3
				( void ) xTaskResumeAll();
   81f74:	4b11      	ldr	r3, [pc, #68]	; (81fbc <xQueueGenericReceive+0x154>)
   81f76:	4798      	blx	r3
   81f78:	e78f      	b.n	81e9a <xQueueGenericReceive+0x32>
			}
		}
		else
		{
			prvUnlockQueue( pxQueue );
   81f7a:	4620      	mov	r0, r4
   81f7c:	4b0e      	ldr	r3, [pc, #56]	; (81fb8 <xQueueGenericReceive+0x150>)
   81f7e:	4798      	blx	r3
			( void ) xTaskResumeAll();
   81f80:	4b0e      	ldr	r3, [pc, #56]	; (81fbc <xQueueGenericReceive+0x154>)
   81f82:	4798      	blx	r3
			traceQUEUE_RECEIVE_FAILED( pxQueue );
			return errQUEUE_EMPTY;
   81f84:	2000      	movs	r0, #0
		}
	}
}
   81f86:	b005      	add	sp, #20
   81f88:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81f8c:	000817f1 	.word	0x000817f1
   81f90:	00081801 	.word	0x00081801
   81f94:	00081821 	.word	0x00081821
   81f98:	00081aa9 	.word	0x00081aa9
   81f9c:	000828b5 	.word	0x000828b5
   81fa0:	00082779 	.word	0x00082779
   81fa4:	000817e1 	.word	0x000817e1
   81fa8:	000822d9 	.word	0x000822d9
   81fac:	00082825 	.word	0x00082825
   81fb0:	000828e1 	.word	0x000828e1
   81fb4:	000826d5 	.word	0x000826d5
   81fb8:	00081ad1 	.word	0x00081ad1
   81fbc:	00082429 	.word	0x00082429
   81fc0:	000827fd 	.word	0x000827fd

00081fc4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vQueueWaitForMessageRestricted( xQueueHandle pxQueue, portTickType xTicksToWait )
	{
   81fc4:	b538      	push	{r3, r4, r5, lr}
   81fc6:	4604      	mov	r4, r0
   81fc8:	460d      	mov	r5, r1
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
   81fca:	4b0d      	ldr	r3, [pc, #52]	; (82000 <vQueueWaitForMessageRestricted+0x3c>)
   81fcc:	4798      	blx	r3
   81fce:	6c63      	ldr	r3, [r4, #68]	; 0x44
   81fd0:	f1b3 3fff 	cmp.w	r3, #4294967295
   81fd4:	bf04      	itt	eq
   81fd6:	2300      	moveq	r3, #0
   81fd8:	6463      	streq	r3, [r4, #68]	; 0x44
   81fda:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   81fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
   81fe0:	bf04      	itt	eq
   81fe2:	2300      	moveq	r3, #0
   81fe4:	64a3      	streq	r3, [r4, #72]	; 0x48
   81fe6:	4b07      	ldr	r3, [pc, #28]	; (82004 <vQueueWaitForMessageRestricted+0x40>)
   81fe8:	4798      	blx	r3
		if( pxQueue->uxMessagesWaiting == ( unsigned portBASE_TYPE ) 0U )
   81fea:	6ba3      	ldr	r3, [r4, #56]	; 0x38
   81fec:	b923      	cbnz	r3, 81ff8 <vQueueWaitForMessageRestricted+0x34>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
   81fee:	f104 0024 	add.w	r0, r4, #36	; 0x24
   81ff2:	4629      	mov	r1, r5
   81ff4:	4b04      	ldr	r3, [pc, #16]	; (82008 <vQueueWaitForMessageRestricted+0x44>)
   81ff6:	4798      	blx	r3
		}
		prvUnlockQueue( pxQueue );
   81ff8:	4620      	mov	r0, r4
   81ffa:	4b04      	ldr	r3, [pc, #16]	; (8200c <vQueueWaitForMessageRestricted+0x48>)
   81ffc:	4798      	blx	r3
   81ffe:	bd38      	pop	{r3, r4, r5, pc}
   82000:	00081801 	.word	0x00081801
   82004:	00081821 	.word	0x00081821
   82008:	00082735 	.word	0x00082735
   8200c:	00081ad1 	.word	0x00081ad1

00082010 <prvAddCurrentTaskToDelayedList>:
	#endif
}
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( portTickType xTimeToWake )
{
   82010:	b510      	push	{r4, lr}
   82012:	4604      	mov	r4, r0
	/* The list item will be inserted in wake time order. */
	listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xGenericListItem ), xTimeToWake );
   82014:	4b0e      	ldr	r3, [pc, #56]	; (82050 <prvAddCurrentTaskToDelayedList+0x40>)
   82016:	681b      	ldr	r3, [r3, #0]
   82018:	6058      	str	r0, [r3, #4]

	if( xTimeToWake < xTickCount )
   8201a:	4b0e      	ldr	r3, [pc, #56]	; (82054 <prvAddCurrentTaskToDelayedList+0x44>)
   8201c:	681b      	ldr	r3, [r3, #0]
   8201e:	4298      	cmp	r0, r3
   82020:	d207      	bcs.n	82032 <prvAddCurrentTaskToDelayedList+0x22>
	{
		/* Wake time has overflowed.  Place this item in the overflow list. */
		vListInsert( ( xList * ) pxOverflowDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82022:	4b0d      	ldr	r3, [pc, #52]	; (82058 <prvAddCurrentTaskToDelayedList+0x48>)
   82024:	6818      	ldr	r0, [r3, #0]
   82026:	4b0a      	ldr	r3, [pc, #40]	; (82050 <prvAddCurrentTaskToDelayedList+0x40>)
   82028:	6819      	ldr	r1, [r3, #0]
   8202a:	3104      	adds	r1, #4
   8202c:	4b0b      	ldr	r3, [pc, #44]	; (8205c <prvAddCurrentTaskToDelayedList+0x4c>)
   8202e:	4798      	blx	r3
   82030:	bd10      	pop	{r4, pc}
	}
	else
	{
		/* The wake time has not overflowed, so we can use the current block list. */
		vListInsert( ( xList * ) pxDelayedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   82032:	4b0b      	ldr	r3, [pc, #44]	; (82060 <prvAddCurrentTaskToDelayedList+0x50>)
   82034:	6818      	ldr	r0, [r3, #0]
   82036:	4b06      	ldr	r3, [pc, #24]	; (82050 <prvAddCurrentTaskToDelayedList+0x40>)
   82038:	6819      	ldr	r1, [r3, #0]
   8203a:	3104      	adds	r1, #4
   8203c:	4b07      	ldr	r3, [pc, #28]	; (8205c <prvAddCurrentTaskToDelayedList+0x4c>)
   8203e:	4798      	blx	r3

		/* If the task entering the blocked state was placed at the head of the
		list of blocked tasks then xNextTaskUnblockTime needs to be updated
		too. */
		if( xTimeToWake < xNextTaskUnblockTime )
   82040:	4b08      	ldr	r3, [pc, #32]	; (82064 <prvAddCurrentTaskToDelayedList+0x54>)
   82042:	681b      	ldr	r3, [r3, #0]
   82044:	429c      	cmp	r4, r3
		{
			xNextTaskUnblockTime = xTimeToWake;
   82046:	bf3c      	itt	cc
   82048:	4b06      	ldrcc	r3, [pc, #24]	; (82064 <prvAddCurrentTaskToDelayedList+0x54>)
   8204a:	601c      	strcc	r4, [r3, #0]
   8204c:	bd10      	pop	{r4, pc}
   8204e:	bf00      	nop
   82050:	2007a794 	.word	0x2007a794
   82054:	2007a7b0 	.word	0x2007a7b0
   82058:	2007a7b4 	.word	0x2007a7b4
   8205c:	0008172d 	.word	0x0008172d
   82060:	2007a6f4 	.word	0x2007a6f4
   82064:	20070148 	.word	0x20070148

00082068 <xTaskGenericCreate>:
/*-----------------------------------------------------------
 * TASK CREATION API documented in task.h
 *----------------------------------------------------------*/

signed portBASE_TYPE xTaskGenericCreate( pdTASK_CODE pxTaskCode, const signed char * const pcName, unsigned short usStackDepth, void *pvParameters, unsigned portBASE_TYPE uxPriority, xTaskHandle *pxCreatedTask, portSTACK_TYPE *puxStackBuffer, const xMemoryRegion * const xRegions )
{
   82068:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
   8206c:	460e      	mov	r6, r1
   8206e:	4617      	mov	r7, r2
   82070:	469a      	mov	sl, r3
   82072:	9d0a      	ldr	r5, [sp, #40]	; 0x28
   82074:	f8dd 8030 	ldr.w	r8, [sp, #48]	; 0x30
signed portBASE_TYPE xReturn;
tskTCB * pxNewTCB;

	configASSERT( pxTaskCode );
   82078:	4681      	mov	r9, r0
   8207a:	b918      	cbnz	r0, 82084 <xTaskGenericCreate+0x1c>
   8207c:	4b62      	ldr	r3, [pc, #392]	; (82208 <xTaskGenericCreate+0x1a0>)
   8207e:	4798      	blx	r3
   82080:	bf00      	nop
   82082:	e7fd      	b.n	82080 <xTaskGenericCreate+0x18>
	configASSERT( ( ( uxPriority & ( ~portPRIVILEGE_BIT ) ) < configMAX_PRIORITIES ) );
   82084:	2d04      	cmp	r5, #4
   82086:	d903      	bls.n	82090 <xTaskGenericCreate+0x28>
   82088:	4b5f      	ldr	r3, [pc, #380]	; (82208 <xTaskGenericCreate+0x1a0>)
   8208a:	4798      	blx	r3
   8208c:	bf00      	nop
   8208e:	e7fd      	b.n	8208c <xTaskGenericCreate+0x24>
{
tskTCB *pxNewTCB;

	/* Allocate space for the TCB.  Where the memory comes from depends on
	the implementation of the port malloc function. */
	pxNewTCB = ( tskTCB * ) pvPortMalloc( sizeof( tskTCB ) );
   82090:	204c      	movs	r0, #76	; 0x4c
   82092:	4b5e      	ldr	r3, [pc, #376]	; (8220c <xTaskGenericCreate+0x1a4>)
   82094:	4798      	blx	r3

	if( pxNewTCB != NULL )
   82096:	4604      	mov	r4, r0
   82098:	2800      	cmp	r0, #0
   8209a:	f000 80b1 	beq.w	82200 <xTaskGenericCreate+0x198>
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   8209e:	f1b8 0f00 	cmp.w	r8, #0
   820a2:	f040 80a9 	bne.w	821f8 <xTaskGenericCreate+0x190>
   820a6:	00b8      	lsls	r0, r7, #2
   820a8:	4b58      	ldr	r3, [pc, #352]	; (8220c <xTaskGenericCreate+0x1a4>)
   820aa:	4798      	blx	r3
   820ac:	6320      	str	r0, [r4, #48]	; 0x30

		if( pxNewTCB->pxStack == NULL )
   820ae:	b918      	cbnz	r0, 820b8 <xTaskGenericCreate+0x50>
		{
			/* Could not allocate the stack.  Delete the allocated TCB. */
			vPortFree( pxNewTCB );
   820b0:	4620      	mov	r0, r4
   820b2:	4b57      	ldr	r3, [pc, #348]	; (82210 <xTaskGenericCreate+0x1a8>)
   820b4:	4798      	blx	r3
   820b6:	e0a3      	b.n	82200 <xTaskGenericCreate+0x198>
			pxNewTCB = NULL;
		}
		else
		{
			/* Just to help debugging. */
			memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) usStackDepth * sizeof( portSTACK_TYPE ) );
   820b8:	21a5      	movs	r1, #165	; 0xa5
   820ba:	00ba      	lsls	r2, r7, #2
   820bc:	4b55      	ldr	r3, [pc, #340]	; (82214 <xTaskGenericCreate+0x1ac>)
   820be:	4798      	blx	r3
		stack grows from high memory to low (as per the 80x86) or visa versa.
		portSTACK_GROWTH is used to make the result positive or negative as
		required by the port. */
		#if( portSTACK_GROWTH < 0 )
		{
			pxTopOfStack = pxNewTCB->pxStack + ( usStackDepth - ( unsigned short ) 1 );
   820c0:	f107 4780 	add.w	r7, r7, #1073741824	; 0x40000000
   820c4:	3f01      	subs	r7, #1
   820c6:	6b23      	ldr	r3, [r4, #48]	; 0x30
   820c8:	eb03 0387 	add.w	r3, r3, r7, lsl #2
			pxTopOfStack = ( portSTACK_TYPE * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ( portPOINTER_SIZE_TYPE ) ~portBYTE_ALIGNMENT_MASK  ) );
   820cc:	f023 0b07 	bic.w	fp, r3, #7
{
	/* Store the function name in the TCB. */
	#if configMAX_TASK_NAME_LEN > 1
	{
		/* Don't bring strncpy into the build unnecessarily. */
		strncpy( ( char * ) pxTCB->pcTaskName, ( const char * ) pcName, ( unsigned short ) configMAX_TASK_NAME_LEN );
   820d0:	f104 0034 	add.w	r0, r4, #52	; 0x34
   820d4:	4631      	mov	r1, r6
   820d6:	220a      	movs	r2, #10
   820d8:	4b4f      	ldr	r3, [pc, #316]	; (82218 <xTaskGenericCreate+0x1b0>)
   820da:	4798      	blx	r3
	}
	#endif
	pxTCB->pcTaskName[ ( unsigned short ) configMAX_TASK_NAME_LEN - ( unsigned short ) 1 ] = ( signed char ) '\0';
   820dc:	2300      	movs	r3, #0
   820de:	f884 303d 	strb.w	r3, [r4, #61]	; 0x3d
   820e2:	2d04      	cmp	r5, #4
   820e4:	bf34      	ite	cc
   820e6:	462e      	movcc	r6, r5
   820e8:	2604      	movcs	r6, #4
	if( uxPriority >= configMAX_PRIORITIES )
	{
		uxPriority = configMAX_PRIORITIES - ( unsigned portBASE_TYPE ) 1U;
	}

	pxTCB->uxPriority = uxPriority;
   820ea:	62e6      	str	r6, [r4, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxTCB->uxBasePriority = uxPriority;
   820ec:	64a6      	str	r6, [r4, #72]	; 0x48
	}
	#endif

	vListInitialiseItem( &( pxTCB->xGenericListItem ) );
   820ee:	1d27      	adds	r7, r4, #4
   820f0:	4638      	mov	r0, r7
   820f2:	f8df 8170 	ldr.w	r8, [pc, #368]	; 82264 <xTaskGenericCreate+0x1fc>
   820f6:	47c0      	blx	r8
	vListInitialiseItem( &( pxTCB->xEventListItem ) );
   820f8:	f104 0018 	add.w	r0, r4, #24
   820fc:	47c0      	blx	r8

	/* Set the pxTCB as a link back from the xListItem.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxTCB->xGenericListItem ), pxTCB );
   820fe:	6124      	str	r4, [r4, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) uxPriority );
   82100:	f1c6 0605 	rsb	r6, r6, #5
   82104:	61a6      	str	r6, [r4, #24]
	listSET_LIST_ITEM_OWNER( &( pxTCB->xEventListItem ), pxTCB );
   82106:	6264      	str	r4, [r4, #36]	; 0x24
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters, xRunPrivileged );
		}
		#else
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
   82108:	4658      	mov	r0, fp
   8210a:	4649      	mov	r1, r9
   8210c:	4652      	mov	r2, sl
   8210e:	4b43      	ldr	r3, [pc, #268]	; (8221c <xTaskGenericCreate+0x1b4>)
   82110:	4798      	blx	r3
   82112:	6020      	str	r0, [r4, #0]
		}
		#endif

		/* Check the alignment of the initialised stack. */
		portALIGNMENT_ASSERT_pxCurrentTCB( ( ( ( unsigned long ) pxNewTCB->pxTopOfStack & ( unsigned long ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
   82114:	f010 0f07 	tst.w	r0, #7
   82118:	d003      	beq.n	82122 <xTaskGenericCreate+0xba>
   8211a:	4b3b      	ldr	r3, [pc, #236]	; (82208 <xTaskGenericCreate+0x1a0>)
   8211c:	4798      	blx	r3
   8211e:	bf00      	nop
   82120:	e7fd      	b.n	8211e <xTaskGenericCreate+0xb6>

		if( ( void * ) pxCreatedTask != NULL )
   82122:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
   82124:	b103      	cbz	r3, 82128 <xTaskGenericCreate+0xc0>
		{
			/* Pass the TCB out - in an anonymous way.  The calling function/
			task can use this as a handle to delete the task later if
			required.*/
			*pxCreatedTask = ( xTaskHandle ) pxNewTCB;
   82126:	601c      	str	r4, [r3, #0]
		}

		/* We are going to manipulate the task queues to add this task to a
		ready list, so must make sure no interrupts occur. */
		taskENTER_CRITICAL();
   82128:	4b3d      	ldr	r3, [pc, #244]	; (82220 <xTaskGenericCreate+0x1b8>)
   8212a:	4798      	blx	r3
		{
			uxCurrentNumberOfTasks++;
   8212c:	4b3d      	ldr	r3, [pc, #244]	; (82224 <xTaskGenericCreate+0x1bc>)
   8212e:	681a      	ldr	r2, [r3, #0]
   82130:	3201      	adds	r2, #1
   82132:	601a      	str	r2, [r3, #0]
			if( pxCurrentTCB == NULL )
   82134:	4b3c      	ldr	r3, [pc, #240]	; (82228 <xTaskGenericCreate+0x1c0>)
   82136:	681b      	ldr	r3, [r3, #0]
   82138:	bb2b      	cbnz	r3, 82186 <xTaskGenericCreate+0x11e>
			{
				/* There are no other tasks, or all the other tasks are in
				the suspended state - make this the current task. */
				pxCurrentTCB =  pxNewTCB;
   8213a:	4b3b      	ldr	r3, [pc, #236]	; (82228 <xTaskGenericCreate+0x1c0>)
   8213c:	601c      	str	r4, [r3, #0]

				if( uxCurrentNumberOfTasks == ( unsigned portBASE_TYPE ) 1 )
   8213e:	4b39      	ldr	r3, [pc, #228]	; (82224 <xTaskGenericCreate+0x1bc>)
   82140:	681b      	ldr	r3, [r3, #0]
   82142:	2b01      	cmp	r3, #1
   82144:	d129      	bne.n	8219a <xTaskGenericCreate+0x132>
   82146:	4e39      	ldr	r6, [pc, #228]	; (8222c <xTaskGenericCreate+0x1c4>)
   82148:	f106 0964 	add.w	r9, r6, #100	; 0x64
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
   8214c:	f8df 80e0 	ldr.w	r8, [pc, #224]	; 82230 <xTaskGenericCreate+0x1c8>
   82150:	4630      	mov	r0, r6
   82152:	47c0      	blx	r8
   82154:	3614      	adds	r6, #20

static void prvInitialiseTaskLists( void )
{
unsigned portBASE_TYPE uxPriority;

	for( uxPriority = ( unsigned portBASE_TYPE ) 0U; uxPriority < configMAX_PRIORITIES; uxPriority++ )
   82156:	454e      	cmp	r6, r9
   82158:	d1fa      	bne.n	82150 <xTaskGenericCreate+0xe8>
	{
		vListInitialise( ( xList * ) &( pxReadyTasksLists[ uxPriority ] ) );
	}

	vListInitialise( ( xList * ) &xDelayedTaskList1 );
   8215a:	f8df 910c 	ldr.w	r9, [pc, #268]	; 82268 <xTaskGenericCreate+0x200>
   8215e:	4648      	mov	r0, r9
   82160:	4e33      	ldr	r6, [pc, #204]	; (82230 <xTaskGenericCreate+0x1c8>)
   82162:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xDelayedTaskList2 );
   82164:	f8df 8104 	ldr.w	r8, [pc, #260]	; 8226c <xTaskGenericCreate+0x204>
   82168:	4640      	mov	r0, r8
   8216a:	47b0      	blx	r6
	vListInitialise( ( xList * ) &xPendingReadyList );
   8216c:	4831      	ldr	r0, [pc, #196]	; (82234 <xTaskGenericCreate+0x1cc>)
   8216e:	47b0      	blx	r6

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( ( xList * ) &xTasksWaitingTermination );
   82170:	4831      	ldr	r0, [pc, #196]	; (82238 <xTaskGenericCreate+0x1d0>)
   82172:	47b0      	blx	r6
	}
	#endif

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( ( xList * ) &xSuspendedTaskList );
   82174:	4831      	ldr	r0, [pc, #196]	; (8223c <xTaskGenericCreate+0x1d4>)
   82176:	47b0      	blx	r6
	}
	#endif

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
   82178:	4b31      	ldr	r3, [pc, #196]	; (82240 <xTaskGenericCreate+0x1d8>)
   8217a:	f8c3 9000 	str.w	r9, [r3]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
   8217e:	4b31      	ldr	r3, [pc, #196]	; (82244 <xTaskGenericCreate+0x1dc>)
   82180:	f8c3 8000 	str.w	r8, [r3]
   82184:	e009      	b.n	8219a <xTaskGenericCreate+0x132>
			else
			{
				/* If the scheduler is not already running, make this task the
				current task if it is the highest priority task to be created
				so far. */
				if( xSchedulerRunning == pdFALSE )
   82186:	4b30      	ldr	r3, [pc, #192]	; (82248 <xTaskGenericCreate+0x1e0>)
   82188:	681b      	ldr	r3, [r3, #0]
   8218a:	b933      	cbnz	r3, 8219a <xTaskGenericCreate+0x132>
				{
					if( pxCurrentTCB->uxPriority <= uxPriority )
   8218c:	4b26      	ldr	r3, [pc, #152]	; (82228 <xTaskGenericCreate+0x1c0>)
   8218e:	681b      	ldr	r3, [r3, #0]
   82190:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82192:	429d      	cmp	r5, r3
					{
						pxCurrentTCB = pxNewTCB;
   82194:	bf24      	itt	cs
   82196:	4b24      	ldrcs	r3, [pc, #144]	; (82228 <xTaskGenericCreate+0x1c0>)
   82198:	601c      	strcs	r4, [r3, #0]
				}
			}

			/* Remember the top priority to make context switching faster.  Use
			the priority in pxNewTCB as this has been capped to a valid value. */
			if( pxNewTCB->uxPriority > uxTopUsedPriority )
   8219a:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   8219c:	4a2b      	ldr	r2, [pc, #172]	; (8224c <xTaskGenericCreate+0x1e4>)
   8219e:	6812      	ldr	r2, [r2, #0]
   821a0:	4293      	cmp	r3, r2
			{
				uxTopUsedPriority = pxNewTCB->uxPriority;
   821a2:	bf84      	itt	hi
   821a4:	4a29      	ldrhi	r2, [pc, #164]	; (8224c <xTaskGenericCreate+0x1e4>)
   821a6:	6013      	strhi	r3, [r2, #0]
			}

			#if ( configUSE_TRACE_FACILITY == 1 )
			{
				/* Add a counter into the TCB for tracing only. */
				pxNewTCB->uxTCBNumber = uxTaskNumber;
   821a8:	4a29      	ldr	r2, [pc, #164]	; (82250 <xTaskGenericCreate+0x1e8>)
   821aa:	6811      	ldr	r1, [r2, #0]
   821ac:	6421      	str	r1, [r4, #64]	; 0x40
			}
			#endif
			uxTaskNumber++;
   821ae:	3101      	adds	r1, #1
   821b0:	6011      	str	r1, [r2, #0]

			prvAddTaskToReadyQueue( pxNewTCB );
   821b2:	4a28      	ldr	r2, [pc, #160]	; (82254 <xTaskGenericCreate+0x1ec>)
   821b4:	6812      	ldr	r2, [r2, #0]
   821b6:	4293      	cmp	r3, r2
   821b8:	bf84      	itt	hi
   821ba:	4a26      	ldrhi	r2, [pc, #152]	; (82254 <xTaskGenericCreate+0x1ec>)
   821bc:	6013      	strhi	r3, [r2, #0]
   821be:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   821c2:	481a      	ldr	r0, [pc, #104]	; (8222c <xTaskGenericCreate+0x1c4>)
   821c4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   821c8:	4639      	mov	r1, r7
   821ca:	4b23      	ldr	r3, [pc, #140]	; (82258 <xTaskGenericCreate+0x1f0>)
   821cc:	4798      	blx	r3

			xReturn = pdPASS;
			portSETUP_TCB( pxNewTCB );
			traceTASK_CREATE( pxNewTCB );
		}
		taskEXIT_CRITICAL();
   821ce:	4b23      	ldr	r3, [pc, #140]	; (8225c <xTaskGenericCreate+0x1f4>)
   821d0:	4798      	blx	r3
		traceTASK_CREATE_FAILED();
	}

	if( xReturn == pdPASS )
	{
		if( xSchedulerRunning != pdFALSE )
   821d2:	4b1d      	ldr	r3, [pc, #116]	; (82248 <xTaskGenericCreate+0x1e0>)
   821d4:	681b      	ldr	r3, [r3, #0]
   821d6:	b14b      	cbz	r3, 821ec <xTaskGenericCreate+0x184>
		{
			/* If the created task is of a higher priority than the current task
			then it should run now. */
			if( pxCurrentTCB->uxPriority < uxPriority )
   821d8:	4b13      	ldr	r3, [pc, #76]	; (82228 <xTaskGenericCreate+0x1c0>)
   821da:	681b      	ldr	r3, [r3, #0]
   821dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   821de:	429d      	cmp	r5, r3
   821e0:	d907      	bls.n	821f2 <xTaskGenericCreate+0x18a>
			{
				portYIELD_WITHIN_API();
   821e2:	4b1f      	ldr	r3, [pc, #124]	; (82260 <xTaskGenericCreate+0x1f8>)
   821e4:	4798      	blx	r3
			#endif
			uxTaskNumber++;

			prvAddTaskToReadyQueue( pxNewTCB );

			xReturn = pdPASS;
   821e6:	2001      	movs	r0, #1
   821e8:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821ec:	2001      	movs	r0, #1
   821ee:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   821f2:	2001      	movs	r0, #1
   821f4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
	if( pxNewTCB != NULL )
	{
		/* Allocate space for the stack used by the task being created.
		The base of the stack memory stored in the TCB so the task can
		be deleted later if required. */
		pxNewTCB->pxStack = ( portSTACK_TYPE * ) pvPortMallocAligned( ( ( ( size_t )usStackDepth ) * sizeof( portSTACK_TYPE ) ), puxStackBuffer );
   821f8:	f8c0 8030 	str.w	r8, [r0, #48]	; 0x30
   821fc:	4640      	mov	r0, r8
   821fe:	e75b      	b.n	820b8 <xTaskGenericCreate+0x50>
		}
		taskEXIT_CRITICAL();
	}
	else
	{
		xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
   82200:	f04f 30ff 	mov.w	r0, #4294967295
			}
		}
	}

	return xReturn;
}
   82204:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
   82208:	000817f1 	.word	0x000817f1
   8220c:	0008194d 	.word	0x0008194d
   82210:	00081a11 	.word	0x00081a11
   82214:	00082ef9 	.word	0x00082ef9
   82218:	00082f8d 	.word	0x00082f8d
   8221c:	000817a5 	.word	0x000817a5
   82220:	00081801 	.word	0x00081801
   82224:	2007a7d4 	.word	0x2007a7d4
   82228:	2007a794 	.word	0x2007a794
   8222c:	2007a72c 	.word	0x2007a72c
   82230:	000816f1 	.word	0x000816f1
   82234:	2007a798 	.word	0x2007a798
   82238:	2007a700 	.word	0x2007a700
   8223c:	2007a6e0 	.word	0x2007a6e0
   82240:	2007a6f4 	.word	0x2007a6f4
   82244:	2007a7b4 	.word	0x2007a7b4
   82248:	2007a6f8 	.word	0x2007a6f8
   8224c:	2007a7d8 	.word	0x2007a7d8
   82250:	2007a7b8 	.word	0x2007a7b8
   82254:	2007a728 	.word	0x2007a728
   82258:	00081711 	.word	0x00081711
   8225c:	00081821 	.word	0x00081821
   82260:	000817e1 	.word	0x000817e1
   82264:	00081709 	.word	0x00081709
   82268:	2007a7bc 	.word	0x2007a7bc
   8226c:	2007a714 	.word	0x2007a714

00082270 <vTaskStartScheduler>:
 * PUBLIC SCHEDULER CONTROL documented in task.h
 *----------------------------------------------------------*/


void vTaskStartScheduler( void )
{
   82270:	b510      	push	{r4, lr}
   82272:	b084      	sub	sp, #16
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), &xIdleTaskHandle );
	}
	#else
	{
		/* Create the idle task without storing its handle. */
		xReturn = xTaskCreate( prvIdleTask, ( signed char * ) "IDLE", tskIDLE_STACK_SIZE, ( void * ) NULL, ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), NULL );
   82274:	2300      	movs	r3, #0
   82276:	9300      	str	r3, [sp, #0]
   82278:	9301      	str	r3, [sp, #4]
   8227a:	9302      	str	r3, [sp, #8]
   8227c:	9303      	str	r3, [sp, #12]
   8227e:	480e      	ldr	r0, [pc, #56]	; (822b8 <vTaskStartScheduler+0x48>)
   82280:	490e      	ldr	r1, [pc, #56]	; (822bc <vTaskStartScheduler+0x4c>)
   82282:	2282      	movs	r2, #130	; 0x82
   82284:	4c0e      	ldr	r4, [pc, #56]	; (822c0 <vTaskStartScheduler+0x50>)
   82286:	47a0      	blx	r4
	}
	#endif

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
   82288:	2801      	cmp	r0, #1
   8228a:	d10e      	bne.n	822aa <vTaskStartScheduler+0x3a>
		{
			xReturn = xTimerCreateTimerTask();
   8228c:	4b0d      	ldr	r3, [pc, #52]	; (822c4 <vTaskStartScheduler+0x54>)
   8228e:	4798      	blx	r3
		}
	}
	#endif

	if( xReturn == pdPASS )
   82290:	2801      	cmp	r0, #1
   82292:	d10a      	bne.n	822aa <vTaskStartScheduler+0x3a>
		so interrupts will automatically get re-enabled when the first task
		starts to run.

		STEPPING THROUGH HERE USING A DEBUGGER CAN CAUSE BIG PROBLEMS IF THE
		DEBUGGER ALLOWS INTERRUPTS TO BE PROCESSED. */
		portDISABLE_INTERRUPTS();
   82294:	4b0c      	ldr	r3, [pc, #48]	; (822c8 <vTaskStartScheduler+0x58>)
   82296:	4798      	blx	r3

		xSchedulerRunning = pdTRUE;
   82298:	2201      	movs	r2, #1
   8229a:	4b0c      	ldr	r3, [pc, #48]	; (822cc <vTaskStartScheduler+0x5c>)
   8229c:	601a      	str	r2, [r3, #0]
		xTickCount = ( portTickType ) 0U;
   8229e:	2200      	movs	r2, #0
   822a0:	4b0b      	ldr	r3, [pc, #44]	; (822d0 <vTaskStartScheduler+0x60>)
   822a2:	601a      	str	r2, [r3, #0]
		the run time counter time base. */
		portCONFIGURE_TIMER_FOR_RUN_TIME_STATS();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
   822a4:	4b0b      	ldr	r3, [pc, #44]	; (822d4 <vTaskStartScheduler+0x64>)
   822a6:	4798      	blx	r3
   822a8:	e004      	b.n	822b4 <vTaskStartScheduler+0x44>
			/* Should only reach here if a task calls xTaskEndScheduler(). */
		}
	}

	/* This line will only be reached if the kernel could not be started. */
	configASSERT( xReturn );
   822aa:	b918      	cbnz	r0, 822b4 <vTaskStartScheduler+0x44>
   822ac:	4b06      	ldr	r3, [pc, #24]	; (822c8 <vTaskStartScheduler+0x58>)
   822ae:	4798      	blx	r3
   822b0:	bf00      	nop
   822b2:	e7fd      	b.n	822b0 <vTaskStartScheduler+0x40>
}
   822b4:	b004      	add	sp, #16
   822b6:	bd10      	pop	{r4, pc}
   822b8:	000825c1 	.word	0x000825c1
   822bc:	00083164 	.word	0x00083164
   822c0:	00082069 	.word	0x00082069
   822c4:	00082a55 	.word	0x00082a55
   822c8:	000817f1 	.word	0x000817f1
   822cc:	2007a6f8 	.word	0x2007a6f8
   822d0:	2007a7b0 	.word	0x2007a7b0
   822d4:	000818bd 	.word	0x000818bd

000822d8 <vTaskSuspendAll>:

void vTaskSuspendAll( void )
{
	/* A critical section is not required as the variable is of type
	portBASE_TYPE. */
	++uxSchedulerSuspended;
   822d8:	4b02      	ldr	r3, [pc, #8]	; (822e4 <vTaskSuspendAll+0xc>)
   822da:	681a      	ldr	r2, [r3, #0]
   822dc:	3201      	adds	r2, #1
   822de:	601a      	str	r2, [r3, #0]
   822e0:	4770      	bx	lr
   822e2:	bf00      	nop
   822e4:	2007a790 	.word	0x2007a790

000822e8 <xTaskGetTickCount>:
 *----------------------------------------------------------*/



portTickType xTaskGetTickCount( void )
{
   822e8:	b510      	push	{r4, lr}
portTickType xTicks;

	/* Critical section required if running on a 16 bit processor. */
	taskENTER_CRITICAL();
   822ea:	4b04      	ldr	r3, [pc, #16]	; (822fc <xTaskGetTickCount+0x14>)
   822ec:	4798      	blx	r3
	{
		xTicks = xTickCount;
   822ee:	4b04      	ldr	r3, [pc, #16]	; (82300 <xTaskGetTickCount+0x18>)
   822f0:	681c      	ldr	r4, [r3, #0]
	}
	taskEXIT_CRITICAL();
   822f2:	4b04      	ldr	r3, [pc, #16]	; (82304 <xTaskGetTickCount+0x1c>)
   822f4:	4798      	blx	r3

	return xTicks;
}
   822f6:	4620      	mov	r0, r4
   822f8:	bd10      	pop	{r4, pc}
   822fa:	bf00      	nop
   822fc:	00081801 	.word	0x00081801
   82300:	2007a7b0 	.word	0x2007a7b0
   82304:	00081821 	.word	0x00081821

00082308 <vTaskIncrementTick>:
 * SCHEDULER INTERNALS AVAILABLE FOR PORTING PURPOSES
 * documented in task.h
 *----------------------------------------------------------*/

void vTaskIncrementTick( void )
{
   82308:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   8230c:	4b3a      	ldr	r3, [pc, #232]	; (823f8 <vTaskIncrementTick+0xf0>)
   8230e:	681b      	ldr	r3, [r3, #0]
   82310:	2b00      	cmp	r3, #0
   82312:	d16b      	bne.n	823ec <vTaskIncrementTick+0xe4>
	{
		++xTickCount;
   82314:	4b39      	ldr	r3, [pc, #228]	; (823fc <vTaskIncrementTick+0xf4>)
   82316:	681a      	ldr	r2, [r3, #0]
   82318:	3201      	adds	r2, #1
   8231a:	601a      	str	r2, [r3, #0]
		if( xTickCount == ( portTickType ) 0U )
   8231c:	681b      	ldr	r3, [r3, #0]
   8231e:	bb03      	cbnz	r3, 82362 <vTaskIncrementTick+0x5a>
			xList *pxTemp;

			/* Tick count has overflowed so we need to swap the delay lists.
			If there are any items in pxDelayedTaskList here then there is
			an error! */
			configASSERT( ( listLIST_IS_EMPTY( pxDelayedTaskList ) ) );
   82320:	4b37      	ldr	r3, [pc, #220]	; (82400 <vTaskIncrementTick+0xf8>)
   82322:	681b      	ldr	r3, [r3, #0]
   82324:	681b      	ldr	r3, [r3, #0]
   82326:	b11b      	cbz	r3, 82330 <vTaskIncrementTick+0x28>
   82328:	4b36      	ldr	r3, [pc, #216]	; (82404 <vTaskIncrementTick+0xfc>)
   8232a:	4798      	blx	r3
   8232c:	bf00      	nop
   8232e:	e7fd      	b.n	8232c <vTaskIncrementTick+0x24>

			pxTemp = pxDelayedTaskList;
   82330:	4b33      	ldr	r3, [pc, #204]	; (82400 <vTaskIncrementTick+0xf8>)
   82332:	6819      	ldr	r1, [r3, #0]
			pxDelayedTaskList = pxOverflowDelayedTaskList;
   82334:	4a34      	ldr	r2, [pc, #208]	; (82408 <vTaskIncrementTick+0x100>)
   82336:	6810      	ldr	r0, [r2, #0]
   82338:	6018      	str	r0, [r3, #0]
			pxOverflowDelayedTaskList = pxTemp;
   8233a:	6011      	str	r1, [r2, #0]
			xNumOfOverflows++;
   8233c:	4a33      	ldr	r2, [pc, #204]	; (8240c <vTaskIncrementTick+0x104>)
   8233e:	6811      	ldr	r1, [r2, #0]
   82340:	3101      	adds	r1, #1
   82342:	6011      	str	r1, [r2, #0]

			if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
   82344:	681b      	ldr	r3, [r3, #0]
   82346:	681b      	ldr	r3, [r3, #0]
   82348:	b923      	cbnz	r3, 82354 <vTaskIncrementTick+0x4c>
				/* The new current delayed list is empty.  Set
				xNextTaskUnblockTime to the maximum possible value so it is
				extremely unlikely that the
				if( xTickCount >= xNextTaskUnblockTime ) test will pass until
				there is an item in the delayed list. */
				xNextTaskUnblockTime = portMAX_DELAY;
   8234a:	f04f 32ff 	mov.w	r2, #4294967295
   8234e:	4b30      	ldr	r3, [pc, #192]	; (82410 <vTaskIncrementTick+0x108>)
   82350:	601a      	str	r2, [r3, #0]
   82352:	e006      	b.n	82362 <vTaskIncrementTick+0x5a>
			{
				/* The new current delayed list is not empty, get the value of
				the item at the head of the delayed list.  This is the time at
				which the task at the head of the delayed list should be removed
				from the Blocked state. */
				pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList );
   82354:	4b2a      	ldr	r3, [pc, #168]	; (82400 <vTaskIncrementTick+0xf8>)
   82356:	681b      	ldr	r3, [r3, #0]
   82358:	68db      	ldr	r3, [r3, #12]
   8235a:	68db      	ldr	r3, [r3, #12]
				xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( pxTCB->xGenericListItem ) );
   8235c:	685a      	ldr	r2, [r3, #4]
   8235e:	4b2c      	ldr	r3, [pc, #176]	; (82410 <vTaskIncrementTick+0x108>)
   82360:	601a      	str	r2, [r3, #0]
			}
		}

		/* See if this tick has made a timeout expire. */
		prvCheckDelayedTasks();
   82362:	4b26      	ldr	r3, [pc, #152]	; (823fc <vTaskIncrementTick+0xf4>)
   82364:	681a      	ldr	r2, [r3, #0]
   82366:	4b2a      	ldr	r3, [pc, #168]	; (82410 <vTaskIncrementTick+0x108>)
   82368:	681b      	ldr	r3, [r3, #0]
   8236a:	429a      	cmp	r2, r3
   8236c:	d342      	bcc.n	823f4 <vTaskIncrementTick+0xec>
   8236e:	4b24      	ldr	r3, [pc, #144]	; (82400 <vTaskIncrementTick+0xf8>)
   82370:	681b      	ldr	r3, [r3, #0]
   82372:	681b      	ldr	r3, [r3, #0]
   82374:	b14b      	cbz	r3, 8238a <vTaskIncrementTick+0x82>
   82376:	4b22      	ldr	r3, [pc, #136]	; (82400 <vTaskIncrementTick+0xf8>)
   82378:	681b      	ldr	r3, [r3, #0]
   8237a:	68db      	ldr	r3, [r3, #12]
   8237c:	68dc      	ldr	r4, [r3, #12]
   8237e:	6863      	ldr	r3, [r4, #4]
   82380:	4a1e      	ldr	r2, [pc, #120]	; (823fc <vTaskIncrementTick+0xf4>)
   82382:	6812      	ldr	r2, [r2, #0]
   82384:	4293      	cmp	r3, r2
   82386:	d913      	bls.n	823b0 <vTaskIncrementTick+0xa8>
   82388:	e00e      	b.n	823a8 <vTaskIncrementTick+0xa0>
   8238a:	f04f 32ff 	mov.w	r2, #4294967295
   8238e:	4b20      	ldr	r3, [pc, #128]	; (82410 <vTaskIncrementTick+0x108>)
   82390:	601a      	str	r2, [r3, #0]
   82392:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   82396:	4b1a      	ldr	r3, [pc, #104]	; (82400 <vTaskIncrementTick+0xf8>)
   82398:	681b      	ldr	r3, [r3, #0]
   8239a:	68db      	ldr	r3, [r3, #12]
   8239c:	68dc      	ldr	r4, [r3, #12]
   8239e:	6863      	ldr	r3, [r4, #4]
   823a0:	4a16      	ldr	r2, [pc, #88]	; (823fc <vTaskIncrementTick+0xf4>)
   823a2:	6812      	ldr	r2, [r2, #0]
   823a4:	4293      	cmp	r3, r2
   823a6:	d907      	bls.n	823b8 <vTaskIncrementTick+0xb0>
   823a8:	4a19      	ldr	r2, [pc, #100]	; (82410 <vTaskIncrementTick+0x108>)
   823aa:	6013      	str	r3, [r2, #0]
   823ac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823b0:	4e18      	ldr	r6, [pc, #96]	; (82414 <vTaskIncrementTick+0x10c>)
   823b2:	4f19      	ldr	r7, [pc, #100]	; (82418 <vTaskIncrementTick+0x110>)
   823b4:	f8df 806c 	ldr.w	r8, [pc, #108]	; 82424 <vTaskIncrementTick+0x11c>
   823b8:	1d25      	adds	r5, r4, #4
   823ba:	4628      	mov	r0, r5
   823bc:	47b0      	blx	r6
   823be:	6aa3      	ldr	r3, [r4, #40]	; 0x28
   823c0:	b113      	cbz	r3, 823c8 <vTaskIncrementTick+0xc0>
   823c2:	f104 0018 	add.w	r0, r4, #24
   823c6:	47b0      	blx	r6
   823c8:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   823ca:	683a      	ldr	r2, [r7, #0]
   823cc:	4293      	cmp	r3, r2
   823ce:	bf88      	it	hi
   823d0:	603b      	strhi	r3, [r7, #0]
   823d2:	eb03 0083 	add.w	r0, r3, r3, lsl #2
   823d6:	eb08 0080 	add.w	r0, r8, r0, lsl #2
   823da:	4629      	mov	r1, r5
   823dc:	4b0f      	ldr	r3, [pc, #60]	; (8241c <vTaskIncrementTick+0x114>)
   823de:	4798      	blx	r3
   823e0:	4b07      	ldr	r3, [pc, #28]	; (82400 <vTaskIncrementTick+0xf8>)
   823e2:	681b      	ldr	r3, [r3, #0]
   823e4:	681b      	ldr	r3, [r3, #0]
   823e6:	2b00      	cmp	r3, #0
   823e8:	d1d5      	bne.n	82396 <vTaskIncrementTick+0x8e>
   823ea:	e7ce      	b.n	8238a <vTaskIncrementTick+0x82>
	}
	else
	{
		++uxMissedTicks;
   823ec:	4b0c      	ldr	r3, [pc, #48]	; (82420 <vTaskIncrementTick+0x118>)
   823ee:	681a      	ldr	r2, [r3, #0]
   823f0:	3201      	adds	r2, #1
   823f2:	601a      	str	r2, [r3, #0]
   823f4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   823f8:	2007a790 	.word	0x2007a790
   823fc:	2007a7b0 	.word	0x2007a7b0
   82400:	2007a6f4 	.word	0x2007a6f4
   82404:	000817f1 	.word	0x000817f1
   82408:	2007a7b4 	.word	0x2007a7b4
   8240c:	2007a7ac 	.word	0x2007a7ac
   82410:	20070148 	.word	0x20070148
   82414:	00081769 	.word	0x00081769
   82418:	2007a728 	.word	0x2007a728
   8241c:	00081711 	.word	0x00081711
   82420:	2007a6dc 	.word	0x2007a6dc
   82424:	2007a72c 	.word	0x2007a72c

00082428 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE != 0  */
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
   82428:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
   8242c:	4b31      	ldr	r3, [pc, #196]	; (824f4 <xTaskResumeAll+0xcc>)
   8242e:	681b      	ldr	r3, [r3, #0]
   82430:	b91b      	cbnz	r3, 8243a <xTaskResumeAll+0x12>
   82432:	4b31      	ldr	r3, [pc, #196]	; (824f8 <xTaskResumeAll+0xd0>)
   82434:	4798      	blx	r3
   82436:	bf00      	nop
   82438:	e7fd      	b.n	82436 <xTaskResumeAll+0xe>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
   8243a:	4b30      	ldr	r3, [pc, #192]	; (824fc <xTaskResumeAll+0xd4>)
   8243c:	4798      	blx	r3
	{
		--uxSchedulerSuspended;
   8243e:	4b2d      	ldr	r3, [pc, #180]	; (824f4 <xTaskResumeAll+0xcc>)
   82440:	681a      	ldr	r2, [r3, #0]
   82442:	3a01      	subs	r2, #1
   82444:	601a      	str	r2, [r3, #0]

		if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82446:	681b      	ldr	r3, [r3, #0]
   82448:	2b00      	cmp	r3, #0
   8244a:	d148      	bne.n	824de <xTaskResumeAll+0xb6>
		{
			if( uxCurrentNumberOfTasks > ( unsigned portBASE_TYPE ) 0U )
   8244c:	4b2c      	ldr	r3, [pc, #176]	; (82500 <xTaskResumeAll+0xd8>)
   8244e:	681b      	ldr	r3, [r3, #0]
   82450:	2b00      	cmp	r3, #0
   82452:	d046      	beq.n	824e2 <xTaskResumeAll+0xba>
   82454:	2500      	movs	r5, #0
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   82456:	f8df 80d4 	ldr.w	r8, [pc, #212]	; 8252c <xTaskResumeAll+0x104>
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
					uxListRemove( &( pxTCB->xEventListItem ) );
   8245a:	4f2a      	ldr	r7, [pc, #168]	; (82504 <xTaskResumeAll+0xdc>)
					uxListRemove( &( pxTCB->xGenericListItem ) );
					prvAddTaskToReadyQueue( pxTCB );
   8245c:	4e2a      	ldr	r6, [pc, #168]	; (82508 <xTaskResumeAll+0xe0>)
   8245e:	e01d      	b.n	8249c <xTaskResumeAll+0x74>

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY(  ( ( xList * ) &xPendingReadyList ) );
   82460:	f8d8 300c 	ldr.w	r3, [r8, #12]
   82464:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xEventListItem ) );
   82466:	f104 0018 	add.w	r0, r4, #24
   8246a:	47b8      	blx	r7
					uxListRemove( &( pxTCB->xGenericListItem ) );
   8246c:	f104 0904 	add.w	r9, r4, #4
   82470:	4648      	mov	r0, r9
   82472:	47b8      	blx	r7
					prvAddTaskToReadyQueue( pxTCB );
   82474:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   82476:	6832      	ldr	r2, [r6, #0]
   82478:	4293      	cmp	r3, r2
   8247a:	bf88      	it	hi
   8247c:	6033      	strhi	r3, [r6, #0]
   8247e:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82482:	4822      	ldr	r0, [pc, #136]	; (8250c <xTaskResumeAll+0xe4>)
   82484:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82488:	4649      	mov	r1, r9
   8248a:	4b21      	ldr	r3, [pc, #132]	; (82510 <xTaskResumeAll+0xe8>)
   8248c:	4798      	blx	r3

					/* If we have moved a task that has a priority higher than
					the current task then we should yield. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
   8248e:	4b21      	ldr	r3, [pc, #132]	; (82514 <xTaskResumeAll+0xec>)
   82490:	681b      	ldr	r3, [r3, #0]
   82492:	6ae2      	ldr	r2, [r4, #44]	; 0x2c
   82494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
					{
						xYieldRequired = pdTRUE;
   82496:	429a      	cmp	r2, r3
   82498:	bf28      	it	cs
   8249a:	2501      	movcs	r5, #1
			{
				portBASE_TYPE xYieldRequired = pdFALSE;

				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( ( xList * ) &xPendingReadyList ) == pdFALSE )
   8249c:	f8d8 3000 	ldr.w	r3, [r8]
   824a0:	2b00      	cmp	r3, #0
   824a2:	d1dd      	bne.n	82460 <xTaskResumeAll+0x38>
				}

				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   824a4:	4b1c      	ldr	r3, [pc, #112]	; (82518 <xTaskResumeAll+0xf0>)
   824a6:	681b      	ldr	r3, [r3, #0]
   824a8:	b163      	cbz	r3, 824c4 <xTaskResumeAll+0x9c>
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   824aa:	4b1b      	ldr	r3, [pc, #108]	; (82518 <xTaskResumeAll+0xf0>)
   824ac:	681b      	ldr	r3, [r3, #0]
   824ae:	b17b      	cbz	r3, 824d0 <xTaskResumeAll+0xa8>
					{
						vTaskIncrementTick();
   824b0:	4d1a      	ldr	r5, [pc, #104]	; (8251c <xTaskResumeAll+0xf4>)
						--uxMissedTicks;
   824b2:	4c19      	ldr	r4, [pc, #100]	; (82518 <xTaskResumeAll+0xf0>)
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
					{
						vTaskIncrementTick();
   824b4:	47a8      	blx	r5
						--uxMissedTicks;
   824b6:	6823      	ldr	r3, [r4, #0]
   824b8:	3b01      	subs	r3, #1
   824ba:	6023      	str	r3, [r4, #0]
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does not
				slip, and that any delayed tasks are resumed at the correct time. */
				if( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
				{
					while( uxMissedTicks > ( unsigned portBASE_TYPE ) 0U )
   824bc:	6823      	ldr	r3, [r4, #0]
   824be:	2b00      	cmp	r3, #0
   824c0:	d1f8      	bne.n	824b4 <xTaskResumeAll+0x8c>
   824c2:	e005      	b.n	824d0 <xTaskResumeAll+0xa8>
						xYieldRequired = pdTRUE;
					}
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
   824c4:	2d01      	cmp	r5, #1
   824c6:	d003      	beq.n	824d0 <xTaskResumeAll+0xa8>
   824c8:	4b15      	ldr	r3, [pc, #84]	; (82520 <xTaskResumeAll+0xf8>)
   824ca:	681b      	ldr	r3, [r3, #0]
   824cc:	2b01      	cmp	r3, #1
   824ce:	d10a      	bne.n	824e6 <xTaskResumeAll+0xbe>
				{
					xAlreadyYielded = pdTRUE;
					xMissedYield = pdFALSE;
   824d0:	2200      	movs	r2, #0
   824d2:	4b13      	ldr	r3, [pc, #76]	; (82520 <xTaskResumeAll+0xf8>)
   824d4:	601a      	str	r2, [r3, #0]
					portYIELD_WITHIN_API();
   824d6:	4b13      	ldr	r3, [pc, #76]	; (82524 <xTaskResumeAll+0xfc>)
   824d8:	4798      	blx	r3
					#endif
				}

				if( ( xYieldRequired == pdTRUE ) || ( xMissedYield == pdTRUE ) )
				{
					xAlreadyYielded = pdTRUE;
   824da:	2401      	movs	r4, #1
   824dc:	e004      	b.n	824e8 <xTaskResumeAll+0xc0>
/*----------------------------------------------------------*/

signed portBASE_TYPE xTaskResumeAll( void )
{
register tskTCB *pxTCB;
signed portBASE_TYPE xAlreadyYielded = pdFALSE;
   824de:	2400      	movs	r4, #0
   824e0:	e002      	b.n	824e8 <xTaskResumeAll+0xc0>
   824e2:	2400      	movs	r4, #0
   824e4:	e000      	b.n	824e8 <xTaskResumeAll+0xc0>
   824e6:	2400      	movs	r4, #0
					portYIELD_WITHIN_API();
				}
			}
		}
	}
	taskEXIT_CRITICAL();
   824e8:	4b0f      	ldr	r3, [pc, #60]	; (82528 <xTaskResumeAll+0x100>)
   824ea:	4798      	blx	r3

	return xAlreadyYielded;
}
   824ec:	4620      	mov	r0, r4
   824ee:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
   824f2:	bf00      	nop
   824f4:	2007a790 	.word	0x2007a790
   824f8:	000817f1 	.word	0x000817f1
   824fc:	00081801 	.word	0x00081801
   82500:	2007a7d4 	.word	0x2007a7d4
   82504:	00081769 	.word	0x00081769
   82508:	2007a728 	.word	0x2007a728
   8250c:	2007a72c 	.word	0x2007a72c
   82510:	00081711 	.word	0x00081711
   82514:	2007a794 	.word	0x2007a794
   82518:	2007a6dc 	.word	0x2007a6dc
   8251c:	00082309 	.word	0x00082309
   82520:	2007a7d0 	.word	0x2007a7d0
   82524:	000817e1 	.word	0x000817e1
   82528:	00081821 	.word	0x00081821
   8252c:	2007a798 	.word	0x2007a798

00082530 <vTaskDelayUntil>:
 *----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelayUntil == 1 )

	void vTaskDelayUntil( portTickType * const pxPreviousWakeTime, portTickType xTimeIncrement )
	{
   82530:	b538      	push	{r3, r4, r5, lr}
   82532:	460c      	mov	r4, r1
	portTickType xTimeToWake;
	portBASE_TYPE xAlreadyYielded, xShouldDelay = pdFALSE;

		configASSERT( pxPreviousWakeTime );
   82534:	4605      	mov	r5, r0
   82536:	b918      	cbnz	r0, 82540 <vTaskDelayUntil+0x10>
   82538:	4b19      	ldr	r3, [pc, #100]	; (825a0 <vTaskDelayUntil+0x70>)
   8253a:	4798      	blx	r3
   8253c:	bf00      	nop
   8253e:	e7fd      	b.n	8253c <vTaskDelayUntil+0xc>
		configASSERT( ( xTimeIncrement > 0U ) );
   82540:	b919      	cbnz	r1, 8254a <vTaskDelayUntil+0x1a>
   82542:	4b17      	ldr	r3, [pc, #92]	; (825a0 <vTaskDelayUntil+0x70>)
   82544:	4798      	blx	r3
   82546:	bf00      	nop
   82548:	e7fd      	b.n	82546 <vTaskDelayUntil+0x16>

		vTaskSuspendAll();
   8254a:	4b16      	ldr	r3, [pc, #88]	; (825a4 <vTaskDelayUntil+0x74>)
   8254c:	4798      	blx	r3
		{
			/* Generate the tick time at which the task wants to wake. */
			xTimeToWake = *pxPreviousWakeTime + xTimeIncrement;
   8254e:	682b      	ldr	r3, [r5, #0]
   82550:	441c      	add	r4, r3

			if( xTickCount < *pxPreviousWakeTime )
   82552:	4a15      	ldr	r2, [pc, #84]	; (825a8 <vTaskDelayUntil+0x78>)
   82554:	6812      	ldr	r2, [r2, #0]
   82556:	4293      	cmp	r3, r2
   82558:	d907      	bls.n	8256a <vTaskDelayUntil+0x3a>
				/* The tick count has overflowed since this function was
				lasted called.  In this case the only time we should ever
				actually delay is if the wake time has also	overflowed,
				and the wake time is greater than the tick time.  When this
				is the case it is as if neither time had overflowed. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) && ( xTimeToWake > xTickCount ) )
   8255a:	42a3      	cmp	r3, r4
   8255c:	d91c      	bls.n	82598 <vTaskDelayUntil+0x68>
   8255e:	4b12      	ldr	r3, [pc, #72]	; (825a8 <vTaskDelayUntil+0x78>)
   82560:	681b      	ldr	r3, [r3, #0]
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82562:	602c      	str	r4, [r5, #0]

			if( xShouldDelay != pdFALSE )
   82564:	429c      	cmp	r4, r3
   82566:	d90f      	bls.n	82588 <vTaskDelayUntil+0x58>
   82568:	e006      	b.n	82578 <vTaskDelayUntil+0x48>
			else
			{
				/* The tick time has not overflowed.  In this case we will
				delay if either the wake time has overflowed, and/or the
				tick time is less than the wake time. */
				if( ( xTimeToWake < *pxPreviousWakeTime ) || ( xTimeToWake > xTickCount ) )
   8256a:	42a3      	cmp	r3, r4
   8256c:	d812      	bhi.n	82594 <vTaskDelayUntil+0x64>
   8256e:	4b0e      	ldr	r3, [pc, #56]	; (825a8 <vTaskDelayUntil+0x78>)
   82570:	681b      	ldr	r3, [r3, #0]
   82572:	429c      	cmp	r4, r3
   82574:	d80e      	bhi.n	82594 <vTaskDelayUntil+0x64>
   82576:	e00f      	b.n	82598 <vTaskDelayUntil+0x68>
				traceTASK_DELAY_UNTIL();

				/* We must remove ourselves from the ready list before adding
				ourselves to the blocked list as the same list item is used for
				both lists. */
				if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   82578:	4b0c      	ldr	r3, [pc, #48]	; (825ac <vTaskDelayUntil+0x7c>)
   8257a:	6818      	ldr	r0, [r3, #0]
   8257c:	3004      	adds	r0, #4
   8257e:	4b0c      	ldr	r3, [pc, #48]	; (825b0 <vTaskDelayUntil+0x80>)
   82580:	4798      	blx	r3
					no need to check, and the port reset macro can be called
					directly. */
					portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
				}

				prvAddCurrentTaskToDelayedList( xTimeToWake );
   82582:	4620      	mov	r0, r4
   82584:	4b0b      	ldr	r3, [pc, #44]	; (825b4 <vTaskDelayUntil+0x84>)
   82586:	4798      	blx	r3
			}
		}
		xAlreadyYielded = xTaskResumeAll();
   82588:	4b0b      	ldr	r3, [pc, #44]	; (825b8 <vTaskDelayUntil+0x88>)
   8258a:	4798      	blx	r3

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
   8258c:	b930      	cbnz	r0, 8259c <vTaskDelayUntil+0x6c>
		{
			portYIELD_WITHIN_API();
   8258e:	4b0b      	ldr	r3, [pc, #44]	; (825bc <vTaskDelayUntil+0x8c>)
   82590:	4798      	blx	r3
   82592:	bd38      	pop	{r3, r4, r5, pc}
					xShouldDelay = pdTRUE;
				}
			}

			/* Update the wake time ready for the next call. */
			*pxPreviousWakeTime = xTimeToWake;
   82594:	602c      	str	r4, [r5, #0]
   82596:	e7ef      	b.n	82578 <vTaskDelayUntil+0x48>
   82598:	602c      	str	r4, [r5, #0]
   8259a:	e7f5      	b.n	82588 <vTaskDelayUntil+0x58>
   8259c:	bd38      	pop	{r3, r4, r5, pc}
   8259e:	bf00      	nop
   825a0:	000817f1 	.word	0x000817f1
   825a4:	000822d9 	.word	0x000822d9
   825a8:	2007a7b0 	.word	0x2007a7b0
   825ac:	2007a794 	.word	0x2007a794
   825b0:	00081769 	.word	0x00081769
   825b4:	00082011 	.word	0x00082011
   825b8:	00082429 	.word	0x00082429
   825bc:	000817e1 	.word	0x000817e1

000825c0 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
   825c0:	b580      	push	{r7, lr}
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   825c2:	4d15      	ldr	r5, [pc, #84]	; (82618 <prvIdleTask+0x58>)

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   825c4:	4e15      	ldr	r6, [pc, #84]	; (8261c <prvIdleTask+0x5c>)
			{
				taskYIELD();
   825c6:	f8df 8078 	ldr.w	r8, [pc, #120]	; 82640 <prvIdleTask+0x80>
   825ca:	e01c      	b.n	82606 <prvIdleTask+0x46>

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
		{
			vTaskSuspendAll();
   825cc:	4b14      	ldr	r3, [pc, #80]	; (82620 <prvIdleTask+0x60>)
   825ce:	4798      	blx	r3
				xListIsEmpty = listLIST_IS_EMPTY( &xTasksWaitingTermination );
   825d0:	4b14      	ldr	r3, [pc, #80]	; (82624 <prvIdleTask+0x64>)
   825d2:	681c      	ldr	r4, [r3, #0]
			xTaskResumeAll();
   825d4:	4b14      	ldr	r3, [pc, #80]	; (82628 <prvIdleTask+0x68>)
   825d6:	4798      	blx	r3

			if( xListIsEmpty == pdFALSE )
   825d8:	b1ac      	cbz	r4, 82606 <prvIdleTask+0x46>
			{
				tskTCB *pxTCB;

				taskENTER_CRITICAL();
   825da:	4b14      	ldr	r3, [pc, #80]	; (8262c <prvIdleTask+0x6c>)
   825dc:	4798      	blx	r3
				{
					pxTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( ( ( xList * ) &xTasksWaitingTermination ) );
   825de:	4b11      	ldr	r3, [pc, #68]	; (82624 <prvIdleTask+0x64>)
   825e0:	68db      	ldr	r3, [r3, #12]
   825e2:	68dc      	ldr	r4, [r3, #12]
					uxListRemove( &( pxTCB->xGenericListItem ) );
   825e4:	1d20      	adds	r0, r4, #4
   825e6:	4b12      	ldr	r3, [pc, #72]	; (82630 <prvIdleTask+0x70>)
   825e8:	4798      	blx	r3
					--uxCurrentNumberOfTasks;
   825ea:	4b12      	ldr	r3, [pc, #72]	; (82634 <prvIdleTask+0x74>)
   825ec:	681a      	ldr	r2, [r3, #0]
   825ee:	3a01      	subs	r2, #1
   825f0:	601a      	str	r2, [r3, #0]
					--uxTasksDeleted;
   825f2:	682b      	ldr	r3, [r5, #0]
   825f4:	3b01      	subs	r3, #1
   825f6:	602b      	str	r3, [r5, #0]
				}
				taskEXIT_CRITICAL();
   825f8:	4b0f      	ldr	r3, [pc, #60]	; (82638 <prvIdleTask+0x78>)
   825fa:	4798      	blx	r3
		want to allocate and clean RAM statically. */
		portCLEAN_UP_TCB( pxTCB );

		/* Free up the memory allocated by the scheduler for the task.  It is up to
		the task to free any memory allocated at the application level. */
		vPortFreeAligned( pxTCB->pxStack );
   825fc:	6b20      	ldr	r0, [r4, #48]	; 0x30
   825fe:	4f0f      	ldr	r7, [pc, #60]	; (8263c <prvIdleTask+0x7c>)
   82600:	47b8      	blx	r7
		vPortFree( pxTCB );
   82602:	4620      	mov	r0, r4
   82604:	47b8      	blx	r7
	{
		portBASE_TYPE xListIsEmpty;

		/* ucTasksDeleted is used to prevent vTaskSuspendAll() being called
		too often in the idle task. */
		while( uxTasksDeleted > ( unsigned portBASE_TYPE ) 0U )
   82606:	682b      	ldr	r3, [r5, #0]
   82608:	2b00      	cmp	r3, #0
   8260a:	d1df      	bne.n	825cc <prvIdleTask+0xc>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( unsigned portBASE_TYPE ) 1 )
   8260c:	6833      	ldr	r3, [r6, #0]
   8260e:	2b01      	cmp	r3, #1
   82610:	d9f9      	bls.n	82606 <prvIdleTask+0x46>
			{
				taskYIELD();
   82612:	47c0      	blx	r8
   82614:	e7f7      	b.n	82606 <prvIdleTask+0x46>
   82616:	bf00      	nop
   82618:	2007a6fc 	.word	0x2007a6fc
   8261c:	2007a72c 	.word	0x2007a72c
   82620:	000822d9 	.word	0x000822d9
   82624:	2007a700 	.word	0x2007a700
   82628:	00082429 	.word	0x00082429
   8262c:	00081801 	.word	0x00081801
   82630:	00081769 	.word	0x00081769
   82634:	2007a7d4 	.word	0x2007a7d4
   82638:	00081821 	.word	0x00081821
   8263c:	00081a11 	.word	0x00081a11
   82640:	000817e1 	.word	0x000817e1

00082644 <vTaskSwitchContext>:

#endif
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
   82644:	b508      	push	{r3, lr}
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
   82646:	4b1d      	ldr	r3, [pc, #116]	; (826bc <vTaskSwitchContext+0x78>)
   82648:	681b      	ldr	r3, [r3, #0]
   8264a:	b95b      	cbnz	r3, 82664 <vTaskSwitchContext+0x20>
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8264c:	4b1c      	ldr	r3, [pc, #112]	; (826c0 <vTaskSwitchContext+0x7c>)
   8264e:	681b      	ldr	r3, [r3, #0]
   82650:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82654:	009b      	lsls	r3, r3, #2
   82656:	4a1b      	ldr	r2, [pc, #108]	; (826c4 <vTaskSwitchContext+0x80>)
   82658:	58d3      	ldr	r3, [r2, r3]
   8265a:	b9cb      	cbnz	r3, 82690 <vTaskSwitchContext+0x4c>
   8265c:	4b18      	ldr	r3, [pc, #96]	; (826c0 <vTaskSwitchContext+0x7c>)
   8265e:	681b      	ldr	r3, [r3, #0]
   82660:	b953      	cbnz	r3, 82678 <vTaskSwitchContext+0x34>
   82662:	e005      	b.n	82670 <vTaskSwitchContext+0x2c>
{
	if( uxSchedulerSuspended != ( unsigned portBASE_TYPE ) pdFALSE )
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xMissedYield = pdTRUE;
   82664:	2201      	movs	r2, #1
   82666:	4b18      	ldr	r3, [pc, #96]	; (826c8 <vTaskSwitchContext+0x84>)
   82668:	601a      	str	r2, [r3, #0]
   8266a:	bd08      	pop	{r3, pc}
		#endif

		taskFIRST_CHECK_FOR_STACK_OVERFLOW();
		taskSECOND_CHECK_FOR_STACK_OVERFLOW();

		taskSELECT_HIGHEST_PRIORITY_TASK();
   8266c:	681a      	ldr	r2, [r3, #0]
   8266e:	b92a      	cbnz	r2, 8267c <vTaskSwitchContext+0x38>
   82670:	4b16      	ldr	r3, [pc, #88]	; (826cc <vTaskSwitchContext+0x88>)
   82672:	4798      	blx	r3
   82674:	bf00      	nop
   82676:	e7fd      	b.n	82674 <vTaskSwitchContext+0x30>
   82678:	4b11      	ldr	r3, [pc, #68]	; (826c0 <vTaskSwitchContext+0x7c>)
   8267a:	4912      	ldr	r1, [pc, #72]	; (826c4 <vTaskSwitchContext+0x80>)
   8267c:	681a      	ldr	r2, [r3, #0]
   8267e:	3a01      	subs	r2, #1
   82680:	601a      	str	r2, [r3, #0]
   82682:	681a      	ldr	r2, [r3, #0]
   82684:	eb02 0282 	add.w	r2, r2, r2, lsl #2
   82688:	f851 2022 	ldr.w	r2, [r1, r2, lsl #2]
   8268c:	2a00      	cmp	r2, #0
   8268e:	d0ed      	beq.n	8266c <vTaskSwitchContext+0x28>
   82690:	4b0b      	ldr	r3, [pc, #44]	; (826c0 <vTaskSwitchContext+0x7c>)
   82692:	681b      	ldr	r3, [r3, #0]
   82694:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82698:	4a0a      	ldr	r2, [pc, #40]	; (826c4 <vTaskSwitchContext+0x80>)
   8269a:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8269e:	685a      	ldr	r2, [r3, #4]
   826a0:	6852      	ldr	r2, [r2, #4]
   826a2:	605a      	str	r2, [r3, #4]
   826a4:	f103 0108 	add.w	r1, r3, #8
   826a8:	428a      	cmp	r2, r1
   826aa:	bf04      	itt	eq
   826ac:	6852      	ldreq	r2, [r2, #4]
   826ae:	605a      	streq	r2, [r3, #4]
   826b0:	685b      	ldr	r3, [r3, #4]
   826b2:	68da      	ldr	r2, [r3, #12]
   826b4:	4b06      	ldr	r3, [pc, #24]	; (826d0 <vTaskSwitchContext+0x8c>)
   826b6:	601a      	str	r2, [r3, #0]
   826b8:	bd08      	pop	{r3, pc}
   826ba:	bf00      	nop
   826bc:	2007a790 	.word	0x2007a790
   826c0:	2007a728 	.word	0x2007a728
   826c4:	2007a72c 	.word	0x2007a72c
   826c8:	2007a7d0 	.word	0x2007a7d0
   826cc:	000817f1 	.word	0x000817f1
   826d0:	2007a794 	.word	0x2007a794

000826d4 <vTaskPlaceOnEventList>:
	}
}
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( const xList * const pxEventList, portTickType xTicksToWait )
{
   826d4:	b538      	push	{r3, r4, r5, lr}
   826d6:	460c      	mov	r4, r1
portTickType xTimeToWake;

	configASSERT( pxEventList );
   826d8:	b918      	cbnz	r0, 826e2 <vTaskPlaceOnEventList+0xe>
   826da:	4b0e      	ldr	r3, [pc, #56]	; (82714 <vTaskPlaceOnEventList+0x40>)
   826dc:	4798      	blx	r3
   826de:	bf00      	nop
   826e0:	e7fd      	b.n	826de <vTaskPlaceOnEventList+0xa>
	SCHEDULER SUSPENDED. */

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event. */
	vListInsert( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   826e2:	4d0d      	ldr	r5, [pc, #52]	; (82718 <vTaskPlaceOnEventList+0x44>)
   826e4:	6829      	ldr	r1, [r5, #0]
   826e6:	3118      	adds	r1, #24
   826e8:	4b0c      	ldr	r3, [pc, #48]	; (8271c <vTaskPlaceOnEventList+0x48>)
   826ea:	4798      	blx	r3

	/* We must remove ourselves from the ready list before adding ourselves
	to the blocked list as the same list item is used for both lists.  We have
	exclusive access to the ready lists as the scheduler is locked. */
	if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   826ec:	6828      	ldr	r0, [r5, #0]
   826ee:	3004      	adds	r0, #4
   826f0:	4b0b      	ldr	r3, [pc, #44]	; (82720 <vTaskPlaceOnEventList+0x4c>)
   826f2:	4798      	blx	r3
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( xTicksToWait == portMAX_DELAY )
   826f4:	f1b4 3fff 	cmp.w	r4, #4294967295
   826f8:	d105      	bne.n	82706 <vTaskPlaceOnEventList+0x32>
		{
			/* Add ourselves to the suspended task list instead of a delayed task
			list to ensure we are not woken by a timing event.  We will block
			indefinitely. */
			vListInsertEnd( ( xList * ) &xSuspendedTaskList, ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) );
   826fa:	6829      	ldr	r1, [r5, #0]
   826fc:	4809      	ldr	r0, [pc, #36]	; (82724 <vTaskPlaceOnEventList+0x50>)
   826fe:	3104      	adds	r1, #4
   82700:	4b09      	ldr	r3, [pc, #36]	; (82728 <vTaskPlaceOnEventList+0x54>)
   82702:	4798      	blx	r3
   82704:	bd38      	pop	{r3, r4, r5, pc}
		}
		else
		{
			/* Calculate the time at which the task should be woken if the event does
			not occur.  This may overflow but this doesn't matter. */
			xTimeToWake = xTickCount + xTicksToWait;
   82706:	4b09      	ldr	r3, [pc, #36]	; (8272c <vTaskPlaceOnEventList+0x58>)
   82708:	6818      	ldr	r0, [r3, #0]
			prvAddCurrentTaskToDelayedList( xTimeToWake );
   8270a:	4420      	add	r0, r4
   8270c:	4b08      	ldr	r3, [pc, #32]	; (82730 <vTaskPlaceOnEventList+0x5c>)
   8270e:	4798      	blx	r3
   82710:	bd38      	pop	{r3, r4, r5, pc}
   82712:	bf00      	nop
   82714:	000817f1 	.word	0x000817f1
   82718:	2007a794 	.word	0x2007a794
   8271c:	0008172d 	.word	0x0008172d
   82720:	00081769 	.word	0x00081769
   82724:	2007a6e0 	.word	0x2007a6e0
   82728:	00081711 	.word	0x00081711
   8272c:	2007a7b0 	.word	0x2007a7b0
   82730:	00082011 	.word	0x00082011

00082734 <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if configUSE_TIMERS == 1

	void vTaskPlaceOnEventListRestricted( const xList * const pxEventList, portTickType xTicksToWait )
	{
   82734:	b538      	push	{r3, r4, r5, lr}
   82736:	460d      	mov	r5, r1
	portTickType xTimeToWake;

		configASSERT( pxEventList );
   82738:	b918      	cbnz	r0, 82742 <vTaskPlaceOnEventListRestricted+0xe>
   8273a:	4b09      	ldr	r3, [pc, #36]	; (82760 <vTaskPlaceOnEventListRestricted+0x2c>)
   8273c:	4798      	blx	r3
   8273e:	bf00      	nop
   82740:	e7fd      	b.n	8273e <vTaskPlaceOnEventListRestricted+0xa>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( ( xList * ) pxEventList, ( xListItem * ) &( pxCurrentTCB->xEventListItem ) );
   82742:	4c08      	ldr	r4, [pc, #32]	; (82764 <vTaskPlaceOnEventListRestricted+0x30>)
   82744:	6821      	ldr	r1, [r4, #0]
   82746:	3118      	adds	r1, #24
   82748:	4b07      	ldr	r3, [pc, #28]	; (82768 <vTaskPlaceOnEventListRestricted+0x34>)
   8274a:	4798      	blx	r3

		/* We must remove this task from the ready list before adding it to the
		blocked list as the same list item is used for both lists.  This
		function is called form a critical section. */
		if( uxListRemove( ( xListItem * ) &( pxCurrentTCB->xGenericListItem ) ) == 0 )
   8274c:	6820      	ldr	r0, [r4, #0]
   8274e:	3004      	adds	r0, #4
   82750:	4b06      	ldr	r3, [pc, #24]	; (8276c <vTaskPlaceOnEventListRestricted+0x38>)
   82752:	4798      	blx	r3
			portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority );
		}

		/* Calculate the time at which the task should be woken if the event does
		not occur.  This may overflow but this doesn't matter. */
		xTimeToWake = xTickCount + xTicksToWait;
   82754:	4b06      	ldr	r3, [pc, #24]	; (82770 <vTaskPlaceOnEventListRestricted+0x3c>)
   82756:	6818      	ldr	r0, [r3, #0]
		
		traceTASK_DELAY_UNTIL();
		prvAddCurrentTaskToDelayedList( xTimeToWake );
   82758:	4428      	add	r0, r5
   8275a:	4b06      	ldr	r3, [pc, #24]	; (82774 <vTaskPlaceOnEventListRestricted+0x40>)
   8275c:	4798      	blx	r3
   8275e:	bd38      	pop	{r3, r4, r5, pc}
   82760:	000817f1 	.word	0x000817f1
   82764:	2007a794 	.word	0x2007a794
   82768:	00081711 	.word	0x00081711
   8276c:	00081769 	.word	0x00081769
   82770:	2007a7b0 	.word	0x2007a7b0
   82774:	00082011 	.word	0x00082011

00082778 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

signed portBASE_TYPE xTaskRemoveFromEventList( const xList * const pxEventList )
{
   82778:	b538      	push	{r3, r4, r5, lr}
	get called - the lock count on the queue will get modified instead.  This
	means we can always expect exclusive access to the event list here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = ( tskTCB * ) listGET_OWNER_OF_HEAD_ENTRY( pxEventList );
   8277a:	68c3      	ldr	r3, [r0, #12]
   8277c:	68dc      	ldr	r4, [r3, #12]
	configASSERT( pxUnblockedTCB );
   8277e:	b91c      	cbnz	r4, 82788 <xTaskRemoveFromEventList+0x10>
   82780:	4b16      	ldr	r3, [pc, #88]	; (827dc <xTaskRemoveFromEventList+0x64>)
   82782:	4798      	blx	r3
   82784:	bf00      	nop
   82786:	e7fd      	b.n	82784 <xTaskRemoveFromEventList+0xc>
	uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
   82788:	f104 0518 	add.w	r5, r4, #24
   8278c:	4628      	mov	r0, r5
   8278e:	4b14      	ldr	r3, [pc, #80]	; (827e0 <xTaskRemoveFromEventList+0x68>)
   82790:	4798      	blx	r3

	if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   82792:	4b14      	ldr	r3, [pc, #80]	; (827e4 <xTaskRemoveFromEventList+0x6c>)
   82794:	681b      	ldr	r3, [r3, #0]
   82796:	b99b      	cbnz	r3, 827c0 <xTaskRemoveFromEventList+0x48>
	{
		uxListRemove( &( pxUnblockedTCB->xGenericListItem ) );
   82798:	1d25      	adds	r5, r4, #4
   8279a:	4628      	mov	r0, r5
   8279c:	4b10      	ldr	r3, [pc, #64]	; (827e0 <xTaskRemoveFromEventList+0x68>)
   8279e:	4798      	blx	r3
		prvAddTaskToReadyQueue( pxUnblockedTCB );
   827a0:	6ae3      	ldr	r3, [r4, #44]	; 0x2c
   827a2:	4a11      	ldr	r2, [pc, #68]	; (827e8 <xTaskRemoveFromEventList+0x70>)
   827a4:	6812      	ldr	r2, [r2, #0]
   827a6:	4293      	cmp	r3, r2
   827a8:	bf84      	itt	hi
   827aa:	4a0f      	ldrhi	r2, [pc, #60]	; (827e8 <xTaskRemoveFromEventList+0x70>)
   827ac:	6013      	strhi	r3, [r2, #0]
   827ae:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   827b2:	480e      	ldr	r0, [pc, #56]	; (827ec <xTaskRemoveFromEventList+0x74>)
   827b4:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   827b8:	4629      	mov	r1, r5
   827ba:	4b0d      	ldr	r3, [pc, #52]	; (827f0 <xTaskRemoveFromEventList+0x78>)
   827bc:	4798      	blx	r3
   827be:	e003      	b.n	827c8 <xTaskRemoveFromEventList+0x50>
	}
	else
	{
		/* We cannot access the delayed or ready lists, so will hold this
		task pending until the scheduler is resumed. */
		vListInsertEnd( ( xList * ) &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
   827c0:	480c      	ldr	r0, [pc, #48]	; (827f4 <xTaskRemoveFromEventList+0x7c>)
   827c2:	4629      	mov	r1, r5
   827c4:	4b0a      	ldr	r3, [pc, #40]	; (827f0 <xTaskRemoveFromEventList+0x78>)
   827c6:	4798      	blx	r3
	}

	if( pxUnblockedTCB->uxPriority >= pxCurrentTCB->uxPriority )
   827c8:	4b0b      	ldr	r3, [pc, #44]	; (827f8 <xTaskRemoveFromEventList+0x80>)
   827ca:	681b      	ldr	r3, [r3, #0]
   827cc:	6ae0      	ldr	r0, [r4, #44]	; 0x2c
   827ce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
	{
		xReturn = pdFALSE;
	}

	return xReturn;
}
   827d0:	4298      	cmp	r0, r3
   827d2:	bf34      	ite	cc
   827d4:	2000      	movcc	r0, #0
   827d6:	2001      	movcs	r0, #1
   827d8:	bd38      	pop	{r3, r4, r5, pc}
   827da:	bf00      	nop
   827dc:	000817f1 	.word	0x000817f1
   827e0:	00081769 	.word	0x00081769
   827e4:	2007a790 	.word	0x2007a790
   827e8:	2007a728 	.word	0x2007a728
   827ec:	2007a72c 	.word	0x2007a72c
   827f0:	00081711 	.word	0x00081711
   827f4:	2007a798 	.word	0x2007a798
   827f8:	2007a794 	.word	0x2007a794

000827fc <vTaskSetTimeOutState>:
/*-----------------------------------------------------------*/

void vTaskSetTimeOutState( xTimeOutType * const pxTimeOut )
{
   827fc:	b508      	push	{r3, lr}
	configASSERT( pxTimeOut );
   827fe:	b918      	cbnz	r0, 82808 <vTaskSetTimeOutState+0xc>
   82800:	4b05      	ldr	r3, [pc, #20]	; (82818 <vTaskSetTimeOutState+0x1c>)
   82802:	4798      	blx	r3
   82804:	bf00      	nop
   82806:	e7fd      	b.n	82804 <vTaskSetTimeOutState+0x8>
	pxTimeOut->xOverflowCount = xNumOfOverflows;
   82808:	4a04      	ldr	r2, [pc, #16]	; (8281c <vTaskSetTimeOutState+0x20>)
   8280a:	6812      	ldr	r2, [r2, #0]
   8280c:	6002      	str	r2, [r0, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
   8280e:	4a04      	ldr	r2, [pc, #16]	; (82820 <vTaskSetTimeOutState+0x24>)
   82810:	6812      	ldr	r2, [r2, #0]
   82812:	6042      	str	r2, [r0, #4]
   82814:	bd08      	pop	{r3, pc}
   82816:	bf00      	nop
   82818:	000817f1 	.word	0x000817f1
   8281c:	2007a7ac 	.word	0x2007a7ac
   82820:	2007a7b0 	.word	0x2007a7b0

00082824 <xTaskCheckForTimeOut>:
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTaskCheckForTimeOut( xTimeOutType * const pxTimeOut, portTickType * const pxTicksToWait )
{
   82824:	b538      	push	{r3, r4, r5, lr}
   82826:	460d      	mov	r5, r1
portBASE_TYPE xReturn;

	configASSERT( pxTimeOut );
   82828:	4604      	mov	r4, r0
   8282a:	b918      	cbnz	r0, 82834 <xTaskCheckForTimeOut+0x10>
   8282c:	4b18      	ldr	r3, [pc, #96]	; (82890 <xTaskCheckForTimeOut+0x6c>)
   8282e:	4798      	blx	r3
   82830:	bf00      	nop
   82832:	e7fd      	b.n	82830 <xTaskCheckForTimeOut+0xc>
	configASSERT( pxTicksToWait );
   82834:	b919      	cbnz	r1, 8283e <xTaskCheckForTimeOut+0x1a>
   82836:	4b16      	ldr	r3, [pc, #88]	; (82890 <xTaskCheckForTimeOut+0x6c>)
   82838:	4798      	blx	r3
   8283a:	bf00      	nop
   8283c:	e7fd      	b.n	8283a <xTaskCheckForTimeOut+0x16>

	taskENTER_CRITICAL();
   8283e:	4b15      	ldr	r3, [pc, #84]	; (82894 <xTaskCheckForTimeOut+0x70>)
   82840:	4798      	blx	r3
	{
		#if ( INCLUDE_vTaskSuspend == 1 )
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
   82842:	682b      	ldr	r3, [r5, #0]
   82844:	f1b3 3fff 	cmp.w	r3, #4294967295
   82848:	d019      	beq.n	8287e <xTaskCheckForTimeOut+0x5a>
				xReturn = pdFALSE;
			}
			else /* We are not blocking indefinitely, perform the checks below. */
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( ( portTickType ) xTickCount >= ( portTickType ) pxTimeOut->xTimeOnEntering ) )
   8284a:	4a13      	ldr	r2, [pc, #76]	; (82898 <xTaskCheckForTimeOut+0x74>)
   8284c:	6811      	ldr	r1, [r2, #0]
   8284e:	6822      	ldr	r2, [r4, #0]
   82850:	428a      	cmp	r2, r1
   82852:	d004      	beq.n	8285e <xTaskCheckForTimeOut+0x3a>
   82854:	4a11      	ldr	r2, [pc, #68]	; (8289c <xTaskCheckForTimeOut+0x78>)
   82856:	6811      	ldr	r1, [r2, #0]
   82858:	6862      	ldr	r2, [r4, #4]
   8285a:	428a      	cmp	r2, r1
   8285c:	d911      	bls.n	82882 <xTaskCheckForTimeOut+0x5e>
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
		}
		else if( ( ( portTickType ) ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering ) ) < ( portTickType ) *pxTicksToWait )
   8285e:	4a0f      	ldr	r2, [pc, #60]	; (8289c <xTaskCheckForTimeOut+0x78>)
   82860:	6811      	ldr	r1, [r2, #0]
   82862:	6862      	ldr	r2, [r4, #4]
   82864:	1a89      	subs	r1, r1, r2
   82866:	428b      	cmp	r3, r1
   82868:	d90d      	bls.n	82886 <xTaskCheckForTimeOut+0x62>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= ( ( portTickType ) xTickCount - ( portTickType ) pxTimeOut->xTimeOnEntering );
   8286a:	490c      	ldr	r1, [pc, #48]	; (8289c <xTaskCheckForTimeOut+0x78>)
   8286c:	6809      	ldr	r1, [r1, #0]
   8286e:	1a52      	subs	r2, r2, r1
   82870:	4413      	add	r3, r2
   82872:	602b      	str	r3, [r5, #0]
			vTaskSetTimeOutState( pxTimeOut );
   82874:	4620      	mov	r0, r4
   82876:	4b0a      	ldr	r3, [pc, #40]	; (828a0 <xTaskCheckForTimeOut+0x7c>)
   82878:	4798      	blx	r3
			xReturn = pdFALSE;
   8287a:	2400      	movs	r4, #0
   8287c:	e004      	b.n	82888 <xTaskCheckForTimeOut+0x64>
			/* If INCLUDE_vTaskSuspend is set to 1 and the block time specified is
			the maximum block time then the task should block indefinitely, and
			therefore never time out. */
			if( *pxTicksToWait == portMAX_DELAY )
			{
				xReturn = pdFALSE;
   8287e:	2400      	movs	r4, #0
   82880:	e002      	b.n	82888 <xTaskCheckForTimeOut+0x64>
		{
			/* The tick count is greater than the time at which vTaskSetTimeout()
			was called, but has also overflowed since vTaskSetTimeOut() was called.
			It must have wrapped all the way around and gone past us again. This
			passed since vTaskSetTimeout() was called. */
			xReturn = pdTRUE;
   82882:	2401      	movs	r4, #1
   82884:	e000      	b.n	82888 <xTaskCheckForTimeOut+0x64>
			vTaskSetTimeOutState( pxTimeOut );
			xReturn = pdFALSE;
		}
		else
		{
			xReturn = pdTRUE;
   82886:	2401      	movs	r4, #1
		}
	}
	taskEXIT_CRITICAL();
   82888:	4b06      	ldr	r3, [pc, #24]	; (828a4 <xTaskCheckForTimeOut+0x80>)
   8288a:	4798      	blx	r3

	return xReturn;
}
   8288c:	4620      	mov	r0, r4
   8288e:	bd38      	pop	{r3, r4, r5, pc}
   82890:	000817f1 	.word	0x000817f1
   82894:	00081801 	.word	0x00081801
   82898:	2007a7ac 	.word	0x2007a7ac
   8289c:	2007a7b0 	.word	0x2007a7b0
   828a0:	000827fd 	.word	0x000827fd
   828a4:	00081821 	.word	0x00081821

000828a8 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
	xMissedYield = pdTRUE;
   828a8:	2201      	movs	r2, #1
   828aa:	4b01      	ldr	r3, [pc, #4]	; (828b0 <vTaskMissedYield+0x8>)
   828ac:	601a      	str	r2, [r3, #0]
   828ae:	4770      	bx	lr
   828b0:	2007a7d0 	.word	0x2007a7d0

000828b4 <xTaskGetCurrentTaskHandle>:
	xTaskHandle xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
   828b4:	4b01      	ldr	r3, [pc, #4]	; (828bc <xTaskGetCurrentTaskHandle+0x8>)
   828b6:	6818      	ldr	r0, [r3, #0]

		return xReturn;
	}
   828b8:	4770      	bx	lr
   828ba:	bf00      	nop
   828bc:	2007a794 	.word	0x2007a794

000828c0 <xTaskGetSchedulerState>:

	portBASE_TYPE xTaskGetSchedulerState( void )
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
   828c0:	4b05      	ldr	r3, [pc, #20]	; (828d8 <xTaskGetSchedulerState+0x18>)
   828c2:	681b      	ldr	r3, [r3, #0]
   828c4:	b133      	cbz	r3, 828d4 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
		}
		else
		{
			if( uxSchedulerSuspended == ( unsigned portBASE_TYPE ) pdFALSE )
   828c6:	4b05      	ldr	r3, [pc, #20]	; (828dc <xTaskGetSchedulerState+0x1c>)
   828c8:	681b      	ldr	r3, [r3, #0]
			{
				xReturn = taskSCHEDULER_RUNNING;
   828ca:	2b00      	cmp	r3, #0
   828cc:	bf14      	ite	ne
   828ce:	2002      	movne	r0, #2
   828d0:	2001      	moveq	r0, #1
   828d2:	4770      	bx	lr
	{
	portBASE_TYPE xReturn;

		if( xSchedulerRunning == pdFALSE )
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
   828d4:	2000      	movs	r0, #0
				xReturn = taskSCHEDULER_SUSPENDED;
			}
		}

		return xReturn;
	}
   828d6:	4770      	bx	lr
   828d8:	2007a6f8 	.word	0x2007a6f8
   828dc:	2007a790 	.word	0x2007a790

000828e0 <vTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityInherit( xTaskHandle * const pxMutexHolder )
	{
   828e0:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL. */
		if( pxMutexHolder != NULL )
   828e2:	4604      	mov	r4, r0
   828e4:	2800      	cmp	r0, #0
   828e6:	d02e      	beq.n	82946 <vTaskPriorityInherit+0x66>
		{
			if( pxTCB->uxPriority < pxCurrentTCB->uxPriority )
   828e8:	6ac3      	ldr	r3, [r0, #44]	; 0x2c
   828ea:	4a17      	ldr	r2, [pc, #92]	; (82948 <vTaskPriorityInherit+0x68>)
   828ec:	6812      	ldr	r2, [r2, #0]
   828ee:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   828f0:	4293      	cmp	r3, r2
   828f2:	d228      	bcs.n	82946 <vTaskPriorityInherit+0x66>
			{
				/* Adjust the mutex holder state to account for its new priority. */
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxCurrentTCB->uxPriority );
   828f4:	4a14      	ldr	r2, [pc, #80]	; (82948 <vTaskPriorityInherit+0x68>)
   828f6:	6812      	ldr	r2, [r2, #0]
   828f8:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
   828fa:	f1c2 0205 	rsb	r2, r2, #5
   828fe:	6182      	str	r2, [r0, #24]

				/* If the task being modified is in the ready state it will need to
				be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxTCB->uxPriority ] ), &( pxTCB->xGenericListItem ) ) != pdFALSE )
   82900:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82904:	4a11      	ldr	r2, [pc, #68]	; (8294c <vTaskPriorityInherit+0x6c>)
   82906:	eb02 0383 	add.w	r3, r2, r3, lsl #2
   8290a:	6942      	ldr	r2, [r0, #20]
   8290c:	429a      	cmp	r2, r3
   8290e:	d116      	bne.n	8293e <vTaskPriorityInherit+0x5e>
				{
					if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   82910:	1d05      	adds	r5, r0, #4
   82912:	4628      	mov	r0, r5
   82914:	4b0e      	ldr	r3, [pc, #56]	; (82950 <vTaskPriorityInherit+0x70>)
   82916:	4798      	blx	r3
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
					}

					/* Inherit the priority before being moved into the new list. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   82918:	4b0b      	ldr	r3, [pc, #44]	; (82948 <vTaskPriorityInherit+0x68>)
   8291a:	681b      	ldr	r3, [r3, #0]
   8291c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   8291e:	62e3      	str	r3, [r4, #44]	; 0x2c
					prvAddTaskToReadyQueue( pxTCB );
   82920:	4a0c      	ldr	r2, [pc, #48]	; (82954 <vTaskPriorityInherit+0x74>)
   82922:	6812      	ldr	r2, [r2, #0]
   82924:	4293      	cmp	r3, r2
   82926:	bf84      	itt	hi
   82928:	4a0a      	ldrhi	r2, [pc, #40]	; (82954 <vTaskPriorityInherit+0x74>)
   8292a:	6013      	strhi	r3, [r2, #0]
   8292c:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   82930:	4806      	ldr	r0, [pc, #24]	; (8294c <vTaskPriorityInherit+0x6c>)
   82932:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82936:	4629      	mov	r1, r5
   82938:	4b07      	ldr	r3, [pc, #28]	; (82958 <vTaskPriorityInherit+0x78>)
   8293a:	4798      	blx	r3
   8293c:	bd38      	pop	{r3, r4, r5, pc}
				}
				else
				{
					/* Just inherit the priority. */
					pxTCB->uxPriority = pxCurrentTCB->uxPriority;
   8293e:	4b02      	ldr	r3, [pc, #8]	; (82948 <vTaskPriorityInherit+0x68>)
   82940:	681b      	ldr	r3, [r3, #0]
   82942:	6adb      	ldr	r3, [r3, #44]	; 0x2c
   82944:	62c3      	str	r3, [r0, #44]	; 0x2c
   82946:	bd38      	pop	{r3, r4, r5, pc}
   82948:	2007a794 	.word	0x2007a794
   8294c:	2007a72c 	.word	0x2007a72c
   82950:	00081769 	.word	0x00081769
   82954:	2007a728 	.word	0x2007a728
   82958:	00081711 	.word	0x00081711

0008295c <vTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinherit( xTaskHandle * const pxMutexHolder )
	{
   8295c:	b538      	push	{r3, r4, r5, lr}
	tskTCB * const pxTCB = ( tskTCB * ) pxMutexHolder;

		if( pxMutexHolder != NULL )
   8295e:	4604      	mov	r4, r0
   82960:	b1d0      	cbz	r0, 82998 <vTaskPriorityDisinherit+0x3c>
		{
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
   82962:	6ac2      	ldr	r2, [r0, #44]	; 0x2c
   82964:	6c83      	ldr	r3, [r0, #72]	; 0x48
   82966:	429a      	cmp	r2, r3
   82968:	d016      	beq.n	82998 <vTaskPriorityDisinherit+0x3c>
			{
				/* We must be the running task to be able to give the mutex back.
				Remove ourselves from the ready list we currently appear in. */
				if( uxListRemove( ( xListItem * ) &( pxTCB->xGenericListItem ) ) == 0 )
   8296a:	1d05      	adds	r5, r0, #4
   8296c:	4628      	mov	r0, r5
   8296e:	4b0b      	ldr	r3, [pc, #44]	; (8299c <vTaskPriorityDisinherit+0x40>)
   82970:	4798      	blx	r3
				}

				/* Disinherit the priority before adding the task into the new
				ready list. */
				traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
				pxTCB->uxPriority = pxTCB->uxBasePriority;
   82972:	6ca3      	ldr	r3, [r4, #72]	; 0x48
   82974:	62e3      	str	r3, [r4, #44]	; 0x2c
				listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), configMAX_PRIORITIES - ( portTickType ) pxTCB->uxPriority );
   82976:	f1c3 0205 	rsb	r2, r3, #5
   8297a:	61a2      	str	r2, [r4, #24]
				prvAddTaskToReadyQueue( pxTCB );
   8297c:	4a08      	ldr	r2, [pc, #32]	; (829a0 <vTaskPriorityDisinherit+0x44>)
   8297e:	6812      	ldr	r2, [r2, #0]
   82980:	4293      	cmp	r3, r2
   82982:	bf84      	itt	hi
   82984:	4a06      	ldrhi	r2, [pc, #24]	; (829a0 <vTaskPriorityDisinherit+0x44>)
   82986:	6013      	strhi	r3, [r2, #0]
   82988:	eb03 0383 	add.w	r3, r3, r3, lsl #2
   8298c:	4805      	ldr	r0, [pc, #20]	; (829a4 <vTaskPriorityDisinherit+0x48>)
   8298e:	eb00 0083 	add.w	r0, r0, r3, lsl #2
   82992:	4629      	mov	r1, r5
   82994:	4b04      	ldr	r3, [pc, #16]	; (829a8 <vTaskPriorityDisinherit+0x4c>)
   82996:	4798      	blx	r3
   82998:	bd38      	pop	{r3, r4, r5, pc}
   8299a:	bf00      	nop
   8299c:	00081769 	.word	0x00081769
   829a0:	2007a728 	.word	0x2007a728
   829a4:	2007a72c 	.word	0x2007a72c
   829a8:	00081711 	.word	0x00081711

000829ac <prvInsertTimerInActiveList>:
	return xTimeNow;
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
   829ac:	b510      	push	{r4, lr}
   829ae:	4604      	mov	r4, r0
portBASE_TYPE xProcessTimerNow = pdFALSE;

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
   829b0:	6041      	str	r1, [r0, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   829b2:	6120      	str	r0, [r4, #16]

	if( xNextExpiryTime <= xTimeNow )
   829b4:	4291      	cmp	r1, r2
   829b6:	d80a      	bhi.n	829ce <prvInsertTimerInActiveList+0x22>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
   829b8:	1ad2      	subs	r2, r2, r3
   829ba:	6981      	ldr	r1, [r0, #24]
   829bc:	428a      	cmp	r2, r1
   829be:	d211      	bcs.n	829e4 <prvInsertTimerInActiveList+0x38>
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
   829c0:	4b0a      	ldr	r3, [pc, #40]	; (829ec <prvInsertTimerInActiveList+0x40>)
   829c2:	6818      	ldr	r0, [r3, #0]
   829c4:	1d21      	adds	r1, r4, #4
   829c6:	4b0a      	ldr	r3, [pc, #40]	; (829f0 <prvInsertTimerInActiveList+0x44>)
   829c8:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   829ca:	2000      	movs	r0, #0
   829cc:	bd10      	pop	{r4, pc}
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
   829ce:	429a      	cmp	r2, r3
   829d0:	d201      	bcs.n	829d6 <prvInsertTimerInActiveList+0x2a>
   829d2:	4299      	cmp	r1, r3
   829d4:	d208      	bcs.n	829e8 <prvInsertTimerInActiveList+0x3c>
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   829d6:	4b07      	ldr	r3, [pc, #28]	; (829f4 <prvInsertTimerInActiveList+0x48>)
   829d8:	6818      	ldr	r0, [r3, #0]
   829da:	1d21      	adds	r1, r4, #4
   829dc:	4b04      	ldr	r3, [pc, #16]	; (829f0 <prvInsertTimerInActiveList+0x44>)
   829de:	4798      	blx	r3
}
/*-----------------------------------------------------------*/

static portBASE_TYPE prvInsertTimerInActiveList( xTIMER *pxTimer, portTickType xNextExpiryTime, portTickType xTimeNow, portTickType xCommandTime )
{
portBASE_TYPE xProcessTimerNow = pdFALSE;
   829e0:	2000      	movs	r0, #0
   829e2:	bd10      	pop	{r4, pc}
		timer was issued, and the time the command was processed? */
		if( ( ( portTickType ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks )
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
   829e4:	2001      	movs	r0, #1
   829e6:	bd10      	pop	{r4, pc}
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
   829e8:	2001      	movs	r0, #1
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
		}
	}

	return xProcessTimerNow;
}
   829ea:	bd10      	pop	{r4, pc}
   829ec:	2007a810 	.word	0x2007a810
   829f0:	0008172d 	.word	0x0008172d
   829f4:	2007a7dc 	.word	0x2007a7dc

000829f8 <prvCheckForValidListAndQueue>:
	pxOverflowTimerList = pxTemp;
}
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
   829f8:	b570      	push	{r4, r5, r6, lr}
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
   829fa:	4b0d      	ldr	r3, [pc, #52]	; (82a30 <prvCheckForValidListAndQueue+0x38>)
   829fc:	4798      	blx	r3
	{
		if( xTimerQueue == NULL )
   829fe:	4b0d      	ldr	r3, [pc, #52]	; (82a34 <prvCheckForValidListAndQueue+0x3c>)
   82a00:	681b      	ldr	r3, [r3, #0]
   82a02:	b98b      	cbnz	r3, 82a28 <prvCheckForValidListAndQueue+0x30>
		{
			vListInitialise( &xActiveTimerList1 );
   82a04:	4d0c      	ldr	r5, [pc, #48]	; (82a38 <prvCheckForValidListAndQueue+0x40>)
   82a06:	4628      	mov	r0, r5
   82a08:	4e0c      	ldr	r6, [pc, #48]	; (82a3c <prvCheckForValidListAndQueue+0x44>)
   82a0a:	47b0      	blx	r6
			vListInitialise( &xActiveTimerList2 );
   82a0c:	4c0c      	ldr	r4, [pc, #48]	; (82a40 <prvCheckForValidListAndQueue+0x48>)
   82a0e:	4620      	mov	r0, r4
   82a10:	47b0      	blx	r6
			pxCurrentTimerList = &xActiveTimerList1;
   82a12:	4b0c      	ldr	r3, [pc, #48]	; (82a44 <prvCheckForValidListAndQueue+0x4c>)
   82a14:	601d      	str	r5, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
   82a16:	4b0c      	ldr	r3, [pc, #48]	; (82a48 <prvCheckForValidListAndQueue+0x50>)
   82a18:	601c      	str	r4, [r3, #0]
			xTimerQueue = xQueueCreate( ( unsigned portBASE_TYPE ) configTIMER_QUEUE_LENGTH, sizeof( xTIMER_MESSAGE ) );
   82a1a:	2005      	movs	r0, #5
   82a1c:	210c      	movs	r1, #12
   82a1e:	2200      	movs	r2, #0
   82a20:	4b0a      	ldr	r3, [pc, #40]	; (82a4c <prvCheckForValidListAndQueue+0x54>)
   82a22:	4798      	blx	r3
   82a24:	4b03      	ldr	r3, [pc, #12]	; (82a34 <prvCheckForValidListAndQueue+0x3c>)
   82a26:	6018      	str	r0, [r3, #0]
		}
	}
	taskEXIT_CRITICAL();
   82a28:	4b09      	ldr	r3, [pc, #36]	; (82a50 <prvCheckForValidListAndQueue+0x58>)
   82a2a:	4798      	blx	r3
   82a2c:	bd70      	pop	{r4, r5, r6, pc}
   82a2e:	bf00      	nop
   82a30:	00081801 	.word	0x00081801
   82a34:	2007a80c 	.word	0x2007a80c
   82a38:	2007a7e0 	.word	0x2007a7e0
   82a3c:	000816f1 	.word	0x000816f1
   82a40:	2007a7f4 	.word	0x2007a7f4
   82a44:	2007a7dc 	.word	0x2007a7dc
   82a48:	2007a810 	.word	0x2007a810
   82a4c:	00081bd9 	.word	0x00081bd9
   82a50:	00081821 	.word	0x00081821

00082a54 <xTimerCreateTimerTask>:
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty ) PRIVILEGED_FUNCTION;

/*-----------------------------------------------------------*/

portBASE_TYPE xTimerCreateTimerTask( void )
{
   82a54:	b510      	push	{r4, lr}
   82a56:	b084      	sub	sp, #16

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
   82a58:	4b0b      	ldr	r3, [pc, #44]	; (82a88 <xTimerCreateTimerTask+0x34>)
   82a5a:	4798      	blx	r3

	if( xTimerQueue != NULL )
   82a5c:	4b0b      	ldr	r3, [pc, #44]	; (82a8c <xTimerCreateTimerTask+0x38>)
   82a5e:	681b      	ldr	r3, [r3, #0]
   82a60:	b163      	cbz	r3, 82a7c <xTimerCreateTimerTask+0x28>
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, &xTimerTaskHandle );
		}
		#else
		{
			/* Create the timer task without storing its handle. */
			xReturn = xTaskCreate( prvTimerTask, ( const signed char * ) "Tmr Svc", ( unsigned short ) configTIMER_TASK_STACK_DEPTH, NULL, ( ( unsigned portBASE_TYPE ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT, NULL);
   82a62:	2304      	movs	r3, #4
   82a64:	9300      	str	r3, [sp, #0]
   82a66:	2300      	movs	r3, #0
   82a68:	9301      	str	r3, [sp, #4]
   82a6a:	9302      	str	r3, [sp, #8]
   82a6c:	9303      	str	r3, [sp, #12]
   82a6e:	4808      	ldr	r0, [pc, #32]	; (82a90 <xTimerCreateTimerTask+0x3c>)
   82a70:	4908      	ldr	r1, [pc, #32]	; (82a94 <xTimerCreateTimerTask+0x40>)
   82a72:	f44f 7282 	mov.w	r2, #260	; 0x104
   82a76:	4c08      	ldr	r4, [pc, #32]	; (82a98 <xTimerCreateTimerTask+0x44>)
   82a78:	47a0      	blx	r4
		}
		#endif
	}

	configASSERT( xReturn );
   82a7a:	b918      	cbnz	r0, 82a84 <xTimerCreateTimerTask+0x30>
   82a7c:	4b07      	ldr	r3, [pc, #28]	; (82a9c <xTimerCreateTimerTask+0x48>)
   82a7e:	4798      	blx	r3
   82a80:	bf00      	nop
   82a82:	e7fd      	b.n	82a80 <xTimerCreateTimerTask+0x2c>
	return xReturn;
}
   82a84:	b004      	add	sp, #16
   82a86:	bd10      	pop	{r4, pc}
   82a88:	000829f9 	.word	0x000829f9
   82a8c:	2007a80c 	.word	0x2007a80c
   82a90:	00082ba9 	.word	0x00082ba9
   82a94:	00083170 	.word	0x00083170
   82a98:	00082069 	.word	0x00082069
   82a9c:	000817f1 	.word	0x000817f1

00082aa0 <xTimerGenericCommand>:
	return ( xTimerHandle ) pxNewTimer;
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
   82aa0:	b510      	push	{r4, lr}
   82aa2:	b084      	sub	sp, #16
portBASE_TYPE xReturn = pdFAIL;
xTIMER_MESSAGE xMessage;

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
   82aa4:	4c0f      	ldr	r4, [pc, #60]	; (82ae4 <xTimerGenericCommand+0x44>)
   82aa6:	6824      	ldr	r4, [r4, #0]
   82aa8:	b1c4      	cbz	r4, 82adc <xTimerGenericCommand+0x3c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
   82aaa:	9101      	str	r1, [sp, #4]
		xMessage.xMessageValue = xOptionalValue;
   82aac:	9202      	str	r2, [sp, #8]
		xMessage.pxTimer = ( xTIMER * ) xTimer;
   82aae:	9003      	str	r0, [sp, #12]

		if( pxHigherPriorityTaskWoken == NULL )
   82ab0:	b96b      	cbnz	r3, 82ace <xTimerGenericCommand+0x2e>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
   82ab2:	4b0d      	ldr	r3, [pc, #52]	; (82ae8 <xTimerGenericCommand+0x48>)
   82ab4:	4798      	blx	r3
   82ab6:	2801      	cmp	r0, #1
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xBlockTime );
   82ab8:	4b0a      	ldr	r3, [pc, #40]	; (82ae4 <xTimerGenericCommand+0x44>)
   82aba:	6818      	ldr	r0, [r3, #0]
   82abc:	a901      	add	r1, sp, #4
   82abe:	bf07      	ittee	eq
   82ac0:	9a06      	ldreq	r2, [sp, #24]
   82ac2:	2300      	moveq	r3, #0
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
   82ac4:	2200      	movne	r2, #0
   82ac6:	4613      	movne	r3, r2
   82ac8:	4c08      	ldr	r4, [pc, #32]	; (82aec <xTimerGenericCommand+0x4c>)
   82aca:	47a0      	blx	r4
   82acc:	e007      	b.n	82ade <xTimerGenericCommand+0x3e>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
   82ace:	4620      	mov	r0, r4
   82ad0:	a901      	add	r1, sp, #4
   82ad2:	461a      	mov	r2, r3
   82ad4:	2300      	movs	r3, #0
   82ad6:	4c06      	ldr	r4, [pc, #24]	; (82af0 <xTimerGenericCommand+0x50>)
   82ad8:	47a0      	blx	r4
   82ada:	e000      	b.n	82ade <xTimerGenericCommand+0x3e>
}
/*-----------------------------------------------------------*/

portBASE_TYPE xTimerGenericCommand( xTimerHandle xTimer, portBASE_TYPE xCommandID, portTickType xOptionalValue, signed portBASE_TYPE *pxHigherPriorityTaskWoken, portTickType xBlockTime )
{
portBASE_TYPE xReturn = pdFAIL;
   82adc:	2000      	movs	r0, #0

		traceTIMER_COMMAND_SEND( xTimer, xCommandID, xOptionalValue, xReturn );
	}

	return xReturn;
}
   82ade:	b004      	add	sp, #16
   82ae0:	bd10      	pop	{r4, pc}
   82ae2:	bf00      	nop
   82ae4:	2007a80c 	.word	0x2007a80c
   82ae8:	000828c1 	.word	0x000828c1
   82aec:	00081c59 	.word	0x00081c59
   82af0:	00081dd9 	.word	0x00081dd9

00082af4 <prvSampleTimeNow>:
	return xNextExpireTime;
}
/*-----------------------------------------------------------*/

static portTickType prvSampleTimeNow( portBASE_TYPE *pxTimerListsWereSwitched )
{
   82af4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
   82af8:	b082      	sub	sp, #8
   82afa:	4681      	mov	r9, r0
portTickType xTimeNow;
PRIVILEGED_DATA static portTickType xLastTime = ( portTickType ) 0U;

	xTimeNow = xTaskGetTickCount();
   82afc:	4b22      	ldr	r3, [pc, #136]	; (82b88 <prvSampleTimeNow+0x94>)
   82afe:	4798      	blx	r3
   82b00:	4680      	mov	r8, r0

	if( xTimeNow < xLastTime )
   82b02:	4b22      	ldr	r3, [pc, #136]	; (82b8c <prvSampleTimeNow+0x98>)
   82b04:	681b      	ldr	r3, [r3, #0]
   82b06:	4298      	cmp	r0, r3
   82b08:	d234      	bcs.n	82b74 <prvSampleTimeNow+0x80>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82b0a:	4e21      	ldr	r6, [pc, #132]	; (82b90 <prvSampleTimeNow+0x9c>)
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82b0c:	4f21      	ldr	r7, [pc, #132]	; (82b94 <prvSampleTimeNow+0xa0>)
   82b0e:	e024      	b.n	82b5a <prvSampleTimeNow+0x66>
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82b10:	68da      	ldr	r2, [r3, #12]
   82b12:	f8d2 a000 	ldr.w	sl, [r2]

		/* Remove the timer from the list. */
		pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82b16:	68db      	ldr	r3, [r3, #12]
   82b18:	68dc      	ldr	r4, [r3, #12]
		uxListRemove( &( pxTimer->xTimerListItem ) );
   82b1a:	1d25      	adds	r5, r4, #4
   82b1c:	4628      	mov	r0, r5
   82b1e:	47b8      	blx	r7

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82b20:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82b22:	4620      	mov	r0, r4
   82b24:	4798      	blx	r3

		if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82b26:	69e3      	ldr	r3, [r4, #28]
   82b28:	2b01      	cmp	r3, #1
   82b2a:	d116      	bne.n	82b5a <prvSampleTimeNow+0x66>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
   82b2c:	69a3      	ldr	r3, [r4, #24]
   82b2e:	4453      	add	r3, sl
			if( xReloadTime > xNextExpireTime )
   82b30:	4553      	cmp	r3, sl
   82b32:	d906      	bls.n	82b42 <prvSampleTimeNow+0x4e>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
   82b34:	6063      	str	r3, [r4, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
   82b36:	6124      	str	r4, [r4, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
   82b38:	6830      	ldr	r0, [r6, #0]
   82b3a:	4629      	mov	r1, r5
   82b3c:	4b16      	ldr	r3, [pc, #88]	; (82b98 <prvSampleTimeNow+0xa4>)
   82b3e:	4798      	blx	r3
   82b40:	e00b      	b.n	82b5a <prvSampleTimeNow+0x66>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82b42:	2300      	movs	r3, #0
   82b44:	9300      	str	r3, [sp, #0]
   82b46:	4620      	mov	r0, r4
   82b48:	4619      	mov	r1, r3
   82b4a:	4652      	mov	r2, sl
   82b4c:	4c13      	ldr	r4, [pc, #76]	; (82b9c <prvSampleTimeNow+0xa8>)
   82b4e:	47a0      	blx	r4
				configASSERT( xResult );
   82b50:	b918      	cbnz	r0, 82b5a <prvSampleTimeNow+0x66>
   82b52:	4b13      	ldr	r3, [pc, #76]	; (82ba0 <prvSampleTimeNow+0xac>)
   82b54:	4798      	blx	r3
   82b56:	bf00      	nop
   82b58:	e7fd      	b.n	82b56 <prvSampleTimeNow+0x62>

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
   82b5a:	6833      	ldr	r3, [r6, #0]
   82b5c:	681a      	ldr	r2, [r3, #0]
   82b5e:	2a00      	cmp	r2, #0
   82b60:	d1d6      	bne.n	82b10 <prvSampleTimeNow+0x1c>
			}
		}
	}

	pxTemp = pxCurrentTimerList;
	pxCurrentTimerList = pxOverflowTimerList;
   82b62:	4a10      	ldr	r2, [pc, #64]	; (82ba4 <prvSampleTimeNow+0xb0>)
   82b64:	6811      	ldr	r1, [r2, #0]
   82b66:	480a      	ldr	r0, [pc, #40]	; (82b90 <prvSampleTimeNow+0x9c>)
   82b68:	6001      	str	r1, [r0, #0]
	pxOverflowTimerList = pxTemp;
   82b6a:	6013      	str	r3, [r2, #0]
	xTimeNow = xTaskGetTickCount();

	if( xTimeNow < xLastTime )
	{
		prvSwitchTimerLists( xLastTime );
		*pxTimerListsWereSwitched = pdTRUE;
   82b6c:	2301      	movs	r3, #1
   82b6e:	f8c9 3000 	str.w	r3, [r9]
   82b72:	e002      	b.n	82b7a <prvSampleTimeNow+0x86>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
   82b74:	2300      	movs	r3, #0
   82b76:	f8c9 3000 	str.w	r3, [r9]
	}

	xLastTime = xTimeNow;
   82b7a:	4b04      	ldr	r3, [pc, #16]	; (82b8c <prvSampleTimeNow+0x98>)
   82b7c:	f8c3 8000 	str.w	r8, [r3]

	return xTimeNow;
}
   82b80:	4640      	mov	r0, r8
   82b82:	b002      	add	sp, #8
   82b84:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   82b88:	000822e9 	.word	0x000822e9
   82b8c:	2007a808 	.word	0x2007a808
   82b90:	2007a7dc 	.word	0x2007a7dc
   82b94:	00081769 	.word	0x00081769
   82b98:	0008172d 	.word	0x0008172d
   82b9c:	00082aa1 	.word	0x00082aa1
   82ba0:	000817f1 	.word	0x000817f1
   82ba4:	2007a810 	.word	0x2007a810

00082ba8 <prvTimerTask>:
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
}
/*-----------------------------------------------------------*/

static void prvTimerTask( void *pvParameters )
{
   82ba8:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
   82bac:	b087      	sub	sp, #28
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82bae:	4d4d      	ldr	r5, [pc, #308]	; (82ce4 <prvTimerTask+0x13c>)
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82bb0:	f8df 8160 	ldr.w	r8, [pc, #352]	; 82d14 <prvTimerTask+0x16c>
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
   82bb4:	4b4c      	ldr	r3, [pc, #304]	; (82ce8 <prvTimerTask+0x140>)
   82bb6:	681b      	ldr	r3, [r3, #0]
   82bb8:	681a      	ldr	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
   82bba:	2a00      	cmp	r2, #0
   82bbc:	f000 8087 	beq.w	82cce <prvTimerTask+0x126>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
   82bc0:	68db      	ldr	r3, [r3, #12]
   82bc2:	681e      	ldr	r6, [r3, #0]
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82bc4:	4b49      	ldr	r3, [pc, #292]	; (82cec <prvTimerTask+0x144>)
   82bc6:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82bc8:	a803      	add	r0, sp, #12
   82bca:	4b49      	ldr	r3, [pc, #292]	; (82cf0 <prvTimerTask+0x148>)
   82bcc:	4798      	blx	r3
   82bce:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82bd0:	9b03      	ldr	r3, [sp, #12]
   82bd2:	2b00      	cmp	r3, #0
   82bd4:	d130      	bne.n	82c38 <prvTimerTask+0x90>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
   82bd6:	4286      	cmp	r6, r0
   82bd8:	d824      	bhi.n	82c24 <prvTimerTask+0x7c>
			{
				xTaskResumeAll();
   82bda:	4b46      	ldr	r3, [pc, #280]	; (82cf4 <prvTimerTask+0x14c>)
   82bdc:	4798      	blx	r3
xTIMER *pxTimer;
portBASE_TYPE xResult;

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	pxTimer = ( xTIMER * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList );
   82bde:	4b42      	ldr	r3, [pc, #264]	; (82ce8 <prvTimerTask+0x140>)
   82be0:	681b      	ldr	r3, [r3, #0]
   82be2:	68db      	ldr	r3, [r3, #12]
   82be4:	68dc      	ldr	r4, [r3, #12]
	uxListRemove( &( pxTimer->xTimerListItem ) );
   82be6:	1d20      	adds	r0, r4, #4
   82be8:	47c0      	blx	r8
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82bea:	69e3      	ldr	r3, [r4, #28]
   82bec:	2b01      	cmp	r3, #1
   82bee:	d114      	bne.n	82c1a <prvTimerTask+0x72>
		a time relative to anything other than the current time.  It
		will therefore be inserted into the correct list relative to
		the time this task thinks it is now, even if a command to
		switch lists due to a tick count overflow is already waiting in
		the timer queue. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) == pdTRUE )
   82bf0:	69a1      	ldr	r1, [r4, #24]
   82bf2:	4620      	mov	r0, r4
   82bf4:	4431      	add	r1, r6
   82bf6:	463a      	mov	r2, r7
   82bf8:	4633      	mov	r3, r6
   82bfa:	4f3f      	ldr	r7, [pc, #252]	; (82cf8 <prvTimerTask+0x150>)
   82bfc:	47b8      	blx	r7
   82bfe:	2801      	cmp	r0, #1
   82c00:	d10b      	bne.n	82c1a <prvTimerTask+0x72>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xNextExpireTime, NULL, tmrNO_DELAY );
   82c02:	2300      	movs	r3, #0
   82c04:	9300      	str	r3, [sp, #0]
   82c06:	4620      	mov	r0, r4
   82c08:	4619      	mov	r1, r3
   82c0a:	4632      	mov	r2, r6
   82c0c:	4e3b      	ldr	r6, [pc, #236]	; (82cfc <prvTimerTask+0x154>)
   82c0e:	47b0      	blx	r6
			configASSERT( xResult );
   82c10:	b918      	cbnz	r0, 82c1a <prvTimerTask+0x72>
   82c12:	4b3b      	ldr	r3, [pc, #236]	; (82d00 <prvTimerTask+0x158>)
   82c14:	4798      	blx	r3
   82c16:	bf00      	nop
   82c18:	e7fd      	b.n	82c16 <prvTimerTask+0x6e>
			( void ) xResult;
		}
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82c1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82c1c:	4620      	mov	r0, r4
   82c1e:	4798      	blx	r3
   82c20:	e00c      	b.n	82c3c <prvTimerTask+0x94>
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( portTickType ) 0U;
   82c22:	2600      	movs	r6, #0
				time has not been reached yet.  This task should therefore
				block to wait for the next expire time or a command to be
				received - whichever comes first.  The following line cannot
				be reached unless xNextExpireTime > xTimeNow, except in the
				case when the current timer list is empty. */
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ) );
   82c24:	6828      	ldr	r0, [r5, #0]
   82c26:	1bf1      	subs	r1, r6, r7
   82c28:	4b36      	ldr	r3, [pc, #216]	; (82d04 <prvTimerTask+0x15c>)
   82c2a:	4798      	blx	r3

				if( xTaskResumeAll() == pdFALSE )
   82c2c:	4b31      	ldr	r3, [pc, #196]	; (82cf4 <prvTimerTask+0x14c>)
   82c2e:	4798      	blx	r3
   82c30:	b920      	cbnz	r0, 82c3c <prvTimerTask+0x94>
				{
					/* Yield to wait for either a command to arrive, or the block time
					to expire.  If a command arrived between the critical section being
					exited and this yield then the yield will not cause the task
					to block. */
					portYIELD_WITHIN_API();
   82c32:	4b35      	ldr	r3, [pc, #212]	; (82d08 <prvTimerTask+0x160>)
   82c34:	4798      	blx	r3
   82c36:	e001      	b.n	82c3c <prvTimerTask+0x94>
				}
			}
		}
		else
		{
			xTaskResumeAll();
   82c38:	4b2e      	ldr	r3, [pc, #184]	; (82cf4 <prvTimerTask+0x14c>)
   82c3a:	4798      	blx	r3
portBASE_TYPE xTimerListsWereSwitched, xResult;
portTickType xTimeNow;

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82c3c:	a802      	add	r0, sp, #8
   82c3e:	4b2c      	ldr	r3, [pc, #176]	; (82cf0 <prvTimerTask+0x148>)
   82c40:	4798      	blx	r3
   82c42:	4607      	mov	r7, r0

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82c44:	4e31      	ldr	r6, [pc, #196]	; (82d0c <prvTimerTask+0x164>)
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82c46:	f8df 90b0 	ldr.w	r9, [pc, #176]	; 82cf8 <prvTimerTask+0x150>
   82c4a:	e038      	b.n	82cbe <prvTimerTask+0x116>
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
	{
		pxTimer = xMessage.pxTimer;
   82c4c:	9c05      	ldr	r4, [sp, #20]

		/* Is the timer already in a list of active timers?  When the command
		is trmCOMMAND_PROCESS_TIMER_OVERFLOW, the timer will be NULL as the
		command is to the task rather than to an individual timer. */
		if( pxTimer != NULL )
   82c4e:	b11c      	cbz	r4, 82c58 <prvTimerTask+0xb0>
		{
			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE )
   82c50:	6961      	ldr	r1, [r4, #20]
   82c52:	b109      	cbz	r1, 82c58 <prvTimerTask+0xb0>
			{
				/* The timer is in a list, remove it. */
				uxListRemove( &( pxTimer->xTimerListItem ) );
   82c54:	1d20      	adds	r0, r4, #4
   82c56:	47c0      	blx	r8
			}
		}

		traceTIMER_COMMAND_RECEIVED( pxTimer, xMessage.xMessageID, xMessage.xMessageValue );

		switch( xMessage.xMessageID )
   82c58:	9903      	ldr	r1, [sp, #12]
   82c5a:	2902      	cmp	r1, #2
   82c5c:	d01f      	beq.n	82c9e <prvTimerTask+0xf6>
   82c5e:	2903      	cmp	r1, #3
   82c60:	d02a      	beq.n	82cb8 <prvTimerTask+0x110>
   82c62:	2900      	cmp	r1, #0
   82c64:	d12b      	bne.n	82cbe <prvTimerTask+0x116>
		{
			case tmrCOMMAND_START :
				/* Start or restart a timer. */
				if( prvInsertTimerInActiveList( pxTimer,  xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.xMessageValue ) == pdTRUE )
   82c66:	9b04      	ldr	r3, [sp, #16]
   82c68:	69a1      	ldr	r1, [r4, #24]
   82c6a:	4620      	mov	r0, r4
   82c6c:	4419      	add	r1, r3
   82c6e:	463a      	mov	r2, r7
   82c70:	47c8      	blx	r9
   82c72:	2801      	cmp	r0, #1
   82c74:	d123      	bne.n	82cbe <prvTimerTask+0x116>
				{
					/* The timer expired before it was added to the active timer
					list.  Process it now. */
					pxTimer->pxCallbackFunction( ( xTimerHandle ) pxTimer );
   82c76:	6a63      	ldr	r3, [r4, #36]	; 0x24
   82c78:	4620      	mov	r0, r4
   82c7a:	4798      	blx	r3

					if( pxTimer->uxAutoReload == ( unsigned portBASE_TYPE ) pdTRUE )
   82c7c:	69e3      	ldr	r3, [r4, #28]
   82c7e:	2b01      	cmp	r3, #1
   82c80:	d11d      	bne.n	82cbe <prvTimerTask+0x116>
					{
						xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START, xMessage.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
   82c82:	69a2      	ldr	r2, [r4, #24]
   82c84:	2300      	movs	r3, #0
   82c86:	9300      	str	r3, [sp, #0]
   82c88:	4620      	mov	r0, r4
   82c8a:	4619      	mov	r1, r3
   82c8c:	9c04      	ldr	r4, [sp, #16]
   82c8e:	4422      	add	r2, r4
   82c90:	4c1a      	ldr	r4, [pc, #104]	; (82cfc <prvTimerTask+0x154>)
   82c92:	47a0      	blx	r4
						configASSERT( xResult );
   82c94:	b998      	cbnz	r0, 82cbe <prvTimerTask+0x116>
   82c96:	4b1a      	ldr	r3, [pc, #104]	; (82d00 <prvTimerTask+0x158>)
   82c98:	4798      	blx	r3
   82c9a:	bf00      	nop
   82c9c:	e7fd      	b.n	82c9a <prvTimerTask+0xf2>
				/* The timer has already been removed from the active list.
				There is nothing to do here. */
				break;

			case tmrCOMMAND_CHANGE_PERIOD :
				pxTimer->xTimerPeriodInTicks = xMessage.xMessageValue;
   82c9e:	9904      	ldr	r1, [sp, #16]
   82ca0:	61a1      	str	r1, [r4, #24]
				configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
   82ca2:	b919      	cbnz	r1, 82cac <prvTimerTask+0x104>
   82ca4:	4b16      	ldr	r3, [pc, #88]	; (82d00 <prvTimerTask+0x158>)
   82ca6:	4798      	blx	r3
   82ca8:	bf00      	nop
   82caa:	e7fd      	b.n	82ca8 <prvTimerTask+0x100>
				prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
   82cac:	4620      	mov	r0, r4
   82cae:	4439      	add	r1, r7
   82cb0:	463a      	mov	r2, r7
   82cb2:	463b      	mov	r3, r7
   82cb4:	47c8      	blx	r9
   82cb6:	e002      	b.n	82cbe <prvTimerTask+0x116>
				break;

			case tmrCOMMAND_DELETE :
				/* The timer has already been removed from the active list,
				just free up the memory. */
				vPortFree( pxTimer );
   82cb8:	4620      	mov	r0, r4
   82cba:	4b15      	ldr	r3, [pc, #84]	; (82d10 <prvTimerTask+0x168>)
   82cbc:	4798      	blx	r3

	/* In this case the xTimerListsWereSwitched parameter is not used, but it
	must be present in the function call. */
	xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL )
   82cbe:	6828      	ldr	r0, [r5, #0]
   82cc0:	a903      	add	r1, sp, #12
   82cc2:	2200      	movs	r2, #0
   82cc4:	4613      	mov	r3, r2
   82cc6:	47b0      	blx	r6
   82cc8:	2800      	cmp	r0, #0
   82cca:	d1bf      	bne.n	82c4c <prvTimerTask+0xa4>
   82ccc:	e772      	b.n	82bb4 <prvTimerTask+0xc>
static void prvProcessTimerOrBlockTask( portTickType xNextExpireTime, portBASE_TYPE xListWasEmpty )
{
portTickType xTimeNow;
portBASE_TYPE xTimerListsWereSwitched;

	vTaskSuspendAll();
   82cce:	4b07      	ldr	r3, [pc, #28]	; (82cec <prvTimerTask+0x144>)
   82cd0:	4798      	blx	r3
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampelTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
   82cd2:	a803      	add	r0, sp, #12
   82cd4:	4b06      	ldr	r3, [pc, #24]	; (82cf0 <prvTimerTask+0x148>)
   82cd6:	4798      	blx	r3
   82cd8:	4607      	mov	r7, r0
		if( xTimerListsWereSwitched == pdFALSE )
   82cda:	9b03      	ldr	r3, [sp, #12]
   82cdc:	2b00      	cmp	r3, #0
   82cde:	d0a0      	beq.n	82c22 <prvTimerTask+0x7a>
   82ce0:	e7aa      	b.n	82c38 <prvTimerTask+0x90>
   82ce2:	bf00      	nop
   82ce4:	2007a80c 	.word	0x2007a80c
   82ce8:	2007a7dc 	.word	0x2007a7dc
   82cec:	000822d9 	.word	0x000822d9
   82cf0:	00082af5 	.word	0x00082af5
   82cf4:	00082429 	.word	0x00082429
   82cf8:	000829ad 	.word	0x000829ad
   82cfc:	00082aa1 	.word	0x00082aa1
   82d00:	000817f1 	.word	0x000817f1
   82d04:	00081fc5 	.word	0x00081fc5
   82d08:	000817e1 	.word	0x000817e1
   82d0c:	00081e69 	.word	0x00081e69
   82d10:	00081a11 	.word	0x00081a11
   82d14:	00081769 	.word	0x00081769

00082d18 <main>:
	US_MR_CHMODE_NORMAL,
	0 // Only used in IrDA mode, so all values are ignored.
};

int main (void)
{
   82d18:	b570      	push	{r4, r5, r6, lr}
   82d1a:	b084      	sub	sp, #16
	// Insert system clock initialization code here (sysclk_init()).
	sysclk_init();
   82d1c:	4b17      	ldr	r3, [pc, #92]	; (82d7c <main+0x64>)
   82d1e:	4798      	blx	r3
	board_init();
   82d20:	4b17      	ldr	r3, [pc, #92]	; (82d80 <main+0x68>)
   82d22:	4798      	blx	r3
	init();
   82d24:	4b17      	ldr	r3, [pc, #92]	; (82d84 <main+0x6c>)
   82d26:	4798      	blx	r3
	
	// Call the USART specific FreeRTOS ASF driver initialization function,
	// storing the return value as the driver handle.
	freertos_usart = freertos_usart_serial_init(CONF_UART, &usart_settings,
   82d28:	4817      	ldr	r0, [pc, #92]	; (82d88 <main+0x70>)
   82d2a:	4918      	ldr	r1, [pc, #96]	; (82d8c <main+0x74>)
   82d2c:	4a18      	ldr	r2, [pc, #96]	; (82d90 <main+0x78>)
   82d2e:	4b19      	ldr	r3, [pc, #100]	; (82d94 <main+0x7c>)
   82d30:	4798      	blx	r3
   82d32:	4e19      	ldr	r6, [pc, #100]	; (82d98 <main+0x80>)
   82d34:	6030      	str	r0, [r6, #0]

	/* Configure console UART. */
	//sysclk_enable_peripheral_clock(BOARD_USART1_BASE);
	//freertos_usart_serial_init(CONF_UART, &usart_serial_options)
	
	if (xTaskCreate(task_dummy1, (const signed char * const) "task_dummy1", TASK_DUMMY1_STACK_SIZE, NULL, TASK_DUMMY1_STACK_PRIORITY, NULL) != pdPASS)
   82d36:	2400      	movs	r4, #0
   82d38:	9400      	str	r4, [sp, #0]
   82d3a:	9401      	str	r4, [sp, #4]
   82d3c:	9402      	str	r4, [sp, #8]
   82d3e:	9403      	str	r4, [sp, #12]
   82d40:	4816      	ldr	r0, [pc, #88]	; (82d9c <main+0x84>)
   82d42:	4917      	ldr	r1, [pc, #92]	; (82da0 <main+0x88>)
   82d44:	f44f 7280 	mov.w	r2, #256	; 0x100
   82d48:	4623      	mov	r3, r4
   82d4a:	4d16      	ldr	r5, [pc, #88]	; (82da4 <main+0x8c>)
   82d4c:	47a8      	blx	r5
	{
	}
	if (xTaskCreate(task_dummy2, (const signed char * const) "task_dummy2", TASK_DUMMY2_STACK_SIZE, NULL, TASK_DUMMY2_STACK_PRIORITY, NULL) != pdPASS)
   82d4e:	9400      	str	r4, [sp, #0]
   82d50:	9401      	str	r4, [sp, #4]
   82d52:	9402      	str	r4, [sp, #8]
   82d54:	9403      	str	r4, [sp, #12]
   82d56:	4814      	ldr	r0, [pc, #80]	; (82da8 <main+0x90>)
   82d58:	4914      	ldr	r1, [pc, #80]	; (82dac <main+0x94>)
   82d5a:	f44f 7280 	mov.w	r2, #256	; 0x100
   82d5e:	4623      	mov	r3, r4
   82d60:	47a8      	blx	r5
	{
	}
	if (xTaskCreate(task_uart, (const signed char * const) "task_uart", TASK_LED_STACK_SIZE, &freertos_usart, TASK_LED_STACK_PRIORITY, NULL) != pdPASS)
   82d62:	9400      	str	r4, [sp, #0]
   82d64:	9401      	str	r4, [sp, #4]
   82d66:	9402      	str	r4, [sp, #8]
   82d68:	9403      	str	r4, [sp, #12]
   82d6a:	4811      	ldr	r0, [pc, #68]	; (82db0 <main+0x98>)
   82d6c:	4911      	ldr	r1, [pc, #68]	; (82db4 <main+0x9c>)
   82d6e:	f44f 7280 	mov.w	r2, #256	; 0x100
   82d72:	4633      	mov	r3, r6
   82d74:	47a8      	blx	r5
	{
	}
	vTaskStartScheduler();
   82d76:	4b10      	ldr	r3, [pc, #64]	; (82db8 <main+0xa0>)
   82d78:	4798      	blx	r3
   82d7a:	e7fe      	b.n	82d7a <main+0x62>
   82d7c:	0008062d 	.word	0x0008062d
   82d80:	00080f59 	.word	0x00080f59
   82d84:	000805e1 	.word	0x000805e1
   82d88:	4009c000 	.word	0x4009c000
   82d8c:	00083178 	.word	0x00083178
   82d90:	2007014c 	.word	0x2007014c
   82d94:	00080b4d 	.word	0x00080b4d
   82d98:	2007a820 	.word	0x2007a820
   82d9c:	00080531 	.word	0x00080531
   82da0:	00083190 	.word	0x00083190
   82da4:	00082069 	.word	0x00082069
   82da8:	00080555 	.word	0x00080555
   82dac:	0008319c 	.word	0x0008319c
   82db0:	00080579 	.word	0x00080579
   82db4:	000831a8 	.word	0x000831a8
   82db8:	00082271 	.word	0x00082271

00082dbc <__libc_init_array>:
   82dbc:	b570      	push	{r4, r5, r6, lr}
   82dbe:	4e0f      	ldr	r6, [pc, #60]	; (82dfc <__libc_init_array+0x40>)
   82dc0:	4d0f      	ldr	r5, [pc, #60]	; (82e00 <__libc_init_array+0x44>)
   82dc2:	1b76      	subs	r6, r6, r5
   82dc4:	10b6      	asrs	r6, r6, #2
   82dc6:	d007      	beq.n	82dd8 <__libc_init_array+0x1c>
   82dc8:	3d04      	subs	r5, #4
   82dca:	2400      	movs	r4, #0
   82dcc:	3401      	adds	r4, #1
   82dce:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82dd2:	4798      	blx	r3
   82dd4:	42a6      	cmp	r6, r4
   82dd6:	d1f9      	bne.n	82dcc <__libc_init_array+0x10>
   82dd8:	4e0a      	ldr	r6, [pc, #40]	; (82e04 <__libc_init_array+0x48>)
   82dda:	4d0b      	ldr	r5, [pc, #44]	; (82e08 <__libc_init_array+0x4c>)
   82ddc:	f000 f9ee 	bl	831bc <_init>
   82de0:	1b76      	subs	r6, r6, r5
   82de2:	10b6      	asrs	r6, r6, #2
   82de4:	d008      	beq.n	82df8 <__libc_init_array+0x3c>
   82de6:	3d04      	subs	r5, #4
   82de8:	2400      	movs	r4, #0
   82dea:	3401      	adds	r4, #1
   82dec:	f855 3f04 	ldr.w	r3, [r5, #4]!
   82df0:	4798      	blx	r3
   82df2:	42a6      	cmp	r6, r4
   82df4:	d1f9      	bne.n	82dea <__libc_init_array+0x2e>
   82df6:	bd70      	pop	{r4, r5, r6, pc}
   82df8:	bd70      	pop	{r4, r5, r6, pc}
   82dfa:	bf00      	nop
   82dfc:	000831c8 	.word	0x000831c8
   82e00:	000831c8 	.word	0x000831c8
   82e04:	000831d0 	.word	0x000831d0
   82e08:	000831c8 	.word	0x000831c8

00082e0c <memcpy>:
   82e0c:	4684      	mov	ip, r0
   82e0e:	ea41 0300 	orr.w	r3, r1, r0
   82e12:	f013 0303 	ands.w	r3, r3, #3
   82e16:	d149      	bne.n	82eac <memcpy+0xa0>
   82e18:	3a40      	subs	r2, #64	; 0x40
   82e1a:	d323      	bcc.n	82e64 <memcpy+0x58>
   82e1c:	680b      	ldr	r3, [r1, #0]
   82e1e:	6003      	str	r3, [r0, #0]
   82e20:	684b      	ldr	r3, [r1, #4]
   82e22:	6043      	str	r3, [r0, #4]
   82e24:	688b      	ldr	r3, [r1, #8]
   82e26:	6083      	str	r3, [r0, #8]
   82e28:	68cb      	ldr	r3, [r1, #12]
   82e2a:	60c3      	str	r3, [r0, #12]
   82e2c:	690b      	ldr	r3, [r1, #16]
   82e2e:	6103      	str	r3, [r0, #16]
   82e30:	694b      	ldr	r3, [r1, #20]
   82e32:	6143      	str	r3, [r0, #20]
   82e34:	698b      	ldr	r3, [r1, #24]
   82e36:	6183      	str	r3, [r0, #24]
   82e38:	69cb      	ldr	r3, [r1, #28]
   82e3a:	61c3      	str	r3, [r0, #28]
   82e3c:	6a0b      	ldr	r3, [r1, #32]
   82e3e:	6203      	str	r3, [r0, #32]
   82e40:	6a4b      	ldr	r3, [r1, #36]	; 0x24
   82e42:	6243      	str	r3, [r0, #36]	; 0x24
   82e44:	6a8b      	ldr	r3, [r1, #40]	; 0x28
   82e46:	6283      	str	r3, [r0, #40]	; 0x28
   82e48:	6acb      	ldr	r3, [r1, #44]	; 0x2c
   82e4a:	62c3      	str	r3, [r0, #44]	; 0x2c
   82e4c:	6b0b      	ldr	r3, [r1, #48]	; 0x30
   82e4e:	6303      	str	r3, [r0, #48]	; 0x30
   82e50:	6b4b      	ldr	r3, [r1, #52]	; 0x34
   82e52:	6343      	str	r3, [r0, #52]	; 0x34
   82e54:	6b8b      	ldr	r3, [r1, #56]	; 0x38
   82e56:	6383      	str	r3, [r0, #56]	; 0x38
   82e58:	6bcb      	ldr	r3, [r1, #60]	; 0x3c
   82e5a:	63c3      	str	r3, [r0, #60]	; 0x3c
   82e5c:	3040      	adds	r0, #64	; 0x40
   82e5e:	3140      	adds	r1, #64	; 0x40
   82e60:	3a40      	subs	r2, #64	; 0x40
   82e62:	d2db      	bcs.n	82e1c <memcpy+0x10>
   82e64:	3230      	adds	r2, #48	; 0x30
   82e66:	d30b      	bcc.n	82e80 <memcpy+0x74>
   82e68:	680b      	ldr	r3, [r1, #0]
   82e6a:	6003      	str	r3, [r0, #0]
   82e6c:	684b      	ldr	r3, [r1, #4]
   82e6e:	6043      	str	r3, [r0, #4]
   82e70:	688b      	ldr	r3, [r1, #8]
   82e72:	6083      	str	r3, [r0, #8]
   82e74:	68cb      	ldr	r3, [r1, #12]
   82e76:	60c3      	str	r3, [r0, #12]
   82e78:	3010      	adds	r0, #16
   82e7a:	3110      	adds	r1, #16
   82e7c:	3a10      	subs	r2, #16
   82e7e:	d2f3      	bcs.n	82e68 <memcpy+0x5c>
   82e80:	320c      	adds	r2, #12
   82e82:	d305      	bcc.n	82e90 <memcpy+0x84>
   82e84:	f851 3b04 	ldr.w	r3, [r1], #4
   82e88:	f840 3b04 	str.w	r3, [r0], #4
   82e8c:	3a04      	subs	r2, #4
   82e8e:	d2f9      	bcs.n	82e84 <memcpy+0x78>
   82e90:	3204      	adds	r2, #4
   82e92:	d008      	beq.n	82ea6 <memcpy+0x9a>
   82e94:	07d2      	lsls	r2, r2, #31
   82e96:	bf1c      	itt	ne
   82e98:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82e9c:	f800 3b01 	strbne.w	r3, [r0], #1
   82ea0:	d301      	bcc.n	82ea6 <memcpy+0x9a>
   82ea2:	880b      	ldrh	r3, [r1, #0]
   82ea4:	8003      	strh	r3, [r0, #0]
   82ea6:	4660      	mov	r0, ip
   82ea8:	4770      	bx	lr
   82eaa:	bf00      	nop
   82eac:	2a08      	cmp	r2, #8
   82eae:	d313      	bcc.n	82ed8 <memcpy+0xcc>
   82eb0:	078b      	lsls	r3, r1, #30
   82eb2:	d0b1      	beq.n	82e18 <memcpy+0xc>
   82eb4:	f010 0303 	ands.w	r3, r0, #3
   82eb8:	d0ae      	beq.n	82e18 <memcpy+0xc>
   82eba:	f1c3 0304 	rsb	r3, r3, #4
   82ebe:	1ad2      	subs	r2, r2, r3
   82ec0:	07db      	lsls	r3, r3, #31
   82ec2:	bf1c      	itt	ne
   82ec4:	f811 3b01 	ldrbne.w	r3, [r1], #1
   82ec8:	f800 3b01 	strbne.w	r3, [r0], #1
   82ecc:	d3a4      	bcc.n	82e18 <memcpy+0xc>
   82ece:	f831 3b02 	ldrh.w	r3, [r1], #2
   82ed2:	f820 3b02 	strh.w	r3, [r0], #2
   82ed6:	e79f      	b.n	82e18 <memcpy+0xc>
   82ed8:	3a04      	subs	r2, #4
   82eda:	d3d9      	bcc.n	82e90 <memcpy+0x84>
   82edc:	3a01      	subs	r2, #1
   82ede:	f811 3b01 	ldrb.w	r3, [r1], #1
   82ee2:	f800 3b01 	strb.w	r3, [r0], #1
   82ee6:	d2f9      	bcs.n	82edc <memcpy+0xd0>
   82ee8:	780b      	ldrb	r3, [r1, #0]
   82eea:	7003      	strb	r3, [r0, #0]
   82eec:	784b      	ldrb	r3, [r1, #1]
   82eee:	7043      	strb	r3, [r0, #1]
   82ef0:	788b      	ldrb	r3, [r1, #2]
   82ef2:	7083      	strb	r3, [r0, #2]
   82ef4:	4660      	mov	r0, ip
   82ef6:	4770      	bx	lr

00082ef8 <memset>:
   82ef8:	b4f0      	push	{r4, r5, r6, r7}
   82efa:	0784      	lsls	r4, r0, #30
   82efc:	d043      	beq.n	82f86 <memset+0x8e>
   82efe:	1e54      	subs	r4, r2, #1
   82f00:	2a00      	cmp	r2, #0
   82f02:	d03e      	beq.n	82f82 <memset+0x8a>
   82f04:	b2cd      	uxtb	r5, r1
   82f06:	4603      	mov	r3, r0
   82f08:	e003      	b.n	82f12 <memset+0x1a>
   82f0a:	1e62      	subs	r2, r4, #1
   82f0c:	2c00      	cmp	r4, #0
   82f0e:	d038      	beq.n	82f82 <memset+0x8a>
   82f10:	4614      	mov	r4, r2
   82f12:	f803 5b01 	strb.w	r5, [r3], #1
   82f16:	079a      	lsls	r2, r3, #30
   82f18:	d1f7      	bne.n	82f0a <memset+0x12>
   82f1a:	2c03      	cmp	r4, #3
   82f1c:	d92a      	bls.n	82f74 <memset+0x7c>
   82f1e:	b2cd      	uxtb	r5, r1
   82f20:	ea45 2505 	orr.w	r5, r5, r5, lsl #8
   82f24:	2c0f      	cmp	r4, #15
   82f26:	ea45 4505 	orr.w	r5, r5, r5, lsl #16
   82f2a:	d915      	bls.n	82f58 <memset+0x60>
   82f2c:	f1a4 0710 	sub.w	r7, r4, #16
   82f30:	093f      	lsrs	r7, r7, #4
   82f32:	f103 0610 	add.w	r6, r3, #16
   82f36:	eb06 1607 	add.w	r6, r6, r7, lsl #4
   82f3a:	461a      	mov	r2, r3
   82f3c:	6015      	str	r5, [r2, #0]
   82f3e:	6055      	str	r5, [r2, #4]
   82f40:	6095      	str	r5, [r2, #8]
   82f42:	60d5      	str	r5, [r2, #12]
   82f44:	3210      	adds	r2, #16
   82f46:	42b2      	cmp	r2, r6
   82f48:	d1f8      	bne.n	82f3c <memset+0x44>
   82f4a:	f004 040f 	and.w	r4, r4, #15
   82f4e:	3701      	adds	r7, #1
   82f50:	2c03      	cmp	r4, #3
   82f52:	eb03 1307 	add.w	r3, r3, r7, lsl #4
   82f56:	d90d      	bls.n	82f74 <memset+0x7c>
   82f58:	461e      	mov	r6, r3
   82f5a:	4622      	mov	r2, r4
   82f5c:	3a04      	subs	r2, #4
   82f5e:	2a03      	cmp	r2, #3
   82f60:	f846 5b04 	str.w	r5, [r6], #4
   82f64:	d8fa      	bhi.n	82f5c <memset+0x64>
   82f66:	1f22      	subs	r2, r4, #4
   82f68:	f022 0203 	bic.w	r2, r2, #3
   82f6c:	3204      	adds	r2, #4
   82f6e:	4413      	add	r3, r2
   82f70:	f004 0403 	and.w	r4, r4, #3
   82f74:	b12c      	cbz	r4, 82f82 <memset+0x8a>
   82f76:	b2c9      	uxtb	r1, r1
   82f78:	441c      	add	r4, r3
   82f7a:	f803 1b01 	strb.w	r1, [r3], #1
   82f7e:	42a3      	cmp	r3, r4
   82f80:	d1fb      	bne.n	82f7a <memset+0x82>
   82f82:	bcf0      	pop	{r4, r5, r6, r7}
   82f84:	4770      	bx	lr
   82f86:	4614      	mov	r4, r2
   82f88:	4603      	mov	r3, r0
   82f8a:	e7c6      	b.n	82f1a <memset+0x22>

00082f8c <strncpy>:
   82f8c:	ea40 0301 	orr.w	r3, r0, r1
   82f90:	079b      	lsls	r3, r3, #30
   82f92:	b470      	push	{r4, r5, r6}
   82f94:	d12a      	bne.n	82fec <strncpy+0x60>
   82f96:	2a03      	cmp	r2, #3
   82f98:	d928      	bls.n	82fec <strncpy+0x60>
   82f9a:	460c      	mov	r4, r1
   82f9c:	4603      	mov	r3, r0
   82f9e:	4621      	mov	r1, r4
   82fa0:	f854 5b04 	ldr.w	r5, [r4], #4
   82fa4:	f1a5 3601 	sub.w	r6, r5, #16843009	; 0x1010101
   82fa8:	ea26 0605 	bic.w	r6, r6, r5
   82fac:	f016 3f80 	tst.w	r6, #2155905152	; 0x80808080
   82fb0:	d105      	bne.n	82fbe <strncpy+0x32>
   82fb2:	3a04      	subs	r2, #4
   82fb4:	2a03      	cmp	r2, #3
   82fb6:	f843 5b04 	str.w	r5, [r3], #4
   82fba:	4621      	mov	r1, r4
   82fbc:	d8ef      	bhi.n	82f9e <strncpy+0x12>
   82fbe:	b19a      	cbz	r2, 82fe8 <strncpy+0x5c>
   82fc0:	780c      	ldrb	r4, [r1, #0]
   82fc2:	3a01      	subs	r2, #1
   82fc4:	701c      	strb	r4, [r3, #0]
   82fc6:	3301      	adds	r3, #1
   82fc8:	b13c      	cbz	r4, 82fda <strncpy+0x4e>
   82fca:	b16a      	cbz	r2, 82fe8 <strncpy+0x5c>
   82fcc:	f811 4f01 	ldrb.w	r4, [r1, #1]!
   82fd0:	3a01      	subs	r2, #1
   82fd2:	f803 4b01 	strb.w	r4, [r3], #1
   82fd6:	2c00      	cmp	r4, #0
   82fd8:	d1f7      	bne.n	82fca <strncpy+0x3e>
   82fda:	b12a      	cbz	r2, 82fe8 <strncpy+0x5c>
   82fdc:	441a      	add	r2, r3
   82fde:	2100      	movs	r1, #0
   82fe0:	f803 1b01 	strb.w	r1, [r3], #1
   82fe4:	4293      	cmp	r3, r2
   82fe6:	d1fb      	bne.n	82fe0 <strncpy+0x54>
   82fe8:	bc70      	pop	{r4, r5, r6}
   82fea:	4770      	bx	lr
   82fec:	4603      	mov	r3, r0
   82fee:	e7e6      	b.n	82fbe <strncpy+0x32>

00082ff0 <register_fini>:
   82ff0:	4b02      	ldr	r3, [pc, #8]	; (82ffc <register_fini+0xc>)
   82ff2:	b113      	cbz	r3, 82ffa <register_fini+0xa>
   82ff4:	4802      	ldr	r0, [pc, #8]	; (83000 <register_fini+0x10>)
   82ff6:	f000 b805 	b.w	83004 <atexit>
   82ffa:	4770      	bx	lr
   82ffc:	00000000 	.word	0x00000000
   83000:	00083011 	.word	0x00083011

00083004 <atexit>:
   83004:	4601      	mov	r1, r0
   83006:	2000      	movs	r0, #0
   83008:	4602      	mov	r2, r0
   8300a:	4603      	mov	r3, r0
   8300c:	f000 b818 	b.w	83040 <__register_exitproc>

00083010 <__libc_fini_array>:
   83010:	b538      	push	{r3, r4, r5, lr}
   83012:	4d09      	ldr	r5, [pc, #36]	; (83038 <__libc_fini_array+0x28>)
   83014:	4c09      	ldr	r4, [pc, #36]	; (8303c <__libc_fini_array+0x2c>)
   83016:	1b64      	subs	r4, r4, r5
   83018:	10a4      	asrs	r4, r4, #2
   8301a:	bf18      	it	ne
   8301c:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   83020:	d005      	beq.n	8302e <__libc_fini_array+0x1e>
   83022:	3c01      	subs	r4, #1
   83024:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   83028:	4798      	blx	r3
   8302a:	2c00      	cmp	r4, #0
   8302c:	d1f9      	bne.n	83022 <__libc_fini_array+0x12>
   8302e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   83032:	f000 b8cd 	b.w	831d0 <_fini>
   83036:	bf00      	nop
   83038:	000831dc 	.word	0x000831dc
   8303c:	000831e0 	.word	0x000831e0

00083040 <__register_exitproc>:
   83040:	b5f0      	push	{r4, r5, r6, r7, lr}
   83042:	4c27      	ldr	r4, [pc, #156]	; (830e0 <__register_exitproc+0xa0>)
   83044:	b085      	sub	sp, #20
   83046:	6826      	ldr	r6, [r4, #0]
   83048:	4607      	mov	r7, r0
   8304a:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   8304e:	2c00      	cmp	r4, #0
   83050:	d040      	beq.n	830d4 <__register_exitproc+0x94>
   83052:	6865      	ldr	r5, [r4, #4]
   83054:	2d1f      	cmp	r5, #31
   83056:	dd1e      	ble.n	83096 <__register_exitproc+0x56>
   83058:	4822      	ldr	r0, [pc, #136]	; (830e4 <__register_exitproc+0xa4>)
   8305a:	b918      	cbnz	r0, 83064 <__register_exitproc+0x24>
   8305c:	f04f 30ff 	mov.w	r0, #4294967295
   83060:	b005      	add	sp, #20
   83062:	bdf0      	pop	{r4, r5, r6, r7, pc}
   83064:	f44f 70c8 	mov.w	r0, #400	; 0x190
   83068:	9103      	str	r1, [sp, #12]
   8306a:	9202      	str	r2, [sp, #8]
   8306c:	9301      	str	r3, [sp, #4]
   8306e:	f3af 8000 	nop.w
   83072:	9903      	ldr	r1, [sp, #12]
   83074:	4604      	mov	r4, r0
   83076:	9a02      	ldr	r2, [sp, #8]
   83078:	9b01      	ldr	r3, [sp, #4]
   8307a:	2800      	cmp	r0, #0
   8307c:	d0ee      	beq.n	8305c <__register_exitproc+0x1c>
   8307e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   83082:	2000      	movs	r0, #0
   83084:	6025      	str	r5, [r4, #0]
   83086:	6060      	str	r0, [r4, #4]
   83088:	4605      	mov	r5, r0
   8308a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8308e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   83092:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   83096:	b93f      	cbnz	r7, 830a8 <__register_exitproc+0x68>
   83098:	1c6b      	adds	r3, r5, #1
   8309a:	2000      	movs	r0, #0
   8309c:	3502      	adds	r5, #2
   8309e:	6063      	str	r3, [r4, #4]
   830a0:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   830a4:	b005      	add	sp, #20
   830a6:	bdf0      	pop	{r4, r5, r6, r7, pc}
   830a8:	2601      	movs	r6, #1
   830aa:	40ae      	lsls	r6, r5
   830ac:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   830b0:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   830b4:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   830b8:	2f02      	cmp	r7, #2
   830ba:	ea42 0206 	orr.w	r2, r2, r6
   830be:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   830c2:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   830c6:	d1e7      	bne.n	83098 <__register_exitproc+0x58>
   830c8:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   830cc:	431e      	orrs	r6, r3
   830ce:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   830d2:	e7e1      	b.n	83098 <__register_exitproc+0x58>
   830d4:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   830d8:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   830dc:	e7b9      	b.n	83052 <__register_exitproc+0x12>
   830de:	bf00      	nop
   830e0:	000831b8 	.word	0x000831b8
   830e4:	00000000 	.word	0x00000000

000830e8 <all_uart_definitions>:
   830e8:	400e0800 400e0900 00000008 00000008     ...@...@........
   830f8:	75716572 21747365 00000000              request!....

00083104 <uart_settings>:
   83104:	0001c200 000000c0 00000800              ............

00083110 <all_usart_definitions>:
   83110:	40098000 40098100 00000011 00000011     ...@...@........
   83120:	4009c000 4009c100 00000012 00000012     ...@...@........
   83130:	400a0000 400a0100 00000013 00000013     ...@...@........
   83140:	400a4000 400a4100 00000014 00000014     .@.@.A.@........
   83150:	09097325 25096325 75250975 0d752509     %s..%c.%u.%u.%u.
   83160:	0000000a 454c4449 00000000 00000a0d     ....IDLE........
   83170:	20726d54 00637653                       Tmr Svc.

00083178 <usart_settings>:
   83178:	0001c200 000000c0 00000800 00000000     ................
	...
   83190:	6b736174 6d75645f 0031796d 6b736174     task_dummy1.task
   831a0:	6d75645f 0032796d 6b736174 7261755f     _dummy2.task_uar
   831b0:	00000074 00000043                       t...C...

000831b8 <_global_impure_ptr>:
   831b8:	20070160                                `.. 

000831bc <_init>:
   831bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   831be:	bf00      	nop
   831c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
   831c2:	bc08      	pop	{r3}
   831c4:	469e      	mov	lr, r3
   831c6:	4770      	bx	lr

000831c8 <__init_array_start>:
   831c8:	00082ff1 	.word	0x00082ff1

000831cc <__frame_dummy_init_array_entry>:
   831cc:	00080119                                ....

000831d0 <_fini>:
   831d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   831d2:	bf00      	nop
   831d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
   831d6:	bc08      	pop	{r3}
   831d8:	469e      	mov	lr, r3
   831da:	4770      	bx	lr

000831dc <__fini_array_start>:
   831dc:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007013c 	.word	0x2007013c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <driver_options_uart>:
2007012c:	2007a818 00000008 0000000e 00000601     ... ............

2007013c <SystemCoreClock>:
2007013c:	003d0900                                ..=.

20070140 <uxCriticalNesting>:
20070140:	aaaaaaaa                                ....

20070144 <xFreeBytesRemaining>:
20070144:	0000a000                                ....

20070148 <xNextTaskUnblockTime>:
20070148:	ffffffff                                ....

2007014c <driver_options>:
2007014c:	2007a818 00000008 0000000e 00000600     ... ............
2007015c:	00000000                                ....

20070160 <impure_data>:
20070160:	00000000 2007044c 200704b4 2007051c     ....L.. ... ... 
	...
20070194:	000831b4 00000000 00000000 00000000     .1..............
	...
20070208:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
20070218:	0005deec 0000000b 00000000 00000000     ................
	...
