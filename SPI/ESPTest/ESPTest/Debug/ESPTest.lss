
ESPTest.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000179c  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000974  20070000  0008179c  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          00000174  20070974  00082110  00010974  2**2
                  ALLOC
  3 .stack        00002000  20070ae8  00082284  00010974  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010974  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  0001099d  2**0
                  CONTENTS, READONLY
  6 .debug_info   000100ac  00000000  00000000  000109f8  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 00002977  00000000  00000000  00020aa4  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    00004b1a  00000000  00000000  0002341b  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000ae8  00000000  00000000  00027f35  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 000009c0  00000000  00000000  00028a1d  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00018a38  00000000  00000000  000293dd  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   00010684  00000000  00000000  00041e15  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    00061c01  00000000  00000000  00052499  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  000018d8  00000000  00000000  000b409c  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	20072ae8 	.word	0x20072ae8
   80004:	000807b9 	.word	0x000807b9
   80008:	000807b5 	.word	0x000807b5
   8000c:	000807b5 	.word	0x000807b5
   80010:	000807b5 	.word	0x000807b5
   80014:	000807b5 	.word	0x000807b5
   80018:	000807b5 	.word	0x000807b5
	...
   8002c:	000807b5 	.word	0x000807b5
   80030:	000807b5 	.word	0x000807b5
   80034:	00000000 	.word	0x00000000
   80038:	000807b5 	.word	0x000807b5
   8003c:	000807b5 	.word	0x000807b5
   80040:	000807b5 	.word	0x000807b5
   80044:	000807b5 	.word	0x000807b5
   80048:	000807b5 	.word	0x000807b5
   8004c:	000807b5 	.word	0x000807b5
   80050:	000807b5 	.word	0x000807b5
   80054:	000807b5 	.word	0x000807b5
   80058:	000807b5 	.word	0x000807b5
   8005c:	000807b5 	.word	0x000807b5
   80060:	000807b5 	.word	0x000807b5
   80064:	000807b5 	.word	0x000807b5
   80068:	00000000 	.word	0x00000000
   8006c:	000804c9 	.word	0x000804c9
   80070:	000804dd 	.word	0x000804dd
   80074:	000804f1 	.word	0x000804f1
   80078:	00080505 	.word	0x00080505
	...
   80084:	000809b9 	.word	0x000809b9
   80088:	00080ca9 	.word	0x00080ca9
   8008c:	000807b5 	.word	0x000807b5
   80090:	000807b5 	.word	0x000807b5
   80094:	000807b5 	.word	0x000807b5
   80098:	000807b5 	.word	0x000807b5
   8009c:	000807b5 	.word	0x000807b5
   800a0:	000807b5 	.word	0x000807b5
   800a4:	00000000 	.word	0x00000000
   800a8:	000807b5 	.word	0x000807b5
   800ac:	000807b5 	.word	0x000807b5
   800b0:	000807b5 	.word	0x000807b5
   800b4:	000807b5 	.word	0x000807b5
   800b8:	000807b5 	.word	0x000807b5
   800bc:	000807b5 	.word	0x000807b5
   800c0:	000807b5 	.word	0x000807b5
   800c4:	000807b5 	.word	0x000807b5
   800c8:	000807b5 	.word	0x000807b5
   800cc:	000807b5 	.word	0x000807b5
   800d0:	000807b5 	.word	0x000807b5
   800d4:	000807b5 	.word	0x000807b5
   800d8:	000807b5 	.word	0x000807b5
   800dc:	000807b5 	.word	0x000807b5
   800e0:	000807b5 	.word	0x000807b5
   800e4:	000807b5 	.word	0x000807b5
   800e8:	000807b5 	.word	0x000807b5
   800ec:	000807b5 	.word	0x000807b5
   800f0:	000807b5 	.word	0x000807b5

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070974 	.word	0x20070974
   80110:	00000000 	.word	0x00000000
   80114:	0008179c 	.word	0x0008179c

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	0008179c 	.word	0x0008179c
   8013c:	20070978 	.word	0x20070978
   80140:	0008179c 	.word	0x0008179c
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700a5 	.word	0x200700a5
   8018c:	0008057d 	.word	0x0008057d
   80190:	000805d1 	.word	0x000805d1
   80194:	000805e1 	.word	0x000805e1
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	000805f1 	.word	0x000805f1
   801a4:	00080519 	.word	0x00080519
   801a8:	00080869 	.word	0x00080869

000801ac <usart_serial_read_packet>:
 * \param len    Length of data
 *
 */
status_code_t usart_serial_read_packet(usart_if usart, uint8_t *data,
		size_t len)
{
   801ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   801b0:	b083      	sub	sp, #12
   801b2:	4605      	mov	r5, r0
	while (len) {
   801b4:	4690      	mov	r8, r2
   801b6:	2a00      	cmp	r2, #0
   801b8:	d047      	beq.n	8024a <usart_serial_read_packet+0x9e>
   801ba:	1c4e      	adds	r6, r1, #1
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   801bc:	4f25      	ldr	r7, [pc, #148]	; (80254 <usart_serial_read_packet+0xa8>)
		while (usart_read(p_usart, &val));
   801be:	4c26      	ldr	r4, [pc, #152]	; (80258 <usart_serial_read_packet+0xac>)
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   801c0:	f8df a0a8 	ldr.w	sl, [pc, #168]	; 8026c <usart_serial_read_packet+0xc0>
	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
		while (uart_read((Uart*)p_usart, data));
   801c4:	f8df b094 	ldr.w	fp, [pc, #148]	; 8025c <usart_serial_read_packet+0xb0>
   801c8:	f106 39ff 	add.w	r9, r6, #4294967295
 * \param data   Data to read
 *
 */
static inline void usart_serial_getchar(usart_if p_usart, uint8_t *data)
{
	uint32_t val = 0;
   801cc:	2300      	movs	r3, #0
   801ce:	9301      	str	r3, [sp, #4]

	/* Avoid Cppcheck Warning */
	UNUSED(val);

#ifdef UART
	if (UART == (Uart*)p_usart) {
   801d0:	4b22      	ldr	r3, [pc, #136]	; (8025c <usart_serial_read_packet+0xb0>)
   801d2:	429d      	cmp	r5, r3
   801d4:	d106      	bne.n	801e4 <usart_serial_read_packet+0x38>
		while (uart_read((Uart*)p_usart, data));
   801d6:	4658      	mov	r0, fp
   801d8:	4649      	mov	r1, r9
   801da:	4b21      	ldr	r3, [pc, #132]	; (80260 <usart_serial_read_packet+0xb4>)
   801dc:	4798      	blx	r3
   801de:	2800      	cmp	r0, #0
   801e0:	d1f9      	bne.n	801d6 <usart_serial_read_packet+0x2a>
   801e2:	e019      	b.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
		*data = (uint8_t)(val & 0xFF);
	}
#else
# ifdef USART0
	if (USART0 == p_usart) {
   801e4:	4b1f      	ldr	r3, [pc, #124]	; (80264 <usart_serial_read_packet+0xb8>)
   801e6:	429d      	cmp	r5, r3
   801e8:	d109      	bne.n	801fe <usart_serial_read_packet+0x52>
		while (usart_read(p_usart, &val));
   801ea:	4699      	mov	r9, r3
   801ec:	4648      	mov	r0, r9
   801ee:	a901      	add	r1, sp, #4
   801f0:	47a0      	blx	r4
   801f2:	2800      	cmp	r0, #0
   801f4:	d1fa      	bne.n	801ec <usart_serial_read_packet+0x40>
		*data = (uint8_t)(val & 0xFF);
   801f6:	9b01      	ldr	r3, [sp, #4]
   801f8:	f806 3c01 	strb.w	r3, [r6, #-1]
   801fc:	e017      	b.n	8022e <usart_serial_read_packet+0x82>
	}
# endif
# ifdef USART1
	if (USART1 == p_usart) {
   801fe:	4b1a      	ldr	r3, [pc, #104]	; (80268 <usart_serial_read_packet+0xbc>)
   80200:	429d      	cmp	r5, r3
   80202:	d109      	bne.n	80218 <usart_serial_read_packet+0x6c>
		while (usart_read(p_usart, &val));
   80204:	4699      	mov	r9, r3
   80206:	4648      	mov	r0, r9
   80208:	a901      	add	r1, sp, #4
   8020a:	47a0      	blx	r4
   8020c:	2800      	cmp	r0, #0
   8020e:	d1fa      	bne.n	80206 <usart_serial_read_packet+0x5a>
		*data = (uint8_t)(val & 0xFF);
   80210:	9b01      	ldr	r3, [sp, #4]
   80212:	f806 3c01 	strb.w	r3, [r6, #-1]
   80216:	e014      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART2
	if (USART2 == p_usart) {
   80218:	4555      	cmp	r5, sl
   8021a:	d108      	bne.n	8022e <usart_serial_read_packet+0x82>
		while (usart_read(p_usart, &val));
   8021c:	4650      	mov	r0, sl
   8021e:	a901      	add	r1, sp, #4
   80220:	47a0      	blx	r4
   80222:	2800      	cmp	r0, #0
   80224:	d1fa      	bne.n	8021c <usart_serial_read_packet+0x70>
		*data = (uint8_t)(val & 0xFF);
   80226:	9b01      	ldr	r3, [sp, #4]
   80228:	f806 3c01 	strb.w	r3, [r6, #-1]
   8022c:	e009      	b.n	80242 <usart_serial_read_packet+0x96>
	}
# endif
# ifdef USART3
	if (USART3 == p_usart) {
   8022e:	42bd      	cmp	r5, r7
   80230:	d107      	bne.n	80242 <usart_serial_read_packet+0x96>
		while (usart_read(p_usart, &val));
   80232:	4638      	mov	r0, r7
   80234:	a901      	add	r1, sp, #4
   80236:	47a0      	blx	r4
   80238:	2800      	cmp	r0, #0
   8023a:	d1fa      	bne.n	80232 <usart_serial_read_packet+0x86>
		*data = (uint8_t)(val & 0xFF);
   8023c:	9b01      	ldr	r3, [sp, #4]
   8023e:	f806 3c01 	strb.w	r3, [r6, #-1]
   80242:	3601      	adds	r6, #1
   80244:	f1b8 0801 	subs.w	r8, r8, #1
   80248:	d1be      	bne.n	801c8 <usart_serial_read_packet+0x1c>
		usart_serial_getchar(usart, data);
		len--;
		data++;
	}
	return STATUS_OK;
}
   8024a:	2000      	movs	r0, #0
   8024c:	b003      	add	sp, #12
   8024e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   80252:	bf00      	nop
   80254:	400a4000 	.word	0x400a4000
   80258:	0008079d 	.word	0x0008079d
   8025c:	400e0800 	.word	0x400e0800
   80260:	00080695 	.word	0x00080695
   80264:	40098000 	.word	0x40098000
   80268:	4009c000 	.word	0x4009c000
   8026c:	400a0000 	.word	0x400a0000

00080270 <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   80270:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   80272:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   80276:	4b1a      	ldr	r3, [pc, #104]	; (802e0 <board_init+0x70>)
   80278:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   8027a:	200b      	movs	r0, #11
   8027c:	4c19      	ldr	r4, [pc, #100]	; (802e4 <board_init+0x74>)
   8027e:	47a0      	blx	r4
   80280:	200c      	movs	r0, #12
   80282:	47a0      	blx	r4
   80284:	200d      	movs	r0, #13
   80286:	47a0      	blx	r4
   80288:	200e      	movs	r0, #14
   8028a:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   8028c:	203b      	movs	r0, #59	; 0x3b
   8028e:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   80292:	4c15      	ldr	r4, [pc, #84]	; (802e8 <board_init+0x78>)
   80294:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   80296:	2055      	movs	r0, #85	; 0x55
   80298:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   8029c:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   8029e:	2056      	movs	r0, #86	; 0x56
   802a0:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   802a4:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   802a6:	2068      	movs	r0, #104	; 0x68
   802a8:	4910      	ldr	r1, [pc, #64]	; (802ec <board_init+0x7c>)
   802aa:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   802ac:	205c      	movs	r0, #92	; 0x5c
   802ae:	4910      	ldr	r1, [pc, #64]	; (802f0 <board_init+0x80>)
   802b0:	47a0      	blx	r4
	Pio *base = arch_ioport_port_to_base(port);

	if (mode & IOPORT_MODE_PULLUP) {
		base->PIO_PUER = mask;
	} else {
		base->PIO_PUDR = mask;
   802b2:	4b10      	ldr	r3, [pc, #64]	; (802f4 <board_init+0x84>)
   802b4:	f44f 5240 	mov.w	r2, #12288	; 0x3000
   802b8:	661a      	str	r2, [r3, #96]	; 0x60
#endif

	if (mode & IOPORT_MODE_OPEN_DRAIN) {
		base->PIO_MDER = mask;
	} else {
		base->PIO_MDDR = mask;
   802ba:	655a      	str	r2, [r3, #84]	; 0x54
	}

	if (mode & (IOPORT_MODE_GLITCH_FILTER | IOPORT_MODE_DEBOUNCE)) {
		base->PIO_IFER = mask;
	} else {
		base->PIO_IFDR = mask;
   802bc:	625a      	str	r2, [r3, #36]	; 0x24
#else
		base->PIO_IFSCER = mask;
#endif
	} else {
#if SAM3U || SAM3XA
		base->PIO_SCIFSR = mask;
   802be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

#if !defined(IOPORT_MODE_MUX_BIT1)
	if (mode & IOPORT_MODE_MUX_BIT0) {
		base->PIO_ABSR |= mask;
	} else {
		base->PIO_ABSR &= ~mask;
   802c2:	6f19      	ldr	r1, [r3, #112]	; 0x70
   802c4:	f421 5140 	bic.w	r1, r1, #12288	; 0x3000
   802c8:	6719      	str	r1, [r3, #112]	; 0x70
}

__always_inline static void arch_ioport_disable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PDR = mask;
   802ca:	605a      	str	r2, [r3, #4]
	gpio_configure_pin(PIN_USART0_TXD_IDX, PIN_USART0_TXD_FLAGS);
#endif

#ifdef CONF_BOARD_USB_PORT
	/* Configure USB_ID (UOTGID) pin */
	gpio_configure_pin(USB_ID_GPIO, USB_ID_FLAGS);
   802cc:	202b      	movs	r0, #43	; 0x2b
   802ce:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802d2:	47a0      	blx	r4
	/* Configure USB_VBOF (UOTGVBOF) pin */
	gpio_configure_pin(USB_VBOF_GPIO, USB_VBOF_FLAGS);
   802d4:	202a      	movs	r0, #42	; 0x2a
   802d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   802da:	47a0      	blx	r4
   802dc:	bd10      	pop	{r4, pc}
   802de:	bf00      	nop
   802e0:	400e1a50 	.word	0x400e1a50
   802e4:	00080601 	.word	0x00080601
   802e8:	0008039d 	.word	0x0008039d
   802ec:	28000079 	.word	0x28000079
   802f0:	28000001 	.word	0x28000001
   802f4:	400e0e00 	.word	0x400e0e00

000802f8 <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   802f8:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   802fa:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   802fe:	d016      	beq.n	8032e <pio_set_peripheral+0x36>
   80300:	d804      	bhi.n	8030c <pio_set_peripheral+0x14>
   80302:	b1c1      	cbz	r1, 80336 <pio_set_peripheral+0x3e>
   80304:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   80308:	d00a      	beq.n	80320 <pio_set_peripheral+0x28>
   8030a:	e013      	b.n	80334 <pio_set_peripheral+0x3c>
   8030c:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80310:	d011      	beq.n	80336 <pio_set_peripheral+0x3e>
   80312:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   80316:	d00e      	beq.n	80336 <pio_set_peripheral+0x3e>
   80318:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   8031c:	d10a      	bne.n	80334 <pio_set_peripheral+0x3c>
   8031e:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80320:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80322:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80324:	400b      	ands	r3, r1
   80326:	ea23 0302 	bic.w	r3, r3, r2
   8032a:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   8032c:	e002      	b.n	80334 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   8032e:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80330:	4313      	orrs	r3, r2
   80332:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80334:	6042      	str	r2, [r0, #4]
   80336:	4770      	bx	lr

00080338 <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   80338:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8033a:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   8033e:	bf14      	ite	ne
   80340:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80342:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80344:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   80348:	bf14      	ite	ne
   8034a:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   8034c:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   8034e:	f012 0f02 	tst.w	r2, #2
   80352:	d002      	beq.n	8035a <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80354:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   80358:	e004      	b.n	80364 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8035a:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   8035e:	bf18      	it	ne
   80360:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80364:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   80366:	6001      	str	r1, [r0, #0]
   80368:	4770      	bx	lr
   8036a:	bf00      	nop

0008036c <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   8036c:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8036e:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80370:	9c01      	ldr	r4, [sp, #4]
   80372:	b10c      	cbz	r4, 80378 <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   80374:	6641      	str	r1, [r0, #100]	; 0x64
   80376:	e000      	b.n	8037a <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80378:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   8037a:	b10b      	cbz	r3, 80380 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   8037c:	6501      	str	r1, [r0, #80]	; 0x50
   8037e:	e000      	b.n	80382 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   80380:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   80382:	b10a      	cbz	r2, 80388 <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   80384:	6301      	str	r1, [r0, #48]	; 0x30
   80386:	e000      	b.n	8038a <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   80388:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   8038a:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   8038c:	6001      	str	r1, [r0, #0]
}
   8038e:	f85d 4b04 	ldr.w	r4, [sp], #4
   80392:	4770      	bx	lr

00080394 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   80394:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   80396:	4770      	bx	lr

00080398 <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   80398:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   8039a:	4770      	bx	lr

0008039c <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   8039c:	b570      	push	{r4, r5, r6, lr}
   8039e:	b082      	sub	sp, #8
   803a0:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   803a2:	0944      	lsrs	r4, r0, #5
   803a4:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   803a8:	f204 7407 	addw	r4, r4, #1799	; 0x707
   803ac:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   803ae:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   803b2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   803b6:	d030      	beq.n	8041a <pio_configure_pin+0x7e>
   803b8:	d806      	bhi.n	803c8 <pio_configure_pin+0x2c>
   803ba:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   803be:	d00a      	beq.n	803d6 <pio_configure_pin+0x3a>
   803c0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   803c4:	d018      	beq.n	803f8 <pio_configure_pin+0x5c>
   803c6:	e049      	b.n	8045c <pio_configure_pin+0xc0>
   803c8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   803cc:	d030      	beq.n	80430 <pio_configure_pin+0x94>
   803ce:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   803d2:	d02d      	beq.n	80430 <pio_configure_pin+0x94>
   803d4:	e042      	b.n	8045c <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   803d6:	f000 001f 	and.w	r0, r0, #31
   803da:	2401      	movs	r4, #1
   803dc:	4084      	lsls	r4, r0
   803de:	4630      	mov	r0, r6
   803e0:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803e4:	4622      	mov	r2, r4
   803e6:	4b1f      	ldr	r3, [pc, #124]	; (80464 <pio_configure_pin+0xc8>)
   803e8:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803ea:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803ee:	bf14      	ite	ne
   803f0:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803f2:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803f4:	2001      	movs	r0, #1
   803f6:	e032      	b.n	8045e <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   803f8:	f000 001f 	and.w	r0, r0, #31
   803fc:	2401      	movs	r4, #1
   803fe:	4084      	lsls	r4, r0
   80400:	4630      	mov	r0, r6
   80402:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   80406:	4622      	mov	r2, r4
   80408:	4b16      	ldr	r3, [pc, #88]	; (80464 <pio_configure_pin+0xc8>)
   8040a:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8040c:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80410:	bf14      	ite	ne
   80412:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80414:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80416:	2001      	movs	r0, #1
   80418:	e021      	b.n	8045e <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8041a:	f000 011f 	and.w	r1, r0, #31
   8041e:	2401      	movs	r4, #1
   80420:	4630      	mov	r0, r6
   80422:	fa04 f101 	lsl.w	r1, r4, r1
   80426:	462a      	mov	r2, r5
   80428:	4b0f      	ldr	r3, [pc, #60]	; (80468 <pio_configure_pin+0xcc>)
   8042a:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8042c:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   8042e:	e016      	b.n	8045e <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80430:	f000 011f 	and.w	r1, r0, #31
   80434:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   80436:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8043a:	ea05 0304 	and.w	r3, r5, r4
   8043e:	9300      	str	r3, [sp, #0]
   80440:	4630      	mov	r0, r6
   80442:	fa04 f101 	lsl.w	r1, r4, r1
   80446:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8044a:	bf14      	ite	ne
   8044c:	2200      	movne	r2, #0
   8044e:	2201      	moveq	r2, #1
   80450:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80454:	4d05      	ldr	r5, [pc, #20]	; (8046c <pio_configure_pin+0xd0>)
   80456:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   80458:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8045a:	e000      	b.n	8045e <pio_configure_pin+0xc2>

	default:
		return 0;
   8045c:	2000      	movs	r0, #0
	}

	return 1;
}
   8045e:	b002      	add	sp, #8
   80460:	bd70      	pop	{r4, r5, r6, pc}
   80462:	bf00      	nop
   80464:	000802f9 	.word	0x000802f9
   80468:	00080339 	.word	0x00080339
   8046c:	0008036d 	.word	0x0008036d

00080470 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80470:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80474:	4604      	mov	r4, r0
   80476:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   80478:	4b10      	ldr	r3, [pc, #64]	; (804bc <pio_handler_process+0x4c>)
   8047a:	4798      	blx	r3
   8047c:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   8047e:	4620      	mov	r0, r4
   80480:	4b0f      	ldr	r3, [pc, #60]	; (804c0 <pio_handler_process+0x50>)
   80482:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80484:	4005      	ands	r5, r0
   80486:	d017      	beq.n	804b8 <pio_handler_process+0x48>
   80488:	4f0e      	ldr	r7, [pc, #56]	; (804c4 <pio_handler_process+0x54>)
   8048a:	f107 040c 	add.w	r4, r7, #12
   8048e:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80490:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80494:	42b3      	cmp	r3, r6
   80496:	d10a      	bne.n	804ae <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   80498:	f854 1c08 	ldr.w	r1, [r4, #-8]
   8049c:	4229      	tst	r1, r5
   8049e:	d006      	beq.n	804ae <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   804a0:	6823      	ldr	r3, [r4, #0]
   804a2:	4630      	mov	r0, r6
   804a4:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   804a6:	f854 3c08 	ldr.w	r3, [r4, #-8]
   804aa:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   804ae:	42bc      	cmp	r4, r7
   804b0:	d002      	beq.n	804b8 <pio_handler_process+0x48>
   804b2:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   804b4:	2d00      	cmp	r5, #0
   804b6:	d1eb      	bne.n	80490 <pio_handler_process+0x20>
   804b8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   804bc:	00080395 	.word	0x00080395
   804c0:	00080399 	.word	0x00080399
   804c4:	20070990 	.word	0x20070990

000804c8 <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   804c8:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   804ca:	4802      	ldr	r0, [pc, #8]	; (804d4 <PIOA_Handler+0xc>)
   804cc:	210b      	movs	r1, #11
   804ce:	4b02      	ldr	r3, [pc, #8]	; (804d8 <PIOA_Handler+0x10>)
   804d0:	4798      	blx	r3
   804d2:	bd08      	pop	{r3, pc}
   804d4:	400e0e00 	.word	0x400e0e00
   804d8:	00080471 	.word	0x00080471

000804dc <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   804dc:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   804de:	4802      	ldr	r0, [pc, #8]	; (804e8 <PIOB_Handler+0xc>)
   804e0:	210c      	movs	r1, #12
   804e2:	4b02      	ldr	r3, [pc, #8]	; (804ec <PIOB_Handler+0x10>)
   804e4:	4798      	blx	r3
   804e6:	bd08      	pop	{r3, pc}
   804e8:	400e1000 	.word	0x400e1000
   804ec:	00080471 	.word	0x00080471

000804f0 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   804f0:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   804f2:	4802      	ldr	r0, [pc, #8]	; (804fc <PIOC_Handler+0xc>)
   804f4:	210d      	movs	r1, #13
   804f6:	4b02      	ldr	r3, [pc, #8]	; (80500 <PIOC_Handler+0x10>)
   804f8:	4798      	blx	r3
   804fa:	bd08      	pop	{r3, pc}
   804fc:	400e1200 	.word	0x400e1200
   80500:	00080471 	.word	0x00080471

00080504 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   80504:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   80506:	4802      	ldr	r0, [pc, #8]	; (80510 <PIOD_Handler+0xc>)
   80508:	210e      	movs	r1, #14
   8050a:	4b02      	ldr	r3, [pc, #8]	; (80514 <PIOD_Handler+0x10>)
   8050c:	4798      	blx	r3
   8050e:	bd08      	pop	{r3, pc}
   80510:	400e1400 	.word	0x400e1400
   80514:	00080471 	.word	0x00080471

00080518 <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   80518:	4b17      	ldr	r3, [pc, #92]	; (80578 <pmc_switch_mck_to_pllack+0x60>)
   8051a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   8051c:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   80520:	4310      	orrs	r0, r2
   80522:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80524:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   80526:	f013 0f08 	tst.w	r3, #8
   8052a:	d109      	bne.n	80540 <pmc_switch_mck_to_pllack+0x28>
   8052c:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80530:	4911      	ldr	r1, [pc, #68]	; (80578 <pmc_switch_mck_to_pllack+0x60>)
   80532:	e001      	b.n	80538 <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80534:	3b01      	subs	r3, #1
   80536:	d019      	beq.n	8056c <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80538:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8053a:	f012 0f08 	tst.w	r2, #8
   8053e:	d0f9      	beq.n	80534 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80540:	4b0d      	ldr	r3, [pc, #52]	; (80578 <pmc_switch_mck_to_pllack+0x60>)
   80542:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80544:	f022 0203 	bic.w	r2, r2, #3
   80548:	f042 0202 	orr.w	r2, r2, #2
   8054c:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8054e:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80550:	f010 0008 	ands.w	r0, r0, #8
   80554:	d10c      	bne.n	80570 <pmc_switch_mck_to_pllack+0x58>
   80556:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8055a:	4907      	ldr	r1, [pc, #28]	; (80578 <pmc_switch_mck_to_pllack+0x60>)
   8055c:	e001      	b.n	80562 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   8055e:	3b01      	subs	r3, #1
   80560:	d008      	beq.n	80574 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80562:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80564:	f012 0f08 	tst.w	r2, #8
   80568:	d0f9      	beq.n	8055e <pmc_switch_mck_to_pllack+0x46>
   8056a:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   8056c:	2001      	movs	r0, #1
   8056e:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80570:	2000      	movs	r0, #0
   80572:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80574:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   80576:	4770      	bx	lr
   80578:	400e0600 	.word	0x400e0600

0008057c <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   8057c:	b138      	cbz	r0, 8058e <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8057e:	4911      	ldr	r1, [pc, #68]	; (805c4 <pmc_switch_mainck_to_xtal+0x48>)
   80580:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80582:	4a11      	ldr	r2, [pc, #68]	; (805c8 <pmc_switch_mainck_to_xtal+0x4c>)
   80584:	401a      	ands	r2, r3
   80586:	4b11      	ldr	r3, [pc, #68]	; (805cc <pmc_switch_mainck_to_xtal+0x50>)
   80588:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8058a:	620b      	str	r3, [r1, #32]
   8058c:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8058e:	4a0d      	ldr	r2, [pc, #52]	; (805c4 <pmc_switch_mainck_to_xtal+0x48>)
   80590:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80592:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   80596:	f023 0303 	bic.w	r3, r3, #3
   8059a:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   8059e:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   805a2:	0209      	lsls	r1, r1, #8
   805a4:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   805a6:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   805a8:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   805aa:	6e93      	ldr	r3, [r2, #104]	; 0x68
   805ac:	f013 0f01 	tst.w	r3, #1
   805b0:	d0fb      	beq.n	805aa <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   805b2:	4a04      	ldr	r2, [pc, #16]	; (805c4 <pmc_switch_mainck_to_xtal+0x48>)
   805b4:	6a13      	ldr	r3, [r2, #32]
   805b6:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   805ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   805be:	6213      	str	r3, [r2, #32]
   805c0:	4770      	bx	lr
   805c2:	bf00      	nop
   805c4:	400e0600 	.word	0x400e0600
   805c8:	fec8fffc 	.word	0xfec8fffc
   805cc:	01370002 	.word	0x01370002

000805d0 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   805d0:	4b02      	ldr	r3, [pc, #8]	; (805dc <pmc_osc_is_ready_mainck+0xc>)
   805d2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805d4:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   805d8:	4770      	bx	lr
   805da:	bf00      	nop
   805dc:	400e0600 	.word	0x400e0600

000805e0 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   805e0:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   805e4:	4b01      	ldr	r3, [pc, #4]	; (805ec <pmc_disable_pllack+0xc>)
   805e6:	629a      	str	r2, [r3, #40]	; 0x28
   805e8:	4770      	bx	lr
   805ea:	bf00      	nop
   805ec:	400e0600 	.word	0x400e0600

000805f0 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   805f0:	4b02      	ldr	r3, [pc, #8]	; (805fc <pmc_is_locked_pllack+0xc>)
   805f2:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805f4:	f000 0002 	and.w	r0, r0, #2
   805f8:	4770      	bx	lr
   805fa:	bf00      	nop
   805fc:	400e0600 	.word	0x400e0600

00080600 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   80600:	282c      	cmp	r0, #44	; 0x2c
   80602:	d820      	bhi.n	80646 <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   80604:	281f      	cmp	r0, #31
   80606:	d80d      	bhi.n	80624 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   80608:	4b12      	ldr	r3, [pc, #72]	; (80654 <pmc_enable_periph_clk+0x54>)
   8060a:	699a      	ldr	r2, [r3, #24]
   8060c:	2301      	movs	r3, #1
   8060e:	4083      	lsls	r3, r0
   80610:	401a      	ands	r2, r3
   80612:	4293      	cmp	r3, r2
   80614:	d019      	beq.n	8064a <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   80616:	2301      	movs	r3, #1
   80618:	fa03 f000 	lsl.w	r0, r3, r0
   8061c:	4b0d      	ldr	r3, [pc, #52]	; (80654 <pmc_enable_periph_clk+0x54>)
   8061e:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   80620:	2000      	movs	r0, #0
   80622:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80624:	4b0b      	ldr	r3, [pc, #44]	; (80654 <pmc_enable_periph_clk+0x54>)
   80626:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   8062a:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   8062c:	2301      	movs	r3, #1
   8062e:	4083      	lsls	r3, r0
   80630:	401a      	ands	r2, r3
   80632:	4293      	cmp	r3, r2
   80634:	d00b      	beq.n	8064e <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   80636:	2301      	movs	r3, #1
   80638:	fa03 f000 	lsl.w	r0, r3, r0
   8063c:	4b05      	ldr	r3, [pc, #20]	; (80654 <pmc_enable_periph_clk+0x54>)
   8063e:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80642:	2000      	movs	r0, #0
   80644:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   80646:	2001      	movs	r0, #1
   80648:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8064a:	2000      	movs	r0, #0
   8064c:	4770      	bx	lr
   8064e:	2000      	movs	r0, #0
}
   80650:	4770      	bx	lr
   80652:	bf00      	nop
   80654:	400e0600 	.word	0x400e0600

00080658 <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   80658:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8065a:	0189      	lsls	r1, r1, #6
   8065c:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   8065e:	2402      	movs	r4, #2
   80660:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80662:	f04f 31ff 	mov.w	r1, #4294967295
   80666:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   80668:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8066a:	605a      	str	r2, [r3, #4]
}
   8066c:	f85d 4b04 	ldr.w	r4, [sp], #4
   80670:	4770      	bx	lr
   80672:	bf00      	nop

00080674 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   80674:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   80678:	4770      	bx	lr
   8067a:	bf00      	nop

0008067c <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   8067c:	0189      	lsls	r1, r1, #6
   8067e:	2305      	movs	r3, #5
   80680:	5043      	str	r3, [r0, r1]
   80682:	4770      	bx	lr

00080684 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80684:	0189      	lsls	r1, r1, #6
   80686:	2302      	movs	r3, #2
   80688:	5043      	str	r3, [r0, r1]
   8068a:	4770      	bx	lr

0008068c <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   8068c:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80690:	6908      	ldr	r0, [r1, #16]
}
   80692:	4770      	bx	lr

00080694 <uart_read>:
 * \retval 1 I/O Failure, UART is not ready.
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
   80694:	6943      	ldr	r3, [r0, #20]
   80696:	f013 0f01 	tst.w	r3, #1
		return 1;

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
   8069a:	bf1d      	ittte	ne
   8069c:	6983      	ldrne	r3, [r0, #24]
   8069e:	700b      	strbne	r3, [r1, #0]
	return 0;
   806a0:	2000      	movne	r0, #0
 */
uint32_t uart_read(Uart *p_uart, uint8_t *puc_data)
{
	/* Check if the receiver is ready */
	if ((p_uart->UART_SR & UART_SR_RXRDY) == 0)
		return 1;
   806a2:	2001      	moveq	r0, #1

	/* Read character */
	*puc_data = (uint8_t) p_uart->UART_RHR;
	return 0;
}
   806a4:	4770      	bx	lr
   806a6:	bf00      	nop

000806a8 <usart_set_async_baudrate>:
 * \retval 1 Baud rate set point is out of range for the given input clock
 * frequency.
 */
uint32_t usart_set_async_baudrate(Usart *p_usart,
		uint32_t baudrate, uint32_t ul_mck)
{
   806a8:	b410      	push	{r4}
	uint32_t cd_fp;
	uint32_t cd;
	uint32_t fp;

	/* Calculate the receiver sampling divide of baudrate clock. */
	if (ul_mck >= HIGH_FRQ_SAMPLE_DIV * baudrate) {
   806aa:	010b      	lsls	r3, r1, #4
   806ac:	4293      	cmp	r3, r2
   806ae:	d90d      	bls.n	806cc <usart_set_async_baudrate+0x24>
   806b0:	e01a      	b.n	806e8 <usart_set_async_baudrate+0x40>
		return 1;
	}

	/* Configure the OVER bit in MR register. */
	if (over == 8) {
		p_usart->US_MR |= US_MR_OVER;
   806b2:	6841      	ldr	r1, [r0, #4]
   806b4:	f441 2100 	orr.w	r1, r1, #524288	; 0x80000
   806b8:	6041      	str	r1, [r0, #4]
	}

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);
   806ba:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
   806be:	6203      	str	r3, [r0, #32]

	return 0;
   806c0:	2000      	movs	r0, #0
   806c2:	e020      	b.n	80706 <usart_set_async_baudrate+0x5e>
	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
	cd = cd_fp >> 3;
	fp = cd_fp & 0x07;
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
		return 1;
   806c4:	2001      	movs	r0, #1
   806c6:	e01e      	b.n	80706 <usart_set_async_baudrate+0x5e>
   806c8:	2001      	movs	r0, #1
   806ca:	e01c      	b.n	80706 <usart_set_async_baudrate+0x5e>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   806cc:	00d2      	lsls	r2, r2, #3
   806ce:	eb02 0253 	add.w	r2, r2, r3, lsr #1
   806d2:	fbb2 f3f3 	udiv	r3, r2, r3
	cd = cd_fp >> 3;
   806d6:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   806d8:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   806dc:	1e54      	subs	r4, r2, #1
   806de:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   806e2:	428c      	cmp	r4, r1
   806e4:	d9e9      	bls.n	806ba <usart_set_async_baudrate+0x12>
   806e6:	e7ed      	b.n	806c4 <usart_set_async_baudrate+0x1c>
	} else {
		over = LOW_FRQ_SAMPLE_DIV;
	}

	/* Calculate clock divider according to the fraction calculated formula. */
	cd_fp = (8 * ul_mck + (over * baudrate) / 2) / (over * baudrate);
   806e8:	00c9      	lsls	r1, r1, #3
   806ea:	00d3      	lsls	r3, r2, #3
   806ec:	eb03 0351 	add.w	r3, r3, r1, lsr #1
   806f0:	fbb3 f3f1 	udiv	r3, r3, r1
	cd = cd_fp >> 3;
   806f4:	08da      	lsrs	r2, r3, #3
	fp = cd_fp & 0x07;
   806f6:	f003 0307 	and.w	r3, r3, #7
	if (cd < MIN_CD_VALUE || cd > MAX_CD_VALUE) {
   806fa:	1e54      	subs	r4, r2, #1
   806fc:	f64f 71fe 	movw	r1, #65534	; 0xfffe
   80700:	428c      	cmp	r4, r1
   80702:	d9d6      	bls.n	806b2 <usart_set_async_baudrate+0xa>
   80704:	e7e0      	b.n	806c8 <usart_set_async_baudrate+0x20>

	/* Configure the baudrate generate register. */
	p_usart->US_BRGR = (cd << US_BRGR_CD_Pos) | (fp << US_BRGR_FP_Pos);

	return 0;
}
   80706:	f85d 4b04 	ldr.w	r4, [sp], #4
   8070a:	4770      	bx	lr

0008070c <usart_reset>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_disable_writeprotect(Usart *p_usart)
{
	p_usart->US_WPMR = US_WPMR_WPKEY_PASSWD;
   8070c:	4b08      	ldr	r3, [pc, #32]	; (80730 <usart_reset+0x24>)
   8070e:	f8c0 30e4 	str.w	r3, [r0, #228]	; 0xe4
{
	/* Disable the Write Protect. */
	usart_disable_writeprotect(p_usart);

	/* Reset registers that could cause unpredictable behavior after reset. */
	p_usart->US_MR = 0;
   80712:	2300      	movs	r3, #0
   80714:	6043      	str	r3, [r0, #4]
	p_usart->US_RTOR = 0;
   80716:	6243      	str	r3, [r0, #36]	; 0x24
	p_usart->US_TTGR = 0;
   80718:	6283      	str	r3, [r0, #40]	; 0x28
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_tx(Usart *p_usart)
{
	/* Reset transmitter */
	p_usart->US_CR = US_CR_RSTTX | US_CR_TXDIS;
   8071a:	2388      	movs	r3, #136	; 0x88
   8071c:	6003      	str	r3, [r0, #0]
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_rx(Usart *p_usart)
{
	/* Reset Receiver */
	p_usart->US_CR = US_CR_RSTRX | US_CR_RXDIS;
   8071e:	2324      	movs	r3, #36	; 0x24
   80720:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_reset_status(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RSTSTA;
   80722:	f44f 7380 	mov.w	r3, #256	; 0x100
   80726:	6003      	str	r3, [r0, #0]
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_drive_RTS_pin_high(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RTSDIS;
   80728:	f44f 2300 	mov.w	r3, #524288	; 0x80000
   8072c:	6003      	str	r3, [r0, #0]
   8072e:	4770      	bx	lr
   80730:	55534100 	.word	0x55534100

00080734 <usart_init_rs232>:
 * \retval 0 on success.
 * \retval 1 on failure.
 */
uint32_t usart_init_rs232(Usart *p_usart,
		const sam_usart_opt_t *p_usart_opt, uint32_t ul_mck)
{
   80734:	b570      	push	{r4, r5, r6, lr}
   80736:	4605      	mov	r5, r0
   80738:	460c      	mov	r4, r1
   8073a:	4616      	mov	r6, r2
	static uint32_t ul_reg_val;

	/* Reset the USART and shut down TX and RX. */
	usart_reset(p_usart);
   8073c:	4b0f      	ldr	r3, [pc, #60]	; (8077c <usart_init_rs232+0x48>)
   8073e:	4798      	blx	r3

	ul_reg_val = 0;
   80740:	2100      	movs	r1, #0
   80742:	4b0f      	ldr	r3, [pc, #60]	; (80780 <usart_init_rs232+0x4c>)
   80744:	6019      	str	r1, [r3, #0]
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
   80746:	b19c      	cbz	r4, 80770 <usart_init_rs232+0x3c>
   80748:	4628      	mov	r0, r5
   8074a:	6821      	ldr	r1, [r4, #0]
   8074c:	4632      	mov	r2, r6
   8074e:	4b0d      	ldr	r3, [pc, #52]	; (80784 <usart_init_rs232+0x50>)
   80750:	4798      	blx	r3
   80752:	4603      	mov	r3, r0
   80754:	b970      	cbnz	r0, 80774 <usart_init_rs232+0x40>
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80756:	68a1      	ldr	r1, [r4, #8]
   80758:	6862      	ldr	r2, [r4, #4]
   8075a:	430a      	orrs	r2, r1
   8075c:	6921      	ldr	r1, [r4, #16]
   8075e:	430a      	orrs	r2, r1
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;
   80760:	68e0      	ldr	r0, [r4, #12]
   80762:	4302      	orrs	r2, r0
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
	}

	/* Configure the USART option. */
	ul_reg_val |= p_usart_opt->char_length | p_usart_opt->parity_type |
   80764:	4906      	ldr	r1, [pc, #24]	; (80780 <usart_init_rs232+0x4c>)
   80766:	600a      	str	r2, [r1, #0]
			p_usart_opt->channel_mode | p_usart_opt->stop_bits;

	/* Configure the USART mode as normal mode. */
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;
   80768:	6869      	ldr	r1, [r5, #4]
   8076a:	430a      	orrs	r2, r1
   8076c:	606a      	str	r2, [r5, #4]

	return 0;
   8076e:	e002      	b.n	80776 <usart_init_rs232+0x42>

	ul_reg_val = 0;
	/* Check whether the input values are legal. */
	if (!p_usart_opt || usart_set_async_baudrate(p_usart,
			p_usart_opt->baudrate, ul_mck)) {
		return 1;
   80770:	2301      	movs	r3, #1
   80772:	e000      	b.n	80776 <usart_init_rs232+0x42>
   80774:	2301      	movs	r3, #1
	ul_reg_val |= US_MR_USART_MODE_NORMAL;

	p_usart->US_MR |= ul_reg_val;

	return 0;
}
   80776:	4618      	mov	r0, r3
   80778:	bd70      	pop	{r4, r5, r6, pc}
   8077a:	bf00      	nop
   8077c:	0008070d 	.word	0x0008070d
   80780:	20070a00 	.word	0x20070a00
   80784:	000806a9 	.word	0x000806a9

00080788 <usart_enable_tx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_tx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_TXEN;
   80788:	2340      	movs	r3, #64	; 0x40
   8078a:	6003      	str	r3, [r0, #0]
   8078c:	4770      	bx	lr
   8078e:	bf00      	nop

00080790 <usart_enable_rx>:
 *
 * \param p_usart Pointer to a USART instance.
 */
void usart_enable_rx(Usart *p_usart)
{
	p_usart->US_CR = US_CR_RXEN;
   80790:	2310      	movs	r3, #16
   80792:	6003      	str	r3, [r0, #0]
   80794:	4770      	bx	lr
   80796:	bf00      	nop

00080798 <usart_enable_interrupt>:
 * \param p_usart Pointer to a USART peripheral.
 * \param ul_sources Interrupt sources bit map.
 */
void usart_enable_interrupt(Usart *p_usart, uint32_t ul_sources)
{
	p_usart->US_IER = ul_sources;
   80798:	6081      	str	r1, [r0, #8]
   8079a:	4770      	bx	lr

0008079c <usart_read>:
 * \retval 0 on success.
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
   8079c:	6943      	ldr	r3, [r0, #20]
   8079e:	f013 0f01 	tst.w	r3, #1
   807a2:	d005      	beq.n	807b0 <usart_read+0x14>
		return 1;
	}

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;
   807a4:	6983      	ldr	r3, [r0, #24]
   807a6:	f3c3 0308 	ubfx	r3, r3, #0, #9
   807aa:	600b      	str	r3, [r1, #0]

	return 0;
   807ac:	2000      	movs	r0, #0
   807ae:	4770      	bx	lr
 * \retval 1 if no data is available or errors.
 */
uint32_t usart_read(Usart *p_usart, uint32_t *c)
{
	if (!(p_usart->US_CSR & US_CSR_RXRDY)) {
		return 1;
   807b0:	2001      	movs	r0, #1

	/* Read character */
	*c = p_usart->US_RHR & US_RHR_RXCHR_Msk;

	return 0;
}
   807b2:	4770      	bx	lr

000807b4 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   807b4:	e7fe      	b.n	807b4 <Dummy_Handler>
   807b6:	bf00      	nop

000807b8 <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   807b8:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   807ba:	4b1e      	ldr	r3, [pc, #120]	; (80834 <Reset_Handler+0x7c>)
   807bc:	4a1e      	ldr	r2, [pc, #120]	; (80838 <Reset_Handler+0x80>)
   807be:	429a      	cmp	r2, r3
   807c0:	d003      	beq.n	807ca <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   807c2:	4b1e      	ldr	r3, [pc, #120]	; (8083c <Reset_Handler+0x84>)
   807c4:	4a1b      	ldr	r2, [pc, #108]	; (80834 <Reset_Handler+0x7c>)
   807c6:	429a      	cmp	r2, r3
   807c8:	d304      	bcc.n	807d4 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   807ca:	4b1d      	ldr	r3, [pc, #116]	; (80840 <Reset_Handler+0x88>)
   807cc:	4a1d      	ldr	r2, [pc, #116]	; (80844 <Reset_Handler+0x8c>)
   807ce:	429a      	cmp	r2, r3
   807d0:	d30f      	bcc.n	807f2 <Reset_Handler+0x3a>
   807d2:	e01a      	b.n	8080a <Reset_Handler+0x52>
   807d4:	4b1c      	ldr	r3, [pc, #112]	; (80848 <Reset_Handler+0x90>)
   807d6:	4c1d      	ldr	r4, [pc, #116]	; (8084c <Reset_Handler+0x94>)
   807d8:	1ae4      	subs	r4, r4, r3
   807da:	f024 0403 	bic.w	r4, r4, #3
   807de:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807e0:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   807e2:	4814      	ldr	r0, [pc, #80]	; (80834 <Reset_Handler+0x7c>)
   807e4:	4914      	ldr	r1, [pc, #80]	; (80838 <Reset_Handler+0x80>)
   807e6:	585a      	ldr	r2, [r3, r1]
   807e8:	501a      	str	r2, [r3, r0]
   807ea:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   807ec:	42a3      	cmp	r3, r4
   807ee:	d1fa      	bne.n	807e6 <Reset_Handler+0x2e>
   807f0:	e7eb      	b.n	807ca <Reset_Handler+0x12>
   807f2:	4b17      	ldr	r3, [pc, #92]	; (80850 <Reset_Handler+0x98>)
   807f4:	4917      	ldr	r1, [pc, #92]	; (80854 <Reset_Handler+0x9c>)
   807f6:	1ac9      	subs	r1, r1, r3
   807f8:	f021 0103 	bic.w	r1, r1, #3
   807fc:	1d1a      	adds	r2, r3, #4
   807fe:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   80800:	2200      	movs	r2, #0
   80802:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   80806:	428b      	cmp	r3, r1
   80808:	d1fb      	bne.n	80802 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   8080a:	4a13      	ldr	r2, [pc, #76]	; (80858 <Reset_Handler+0xa0>)
   8080c:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   80810:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   80814:	4911      	ldr	r1, [pc, #68]	; (8085c <Reset_Handler+0xa4>)
   80816:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   80818:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   8081c:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   80820:	d203      	bcs.n	8082a <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   80822:	688a      	ldr	r2, [r1, #8]
   80824:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   80828:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   8082a:	4b0d      	ldr	r3, [pc, #52]	; (80860 <Reset_Handler+0xa8>)
   8082c:	4798      	blx	r3

	/* Branch to main function */
	main();
   8082e:	4b0d      	ldr	r3, [pc, #52]	; (80864 <Reset_Handler+0xac>)
   80830:	4798      	blx	r3
   80832:	e7fe      	b.n	80832 <Reset_Handler+0x7a>
   80834:	20070000 	.word	0x20070000
   80838:	0008179c 	.word	0x0008179c
   8083c:	20070974 	.word	0x20070974
   80840:	20070ae8 	.word	0x20070ae8
   80844:	20070974 	.word	0x20070974
   80848:	20070004 	.word	0x20070004
   8084c:	20070977 	.word	0x20070977
   80850:	20070970 	.word	0x20070970
   80854:	20070ae3 	.word	0x20070ae3
   80858:	00080000 	.word	0x00080000
   8085c:	e000ed00 	.word	0xe000ed00
   80860:	00080d99 	.word	0x00080d99
   80864:	00080ce1 	.word	0x00080ce1

00080868 <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   80868:	4b3e      	ldr	r3, [pc, #248]	; (80964 <SystemCoreClockUpdate+0xfc>)
   8086a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8086c:	f003 0303 	and.w	r3, r3, #3
   80870:	2b03      	cmp	r3, #3
   80872:	d85f      	bhi.n	80934 <SystemCoreClockUpdate+0xcc>
   80874:	e8df f003 	tbb	[pc, r3]
   80878:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   8087c:	4b3a      	ldr	r3, [pc, #232]	; (80968 <SystemCoreClockUpdate+0x100>)
   8087e:	695b      	ldr	r3, [r3, #20]
   80880:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80884:	bf14      	ite	ne
   80886:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8088a:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   8088e:	4b37      	ldr	r3, [pc, #220]	; (8096c <SystemCoreClockUpdate+0x104>)
   80890:	601a      	str	r2, [r3, #0]
   80892:	e04f      	b.n	80934 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80894:	4b33      	ldr	r3, [pc, #204]	; (80964 <SystemCoreClockUpdate+0xfc>)
   80896:	6a1b      	ldr	r3, [r3, #32]
   80898:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8089c:	d003      	beq.n	808a6 <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8089e:	4a34      	ldr	r2, [pc, #208]	; (80970 <SystemCoreClockUpdate+0x108>)
   808a0:	4b32      	ldr	r3, [pc, #200]	; (8096c <SystemCoreClockUpdate+0x104>)
   808a2:	601a      	str	r2, [r3, #0]
   808a4:	e046      	b.n	80934 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   808a6:	4a33      	ldr	r2, [pc, #204]	; (80974 <SystemCoreClockUpdate+0x10c>)
   808a8:	4b30      	ldr	r3, [pc, #192]	; (8096c <SystemCoreClockUpdate+0x104>)
   808aa:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   808ac:	4b2d      	ldr	r3, [pc, #180]	; (80964 <SystemCoreClockUpdate+0xfc>)
   808ae:	6a1b      	ldr	r3, [r3, #32]
   808b0:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808b4:	2b10      	cmp	r3, #16
   808b6:	d002      	beq.n	808be <SystemCoreClockUpdate+0x56>
   808b8:	2b20      	cmp	r3, #32
   808ba:	d004      	beq.n	808c6 <SystemCoreClockUpdate+0x5e>
   808bc:	e03a      	b.n	80934 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808be:	4a2e      	ldr	r2, [pc, #184]	; (80978 <SystemCoreClockUpdate+0x110>)
   808c0:	4b2a      	ldr	r3, [pc, #168]	; (8096c <SystemCoreClockUpdate+0x104>)
   808c2:	601a      	str	r2, [r3, #0]
				break;
   808c4:	e036      	b.n	80934 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   808c6:	4a2a      	ldr	r2, [pc, #168]	; (80970 <SystemCoreClockUpdate+0x108>)
   808c8:	4b28      	ldr	r3, [pc, #160]	; (8096c <SystemCoreClockUpdate+0x104>)
   808ca:	601a      	str	r2, [r3, #0]
				break;
   808cc:	e032      	b.n	80934 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   808ce:	4b25      	ldr	r3, [pc, #148]	; (80964 <SystemCoreClockUpdate+0xfc>)
   808d0:	6a1b      	ldr	r3, [r3, #32]
   808d2:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   808d6:	d003      	beq.n	808e0 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   808d8:	4a25      	ldr	r2, [pc, #148]	; (80970 <SystemCoreClockUpdate+0x108>)
   808da:	4b24      	ldr	r3, [pc, #144]	; (8096c <SystemCoreClockUpdate+0x104>)
   808dc:	601a      	str	r2, [r3, #0]
   808de:	e012      	b.n	80906 <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   808e0:	4a24      	ldr	r2, [pc, #144]	; (80974 <SystemCoreClockUpdate+0x10c>)
   808e2:	4b22      	ldr	r3, [pc, #136]	; (8096c <SystemCoreClockUpdate+0x104>)
   808e4:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   808e6:	4b1f      	ldr	r3, [pc, #124]	; (80964 <SystemCoreClockUpdate+0xfc>)
   808e8:	6a1b      	ldr	r3, [r3, #32]
   808ea:	f003 0370 	and.w	r3, r3, #112	; 0x70
   808ee:	2b10      	cmp	r3, #16
   808f0:	d002      	beq.n	808f8 <SystemCoreClockUpdate+0x90>
   808f2:	2b20      	cmp	r3, #32
   808f4:	d004      	beq.n	80900 <SystemCoreClockUpdate+0x98>
   808f6:	e006      	b.n	80906 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   808f8:	4a1f      	ldr	r2, [pc, #124]	; (80978 <SystemCoreClockUpdate+0x110>)
   808fa:	4b1c      	ldr	r3, [pc, #112]	; (8096c <SystemCoreClockUpdate+0x104>)
   808fc:	601a      	str	r2, [r3, #0]
				break;
   808fe:	e002      	b.n	80906 <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   80900:	4a1b      	ldr	r2, [pc, #108]	; (80970 <SystemCoreClockUpdate+0x108>)
   80902:	4b1a      	ldr	r3, [pc, #104]	; (8096c <SystemCoreClockUpdate+0x104>)
   80904:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   80906:	4b17      	ldr	r3, [pc, #92]	; (80964 <SystemCoreClockUpdate+0xfc>)
   80908:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   8090a:	f003 0303 	and.w	r3, r3, #3
   8090e:	2b02      	cmp	r3, #2
   80910:	d10d      	bne.n	8092e <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   80912:	4b14      	ldr	r3, [pc, #80]	; (80964 <SystemCoreClockUpdate+0xfc>)
   80914:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80916:	6a99      	ldr	r1, [r3, #40]	; 0x28
   80918:	4b14      	ldr	r3, [pc, #80]	; (8096c <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   8091a:	f3c0 400a 	ubfx	r0, r0, #16, #11
   8091e:	681a      	ldr	r2, [r3, #0]
   80920:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   80924:	b2c9      	uxtb	r1, r1
   80926:	fbb2 f2f1 	udiv	r2, r2, r1
   8092a:	601a      	str	r2, [r3, #0]
   8092c:	e002      	b.n	80934 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   8092e:	4a13      	ldr	r2, [pc, #76]	; (8097c <SystemCoreClockUpdate+0x114>)
   80930:	4b0e      	ldr	r3, [pc, #56]	; (8096c <SystemCoreClockUpdate+0x104>)
   80932:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   80934:	4b0b      	ldr	r3, [pc, #44]	; (80964 <SystemCoreClockUpdate+0xfc>)
   80936:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80938:	f003 0370 	and.w	r3, r3, #112	; 0x70
   8093c:	2b70      	cmp	r3, #112	; 0x70
   8093e:	d107      	bne.n	80950 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   80940:	4b0a      	ldr	r3, [pc, #40]	; (8096c <SystemCoreClockUpdate+0x104>)
   80942:	681a      	ldr	r2, [r3, #0]
   80944:	490e      	ldr	r1, [pc, #56]	; (80980 <SystemCoreClockUpdate+0x118>)
   80946:	fba1 0202 	umull	r0, r2, r1, r2
   8094a:	0852      	lsrs	r2, r2, #1
   8094c:	601a      	str	r2, [r3, #0]
   8094e:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80950:	4b04      	ldr	r3, [pc, #16]	; (80964 <SystemCoreClockUpdate+0xfc>)
   80952:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80954:	4b05      	ldr	r3, [pc, #20]	; (8096c <SystemCoreClockUpdate+0x104>)
   80956:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8095a:	681a      	ldr	r2, [r3, #0]
   8095c:	40ca      	lsrs	r2, r1
   8095e:	601a      	str	r2, [r3, #0]
   80960:	4770      	bx	lr
   80962:	bf00      	nop
   80964:	400e0600 	.word	0x400e0600
   80968:	400e1a10 	.word	0x400e1a10
   8096c:	20070130 	.word	0x20070130
   80970:	00b71b00 	.word	0x00b71b00
   80974:	003d0900 	.word	0x003d0900
   80978:	007a1200 	.word	0x007a1200
   8097c:	0e4e1c00 	.word	0x0e4e1c00
   80980:	aaaaaaab 	.word	0xaaaaaaab

00080984 <_sbrk>:
{
	static unsigned char *heap = NULL;
	unsigned char *prev_heap;
	int ramend = (int)&__ram_end__;

	if (heap == NULL) {
   80984:	4b09      	ldr	r3, [pc, #36]	; (809ac <_sbrk+0x28>)
   80986:	681b      	ldr	r3, [r3, #0]
   80988:	b913      	cbnz	r3, 80990 <_sbrk+0xc>
		heap = (unsigned char *)&_end;
   8098a:	4a09      	ldr	r2, [pc, #36]	; (809b0 <_sbrk+0x2c>)
   8098c:	4b07      	ldr	r3, [pc, #28]	; (809ac <_sbrk+0x28>)
   8098e:	601a      	str	r2, [r3, #0]
	}
	prev_heap = heap;
   80990:	4b06      	ldr	r3, [pc, #24]	; (809ac <_sbrk+0x28>)
   80992:	681b      	ldr	r3, [r3, #0]

	if (((int)prev_heap + incr) > ramend) {
   80994:	181a      	adds	r2, r3, r0
   80996:	4907      	ldr	r1, [pc, #28]	; (809b4 <_sbrk+0x30>)
   80998:	4291      	cmp	r1, r2
   8099a:	db04      	blt.n	809a6 <_sbrk+0x22>
		return (caddr_t) -1;	
	}

	heap += incr;
   8099c:	4610      	mov	r0, r2
   8099e:	4a03      	ldr	r2, [pc, #12]	; (809ac <_sbrk+0x28>)
   809a0:	6010      	str	r0, [r2, #0]

	return (caddr_t) prev_heap;
   809a2:	4618      	mov	r0, r3
   809a4:	4770      	bx	lr
		heap = (unsigned char *)&_end;
	}
	prev_heap = heap;

	if (((int)prev_heap + incr) > ramend) {
		return (caddr_t) -1;	
   809a6:	f04f 30ff 	mov.w	r0, #4294967295
	}

	heap += incr;

	return (caddr_t) prev_heap;
}
   809aa:	4770      	bx	lr
   809ac:	20070a04 	.word	0x20070a04
   809b0:	20072ae8 	.word	0x20072ae8
   809b4:	20087ffc 	.word	0x20087ffc

000809b8 <USART0_Handler>:
#if SAMD || SAMR21
void USART_HOST_ISR_VECT(uint8_t instance)
#else
USART_HOST_ISR_VECT()
#endif
{
   809b8:	b500      	push	{lr}
   809ba:	b083      	sub	sp, #12
	uint8_t temp;
#if SAMD || SAMR21
	usart_serial_read_packet(&host_uart_module, &temp, 1);
#else
	usart_serial_read_packet(USART_HOST, &temp, 1);
   809bc:	4813      	ldr	r0, [pc, #76]	; (80a0c <USART0_Handler+0x54>)
   809be:	f10d 0107 	add.w	r1, sp, #7
   809c2:	2201      	movs	r2, #1
   809c4:	4b12      	ldr	r3, [pc, #72]	; (80a10 <USART0_Handler+0x58>)
   809c6:	4798      	blx	r3
  This function disables IRQ interrupts by setting the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i");
   809c8:	b672      	cpsid	i
    This function ensures the apparent order of the explicit memory operations before
    and after the instruction, without ensuring their completion.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __DMB(void)
{
  __ASM volatile ("dmb");
   809ca:	f3bf 8f5f 	dmb	sy
#endif

	/* Introducing critical section to avoid buffer corruption. */
	cpu_irq_disable();
   809ce:	2200      	movs	r2, #0
   809d0:	4b10      	ldr	r3, [pc, #64]	; (80a14 <USART0_Handler+0x5c>)
   809d2:	701a      	strb	r2, [r3, #0]

	/* The number of data in the receive buffer is incremented and the
	 * buffer is updated. */
	serial_rx_count++;
   809d4:	4b10      	ldr	r3, [pc, #64]	; (80a18 <USART0_Handler+0x60>)
   809d6:	781a      	ldrb	r2, [r3, #0]
   809d8:	3201      	adds	r2, #1
   809da:	701a      	strb	r2, [r3, #0]

	serial_rx_buf[serial_rx_buf_tail] = temp;
   809dc:	4b0f      	ldr	r3, [pc, #60]	; (80a1c <USART0_Handler+0x64>)
   809de:	781b      	ldrb	r3, [r3, #0]
   809e0:	f89d 1007 	ldrb.w	r1, [sp, #7]
   809e4:	4a0e      	ldr	r2, [pc, #56]	; (80a20 <USART0_Handler+0x68>)
   809e6:	54d1      	strb	r1, [r2, r3]

	if ((SERIAL_RX_BUF_SIZE_HOST - 1) == serial_rx_buf_tail) {
   809e8:	2b9b      	cmp	r3, #155	; 0x9b
   809ea:	d103      	bne.n	809f4 <USART0_Handler+0x3c>
		/* Reached the end of buffer, revert back to beginning of
		 * buffer. */
		serial_rx_buf_tail = 0x00;
   809ec:	2200      	movs	r2, #0
   809ee:	4b0b      	ldr	r3, [pc, #44]	; (80a1c <USART0_Handler+0x64>)
   809f0:	701a      	strb	r2, [r3, #0]
   809f2:	e002      	b.n	809fa <USART0_Handler+0x42>
	} else {
		serial_rx_buf_tail++;
   809f4:	3301      	adds	r3, #1
   809f6:	4a09      	ldr	r2, [pc, #36]	; (80a1c <USART0_Handler+0x64>)
   809f8:	7013      	strb	r3, [r2, #0]
	}

	cpu_irq_enable();
   809fa:	2201      	movs	r2, #1
   809fc:	4b05      	ldr	r3, [pc, #20]	; (80a14 <USART0_Handler+0x5c>)
   809fe:	701a      	strb	r2, [r3, #0]
   80a00:	f3bf 8f5f 	dmb	sy
  This function enables IRQ interrupts by clearing the I-bit in the CPSR.
  Can only be executed in Privileged modes.
 */
__attribute__( ( always_inline ) ) __STATIC_INLINE void __enable_irq(void)
{
  __ASM volatile ("cpsie i");
   80a04:	b662      	cpsie	i
}
   80a06:	b003      	add	sp, #12
   80a08:	f85d fb04 	ldr.w	pc, [sp], #4
   80a0c:	40098000 	.word	0x40098000
   80a10:	000801ad 	.word	0x000801ad
   80a14:	2007012c 	.word	0x2007012c
   80a18:	20070aa5 	.word	0x20070aa5
   80a1c:	20070aa4 	.word	0x20070aa4
   80a20:	20070a08 	.word	0x20070a08

00080a24 <configureConsole>:
#include "consoleFunctions.h"

void configureConsole(void)
/* Enables feedback through the USB-cable back to terminal within Atmel Studio */
/* Note that  the baudrate, parity and other parameters must be set in conf/conf_uart_serial.h */
{
   80a24:	b530      	push	{r4, r5, lr}
   80a26:	b087      	sub	sp, #28
   80a28:	4c0e      	ldr	r4, [pc, #56]	; (80a64 <configureConsole+0x40>)
   80a2a:	4620      	mov	r0, r4
   80a2c:	4d0e      	ldr	r5, [pc, #56]	; (80a68 <configureConsole+0x44>)
   80a2e:	47a8      	blx	r5
	uart_settings.ul_baudrate = opt->baudrate;
	uart_settings.ul_mode = opt->paritytype;
#endif

	sam_usart_opt_t usart_settings;
	usart_settings.baudrate = opt->baudrate;
   80a30:	f44f 5316 	mov.w	r3, #9600	; 0x2580
   80a34:	9300      	str	r3, [sp, #0]
	usart_settings.char_length = opt->charlength;
   80a36:	23c0      	movs	r3, #192	; 0xc0
   80a38:	9301      	str	r3, [sp, #4]
	usart_settings.parity_type = opt->paritytype;
   80a3a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80a3e:	9302      	str	r3, [sp, #8]
	usart_settings.stop_bits= opt->stopbits;
   80a40:	2300      	movs	r3, #0
   80a42:	9303      	str	r3, [sp, #12]
	usart_settings.channel_mode= US_MR_CHMODE_NORMAL;
   80a44:	9304      	str	r3, [sp, #16]
   80a46:	2012      	movs	r0, #18
   80a48:	47a8      	blx	r5
		flexcom_set_opmode(FLEXCOM1, FLEXCOM_USART);
#else
		sysclk_enable_peripheral_clock(ID_USART1);
#endif
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
   80a4a:	4620      	mov	r0, r4
   80a4c:	4669      	mov	r1, sp
   80a4e:	4a07      	ldr	r2, [pc, #28]	; (80a6c <configureConsole+0x48>)
   80a50:	4b07      	ldr	r3, [pc, #28]	; (80a70 <configureConsole+0x4c>)
   80a52:	4798      	blx	r3
		/* Configure USART */
		usart_init_rs232(p_usart, &usart_settings,
				sysclk_get_peripheral_bus_hz(p_usart));
#endif
		/* Enable the receiver and transmitter. */
		usart_enable_tx(p_usart);
   80a54:	4620      	mov	r0, r4
   80a56:	4b07      	ldr	r3, [pc, #28]	; (80a74 <configureConsole+0x50>)
   80a58:	4798      	blx	r3
		usart_enable_rx(p_usart);
   80a5a:	4620      	mov	r0, r4
   80a5c:	4b06      	ldr	r3, [pc, #24]	; (80a78 <configureConsole+0x54>)
   80a5e:	4798      	blx	r3
	};

	/* Configure console UART. */
	sysclk_enable_peripheral_clock(BOARD_USART1_BASE);
	usart_serial_init(CONF_UART, &uart_serial_options);
   80a60:	b007      	add	sp, #28
   80a62:	bd30      	pop	{r4, r5, pc}
   80a64:	4009c000 	.word	0x4009c000
   80a68:	00080601 	.word	0x00080601
   80a6c:	0501bd00 	.word	0x0501bd00
   80a70:	00080735 	.word	0x00080735
   80a74:	00080789 	.word	0x00080789
   80a78:	00080791 	.word	0x00080791

00080a7c <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   80a7c:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   80a7e:	201b      	movs	r0, #27
   80a80:	4b08      	ldr	r3, [pc, #32]	; (80aa4 <delayInit+0x28>)
   80a82:	4798      	blx	r3
	tc_init(TC0,0,0);				/* TC0, channel 0, TCLK1 och capturemode */
   80a84:	4c08      	ldr	r4, [pc, #32]	; (80aa8 <delayInit+0x2c>)
   80a86:	4620      	mov	r0, r4
   80a88:	2100      	movs	r1, #0
   80a8a:	460a      	mov	r2, r1
   80a8c:	4b07      	ldr	r3, [pc, #28]	; (80aac <delayInit+0x30>)
   80a8e:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   80a90:	4620      	mov	r0, r4
   80a92:	2100      	movs	r1, #0
   80a94:	4b06      	ldr	r3, [pc, #24]	; (80ab0 <delayInit+0x34>)
   80a96:	4798      	blx	r3
	tc_stop(TC0,0);					/* making sure the timer does not run  */
   80a98:	4620      	mov	r0, r4
   80a9a:	2100      	movs	r1, #0
   80a9c:	4b05      	ldr	r3, [pc, #20]	; (80ab4 <delayInit+0x38>)
   80a9e:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   80aa0:	2000      	movs	r0, #0
   80aa2:	bd10      	pop	{r4, pc}
   80aa4:	00080601 	.word	0x00080601
   80aa8:	40080000 	.word	0x40080000
   80aac:	00080659 	.word	0x00080659
   80ab0:	00080675 	.word	0x00080675
   80ab4:	00080685 	.word	0x00080685

00080ab8 <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80ab8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80aba:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80abc:	4809      	ldr	r0, [pc, #36]	; (80ae4 <delayMicroseconds+0x2c>)
   80abe:	2100      	movs	r1, #0
   80ac0:	4b09      	ldr	r3, [pc, #36]	; (80ae8 <delayMicroseconds+0x30>)
   80ac2:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   80ac4:	272a      	movs	r7, #42	; 0x2a
   80ac6:	fb07 f704 	mul.w	r7, r7, r4
   80aca:	4e06      	ldr	r6, [pc, #24]	; (80ae4 <delayMicroseconds+0x2c>)
   80acc:	2500      	movs	r5, #0
   80ace:	4c07      	ldr	r4, [pc, #28]	; (80aec <delayMicroseconds+0x34>)
   80ad0:	4630      	mov	r0, r6
   80ad2:	4629      	mov	r1, r5
   80ad4:	47a0      	blx	r4
   80ad6:	42b8      	cmp	r0, r7
   80ad8:	d3fa      	bcc.n	80ad0 <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   80ada:	4802      	ldr	r0, [pc, #8]	; (80ae4 <delayMicroseconds+0x2c>)
   80adc:	2100      	movs	r1, #0
   80ade:	4b04      	ldr	r3, [pc, #16]	; (80af0 <delayMicroseconds+0x38>)
   80ae0:	4798      	blx	r3
   80ae2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ae4:	40080000 	.word	0x40080000
   80ae8:	0008067d 	.word	0x0008067d
   80aec:	0008068d 	.word	0x0008068d
   80af0:	00080685 	.word	0x00080685

00080af4 <lcdWriteAsciiString>:
	return 0;	/* Assuming everything went ok */
}

int lcdWriteAsciiString(const char *string)
/* writes an ascii string up to 40 characters on the LCD display */
{	
   80af4:	b570      	push	{r4, r5, r6, lr}
   80af6:	4604      	mov	r4, r0
	while (*string != '\0')
   80af8:	7800      	ldrb	r0, [r0, #0]
   80afa:	b138      	cbz	r0, 80b0c <lcdWriteAsciiString+0x18>
	{
		lcdWrite(*string, HIGH);	/*write the char the pointer points at*/
   80afc:	2601      	movs	r6, #1
   80afe:	4d04      	ldr	r5, [pc, #16]	; (80b10 <lcdWriteAsciiString+0x1c>)
   80b00:	4631      	mov	r1, r6
   80b02:	47a8      	blx	r5
}

int lcdWriteAsciiString(const char *string)
/* writes an ascii string up to 40 characters on the LCD display */
{	
	while (*string != '\0')
   80b04:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   80b08:	2800      	cmp	r0, #0
   80b0a:	d1f9      	bne.n	80b00 <lcdWriteAsciiString+0xc>
	{
		lcdWrite(*string, HIGH);	/*write the char the pointer points at*/
		string++;	/*point at the next char*/
	}	
	return 0;	/* Assuming everything went ok */
}
   80b0c:	2000      	movs	r0, #0
   80b0e:	bd70      	pop	{r4, r5, r6, pc}
   80b10:	00080b15 	.word	0x00080b15

00080b14 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   80b14:	b5f0      	push	{r4, r5, r6, r7, lr}
   80b16:	b085      	sub	sp, #20
   80b18:	4607      	mov	r7, r0
   80b1a:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   80b1c:	4b1e      	ldr	r3, [pc, #120]	; (80b98 <lcdWrite+0x84>)
   80b1e:	466c      	mov	r4, sp
   80b20:	6818      	ldr	r0, [r3, #0]
   80b22:	6859      	ldr	r1, [r3, #4]
   80b24:	689a      	ldr	r2, [r3, #8]
   80b26:	68db      	ldr	r3, [r3, #12]
   80b28:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   80b2a:	eb04 1317 	add.w	r3, r4, r7, lsr #4
	byte32 = (uint32_t)byte << 23;
   80b2e:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   80b32:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   80b34:	b125      	cbz	r5, 80b40 <lcdWrite+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80b36:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80b3a:	4a18      	ldr	r2, [pc, #96]	; (80b9c <lcdWrite+0x88>)
   80b3c:	6311      	str	r1, [r2, #48]	; 0x30
   80b3e:	e003      	b.n	80b48 <lcdWrite+0x34>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80b40:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80b44:	4a15      	ldr	r2, [pc, #84]	; (80b9c <lcdWrite+0x88>)
   80b46:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80b48:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   80b4c:	4c13      	ldr	r4, [pc, #76]	; (80b9c <lcdWrite+0x88>)
   80b4e:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80b50:	43db      	mvns	r3, r3
   80b52:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   80b56:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80b58:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   80b5c:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80b5e:	2001      	movs	r0, #1
   80b60:	4d0f      	ldr	r5, [pc, #60]	; (80ba0 <lcdWrite+0x8c>)
   80b62:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80b64:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(100);
   80b66:	2064      	movs	r0, #100	; 0x64
   80b68:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   80b6a:	f007 070f 	and.w	r7, r7, #15
   80b6e:	ab04      	add	r3, sp, #16
   80b70:	441f      	add	r7, r3
	byte32 = (uint32_t)byte<<23;
   80b72:	f817 3c10 	ldrb.w	r3, [r7, #-16]
   80b76:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80b78:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   80b7c:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   80b7e:	43db      	mvns	r3, r3
   80b80:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   80b84:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80b86:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80b88:	2001      	movs	r0, #1
   80b8a:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80b8c:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   80b8e:	2064      	movs	r0, #100	; 0x64
   80b90:	47a8      	blx	r5
	
	return 0;
}
   80b92:	2000      	movs	r0, #0
   80b94:	b005      	add	sp, #20
   80b96:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80b98:	00081688 	.word	0x00081688
   80b9c:	400e1200 	.word	0x400e1200
   80ba0:	00080ab9 	.word	0x00080ab9

00080ba4 <lcdInit>:
#include "lcdFunctions.h"
#include "delayFunctions.h"	/* The sam3x8e microcontroller can write faster than the LCD controller can handle its inputs */
#include "buttons.h"

int lcdInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   80ba4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80ba8:	4c34      	ldr	r4, [pc, #208]	; (80c7c <lcdInit+0xd8>)
   80baa:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   80bae:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80bb0:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80bb4:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   80bb8:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80bba:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   80bbe:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   80bc2:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   80bc4:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80bc8:	6365      	str	r5, [r4, #52]	; 0x34
	/* At power on */
	ioport_set_pin_dir(LCD_RS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(30000);		/* wait > 15 ms */
   80bca:	f247 5030 	movw	r0, #30000	; 0x7530
   80bce:	4e2c      	ldr	r6, [pc, #176]	; (80c80 <lcdInit+0xdc>)
   80bd0:	47b0      	blx	r6
   80bd2:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80bd4:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80bd8:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80bdc:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   80be0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80be4:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   80be8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80bec:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   80bf0:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80bf2:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);		/* wait 1 us */
   80bf4:	2001      	movs	r0, #1
   80bf6:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80bf8:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(4100);	/* wait for more than 4,1 ms */
   80bfa:	f241 0004 	movw	r0, #4100	; 0x1004
   80bfe:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c00:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80c04:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c08:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80c0c:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c0e:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* delay 1 us */
   80c10:	2001      	movs	r0, #1
   80c12:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c14:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);	/* wait 100 us */
   80c16:	2064      	movs	r0, #100	; 0x64
   80c18:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c1a:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80c1e:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c22:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80c26:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c28:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* wait 1 us */
   80c2a:	2001      	movs	r0, #1
   80c2c:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c2e:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);		
	delayMicroseconds(100);	/* wait 100 us */
   80c30:	2064      	movs	r0, #100	; 0x64
   80c32:	47b0      	blx	r6
   80c34:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c38:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c3c:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   80c40:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80c42:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80c44:	2001      	movs	r0, #1
   80c46:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80c48:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   80c4a:	2064      	movs	r0, #100	; 0x64
   80c4c:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   80c4e:	2028      	movs	r0, #40	; 0x28
   80c50:	2100      	movs	r1, #0
   80c52:	4c0c      	ldr	r4, [pc, #48]	; (80c84 <lcdInit+0xe0>)
   80c54:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   80c56:	2008      	movs	r0, #8
   80c58:	2100      	movs	r1, #0
   80c5a:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   80c5c:	2001      	movs	r0, #1
   80c5e:	2100      	movs	r1, #0
   80c60:	47a0      	blx	r4
	delayMicroseconds(3000);
   80c62:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80c66:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   80c68:	2006      	movs	r0, #6
   80c6a:	2100      	movs	r1, #0
   80c6c:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   80c6e:	200f      	movs	r0, #15
   80c70:	2100      	movs	r1, #0
   80c72:	47a0      	blx	r4

	all_ok = 0;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   80c74:	2000      	movs	r0, #0
   80c76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80c7a:	bf00      	nop
   80c7c:	400e1200 	.word	0x400e1200
   80c80:	00080ab9 	.word	0x00080ab9
   80c84:	00080b15 	.word	0x00080b15

00080c88 <lcdClearDisplay>:
	return 0;
}

/*clears the display*/
int lcdClearDisplay(void)
{
   80c88:	b508      	push	{r3, lr}
	lcdWrite(0x01, LOW);
   80c8a:	2001      	movs	r0, #1
   80c8c:	2100      	movs	r1, #0
   80c8e:	4b04      	ldr	r3, [pc, #16]	; (80ca0 <lcdClearDisplay+0x18>)
   80c90:	4798      	blx	r3
	delayMicroseconds(3000);	
   80c92:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80c96:	4b03      	ldr	r3, [pc, #12]	; (80ca4 <lcdClearDisplay+0x1c>)
   80c98:	4798      	blx	r3
	
	return 0;
}
   80c9a:	2000      	movs	r0, #0
   80c9c:	bd08      	pop	{r3, pc}
   80c9e:	bf00      	nop
   80ca0:	00080b15 	.word	0x00080b15
   80ca4:	00080ab9 	.word	0x00080ab9

00080ca8 <USART1_Handler>:
		}
	}
}

void USART1_Handler() {
	CONF_UART->US_CR |= (1 << US_CR_RSTRX);
   80ca8:	4b0a      	ldr	r3, [pc, #40]	; (80cd4 <USART1_Handler+0x2c>)
   80caa:	681a      	ldr	r2, [r3, #0]
   80cac:	f042 0210 	orr.w	r2, r2, #16
   80cb0:	601a      	str	r2, [r3, #0]
	rx[c_counter++] = CONF_UART->US_RHR & US_RHR_RXCHR_Msk;
   80cb2:	4809      	ldr	r0, [pc, #36]	; (80cd8 <USART1_Handler+0x30>)
   80cb4:	7801      	ldrb	r1, [r0, #0]
   80cb6:	1c4a      	adds	r2, r1, #1
   80cb8:	b2d2      	uxtb	r2, r2
   80cba:	7002      	strb	r2, [r0, #0]
   80cbc:	6998      	ldr	r0, [r3, #24]
   80cbe:	4b07      	ldr	r3, [pc, #28]	; (80cdc <USART1_Handler+0x34>)
   80cc0:	5458      	strb	r0, [r3, r1]
	if (c_counter > 8)
   80cc2:	2a08      	cmp	r2, #8
   80cc4:	d902      	bls.n	80ccc <USART1_Handler+0x24>
	{
		c_counter = 0;
   80cc6:	2200      	movs	r2, #0
   80cc8:	4b03      	ldr	r3, [pc, #12]	; (80cd8 <USART1_Handler+0x30>)
   80cca:	701a      	strb	r2, [r3, #0]
	}
	if (CONF_UART->US_CSR & (1 << US_CSR_RXBUFF))
   80ccc:	4b01      	ldr	r3, [pc, #4]	; (80cd4 <USART1_Handler+0x2c>)
   80cce:	695b      	ldr	r3, [r3, #20]
   80cd0:	4770      	bx	lr
   80cd2:	bf00      	nop
   80cd4:	4009c000 	.word	0x4009c000
   80cd8:	20070aa6 	.word	0x20070aa6
   80cdc:	20070adc 	.word	0x20070adc

00080ce0 <main>:
		lcdWrite('-', HIGH);
	}
}

int main (void)
{
   80ce0:	b508      	push	{r3, lr}
	sysclk_init();
   80ce2:	4b1d      	ldr	r3, [pc, #116]	; (80d58 <main+0x78>)
   80ce4:	4798      	blx	r3
	delayInit();
   80ce6:	4b1d      	ldr	r3, [pc, #116]	; (80d5c <main+0x7c>)
   80ce8:	4798      	blx	r3
	board_init();
   80cea:	4b1d      	ldr	r3, [pc, #116]	; (80d60 <main+0x80>)
   80cec:	4798      	blx	r3
	lcdInit();
   80cee:	4b1d      	ldr	r3, [pc, #116]	; (80d64 <main+0x84>)
   80cf0:	4798      	blx	r3
	configureConsole();
   80cf2:	4b1d      	ldr	r3, [pc, #116]	; (80d68 <main+0x88>)
   80cf4:	4798      	blx	r3

    \param [in]      IRQn  External interrupt number. Value cannot be negative.
 */
__STATIC_INLINE void NVIC_EnableIRQ(IRQn_Type IRQn)
{
  NVIC->ISER[((uint32_t)(IRQn) >> 5)] = (1 << ((uint32_t)(IRQn) & 0x1F)); /* enable interrupt */
   80cf6:	f44f 2280 	mov.w	r2, #262144	; 0x40000
   80cfa:	4b1c      	ldr	r3, [pc, #112]	; (80d6c <main+0x8c>)
   80cfc:	601a      	str	r2, [r3, #0]
	NVIC_EnableIRQ((IRQn_Type) ID_USART1);
	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);
   80cfe:	481c      	ldr	r0, [pc, #112]	; (80d70 <main+0x90>)
   80d00:	2101      	movs	r1, #1
   80d02:	4b1c      	ldr	r3, [pc, #112]	; (80d74 <main+0x94>)
   80d04:	4798      	blx	r3
	lcdWriteAsciiString("abc");
   80d06:	481c      	ldr	r0, [pc, #112]	; (80d78 <main+0x98>)
   80d08:	4b1c      	ldr	r3, [pc, #112]	; (80d7c <main+0x9c>)
   80d0a:	4798      	blx	r3
	delayMicroseconds(1000000);
   80d0c:	481c      	ldr	r0, [pc, #112]	; (80d80 <main+0xa0>)
   80d0e:	4b1d      	ldr	r3, [pc, #116]	; (80d84 <main+0xa4>)
   80d10:	4798      	blx	r3
	while (1)
	{
		lcdClearDisplay();
   80d12:	4e1d      	ldr	r6, [pc, #116]	; (80d88 <main+0xa8>)
		lcdWrite(rx[0], HIGH);
   80d14:	4d1d      	ldr	r5, [pc, #116]	; (80d8c <main+0xac>)
   80d16:	4c1e      	ldr	r4, [pc, #120]	; (80d90 <main+0xb0>)
	usart_enable_interrupt(CONF_UART, UART_IER_RXRDY);
	lcdWriteAsciiString("abc");
	delayMicroseconds(1000000);
	while (1)
	{
		lcdClearDisplay();
   80d18:	47b0      	blx	r6
		lcdWrite(rx[0], HIGH);
   80d1a:	7828      	ldrb	r0, [r5, #0]
   80d1c:	2101      	movs	r1, #1
   80d1e:	47a0      	blx	r4
		lcdWrite(rx[1], HIGH);
   80d20:	7868      	ldrb	r0, [r5, #1]
   80d22:	2101      	movs	r1, #1
   80d24:	47a0      	blx	r4
		lcdWrite(rx[2], HIGH);
   80d26:	78a8      	ldrb	r0, [r5, #2]
   80d28:	2101      	movs	r1, #1
   80d2a:	47a0      	blx	r4
		lcdWrite(rx[3], HIGH);
   80d2c:	78e8      	ldrb	r0, [r5, #3]
   80d2e:	2101      	movs	r1, #1
   80d30:	47a0      	blx	r4
		lcdWrite(0xC0, LOW);
   80d32:	20c0      	movs	r0, #192	; 0xc0
   80d34:	2100      	movs	r1, #0
   80d36:	47a0      	blx	r4
		lcdWrite(rx[5], HIGH);
   80d38:	7968      	ldrb	r0, [r5, #5]
   80d3a:	2101      	movs	r1, #1
   80d3c:	47a0      	blx	r4
		lcdWrite(rx[6], HIGH);
   80d3e:	79a8      	ldrb	r0, [r5, #6]
   80d40:	2101      	movs	r1, #1
   80d42:	47a0      	blx	r4
		lcdWrite(rx[7], HIGH);
   80d44:	79e8      	ldrb	r0, [r5, #7]
   80d46:	2101      	movs	r1, #1
   80d48:	47a0      	blx	r4
		lcdWrite(rx[8], HIGH);
   80d4a:	7a28      	ldrb	r0, [r5, #8]
   80d4c:	2101      	movs	r1, #1
   80d4e:	47a0      	blx	r4
		delayMicroseconds(250000);
   80d50:	4810      	ldr	r0, [pc, #64]	; (80d94 <main+0xb4>)
   80d52:	4b0c      	ldr	r3, [pc, #48]	; (80d84 <main+0xa4>)
   80d54:	4798      	blx	r3
   80d56:	e7df      	b.n	80d18 <main+0x38>
   80d58:	00080149 	.word	0x00080149
   80d5c:	00080a7d 	.word	0x00080a7d
   80d60:	00080271 	.word	0x00080271
   80d64:	00080ba5 	.word	0x00080ba5
   80d68:	00080a25 	.word	0x00080a25
   80d6c:	e000e100 	.word	0xe000e100
   80d70:	4009c000 	.word	0x4009c000
   80d74:	00080799 	.word	0x00080799
   80d78:	0008176c 	.word	0x0008176c
   80d7c:	00080af5 	.word	0x00080af5
   80d80:	000f4240 	.word	0x000f4240
   80d84:	00080ab9 	.word	0x00080ab9
   80d88:	00080c89 	.word	0x00080c89
   80d8c:	20070adc 	.word	0x20070adc
   80d90:	00080b15 	.word	0x00080b15
   80d94:	0003d090 	.word	0x0003d090

00080d98 <__libc_init_array>:
   80d98:	b570      	push	{r4, r5, r6, lr}
   80d9a:	4e0f      	ldr	r6, [pc, #60]	; (80dd8 <__libc_init_array+0x40>)
   80d9c:	4d0f      	ldr	r5, [pc, #60]	; (80ddc <__libc_init_array+0x44>)
   80d9e:	1b76      	subs	r6, r6, r5
   80da0:	10b6      	asrs	r6, r6, #2
   80da2:	d007      	beq.n	80db4 <__libc_init_array+0x1c>
   80da4:	3d04      	subs	r5, #4
   80da6:	2400      	movs	r4, #0
   80da8:	3401      	adds	r4, #1
   80daa:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80dae:	4798      	blx	r3
   80db0:	42a6      	cmp	r6, r4
   80db2:	d1f9      	bne.n	80da8 <__libc_init_array+0x10>
   80db4:	4e0a      	ldr	r6, [pc, #40]	; (80de0 <__libc_init_array+0x48>)
   80db6:	4d0b      	ldr	r5, [pc, #44]	; (80de4 <__libc_init_array+0x4c>)
   80db8:	f000 fcde 	bl	81778 <_init>
   80dbc:	1b76      	subs	r6, r6, r5
   80dbe:	10b6      	asrs	r6, r6, #2
   80dc0:	d008      	beq.n	80dd4 <__libc_init_array+0x3c>
   80dc2:	3d04      	subs	r5, #4
   80dc4:	2400      	movs	r4, #0
   80dc6:	3401      	adds	r4, #1
   80dc8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80dcc:	4798      	blx	r3
   80dce:	42a6      	cmp	r6, r4
   80dd0:	d1f9      	bne.n	80dc6 <__libc_init_array+0x2e>
   80dd2:	bd70      	pop	{r4, r5, r6, pc}
   80dd4:	bd70      	pop	{r4, r5, r6, pc}
   80dd6:	bf00      	nop
   80dd8:	00081784 	.word	0x00081784
   80ddc:	00081784 	.word	0x00081784
   80de0:	0008178c 	.word	0x0008178c
   80de4:	00081784 	.word	0x00081784

00080de8 <register_fini>:
   80de8:	4b02      	ldr	r3, [pc, #8]	; (80df4 <register_fini+0xc>)
   80dea:	b113      	cbz	r3, 80df2 <register_fini+0xa>
   80dec:	4802      	ldr	r0, [pc, #8]	; (80df8 <register_fini+0x10>)
   80dee:	f000 b805 	b.w	80dfc <atexit>
   80df2:	4770      	bx	lr
   80df4:	00000000 	.word	0x00000000
   80df8:	00080e09 	.word	0x00080e09

00080dfc <atexit>:
   80dfc:	4601      	mov	r1, r0
   80dfe:	2000      	movs	r0, #0
   80e00:	4602      	mov	r2, r0
   80e02:	4603      	mov	r3, r0
   80e04:	f000 bbec 	b.w	815e0 <__register_exitproc>

00080e08 <__libc_fini_array>:
   80e08:	b538      	push	{r3, r4, r5, lr}
   80e0a:	4d09      	ldr	r5, [pc, #36]	; (80e30 <__libc_fini_array+0x28>)
   80e0c:	4c09      	ldr	r4, [pc, #36]	; (80e34 <__libc_fini_array+0x2c>)
   80e0e:	1b64      	subs	r4, r4, r5
   80e10:	10a4      	asrs	r4, r4, #2
   80e12:	bf18      	it	ne
   80e14:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80e18:	d005      	beq.n	80e26 <__libc_fini_array+0x1e>
   80e1a:	3c01      	subs	r4, #1
   80e1c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80e20:	4798      	blx	r3
   80e22:	2c00      	cmp	r4, #0
   80e24:	d1f9      	bne.n	80e1a <__libc_fini_array+0x12>
   80e26:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80e2a:	f000 bcaf 	b.w	8178c <_fini>
   80e2e:	bf00      	nop
   80e30:	00081798 	.word	0x00081798
   80e34:	0008179c 	.word	0x0008179c

00080e38 <_malloc_trim_r>:
   80e38:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80e3a:	4d23      	ldr	r5, [pc, #140]	; (80ec8 <_malloc_trim_r+0x90>)
   80e3c:	460f      	mov	r7, r1
   80e3e:	4604      	mov	r4, r0
   80e40:	f000 fbb8 	bl	815b4 <__malloc_lock>
   80e44:	68ab      	ldr	r3, [r5, #8]
   80e46:	685e      	ldr	r6, [r3, #4]
   80e48:	f026 0603 	bic.w	r6, r6, #3
   80e4c:	1bf1      	subs	r1, r6, r7
   80e4e:	f601 71ef 	addw	r1, r1, #4079	; 0xfef
   80e52:	f421 617f 	bic.w	r1, r1, #4080	; 0xff0
   80e56:	f021 010f 	bic.w	r1, r1, #15
   80e5a:	f5a1 5780 	sub.w	r7, r1, #4096	; 0x1000
   80e5e:	f5b7 5f80 	cmp.w	r7, #4096	; 0x1000
   80e62:	db07      	blt.n	80e74 <_malloc_trim_r+0x3c>
   80e64:	4620      	mov	r0, r4
   80e66:	2100      	movs	r1, #0
   80e68:	f000 fba8 	bl	815bc <_sbrk_r>
   80e6c:	68ab      	ldr	r3, [r5, #8]
   80e6e:	4433      	add	r3, r6
   80e70:	4298      	cmp	r0, r3
   80e72:	d004      	beq.n	80e7e <_malloc_trim_r+0x46>
   80e74:	4620      	mov	r0, r4
   80e76:	f000 fb9f 	bl	815b8 <__malloc_unlock>
   80e7a:	2000      	movs	r0, #0
   80e7c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80e7e:	4620      	mov	r0, r4
   80e80:	4279      	negs	r1, r7
   80e82:	f000 fb9b 	bl	815bc <_sbrk_r>
   80e86:	3001      	adds	r0, #1
   80e88:	d00d      	beq.n	80ea6 <_malloc_trim_r+0x6e>
   80e8a:	4b10      	ldr	r3, [pc, #64]	; (80ecc <_malloc_trim_r+0x94>)
   80e8c:	68aa      	ldr	r2, [r5, #8]
   80e8e:	6819      	ldr	r1, [r3, #0]
   80e90:	1bf6      	subs	r6, r6, r7
   80e92:	f046 0601 	orr.w	r6, r6, #1
   80e96:	4620      	mov	r0, r4
   80e98:	1bc9      	subs	r1, r1, r7
   80e9a:	6056      	str	r6, [r2, #4]
   80e9c:	6019      	str	r1, [r3, #0]
   80e9e:	f000 fb8b 	bl	815b8 <__malloc_unlock>
   80ea2:	2001      	movs	r0, #1
   80ea4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   80ea6:	4620      	mov	r0, r4
   80ea8:	2100      	movs	r1, #0
   80eaa:	f000 fb87 	bl	815bc <_sbrk_r>
   80eae:	68ab      	ldr	r3, [r5, #8]
   80eb0:	1ac2      	subs	r2, r0, r3
   80eb2:	2a0f      	cmp	r2, #15
   80eb4:	ddde      	ble.n	80e74 <_malloc_trim_r+0x3c>
   80eb6:	4d06      	ldr	r5, [pc, #24]	; (80ed0 <_malloc_trim_r+0x98>)
   80eb8:	4904      	ldr	r1, [pc, #16]	; (80ecc <_malloc_trim_r+0x94>)
   80eba:	682d      	ldr	r5, [r5, #0]
   80ebc:	f042 0201 	orr.w	r2, r2, #1
   80ec0:	1b40      	subs	r0, r0, r5
   80ec2:	605a      	str	r2, [r3, #4]
   80ec4:	6008      	str	r0, [r1, #0]
   80ec6:	e7d5      	b.n	80e74 <_malloc_trim_r+0x3c>
   80ec8:	20070564 	.word	0x20070564
   80ecc:	20070ab4 	.word	0x20070ab4
   80ed0:	20070970 	.word	0x20070970

00080ed4 <_free_r>:
   80ed4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80ed8:	460d      	mov	r5, r1
   80eda:	4606      	mov	r6, r0
   80edc:	2900      	cmp	r1, #0
   80ede:	d055      	beq.n	80f8c <_free_r+0xb8>
   80ee0:	f000 fb68 	bl	815b4 <__malloc_lock>
   80ee4:	f855 1c04 	ldr.w	r1, [r5, #-4]
   80ee8:	f8df c170 	ldr.w	ip, [pc, #368]	; 8105c <_free_r+0x188>
   80eec:	f1a5 0408 	sub.w	r4, r5, #8
   80ef0:	f021 0301 	bic.w	r3, r1, #1
   80ef4:	18e2      	adds	r2, r4, r3
   80ef6:	f8dc 0008 	ldr.w	r0, [ip, #8]
   80efa:	6857      	ldr	r7, [r2, #4]
   80efc:	4290      	cmp	r0, r2
   80efe:	f027 0703 	bic.w	r7, r7, #3
   80f02:	d068      	beq.n	80fd6 <_free_r+0x102>
   80f04:	f011 0101 	ands.w	r1, r1, #1
   80f08:	6057      	str	r7, [r2, #4]
   80f0a:	d032      	beq.n	80f72 <_free_r+0x9e>
   80f0c:	2100      	movs	r1, #0
   80f0e:	19d0      	adds	r0, r2, r7
   80f10:	6840      	ldr	r0, [r0, #4]
   80f12:	07c0      	lsls	r0, r0, #31
   80f14:	d406      	bmi.n	80f24 <_free_r+0x50>
   80f16:	443b      	add	r3, r7
   80f18:	6890      	ldr	r0, [r2, #8]
   80f1a:	2900      	cmp	r1, #0
   80f1c:	d04d      	beq.n	80fba <_free_r+0xe6>
   80f1e:	68d2      	ldr	r2, [r2, #12]
   80f20:	60c2      	str	r2, [r0, #12]
   80f22:	6090      	str	r0, [r2, #8]
   80f24:	f043 0201 	orr.w	r2, r3, #1
   80f28:	6062      	str	r2, [r4, #4]
   80f2a:	50e3      	str	r3, [r4, r3]
   80f2c:	b9e1      	cbnz	r1, 80f68 <_free_r+0x94>
   80f2e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
   80f32:	d32d      	bcc.n	80f90 <_free_r+0xbc>
   80f34:	0a5a      	lsrs	r2, r3, #9
   80f36:	2a04      	cmp	r2, #4
   80f38:	d869      	bhi.n	8100e <_free_r+0x13a>
   80f3a:	0998      	lsrs	r0, r3, #6
   80f3c:	3038      	adds	r0, #56	; 0x38
   80f3e:	0041      	lsls	r1, r0, #1
   80f40:	eb0c 0c81 	add.w	ip, ip, r1, lsl #2
   80f44:	f8dc 2008 	ldr.w	r2, [ip, #8]
   80f48:	4944      	ldr	r1, [pc, #272]	; (8105c <_free_r+0x188>)
   80f4a:	4562      	cmp	r2, ip
   80f4c:	d065      	beq.n	8101a <_free_r+0x146>
   80f4e:	6851      	ldr	r1, [r2, #4]
   80f50:	f021 0103 	bic.w	r1, r1, #3
   80f54:	428b      	cmp	r3, r1
   80f56:	d202      	bcs.n	80f5e <_free_r+0x8a>
   80f58:	6892      	ldr	r2, [r2, #8]
   80f5a:	4594      	cmp	ip, r2
   80f5c:	d1f7      	bne.n	80f4e <_free_r+0x7a>
   80f5e:	68d3      	ldr	r3, [r2, #12]
   80f60:	60e3      	str	r3, [r4, #12]
   80f62:	60a2      	str	r2, [r4, #8]
   80f64:	609c      	str	r4, [r3, #8]
   80f66:	60d4      	str	r4, [r2, #12]
   80f68:	4630      	mov	r0, r6
   80f6a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80f6e:	f000 bb23 	b.w	815b8 <__malloc_unlock>
   80f72:	f855 5c08 	ldr.w	r5, [r5, #-8]
   80f76:	f10c 0808 	add.w	r8, ip, #8
   80f7a:	1b64      	subs	r4, r4, r5
   80f7c:	68a0      	ldr	r0, [r4, #8]
   80f7e:	442b      	add	r3, r5
   80f80:	4540      	cmp	r0, r8
   80f82:	d042      	beq.n	8100a <_free_r+0x136>
   80f84:	68e5      	ldr	r5, [r4, #12]
   80f86:	60c5      	str	r5, [r0, #12]
   80f88:	60a8      	str	r0, [r5, #8]
   80f8a:	e7c0      	b.n	80f0e <_free_r+0x3a>
   80f8c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80f90:	08db      	lsrs	r3, r3, #3
   80f92:	109a      	asrs	r2, r3, #2
   80f94:	2001      	movs	r0, #1
   80f96:	4090      	lsls	r0, r2
   80f98:	f8dc 1004 	ldr.w	r1, [ip, #4]
   80f9c:	eb0c 03c3 	add.w	r3, ip, r3, lsl #3
   80fa0:	689a      	ldr	r2, [r3, #8]
   80fa2:	4301      	orrs	r1, r0
   80fa4:	60a2      	str	r2, [r4, #8]
   80fa6:	60e3      	str	r3, [r4, #12]
   80fa8:	f8cc 1004 	str.w	r1, [ip, #4]
   80fac:	4630      	mov	r0, r6
   80fae:	609c      	str	r4, [r3, #8]
   80fb0:	60d4      	str	r4, [r2, #12]
   80fb2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
   80fb6:	f000 baff 	b.w	815b8 <__malloc_unlock>
   80fba:	4d29      	ldr	r5, [pc, #164]	; (81060 <_free_r+0x18c>)
   80fbc:	42a8      	cmp	r0, r5
   80fbe:	d1ae      	bne.n	80f1e <_free_r+0x4a>
   80fc0:	f043 0201 	orr.w	r2, r3, #1
   80fc4:	f8cc 4014 	str.w	r4, [ip, #20]
   80fc8:	f8cc 4010 	str.w	r4, [ip, #16]
   80fcc:	60e0      	str	r0, [r4, #12]
   80fce:	60a0      	str	r0, [r4, #8]
   80fd0:	6062      	str	r2, [r4, #4]
   80fd2:	50e3      	str	r3, [r4, r3]
   80fd4:	e7c8      	b.n	80f68 <_free_r+0x94>
   80fd6:	441f      	add	r7, r3
   80fd8:	07cb      	lsls	r3, r1, #31
   80fda:	d407      	bmi.n	80fec <_free_r+0x118>
   80fdc:	f855 1c08 	ldr.w	r1, [r5, #-8]
   80fe0:	1a64      	subs	r4, r4, r1
   80fe2:	68e3      	ldr	r3, [r4, #12]
   80fe4:	68a2      	ldr	r2, [r4, #8]
   80fe6:	440f      	add	r7, r1
   80fe8:	60d3      	str	r3, [r2, #12]
   80fea:	609a      	str	r2, [r3, #8]
   80fec:	4b1d      	ldr	r3, [pc, #116]	; (81064 <_free_r+0x190>)
   80fee:	f047 0201 	orr.w	r2, r7, #1
   80ff2:	681b      	ldr	r3, [r3, #0]
   80ff4:	6062      	str	r2, [r4, #4]
   80ff6:	429f      	cmp	r7, r3
   80ff8:	f8cc 4008 	str.w	r4, [ip, #8]
   80ffc:	d3b4      	bcc.n	80f68 <_free_r+0x94>
   80ffe:	4b1a      	ldr	r3, [pc, #104]	; (81068 <_free_r+0x194>)
   81000:	4630      	mov	r0, r6
   81002:	6819      	ldr	r1, [r3, #0]
   81004:	f7ff ff18 	bl	80e38 <_malloc_trim_r>
   81008:	e7ae      	b.n	80f68 <_free_r+0x94>
   8100a:	2101      	movs	r1, #1
   8100c:	e77f      	b.n	80f0e <_free_r+0x3a>
   8100e:	2a14      	cmp	r2, #20
   81010:	d80b      	bhi.n	8102a <_free_r+0x156>
   81012:	f102 005b 	add.w	r0, r2, #91	; 0x5b
   81016:	0041      	lsls	r1, r0, #1
   81018:	e792      	b.n	80f40 <_free_r+0x6c>
   8101a:	1080      	asrs	r0, r0, #2
   8101c:	2501      	movs	r5, #1
   8101e:	4085      	lsls	r5, r0
   81020:	6848      	ldr	r0, [r1, #4]
   81022:	4613      	mov	r3, r2
   81024:	4328      	orrs	r0, r5
   81026:	6048      	str	r0, [r1, #4]
   81028:	e79a      	b.n	80f60 <_free_r+0x8c>
   8102a:	2a54      	cmp	r2, #84	; 0x54
   8102c:	d803      	bhi.n	81036 <_free_r+0x162>
   8102e:	0b18      	lsrs	r0, r3, #12
   81030:	306e      	adds	r0, #110	; 0x6e
   81032:	0041      	lsls	r1, r0, #1
   81034:	e784      	b.n	80f40 <_free_r+0x6c>
   81036:	f5b2 7faa 	cmp.w	r2, #340	; 0x154
   8103a:	d803      	bhi.n	81044 <_free_r+0x170>
   8103c:	0bd8      	lsrs	r0, r3, #15
   8103e:	3077      	adds	r0, #119	; 0x77
   81040:	0041      	lsls	r1, r0, #1
   81042:	e77d      	b.n	80f40 <_free_r+0x6c>
   81044:	f240 5154 	movw	r1, #1364	; 0x554
   81048:	428a      	cmp	r2, r1
   8104a:	d803      	bhi.n	81054 <_free_r+0x180>
   8104c:	0c98      	lsrs	r0, r3, #18
   8104e:	307c      	adds	r0, #124	; 0x7c
   81050:	0041      	lsls	r1, r0, #1
   81052:	e775      	b.n	80f40 <_free_r+0x6c>
   81054:	21fc      	movs	r1, #252	; 0xfc
   81056:	207e      	movs	r0, #126	; 0x7e
   81058:	e772      	b.n	80f40 <_free_r+0x6c>
   8105a:	bf00      	nop
   8105c:	20070564 	.word	0x20070564
   81060:	2007056c 	.word	0x2007056c
   81064:	2007096c 	.word	0x2007096c
   81068:	20070ab0 	.word	0x20070ab0

0008106c <malloc>:
   8106c:	4b02      	ldr	r3, [pc, #8]	; (81078 <malloc+0xc>)
   8106e:	4601      	mov	r1, r0
   81070:	6818      	ldr	r0, [r3, #0]
   81072:	f000 b803 	b.w	8107c <_malloc_r>
   81076:	bf00      	nop
   81078:	20070560 	.word	0x20070560

0008107c <_malloc_r>:
   8107c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
   81080:	f101 050b 	add.w	r5, r1, #11
   81084:	2d16      	cmp	r5, #22
   81086:	b083      	sub	sp, #12
   81088:	4606      	mov	r6, r0
   8108a:	d927      	bls.n	810dc <_malloc_r+0x60>
   8108c:	f035 0507 	bics.w	r5, r5, #7
   81090:	d427      	bmi.n	810e2 <_malloc_r+0x66>
   81092:	42a9      	cmp	r1, r5
   81094:	d825      	bhi.n	810e2 <_malloc_r+0x66>
   81096:	4630      	mov	r0, r6
   81098:	f000 fa8c 	bl	815b4 <__malloc_lock>
   8109c:	f5b5 7ffc 	cmp.w	r5, #504	; 0x1f8
   810a0:	d226      	bcs.n	810f0 <_malloc_r+0x74>
   810a2:	4fc1      	ldr	r7, [pc, #772]	; (813a8 <_malloc_r+0x32c>)
   810a4:	ea4f 0cd5 	mov.w	ip, r5, lsr #3
   810a8:	eb07 03cc 	add.w	r3, r7, ip, lsl #3
   810ac:	68dc      	ldr	r4, [r3, #12]
   810ae:	429c      	cmp	r4, r3
   810b0:	f000 81d2 	beq.w	81458 <_malloc_r+0x3dc>
   810b4:	6863      	ldr	r3, [r4, #4]
   810b6:	68e2      	ldr	r2, [r4, #12]
   810b8:	f023 0303 	bic.w	r3, r3, #3
   810bc:	4423      	add	r3, r4
   810be:	6858      	ldr	r0, [r3, #4]
   810c0:	68a1      	ldr	r1, [r4, #8]
   810c2:	f040 0501 	orr.w	r5, r0, #1
   810c6:	60ca      	str	r2, [r1, #12]
   810c8:	4630      	mov	r0, r6
   810ca:	6091      	str	r1, [r2, #8]
   810cc:	605d      	str	r5, [r3, #4]
   810ce:	f000 fa73 	bl	815b8 <__malloc_unlock>
   810d2:	3408      	adds	r4, #8
   810d4:	4620      	mov	r0, r4
   810d6:	b003      	add	sp, #12
   810d8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810dc:	2510      	movs	r5, #16
   810de:	42a9      	cmp	r1, r5
   810e0:	d9d9      	bls.n	81096 <_malloc_r+0x1a>
   810e2:	2400      	movs	r4, #0
   810e4:	230c      	movs	r3, #12
   810e6:	4620      	mov	r0, r4
   810e8:	6033      	str	r3, [r6, #0]
   810ea:	b003      	add	sp, #12
   810ec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   810f0:	ea5f 2c55 	movs.w	ip, r5, lsr #9
   810f4:	f000 8089 	beq.w	8120a <_malloc_r+0x18e>
   810f8:	f1bc 0f04 	cmp.w	ip, #4
   810fc:	f200 8160 	bhi.w	813c0 <_malloc_r+0x344>
   81100:	ea4f 1c95 	mov.w	ip, r5, lsr #6
   81104:	f10c 0c38 	add.w	ip, ip, #56	; 0x38
   81108:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8110c:	4fa6      	ldr	r7, [pc, #664]	; (813a8 <_malloc_r+0x32c>)
   8110e:	eb07 0181 	add.w	r1, r7, r1, lsl #2
   81112:	68cc      	ldr	r4, [r1, #12]
   81114:	42a1      	cmp	r1, r4
   81116:	d105      	bne.n	81124 <_malloc_r+0xa8>
   81118:	e00c      	b.n	81134 <_malloc_r+0xb8>
   8111a:	2b00      	cmp	r3, #0
   8111c:	da79      	bge.n	81212 <_malloc_r+0x196>
   8111e:	68e4      	ldr	r4, [r4, #12]
   81120:	42a1      	cmp	r1, r4
   81122:	d007      	beq.n	81134 <_malloc_r+0xb8>
   81124:	6862      	ldr	r2, [r4, #4]
   81126:	f022 0203 	bic.w	r2, r2, #3
   8112a:	1b53      	subs	r3, r2, r5
   8112c:	2b0f      	cmp	r3, #15
   8112e:	ddf4      	ble.n	8111a <_malloc_r+0x9e>
   81130:	f10c 3cff 	add.w	ip, ip, #4294967295
   81134:	f10c 0c01 	add.w	ip, ip, #1
   81138:	4b9b      	ldr	r3, [pc, #620]	; (813a8 <_malloc_r+0x32c>)
   8113a:	693c      	ldr	r4, [r7, #16]
   8113c:	f103 0e08 	add.w	lr, r3, #8
   81140:	4574      	cmp	r4, lr
   81142:	f000 817e 	beq.w	81442 <_malloc_r+0x3c6>
   81146:	6861      	ldr	r1, [r4, #4]
   81148:	f021 0103 	bic.w	r1, r1, #3
   8114c:	1b4a      	subs	r2, r1, r5
   8114e:	2a0f      	cmp	r2, #15
   81150:	f300 8164 	bgt.w	8141c <_malloc_r+0x3a0>
   81154:	2a00      	cmp	r2, #0
   81156:	f8c3 e014 	str.w	lr, [r3, #20]
   8115a:	f8c3 e010 	str.w	lr, [r3, #16]
   8115e:	da69      	bge.n	81234 <_malloc_r+0x1b8>
   81160:	f5b1 7f00 	cmp.w	r1, #512	; 0x200
   81164:	f080 813a 	bcs.w	813dc <_malloc_r+0x360>
   81168:	08c9      	lsrs	r1, r1, #3
   8116a:	108a      	asrs	r2, r1, #2
   8116c:	f04f 0801 	mov.w	r8, #1
   81170:	fa08 f802 	lsl.w	r8, r8, r2
   81174:	eb03 01c1 	add.w	r1, r3, r1, lsl #3
   81178:	685a      	ldr	r2, [r3, #4]
   8117a:	6888      	ldr	r0, [r1, #8]
   8117c:	ea48 0202 	orr.w	r2, r8, r2
   81180:	60a0      	str	r0, [r4, #8]
   81182:	60e1      	str	r1, [r4, #12]
   81184:	605a      	str	r2, [r3, #4]
   81186:	608c      	str	r4, [r1, #8]
   81188:	60c4      	str	r4, [r0, #12]
   8118a:	ea4f 03ac 	mov.w	r3, ip, asr #2
   8118e:	2001      	movs	r0, #1
   81190:	4098      	lsls	r0, r3
   81192:	4290      	cmp	r0, r2
   81194:	d85b      	bhi.n	8124e <_malloc_r+0x1d2>
   81196:	4202      	tst	r2, r0
   81198:	d106      	bne.n	811a8 <_malloc_r+0x12c>
   8119a:	f02c 0c03 	bic.w	ip, ip, #3
   8119e:	0040      	lsls	r0, r0, #1
   811a0:	4202      	tst	r2, r0
   811a2:	f10c 0c04 	add.w	ip, ip, #4
   811a6:	d0fa      	beq.n	8119e <_malloc_r+0x122>
   811a8:	eb07 08cc 	add.w	r8, r7, ip, lsl #3
   811ac:	4644      	mov	r4, r8
   811ae:	46e1      	mov	r9, ip
   811b0:	68e3      	ldr	r3, [r4, #12]
   811b2:	429c      	cmp	r4, r3
   811b4:	d107      	bne.n	811c6 <_malloc_r+0x14a>
   811b6:	e146      	b.n	81446 <_malloc_r+0x3ca>
   811b8:	2a00      	cmp	r2, #0
   811ba:	f280 8157 	bge.w	8146c <_malloc_r+0x3f0>
   811be:	68db      	ldr	r3, [r3, #12]
   811c0:	429c      	cmp	r4, r3
   811c2:	f000 8140 	beq.w	81446 <_malloc_r+0x3ca>
   811c6:	6859      	ldr	r1, [r3, #4]
   811c8:	f021 0103 	bic.w	r1, r1, #3
   811cc:	1b4a      	subs	r2, r1, r5
   811ce:	2a0f      	cmp	r2, #15
   811d0:	ddf2      	ble.n	811b8 <_malloc_r+0x13c>
   811d2:	461c      	mov	r4, r3
   811d4:	f854 cf08 	ldr.w	ip, [r4, #8]!
   811d8:	68d9      	ldr	r1, [r3, #12]
   811da:	f045 0901 	orr.w	r9, r5, #1
   811de:	f042 0801 	orr.w	r8, r2, #1
   811e2:	441d      	add	r5, r3
   811e4:	f8c3 9004 	str.w	r9, [r3, #4]
   811e8:	4630      	mov	r0, r6
   811ea:	f8cc 100c 	str.w	r1, [ip, #12]
   811ee:	f8c1 c008 	str.w	ip, [r1, #8]
   811f2:	617d      	str	r5, [r7, #20]
   811f4:	613d      	str	r5, [r7, #16]
   811f6:	f8c5 e00c 	str.w	lr, [r5, #12]
   811fa:	f8c5 e008 	str.w	lr, [r5, #8]
   811fe:	f8c5 8004 	str.w	r8, [r5, #4]
   81202:	50aa      	str	r2, [r5, r2]
   81204:	f000 f9d8 	bl	815b8 <__malloc_unlock>
   81208:	e764      	b.n	810d4 <_malloc_r+0x58>
   8120a:	217e      	movs	r1, #126	; 0x7e
   8120c:	f04f 0c3f 	mov.w	ip, #63	; 0x3f
   81210:	e77c      	b.n	8110c <_malloc_r+0x90>
   81212:	4422      	add	r2, r4
   81214:	6850      	ldr	r0, [r2, #4]
   81216:	68e3      	ldr	r3, [r4, #12]
   81218:	68a1      	ldr	r1, [r4, #8]
   8121a:	f040 0501 	orr.w	r5, r0, #1
   8121e:	60cb      	str	r3, [r1, #12]
   81220:	4630      	mov	r0, r6
   81222:	6099      	str	r1, [r3, #8]
   81224:	6055      	str	r5, [r2, #4]
   81226:	f000 f9c7 	bl	815b8 <__malloc_unlock>
   8122a:	3408      	adds	r4, #8
   8122c:	4620      	mov	r0, r4
   8122e:	b003      	add	sp, #12
   81230:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   81234:	4421      	add	r1, r4
   81236:	684b      	ldr	r3, [r1, #4]
   81238:	4630      	mov	r0, r6
   8123a:	f043 0301 	orr.w	r3, r3, #1
   8123e:	604b      	str	r3, [r1, #4]
   81240:	f000 f9ba 	bl	815b8 <__malloc_unlock>
   81244:	3408      	adds	r4, #8
   81246:	4620      	mov	r0, r4
   81248:	b003      	add	sp, #12
   8124a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   8124e:	68bc      	ldr	r4, [r7, #8]
   81250:	6863      	ldr	r3, [r4, #4]
   81252:	f023 0903 	bic.w	r9, r3, #3
   81256:	45a9      	cmp	r9, r5
   81258:	d304      	bcc.n	81264 <_malloc_r+0x1e8>
   8125a:	ebc5 0309 	rsb	r3, r5, r9
   8125e:	2b0f      	cmp	r3, #15
   81260:	f300 8091 	bgt.w	81386 <_malloc_r+0x30a>
   81264:	4b51      	ldr	r3, [pc, #324]	; (813ac <_malloc_r+0x330>)
   81266:	4a52      	ldr	r2, [pc, #328]	; (813b0 <_malloc_r+0x334>)
   81268:	6819      	ldr	r1, [r3, #0]
   8126a:	6813      	ldr	r3, [r2, #0]
   8126c:	eb05 0a01 	add.w	sl, r5, r1
   81270:	3301      	adds	r3, #1
   81272:	eb04 0b09 	add.w	fp, r4, r9
   81276:	f000 8161 	beq.w	8153c <_malloc_r+0x4c0>
   8127a:	f50a 5a80 	add.w	sl, sl, #4096	; 0x1000
   8127e:	f10a 0a0f 	add.w	sl, sl, #15
   81282:	f42a 6a7f 	bic.w	sl, sl, #4080	; 0xff0
   81286:	f02a 0a0f 	bic.w	sl, sl, #15
   8128a:	4630      	mov	r0, r6
   8128c:	4651      	mov	r1, sl
   8128e:	9201      	str	r2, [sp, #4]
   81290:	f000 f994 	bl	815bc <_sbrk_r>
   81294:	f1b0 3fff 	cmp.w	r0, #4294967295
   81298:	4680      	mov	r8, r0
   8129a:	9a01      	ldr	r2, [sp, #4]
   8129c:	f000 8101 	beq.w	814a2 <_malloc_r+0x426>
   812a0:	4583      	cmp	fp, r0
   812a2:	f200 80fb 	bhi.w	8149c <_malloc_r+0x420>
   812a6:	f8df c114 	ldr.w	ip, [pc, #276]	; 813bc <_malloc_r+0x340>
   812aa:	45c3      	cmp	fp, r8
   812ac:	f8dc 3000 	ldr.w	r3, [ip]
   812b0:	4453      	add	r3, sl
   812b2:	f8cc 3000 	str.w	r3, [ip]
   812b6:	f000 814a 	beq.w	8154e <_malloc_r+0x4d2>
   812ba:	6812      	ldr	r2, [r2, #0]
   812bc:	493c      	ldr	r1, [pc, #240]	; (813b0 <_malloc_r+0x334>)
   812be:	3201      	adds	r2, #1
   812c0:	bf1b      	ittet	ne
   812c2:	ebcb 0b08 	rsbne	fp, fp, r8
   812c6:	445b      	addne	r3, fp
   812c8:	f8c1 8000 	streq.w	r8, [r1]
   812cc:	f8cc 3000 	strne.w	r3, [ip]
   812d0:	f018 0307 	ands.w	r3, r8, #7
   812d4:	f000 8114 	beq.w	81500 <_malloc_r+0x484>
   812d8:	f1c3 0208 	rsb	r2, r3, #8
   812dc:	f5c3 5380 	rsb	r3, r3, #4096	; 0x1000
   812e0:	4490      	add	r8, r2
   812e2:	3308      	adds	r3, #8
   812e4:	44c2      	add	sl, r8
   812e6:	f3ca 0a0b 	ubfx	sl, sl, #0, #12
   812ea:	ebca 0a03 	rsb	sl, sl, r3
   812ee:	4651      	mov	r1, sl
   812f0:	4630      	mov	r0, r6
   812f2:	f8cd c004 	str.w	ip, [sp, #4]
   812f6:	f000 f961 	bl	815bc <_sbrk_r>
   812fa:	1c43      	adds	r3, r0, #1
   812fc:	f8dd c004 	ldr.w	ip, [sp, #4]
   81300:	f000 8135 	beq.w	8156e <_malloc_r+0x4f2>
   81304:	ebc8 0200 	rsb	r2, r8, r0
   81308:	4452      	add	r2, sl
   8130a:	f042 0201 	orr.w	r2, r2, #1
   8130e:	f8dc 3000 	ldr.w	r3, [ip]
   81312:	42bc      	cmp	r4, r7
   81314:	4453      	add	r3, sl
   81316:	f8c7 8008 	str.w	r8, [r7, #8]
   8131a:	f8cc 3000 	str.w	r3, [ip]
   8131e:	f8c8 2004 	str.w	r2, [r8, #4]
   81322:	f8df a098 	ldr.w	sl, [pc, #152]	; 813bc <_malloc_r+0x340>
   81326:	d015      	beq.n	81354 <_malloc_r+0x2d8>
   81328:	f1b9 0f0f 	cmp.w	r9, #15
   8132c:	f240 80eb 	bls.w	81506 <_malloc_r+0x48a>
   81330:	6861      	ldr	r1, [r4, #4]
   81332:	f1a9 020c 	sub.w	r2, r9, #12
   81336:	f022 0207 	bic.w	r2, r2, #7
   8133a:	f001 0101 	and.w	r1, r1, #1
   8133e:	ea42 0e01 	orr.w	lr, r2, r1
   81342:	2005      	movs	r0, #5
   81344:	18a1      	adds	r1, r4, r2
   81346:	2a0f      	cmp	r2, #15
   81348:	f8c4 e004 	str.w	lr, [r4, #4]
   8134c:	6048      	str	r0, [r1, #4]
   8134e:	6088      	str	r0, [r1, #8]
   81350:	f200 8111 	bhi.w	81576 <_malloc_r+0x4fa>
   81354:	4a17      	ldr	r2, [pc, #92]	; (813b4 <_malloc_r+0x338>)
   81356:	68bc      	ldr	r4, [r7, #8]
   81358:	6811      	ldr	r1, [r2, #0]
   8135a:	428b      	cmp	r3, r1
   8135c:	bf88      	it	hi
   8135e:	6013      	strhi	r3, [r2, #0]
   81360:	4a15      	ldr	r2, [pc, #84]	; (813b8 <_malloc_r+0x33c>)
   81362:	6811      	ldr	r1, [r2, #0]
   81364:	428b      	cmp	r3, r1
   81366:	bf88      	it	hi
   81368:	6013      	strhi	r3, [r2, #0]
   8136a:	6862      	ldr	r2, [r4, #4]
   8136c:	f022 0203 	bic.w	r2, r2, #3
   81370:	4295      	cmp	r5, r2
   81372:	ebc5 0302 	rsb	r3, r5, r2
   81376:	d801      	bhi.n	8137c <_malloc_r+0x300>
   81378:	2b0f      	cmp	r3, #15
   8137a:	dc04      	bgt.n	81386 <_malloc_r+0x30a>
   8137c:	4630      	mov	r0, r6
   8137e:	f000 f91b 	bl	815b8 <__malloc_unlock>
   81382:	2400      	movs	r4, #0
   81384:	e6a6      	b.n	810d4 <_malloc_r+0x58>
   81386:	f045 0201 	orr.w	r2, r5, #1
   8138a:	f043 0301 	orr.w	r3, r3, #1
   8138e:	4425      	add	r5, r4
   81390:	6062      	str	r2, [r4, #4]
   81392:	4630      	mov	r0, r6
   81394:	60bd      	str	r5, [r7, #8]
   81396:	606b      	str	r3, [r5, #4]
   81398:	f000 f90e 	bl	815b8 <__malloc_unlock>
   8139c:	3408      	adds	r4, #8
   8139e:	4620      	mov	r0, r4
   813a0:	b003      	add	sp, #12
   813a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
   813a6:	bf00      	nop
   813a8:	20070564 	.word	0x20070564
   813ac:	20070ab0 	.word	0x20070ab0
   813b0:	20070970 	.word	0x20070970
   813b4:	20070aac 	.word	0x20070aac
   813b8:	20070aa8 	.word	0x20070aa8
   813bc:	20070ab4 	.word	0x20070ab4
   813c0:	f1bc 0f14 	cmp.w	ip, #20
   813c4:	d961      	bls.n	8148a <_malloc_r+0x40e>
   813c6:	f1bc 0f54 	cmp.w	ip, #84	; 0x54
   813ca:	f200 808f 	bhi.w	814ec <_malloc_r+0x470>
   813ce:	ea4f 3c15 	mov.w	ip, r5, lsr #12
   813d2:	f10c 0c6e 	add.w	ip, ip, #110	; 0x6e
   813d6:	ea4f 014c 	mov.w	r1, ip, lsl #1
   813da:	e697      	b.n	8110c <_malloc_r+0x90>
   813dc:	0a4b      	lsrs	r3, r1, #9
   813de:	2b04      	cmp	r3, #4
   813e0:	d958      	bls.n	81494 <_malloc_r+0x418>
   813e2:	2b14      	cmp	r3, #20
   813e4:	f200 80ad 	bhi.w	81542 <_malloc_r+0x4c6>
   813e8:	f103 025b 	add.w	r2, r3, #91	; 0x5b
   813ec:	0050      	lsls	r0, r2, #1
   813ee:	eb07 0080 	add.w	r0, r7, r0, lsl #2
   813f2:	6883      	ldr	r3, [r0, #8]
   813f4:	f8df 81b8 	ldr.w	r8, [pc, #440]	; 815b0 <_malloc_r+0x534>
   813f8:	4283      	cmp	r3, r0
   813fa:	f000 808a 	beq.w	81512 <_malloc_r+0x496>
   813fe:	685a      	ldr	r2, [r3, #4]
   81400:	f022 0203 	bic.w	r2, r2, #3
   81404:	4291      	cmp	r1, r2
   81406:	d202      	bcs.n	8140e <_malloc_r+0x392>
   81408:	689b      	ldr	r3, [r3, #8]
   8140a:	4298      	cmp	r0, r3
   8140c:	d1f7      	bne.n	813fe <_malloc_r+0x382>
   8140e:	68d9      	ldr	r1, [r3, #12]
   81410:	687a      	ldr	r2, [r7, #4]
   81412:	60e1      	str	r1, [r4, #12]
   81414:	60a3      	str	r3, [r4, #8]
   81416:	608c      	str	r4, [r1, #8]
   81418:	60dc      	str	r4, [r3, #12]
   8141a:	e6b6      	b.n	8118a <_malloc_r+0x10e>
   8141c:	f045 0701 	orr.w	r7, r5, #1
   81420:	f042 0101 	orr.w	r1, r2, #1
   81424:	4425      	add	r5, r4
   81426:	6067      	str	r7, [r4, #4]
   81428:	4630      	mov	r0, r6
   8142a:	615d      	str	r5, [r3, #20]
   8142c:	611d      	str	r5, [r3, #16]
   8142e:	f8c5 e00c 	str.w	lr, [r5, #12]
   81432:	f8c5 e008 	str.w	lr, [r5, #8]
   81436:	6069      	str	r1, [r5, #4]
   81438:	50aa      	str	r2, [r5, r2]
   8143a:	3408      	adds	r4, #8
   8143c:	f000 f8bc 	bl	815b8 <__malloc_unlock>
   81440:	e648      	b.n	810d4 <_malloc_r+0x58>
   81442:	685a      	ldr	r2, [r3, #4]
   81444:	e6a1      	b.n	8118a <_malloc_r+0x10e>
   81446:	f109 0901 	add.w	r9, r9, #1
   8144a:	f019 0f03 	tst.w	r9, #3
   8144e:	f104 0408 	add.w	r4, r4, #8
   81452:	f47f aead 	bne.w	811b0 <_malloc_r+0x134>
   81456:	e02d      	b.n	814b4 <_malloc_r+0x438>
   81458:	f104 0308 	add.w	r3, r4, #8
   8145c:	6964      	ldr	r4, [r4, #20]
   8145e:	42a3      	cmp	r3, r4
   81460:	bf08      	it	eq
   81462:	f10c 0c02 	addeq.w	ip, ip, #2
   81466:	f43f ae67 	beq.w	81138 <_malloc_r+0xbc>
   8146a:	e623      	b.n	810b4 <_malloc_r+0x38>
   8146c:	4419      	add	r1, r3
   8146e:	6848      	ldr	r0, [r1, #4]
   81470:	461c      	mov	r4, r3
   81472:	f854 2f08 	ldr.w	r2, [r4, #8]!
   81476:	68db      	ldr	r3, [r3, #12]
   81478:	f040 0501 	orr.w	r5, r0, #1
   8147c:	604d      	str	r5, [r1, #4]
   8147e:	4630      	mov	r0, r6
   81480:	60d3      	str	r3, [r2, #12]
   81482:	609a      	str	r2, [r3, #8]
   81484:	f000 f898 	bl	815b8 <__malloc_unlock>
   81488:	e624      	b.n	810d4 <_malloc_r+0x58>
   8148a:	f10c 0c5b 	add.w	ip, ip, #91	; 0x5b
   8148e:	ea4f 014c 	mov.w	r1, ip, lsl #1
   81492:	e63b      	b.n	8110c <_malloc_r+0x90>
   81494:	098a      	lsrs	r2, r1, #6
   81496:	3238      	adds	r2, #56	; 0x38
   81498:	0050      	lsls	r0, r2, #1
   8149a:	e7a8      	b.n	813ee <_malloc_r+0x372>
   8149c:	42bc      	cmp	r4, r7
   8149e:	f43f af02 	beq.w	812a6 <_malloc_r+0x22a>
   814a2:	68bc      	ldr	r4, [r7, #8]
   814a4:	6862      	ldr	r2, [r4, #4]
   814a6:	f022 0203 	bic.w	r2, r2, #3
   814aa:	e761      	b.n	81370 <_malloc_r+0x2f4>
   814ac:	f8d8 8000 	ldr.w	r8, [r8]
   814b0:	4598      	cmp	r8, r3
   814b2:	d17a      	bne.n	815aa <_malloc_r+0x52e>
   814b4:	f01c 0f03 	tst.w	ip, #3
   814b8:	f1a8 0308 	sub.w	r3, r8, #8
   814bc:	f10c 3cff 	add.w	ip, ip, #4294967295
   814c0:	d1f4      	bne.n	814ac <_malloc_r+0x430>
   814c2:	687b      	ldr	r3, [r7, #4]
   814c4:	ea23 0300 	bic.w	r3, r3, r0
   814c8:	607b      	str	r3, [r7, #4]
   814ca:	0040      	lsls	r0, r0, #1
   814cc:	4298      	cmp	r0, r3
   814ce:	f63f aebe 	bhi.w	8124e <_malloc_r+0x1d2>
   814d2:	2800      	cmp	r0, #0
   814d4:	f43f aebb 	beq.w	8124e <_malloc_r+0x1d2>
   814d8:	4203      	tst	r3, r0
   814da:	46cc      	mov	ip, r9
   814dc:	f47f ae64 	bne.w	811a8 <_malloc_r+0x12c>
   814e0:	0040      	lsls	r0, r0, #1
   814e2:	4203      	tst	r3, r0
   814e4:	f10c 0c04 	add.w	ip, ip, #4
   814e8:	d0fa      	beq.n	814e0 <_malloc_r+0x464>
   814ea:	e65d      	b.n	811a8 <_malloc_r+0x12c>
   814ec:	f5bc 7faa 	cmp.w	ip, #340	; 0x154
   814f0:	d819      	bhi.n	81526 <_malloc_r+0x4aa>
   814f2:	ea4f 3cd5 	mov.w	ip, r5, lsr #15
   814f6:	f10c 0c77 	add.w	ip, ip, #119	; 0x77
   814fa:	ea4f 014c 	mov.w	r1, ip, lsl #1
   814fe:	e605      	b.n	8110c <_malloc_r+0x90>
   81500:	f44f 5380 	mov.w	r3, #4096	; 0x1000
   81504:	e6ee      	b.n	812e4 <_malloc_r+0x268>
   81506:	2301      	movs	r3, #1
   81508:	f8c8 3004 	str.w	r3, [r8, #4]
   8150c:	4644      	mov	r4, r8
   8150e:	2200      	movs	r2, #0
   81510:	e72e      	b.n	81370 <_malloc_r+0x2f4>
   81512:	1092      	asrs	r2, r2, #2
   81514:	2001      	movs	r0, #1
   81516:	4090      	lsls	r0, r2
   81518:	f8d8 2004 	ldr.w	r2, [r8, #4]
   8151c:	4619      	mov	r1, r3
   8151e:	4302      	orrs	r2, r0
   81520:	f8c8 2004 	str.w	r2, [r8, #4]
   81524:	e775      	b.n	81412 <_malloc_r+0x396>
   81526:	f240 5354 	movw	r3, #1364	; 0x554
   8152a:	459c      	cmp	ip, r3
   8152c:	d81b      	bhi.n	81566 <_malloc_r+0x4ea>
   8152e:	ea4f 4c95 	mov.w	ip, r5, lsr #18
   81532:	f10c 0c7c 	add.w	ip, ip, #124	; 0x7c
   81536:	ea4f 014c 	mov.w	r1, ip, lsl #1
   8153a:	e5e7      	b.n	8110c <_malloc_r+0x90>
   8153c:	f10a 0a10 	add.w	sl, sl, #16
   81540:	e6a3      	b.n	8128a <_malloc_r+0x20e>
   81542:	2b54      	cmp	r3, #84	; 0x54
   81544:	d81f      	bhi.n	81586 <_malloc_r+0x50a>
   81546:	0b0a      	lsrs	r2, r1, #12
   81548:	326e      	adds	r2, #110	; 0x6e
   8154a:	0050      	lsls	r0, r2, #1
   8154c:	e74f      	b.n	813ee <_malloc_r+0x372>
   8154e:	f3cb 010b 	ubfx	r1, fp, #0, #12
   81552:	2900      	cmp	r1, #0
   81554:	f47f aeb1 	bne.w	812ba <_malloc_r+0x23e>
   81558:	eb0a 0109 	add.w	r1, sl, r9
   8155c:	68ba      	ldr	r2, [r7, #8]
   8155e:	f041 0101 	orr.w	r1, r1, #1
   81562:	6051      	str	r1, [r2, #4]
   81564:	e6f6      	b.n	81354 <_malloc_r+0x2d8>
   81566:	21fc      	movs	r1, #252	; 0xfc
   81568:	f04f 0c7e 	mov.w	ip, #126	; 0x7e
   8156c:	e5ce      	b.n	8110c <_malloc_r+0x90>
   8156e:	2201      	movs	r2, #1
   81570:	f04f 0a00 	mov.w	sl, #0
   81574:	e6cb      	b.n	8130e <_malloc_r+0x292>
   81576:	f104 0108 	add.w	r1, r4, #8
   8157a:	4630      	mov	r0, r6
   8157c:	f7ff fcaa 	bl	80ed4 <_free_r>
   81580:	f8da 3000 	ldr.w	r3, [sl]
   81584:	e6e6      	b.n	81354 <_malloc_r+0x2d8>
   81586:	f5b3 7faa 	cmp.w	r3, #340	; 0x154
   8158a:	d803      	bhi.n	81594 <_malloc_r+0x518>
   8158c:	0bca      	lsrs	r2, r1, #15
   8158e:	3277      	adds	r2, #119	; 0x77
   81590:	0050      	lsls	r0, r2, #1
   81592:	e72c      	b.n	813ee <_malloc_r+0x372>
   81594:	f240 5254 	movw	r2, #1364	; 0x554
   81598:	4293      	cmp	r3, r2
   8159a:	d803      	bhi.n	815a4 <_malloc_r+0x528>
   8159c:	0c8a      	lsrs	r2, r1, #18
   8159e:	327c      	adds	r2, #124	; 0x7c
   815a0:	0050      	lsls	r0, r2, #1
   815a2:	e724      	b.n	813ee <_malloc_r+0x372>
   815a4:	20fc      	movs	r0, #252	; 0xfc
   815a6:	227e      	movs	r2, #126	; 0x7e
   815a8:	e721      	b.n	813ee <_malloc_r+0x372>
   815aa:	687b      	ldr	r3, [r7, #4]
   815ac:	e78d      	b.n	814ca <_malloc_r+0x44e>
   815ae:	bf00      	nop
   815b0:	20070564 	.word	0x20070564

000815b4 <__malloc_lock>:
   815b4:	4770      	bx	lr
   815b6:	bf00      	nop

000815b8 <__malloc_unlock>:
   815b8:	4770      	bx	lr
   815ba:	bf00      	nop

000815bc <_sbrk_r>:
   815bc:	b538      	push	{r3, r4, r5, lr}
   815be:	4c07      	ldr	r4, [pc, #28]	; (815dc <_sbrk_r+0x20>)
   815c0:	2300      	movs	r3, #0
   815c2:	4605      	mov	r5, r0
   815c4:	4608      	mov	r0, r1
   815c6:	6023      	str	r3, [r4, #0]
   815c8:	f7ff f9dc 	bl	80984 <_sbrk>
   815cc:	1c43      	adds	r3, r0, #1
   815ce:	d000      	beq.n	815d2 <_sbrk_r+0x16>
   815d0:	bd38      	pop	{r3, r4, r5, pc}
   815d2:	6823      	ldr	r3, [r4, #0]
   815d4:	2b00      	cmp	r3, #0
   815d6:	d0fb      	beq.n	815d0 <_sbrk_r+0x14>
   815d8:	602b      	str	r3, [r5, #0]
   815da:	bd38      	pop	{r3, r4, r5, pc}
   815dc:	20070ae4 	.word	0x20070ae4

000815e0 <__register_exitproc>:
   815e0:	b5f0      	push	{r4, r5, r6, r7, lr}
   815e2:	4c27      	ldr	r4, [pc, #156]	; (81680 <__register_exitproc+0xa0>)
   815e4:	b085      	sub	sp, #20
   815e6:	6826      	ldr	r6, [r4, #0]
   815e8:	4607      	mov	r7, r0
   815ea:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   815ee:	2c00      	cmp	r4, #0
   815f0:	d040      	beq.n	81674 <__register_exitproc+0x94>
   815f2:	6865      	ldr	r5, [r4, #4]
   815f4:	2d1f      	cmp	r5, #31
   815f6:	dd1e      	ble.n	81636 <__register_exitproc+0x56>
   815f8:	4822      	ldr	r0, [pc, #136]	; (81684 <__register_exitproc+0xa4>)
   815fa:	b918      	cbnz	r0, 81604 <__register_exitproc+0x24>
   815fc:	f04f 30ff 	mov.w	r0, #4294967295
   81600:	b005      	add	sp, #20
   81602:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81604:	f44f 70c8 	mov.w	r0, #400	; 0x190
   81608:	9103      	str	r1, [sp, #12]
   8160a:	9202      	str	r2, [sp, #8]
   8160c:	9301      	str	r3, [sp, #4]
   8160e:	f7ff fd2d 	bl	8106c <malloc>
   81612:	9903      	ldr	r1, [sp, #12]
   81614:	4604      	mov	r4, r0
   81616:	9a02      	ldr	r2, [sp, #8]
   81618:	9b01      	ldr	r3, [sp, #4]
   8161a:	2800      	cmp	r0, #0
   8161c:	d0ee      	beq.n	815fc <__register_exitproc+0x1c>
   8161e:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   81622:	2000      	movs	r0, #0
   81624:	6025      	str	r5, [r4, #0]
   81626:	6060      	str	r0, [r4, #4]
   81628:	4605      	mov	r5, r0
   8162a:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8162e:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   81632:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   81636:	b93f      	cbnz	r7, 81648 <__register_exitproc+0x68>
   81638:	1c6b      	adds	r3, r5, #1
   8163a:	2000      	movs	r0, #0
   8163c:	3502      	adds	r5, #2
   8163e:	6063      	str	r3, [r4, #4]
   81640:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   81644:	b005      	add	sp, #20
   81646:	bdf0      	pop	{r4, r5, r6, r7, pc}
   81648:	2601      	movs	r6, #1
   8164a:	40ae      	lsls	r6, r5
   8164c:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   81650:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   81654:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   81658:	2f02      	cmp	r7, #2
   8165a:	ea42 0206 	orr.w	r2, r2, r6
   8165e:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   81662:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   81666:	d1e7      	bne.n	81638 <__register_exitproc+0x58>
   81668:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   8166c:	431e      	orrs	r6, r3
   8166e:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   81672:	e7e1      	b.n	81638 <__register_exitproc+0x58>
   81674:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   81678:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   8167c:	e7b9      	b.n	815f2 <__register_exitproc+0x12>
   8167e:	bf00      	nop
   81680:	00081774 	.word	0x00081774
   81684:	0008106d 	.word	0x0008106d
   81688:	0c040800 	.word	0x0c040800
   8168c:	0e060a02 	.word	0x0e060a02
   81690:	0d050901 	.word	0x0d050901
   81694:	0f070b03 	.word	0x0f070b03
   81698:	0a0d5441 	.word	0x0a0d5441
   8169c:	00000000 	.word	0x00000000
   816a0:	432b5441 	.word	0x432b5441
   816a4:	45535049 	.word	0x45535049
   816a8:	353d444e 	.word	0x353d444e
   816ac:	000a0d34 	.word	0x000a0d34
   816b0:	432b5441 	.word	0x432b5441
   816b4:	54535049 	.word	0x54535049
   816b8:	3d545241 	.word	0x3d545241
   816bc:	50435422 	.word	0x50435422
   816c0:	31222c22 	.word	0x31222c22
   816c4:	312e3239 	.word	0x312e3239
   816c8:	322e3836 	.word	0x322e3836
   816cc:	31312e30 	.word	0x31312e30
   816d0:	352c2231 	.word	0x352c2231
   816d4:	0d303030 	.word	0x0d303030
   816d8:	0000000a 	.word	0x0000000a
   816dc:	432b5441 	.word	0x432b5441
   816e0:	50414a57 	.word	0x50414a57
   816e4:	4856223d 	.word	0x4856223d
   816e8:	2c224d41 	.word	0x2c224d41
   816ec:	48414d22 	.word	0x48414d22
   816f0:	48414d56 	.word	0x48414d56
   816f4:	0a0d2256 	.word	0x0a0d2256
   816f8:	00000000 	.word	0x00000000
   816fc:	432b5441 	.word	0x432b5441
   81700:	444f4d57 	.word	0x444f4d57
   81704:	0d333d45 	.word	0x0d333d45
   81708:	0000000a 	.word	0x0000000a
   8170c:	522b5441 	.word	0x522b5441
   81710:	0a0d5453 	.word	0x0a0d5453
   81714:	00000000 	.word	0x00000000
   81718:	432b5441 	.word	0x432b5441
   8171c:	50414a57 	.word	0x50414a57
   81720:	000a0d3f 	.word	0x000a0d3f
   81724:	432b5441 	.word	0x432b5441
   81728:	54535049 	.word	0x54535049
   8172c:	53555441 	.word	0x53555441
   81730:	00000a0d 	.word	0x00000a0d
   81734:	20544547 	.word	0x20544547
   81738:	6f646f74 	.word	0x6f646f74
   8173c:	6970612f 	.word	0x6970612f
   81740:	2e31762f 	.word	0x2e31762f
   81744:	6f632f30 	.word	0x6f632f30
   81748:	6964726f 	.word	0x6964726f
   8174c:	6574616e 	.word	0x6574616e
   81750:	7465672f 	.word	0x7465672f
   81754:	6574616c 	.word	0x6574616c
   81758:	48207473 	.word	0x48207473
   8175c:	2f505454 	.word	0x2f505454
   81760:	0d312e31 	.word	0x0d312e31
   81764:	0d0a0d0a 	.word	0x0d0a0d0a
   81768:	0000000a 	.word	0x0000000a
   8176c:	00636261 	.word	0x00636261
   81770:	00000043 	.word	0x00000043

00081774 <_global_impure_ptr>:
   81774:	20070138                                8.. 

00081778 <_init>:
   81778:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8177a:	bf00      	nop
   8177c:	bcf8      	pop	{r3, r4, r5, r6, r7}
   8177e:	bc08      	pop	{r3}
   81780:	469e      	mov	lr, r3
   81782:	4770      	bx	lr

00081784 <__init_array_start>:
   81784:	00080de9 	.word	0x00080de9

00081788 <__frame_dummy_init_array_entry>:
   81788:	00080119                                ....

0008178c <_fini>:
   8178c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   8178e:	bf00      	nop
   81790:	bcf8      	pop	{r3, r4, r5, r6, r7}
   81792:	bc08      	pop	{r3}
   81794:	469e      	mov	lr, r3
   81796:	4770      	bx	lr

00081798 <__fini_array_start>:
   81798:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	20070130 	.word	0x20070130

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <g_interrupt_enabled>:
2007012c:	00000001                                ....

20070130 <SystemCoreClock>:
20070130:	003d0900 00000000                       ..=.....

20070138 <impure_data>:
20070138:	00000000 20070424 2007048c 200704f4     ....$.. ... ... 
	...
2007016c:	00081770 00000000 00000000 00000000     p...............
	...
200701e0:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701f0:	0005deec 0000000b 00000000 00000000     ................
	...

20070560 <_impure_ptr>:
20070560:	20070138                                8.. 

20070564 <__malloc_av_>:
	...
2007056c:	20070564 20070564 2007056c 2007056c     d.. d.. l.. l.. 
2007057c:	20070574 20070574 2007057c 2007057c     t.. t.. |.. |.. 
2007058c:	20070584 20070584 2007058c 2007058c     ... ... ... ... 
2007059c:	20070594 20070594 2007059c 2007059c     ... ... ... ... 
200705ac:	200705a4 200705a4 200705ac 200705ac     ... ... ... ... 
200705bc:	200705b4 200705b4 200705bc 200705bc     ... ... ... ... 
200705cc:	200705c4 200705c4 200705cc 200705cc     ... ... ... ... 
200705dc:	200705d4 200705d4 200705dc 200705dc     ... ... ... ... 
200705ec:	200705e4 200705e4 200705ec 200705ec     ... ... ... ... 
200705fc:	200705f4 200705f4 200705fc 200705fc     ... ... ... ... 
2007060c:	20070604 20070604 2007060c 2007060c     ... ... ... ... 
2007061c:	20070614 20070614 2007061c 2007061c     ... ... ... ... 
2007062c:	20070624 20070624 2007062c 2007062c     $.. $.. ,.. ,.. 
2007063c:	20070634 20070634 2007063c 2007063c     4.. 4.. <.. <.. 
2007064c:	20070644 20070644 2007064c 2007064c     D.. D.. L.. L.. 
2007065c:	20070654 20070654 2007065c 2007065c     T.. T.. \.. \.. 
2007066c:	20070664 20070664 2007066c 2007066c     d.. d.. l.. l.. 
2007067c:	20070674 20070674 2007067c 2007067c     t.. t.. |.. |.. 
2007068c:	20070684 20070684 2007068c 2007068c     ... ... ... ... 
2007069c:	20070694 20070694 2007069c 2007069c     ... ... ... ... 
200706ac:	200706a4 200706a4 200706ac 200706ac     ... ... ... ... 
200706bc:	200706b4 200706b4 200706bc 200706bc     ... ... ... ... 
200706cc:	200706c4 200706c4 200706cc 200706cc     ... ... ... ... 
200706dc:	200706d4 200706d4 200706dc 200706dc     ... ... ... ... 
200706ec:	200706e4 200706e4 200706ec 200706ec     ... ... ... ... 
200706fc:	200706f4 200706f4 200706fc 200706fc     ... ... ... ... 
2007070c:	20070704 20070704 2007070c 2007070c     ... ... ... ... 
2007071c:	20070714 20070714 2007071c 2007071c     ... ... ... ... 
2007072c:	20070724 20070724 2007072c 2007072c     $.. $.. ,.. ,.. 
2007073c:	20070734 20070734 2007073c 2007073c     4.. 4.. <.. <.. 
2007074c:	20070744 20070744 2007074c 2007074c     D.. D.. L.. L.. 
2007075c:	20070754 20070754 2007075c 2007075c     T.. T.. \.. \.. 
2007076c:	20070764 20070764 2007076c 2007076c     d.. d.. l.. l.. 
2007077c:	20070774 20070774 2007077c 2007077c     t.. t.. |.. |.. 
2007078c:	20070784 20070784 2007078c 2007078c     ... ... ... ... 
2007079c:	20070794 20070794 2007079c 2007079c     ... ... ... ... 
200707ac:	200707a4 200707a4 200707ac 200707ac     ... ... ... ... 
200707bc:	200707b4 200707b4 200707bc 200707bc     ... ... ... ... 
200707cc:	200707c4 200707c4 200707cc 200707cc     ... ... ... ... 
200707dc:	200707d4 200707d4 200707dc 200707dc     ... ... ... ... 
200707ec:	200707e4 200707e4 200707ec 200707ec     ... ... ... ... 
200707fc:	200707f4 200707f4 200707fc 200707fc     ... ... ... ... 
2007080c:	20070804 20070804 2007080c 2007080c     ... ... ... ... 
2007081c:	20070814 20070814 2007081c 2007081c     ... ... ... ... 
2007082c:	20070824 20070824 2007082c 2007082c     $.. $.. ,.. ,.. 
2007083c:	20070834 20070834 2007083c 2007083c     4.. 4.. <.. <.. 
2007084c:	20070844 20070844 2007084c 2007084c     D.. D.. L.. L.. 
2007085c:	20070854 20070854 2007085c 2007085c     T.. T.. \.. \.. 
2007086c:	20070864 20070864 2007086c 2007086c     d.. d.. l.. l.. 
2007087c:	20070874 20070874 2007087c 2007087c     t.. t.. |.. |.. 
2007088c:	20070884 20070884 2007088c 2007088c     ... ... ... ... 
2007089c:	20070894 20070894 2007089c 2007089c     ... ... ... ... 
200708ac:	200708a4 200708a4 200708ac 200708ac     ... ... ... ... 
200708bc:	200708b4 200708b4 200708bc 200708bc     ... ... ... ... 
200708cc:	200708c4 200708c4 200708cc 200708cc     ... ... ... ... 
200708dc:	200708d4 200708d4 200708dc 200708dc     ... ... ... ... 
200708ec:	200708e4 200708e4 200708ec 200708ec     ... ... ... ... 
200708fc:	200708f4 200708f4 200708fc 200708fc     ... ... ... ... 
2007090c:	20070904 20070904 2007090c 2007090c     ... ... ... ... 
2007091c:	20070914 20070914 2007091c 2007091c     ... ... ... ... 
2007092c:	20070924 20070924 2007092c 2007092c     $.. $.. ,.. ,.. 
2007093c:	20070934 20070934 2007093c 2007093c     4.. 4.. <.. <.. 
2007094c:	20070944 20070944 2007094c 2007094c     D.. D.. L.. L.. 
2007095c:	20070954 20070954 2007095c 2007095c     T.. T.. \.. \.. 

2007096c <__malloc_trim_threshold>:
2007096c:	00020000                                ....

20070970 <__malloc_sbrk_base>:
20070970:	ffffffff                                ....
