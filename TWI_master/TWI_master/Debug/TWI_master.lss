
TWI_master.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000d54  00080000  00080000  00008000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .relocate     00000558  20070000  00080d54  00010000  2**3
                  CONTENTS, ALLOC, LOAD, CODE
  2 .bss          0000008c  20070558  000812ac  00010558  2**2
                  ALLOC
  3 .stack        00002004  200705e4  00081338  00010558  2**0
                  ALLOC
  4 .ARM.attributes 00000029  00000000  00000000  00010558  2**0
                  CONTENTS, READONLY
  5 .comment      0000005b  00000000  00000000  00010581  2**0
                  CONTENTS, READONLY
  6 .debug_info   00007b00  00000000  00000000  000105dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 0000164d  00000000  00000000  000180dc  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    0000270a  00000000  00000000  00019729  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_aranges 00000610  00000000  00000000  0001be33  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000540  00000000  00000000  0001c443  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_macro  00016a5e  00000000  00000000  0001c983  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_line   0000aa7f  00000000  00000000  000333e1  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_str    0005fc9d  00000000  00000000  0003de60  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_frame  00000cf8  00000000  00000000  0009db00  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00080000 <_sfixed>:
   80000:	200725e8 	.word	0x200725e8
   80004:	0008066d 	.word	0x0008066d
   80008:	00080669 	.word	0x00080669
   8000c:	00080669 	.word	0x00080669
   80010:	00080669 	.word	0x00080669
   80014:	00080669 	.word	0x00080669
   80018:	00080669 	.word	0x00080669
	...
   8002c:	00080669 	.word	0x00080669
   80030:	00080669 	.word	0x00080669
   80034:	00000000 	.word	0x00000000
   80038:	00080669 	.word	0x00080669
   8003c:	00080669 	.word	0x00080669
   80040:	00080669 	.word	0x00080669
   80044:	00080669 	.word	0x00080669
   80048:	00080669 	.word	0x00080669
   8004c:	00080669 	.word	0x00080669
   80050:	00080669 	.word	0x00080669
   80054:	00080669 	.word	0x00080669
   80058:	00080669 	.word	0x00080669
   8005c:	00080669 	.word	0x00080669
   80060:	00080669 	.word	0x00080669
   80064:	00080669 	.word	0x00080669
   80068:	00000000 	.word	0x00000000
   8006c:	0008049d 	.word	0x0008049d
   80070:	000804b1 	.word	0x000804b1
   80074:	000804c5 	.word	0x000804c5
   80078:	000804d9 	.word	0x000804d9
	...
   80084:	00080669 	.word	0x00080669
   80088:	00080669 	.word	0x00080669
   8008c:	00080669 	.word	0x00080669
   80090:	00080669 	.word	0x00080669
   80094:	00080669 	.word	0x00080669
   80098:	00080669 	.word	0x00080669
   8009c:	00080669 	.word	0x00080669
   800a0:	00080669 	.word	0x00080669
   800a4:	00000000 	.word	0x00000000
   800a8:	00080669 	.word	0x00080669
   800ac:	00080669 	.word	0x00080669
   800b0:	00080669 	.word	0x00080669
   800b4:	00080669 	.word	0x00080669
   800b8:	00080669 	.word	0x00080669
   800bc:	00080669 	.word	0x00080669
   800c0:	00080669 	.word	0x00080669
   800c4:	00080669 	.word	0x00080669
   800c8:	00080669 	.word	0x00080669
   800cc:	00080669 	.word	0x00080669
   800d0:	00080669 	.word	0x00080669
   800d4:	00080669 	.word	0x00080669
   800d8:	00080669 	.word	0x00080669
   800dc:	00080669 	.word	0x00080669
   800e0:	00080669 	.word	0x00080669
   800e4:	00080669 	.word	0x00080669
   800e8:	00080669 	.word	0x00080669
   800ec:	00080669 	.word	0x00080669
   800f0:	00080669 	.word	0x00080669

000800f4 <__do_global_dtors_aux>:
   800f4:	b510      	push	{r4, lr}
   800f6:	4c05      	ldr	r4, [pc, #20]	; (8010c <__do_global_dtors_aux+0x18>)
   800f8:	7823      	ldrb	r3, [r4, #0]
   800fa:	b933      	cbnz	r3, 8010a <__do_global_dtors_aux+0x16>
   800fc:	4b04      	ldr	r3, [pc, #16]	; (80110 <__do_global_dtors_aux+0x1c>)
   800fe:	b113      	cbz	r3, 80106 <__do_global_dtors_aux+0x12>
   80100:	4804      	ldr	r0, [pc, #16]	; (80114 <__do_global_dtors_aux+0x20>)
   80102:	f3af 8000 	nop.w
   80106:	2301      	movs	r3, #1
   80108:	7023      	strb	r3, [r4, #0]
   8010a:	bd10      	pop	{r4, pc}
   8010c:	20070558 	.word	0x20070558
   80110:	00000000 	.word	0x00000000
   80114:	00080d54 	.word	0x00080d54

00080118 <frame_dummy>:
   80118:	b508      	push	{r3, lr}
   8011a:	4b06      	ldr	r3, [pc, #24]	; (80134 <frame_dummy+0x1c>)
   8011c:	b11b      	cbz	r3, 80126 <frame_dummy+0xe>
   8011e:	4806      	ldr	r0, [pc, #24]	; (80138 <frame_dummy+0x20>)
   80120:	4906      	ldr	r1, [pc, #24]	; (8013c <frame_dummy+0x24>)
   80122:	f3af 8000 	nop.w
   80126:	4806      	ldr	r0, [pc, #24]	; (80140 <frame_dummy+0x28>)
   80128:	6803      	ldr	r3, [r0, #0]
   8012a:	b113      	cbz	r3, 80132 <frame_dummy+0x1a>
   8012c:	4b05      	ldr	r3, [pc, #20]	; (80144 <frame_dummy+0x2c>)
   8012e:	b103      	cbz	r3, 80132 <frame_dummy+0x1a>
   80130:	4798      	blx	r3
   80132:	bd08      	pop	{r3, pc}
   80134:	00000000 	.word	0x00000000
   80138:	00080d54 	.word	0x00080d54
   8013c:	2007055c 	.word	0x2007055c
   80140:	00080d54 	.word	0x00080d54
   80144:	00000000 	.word	0x00000000

00080148 <sysclk_init>:
	pmc_disable_udpck();
}
#endif // CONFIG_USBCLK_SOURCE

void sysclk_init(void)
{
   80148:	b510      	push	{r4, lr}
	struct pll_config pllcfg;

	/* Set flash wait state to max in case the below clock switching. */
	system_init_flash(CHIP_FREQ_CPU_MAX);
   8014a:	480e      	ldr	r0, [pc, #56]	; (80184 <sysclk_init+0x3c>)
   8014c:	4b0e      	ldr	r3, [pc, #56]	; (80188 <sysclk_init+0x40>)
   8014e:	4798      	blx	r3
		pmc_switch_mainck_to_fastrc(CKGR_MOR_MOSCRCF_12_MHz);
		break;


	case OSC_MAINCK_XTAL:
		pmc_switch_mainck_to_xtal(PMC_OSC_XTAL,
   80150:	2000      	movs	r0, #0
   80152:	213e      	movs	r1, #62	; 0x3e
   80154:	4b0d      	ldr	r3, [pc, #52]	; (8018c <sysclk_init+0x44>)
   80156:	4798      	blx	r3
	case OSC_MAINCK_4M_RC:
	case OSC_MAINCK_8M_RC:
	case OSC_MAINCK_12M_RC:
	case OSC_MAINCK_XTAL:
	case OSC_MAINCK_BYPASS:
		return pmc_osc_is_ready_mainck();
   80158:	4c0d      	ldr	r4, [pc, #52]	; (80190 <sysclk_init+0x48>)
   8015a:	47a0      	blx	r4
 *
 * \param id A number identifying the oscillator to wait for.
 */
static inline void osc_wait_ready(uint8_t id)
{
	while (!osc_is_ready(id)) {
   8015c:	2800      	cmp	r0, #0
   8015e:	d0fc      	beq.n	8015a <sysclk_init+0x12>
static inline void pll_enable(const struct pll_config *p_cfg, uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		pmc_disable_pllack(); // Always stop PLL first!
   80160:	4b0c      	ldr	r3, [pc, #48]	; (80194 <sysclk_init+0x4c>)
   80162:	4798      	blx	r3
		PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | p_cfg->ctrl;
   80164:	4a0c      	ldr	r2, [pc, #48]	; (80198 <sysclk_init+0x50>)
   80166:	4b0d      	ldr	r3, [pc, #52]	; (8019c <sysclk_init+0x54>)
   80168:	629a      	str	r2, [r3, #40]	; 0x28
static inline uint32_t pll_is_locked(uint32_t ul_pll_id)
{
	Assert(ul_pll_id < NR_PLLS);

	if (ul_pll_id == PLLA_ID) {
		return pmc_is_locked_pllack();
   8016a:	4c0d      	ldr	r4, [pc, #52]	; (801a0 <sysclk_init+0x58>)
   8016c:	47a0      	blx	r4
 */
static inline int pll_wait_for_lock(unsigned int pll_id)
{
	Assert(pll_id < NR_PLLS);

	while (!pll_is_locked(pll_id)) {
   8016e:	2800      	cmp	r0, #0
   80170:	d0fc      	beq.n	8016c <sysclk_init+0x24>
	else if (CONFIG_SYSCLK_SOURCE == SYSCLK_SRC_PLLACK) {
		pll_enable_source(CONFIG_PLL0_SOURCE);
		pll_config_defaults(&pllcfg, 0);
		pll_enable(&pllcfg, 0);
		pll_wait_for_lock(0);
		pmc_switch_mck_to_pllack(CONFIG_SYSCLK_PRES);
   80172:	2010      	movs	r0, #16
   80174:	4b0b      	ldr	r3, [pc, #44]	; (801a4 <sysclk_init+0x5c>)
   80176:	4798      	blx	r3
		pll_wait_for_lock(1);
		pmc_switch_mck_to_upllck(CONFIG_SYSCLK_PRES);
	}

	/* Update the SystemFrequency variable */
	SystemCoreClockUpdate();
   80178:	4b0b      	ldr	r3, [pc, #44]	; (801a8 <sysclk_init+0x60>)
   8017a:	4798      	blx	r3

	/* Set a flash wait state depending on the new cpu frequency */
	system_init_flash(sysclk_get_cpu_hz());
   8017c:	4801      	ldr	r0, [pc, #4]	; (80184 <sysclk_init+0x3c>)
   8017e:	4b02      	ldr	r3, [pc, #8]	; (80188 <sysclk_init+0x40>)
   80180:	4798      	blx	r3
   80182:	bd10      	pop	{r4, pc}
   80184:	0501bd00 	.word	0x0501bd00
   80188:	200700a5 	.word	0x200700a5
   8018c:	00080551 	.word	0x00080551
   80190:	000805a5 	.word	0x000805a5
   80194:	000805b5 	.word	0x000805b5
   80198:	200d3f01 	.word	0x200d3f01
   8019c:	400e0600 	.word	0x400e0600
   801a0:	000805c5 	.word	0x000805c5
   801a4:	000804ed 	.word	0x000804ed
   801a8:	0008071d 	.word	0x0008071d

000801ac <board_init>:
#include "conf_board.h"
#include "gpio.h"
#include "ioport.h"

void board_init(void)
{
   801ac:	b510      	push	{r4, lr}
#ifndef CONF_BOARD_KEEP_WATCHDOG_AT_INIT
	/* Disable the watchdog */
	WDT->WDT_MR = WDT_MR_WDDIS;
   801ae:	f44f 4200 	mov.w	r2, #32768	; 0x8000
   801b2:	4b17      	ldr	r3, [pc, #92]	; (80210 <board_init+0x64>)
   801b4:	605a      	str	r2, [r3, #4]
 *
 * \param ul_id Id (number) of the peripheral clock.
 */
static inline void sysclk_enable_peripheral_clock(uint32_t ul_id)
{
	pmc_enable_periph_clk(ul_id);
   801b6:	200b      	movs	r0, #11
   801b8:	4c16      	ldr	r4, [pc, #88]	; (80214 <board_init+0x68>)
   801ba:	47a0      	blx	r4
   801bc:	200c      	movs	r0, #12
   801be:	47a0      	blx	r4
   801c0:	200d      	movs	r0, #13
   801c2:	47a0      	blx	r4
   801c4:	200e      	movs	r0, #14
   801c6:	47a0      	blx	r4
	 * In new designs IOPORT is used instead.
	 * Here IOPORT must be initialized for others to use before setting up IO.
	 */
	ioport_init();
	/* Configure LED pins */
	gpio_configure_pin(LED0_GPIO, LED0_FLAGS);
   801c8:	203b      	movs	r0, #59	; 0x3b
   801ca:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801ce:	4c12      	ldr	r4, [pc, #72]	; (80218 <board_init+0x6c>)
   801d0:	47a0      	blx	r4
	gpio_configure_pin(LED1_GPIO, LED1_FLAGS);
   801d2:	2055      	movs	r0, #85	; 0x55
   801d4:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801d8:	47a0      	blx	r4
	gpio_configure_pin(LED2_GPIO, LED2_FLAGS);
   801da:	2056      	movs	r0, #86	; 0x56
   801dc:	f04f 5160 	mov.w	r1, #939524096	; 0x38000000
   801e0:	47a0      	blx	r4

	/* Configure Push Button pins */
	gpio_configure_pin(GPIO_PUSH_BUTTON_1, GPIO_PUSH_BUTTON_1_FLAGS);
   801e2:	2068      	movs	r0, #104	; 0x68
   801e4:	490d      	ldr	r1, [pc, #52]	; (8021c <board_init+0x70>)
   801e6:	47a0      	blx	r4
	gpio_configure_pin(GPIO_PUSH_BUTTON_2, GPIO_PUSH_BUTTON_2_FLAGS);
   801e8:	205c      	movs	r0, #92	; 0x5c
   801ea:	490d      	ldr	r1, [pc, #52]	; (80220 <board_init+0x74>)
   801ec:	47a0      	blx	r4

#ifdef CONF_BOARD_UART_CONSOLE
	/* Configure UART pins */
	gpio_configure_group(PINS_UART_PIO, PINS_UART, PINS_UART_FLAGS);
   801ee:	480d      	ldr	r0, [pc, #52]	; (80224 <board_init+0x78>)
   801f0:	f44f 7140 	mov.w	r1, #768	; 0x300
   801f4:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
   801f8:	4b0b      	ldr	r3, [pc, #44]	; (80228 <board_init+0x7c>)
   801fa:	4798      	blx	r3
		gpio_configure_pin(SPI1_NPCS3_GPIO, SPI1_NPCS3_FLAGS);
#   endif
#endif

#ifdef CONF_BOARD_TWI0
	gpio_configure_pin(TWI0_DATA_GPIO, TWI0_DATA_FLAGS);
   801fc:	2011      	movs	r0, #17
   801fe:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80202:	47a0      	blx	r4
	gpio_configure_pin(TWI0_CLK_GPIO, TWI0_CLK_FLAGS);
   80204:	2012      	movs	r0, #18
   80206:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   8020a:	47a0      	blx	r4
   8020c:	bd10      	pop	{r4, pc}
   8020e:	bf00      	nop
   80210:	400e1a50 	.word	0x400e1a50
   80214:	000805d5 	.word	0x000805d5
   80218:	000802d1 	.word	0x000802d1
   8021c:	28000079 	.word	0x28000079
   80220:	28000001 	.word	0x28000001
   80224:	400e0e00 	.word	0x400e0e00
   80228:	000803a5 	.word	0x000803a5

0008022c <pio_set_peripheral>:
		const uint32_t ul_mask)
{
	uint32_t ul_sr;

	/* Disable interrupts on the pin(s) */
	p_pio->PIO_IDR = ul_mask;
   8022c:	6442      	str	r2, [r0, #68]	; 0x44
	case PIO_OUTPUT_1:
	case PIO_NOT_A_PIN:
		return;
	}
#elif (SAM3XA|| SAM3U)
	switch (ul_type) {
   8022e:	f1b1 5f80 	cmp.w	r1, #268435456	; 0x10000000
   80232:	d016      	beq.n	80262 <pio_set_peripheral+0x36>
   80234:	d804      	bhi.n	80240 <pio_set_peripheral+0x14>
   80236:	b1c1      	cbz	r1, 8026a <pio_set_peripheral+0x3e>
   80238:	f1b1 6f00 	cmp.w	r1, #134217728	; 0x8000000
   8023c:	d00a      	beq.n	80254 <pio_set_peripheral+0x28>
   8023e:	e013      	b.n	80268 <pio_set_peripheral+0x3c>
   80240:	f1b1 5f40 	cmp.w	r1, #805306368	; 0x30000000
   80244:	d011      	beq.n	8026a <pio_set_peripheral+0x3e>
   80246:	f1b1 5f60 	cmp.w	r1, #939524096	; 0x38000000
   8024a:	d00e      	beq.n	8026a <pio_set_peripheral+0x3e>
   8024c:	f1b1 5f20 	cmp.w	r1, #671088640	; 0x28000000
   80250:	d10a      	bne.n	80268 <pio_set_peripheral+0x3c>
   80252:	4770      	bx	lr
	case PIO_PERIPH_A:
		ul_sr = p_pio->PIO_ABSR;
   80254:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR &= (~ul_mask & ul_sr);
   80256:	6f01      	ldr	r1, [r0, #112]	; 0x70
   80258:	400b      	ands	r3, r1
   8025a:	ea23 0302 	bic.w	r3, r3, r2
   8025e:	6703      	str	r3, [r0, #112]	; 0x70
		break;
   80260:	e002      	b.n	80268 <pio_set_peripheral+0x3c>

	case PIO_PERIPH_B:
		ul_sr = p_pio->PIO_ABSR;
   80262:	6f03      	ldr	r3, [r0, #112]	; 0x70
		p_pio->PIO_ABSR = (ul_mask | ul_sr);
   80264:	4313      	orrs	r3, r2
   80266:	6703      	str	r3, [r0, #112]	; 0x70
#else
#error "Unsupported device"
#endif

	/* Remove the pins from under the control of PIO */
	p_pio->PIO_PDR = ul_mask;
   80268:	6042      	str	r2, [r0, #4]
   8026a:	4770      	bx	lr

0008026c <pio_set_input>:
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   8026c:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8026e:	f012 0f01 	tst.w	r2, #1
		p_pio->PIO_PUER = ul_mask;
   80272:	bf14      	ite	ne
   80274:	6641      	strne	r1, [r0, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80276:	6601      	streq	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_attribute & PIO_PULLUP);

	/* Enable Input Filter if necessary */
	if (ul_attribute & (PIO_DEGLITCH | PIO_DEBOUNCE)) {
   80278:	f012 0f0a 	tst.w	r2, #10
		p_pio->PIO_IFER = ul_mask;
   8027c:	bf14      	ite	ne
   8027e:	6201      	strne	r1, [r0, #32]
	} else {
		p_pio->PIO_IFDR = ul_mask;
   80280:	6241      	streq	r1, [r0, #36]	; 0x24
			p_pio->PIO_IFSCER = ul_mask;
		}
	}
#elif (SAM3XA|| SAM3U)
	/* Enable de-glitch or de-bounce if necessary */
	if (ul_attribute & PIO_DEGLITCH) {
   80282:	f012 0f02 	tst.w	r2, #2
   80286:	d002      	beq.n	8028e <pio_set_input+0x22>
		p_pio->PIO_SCIFSR = ul_mask;
   80288:	f8c0 1080 	str.w	r1, [r0, #128]	; 0x80
   8028c:	e004      	b.n	80298 <pio_set_input+0x2c>
	} else {
		if (ul_attribute & PIO_DEBOUNCE) {
   8028e:	f012 0f08 	tst.w	r2, #8
			p_pio->PIO_DIFSR = ul_mask;
   80292:	bf18      	it	ne
   80294:	f8c0 1084 	strne.w	r1, [r0, #132]	; 0x84
#else
#error "Unsupported device"
#endif

	/* Configure pin as input */
	p_pio->PIO_ODR = ul_mask;
   80298:	6141      	str	r1, [r0, #20]
	p_pio->PIO_PER = ul_mask;
   8029a:	6001      	str	r1, [r0, #0]
   8029c:	4770      	bx	lr
   8029e:	bf00      	nop

000802a0 <pio_set_output>:
 */
void pio_set_output(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_default_level,
		const uint32_t ul_multidrive_enable,
		const uint32_t ul_pull_up_enable)
{
   802a0:	b410      	push	{r4}
 * \param p_pio Pointer to a PIO instance.
 * \param ul_mask Interrupt sources bit map.
 */
void pio_disable_interrupt(Pio *p_pio, const uint32_t ul_mask)
{
	p_pio->PIO_IDR = ul_mask;
   802a2:	6441      	str	r1, [r0, #68]	; 0x44
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   802a4:	9c01      	ldr	r4, [sp, #4]
   802a6:	b10c      	cbz	r4, 802ac <pio_set_output+0xc>
		p_pio->PIO_PUER = ul_mask;
   802a8:	6641      	str	r1, [r0, #100]	; 0x64
   802aa:	e000      	b.n	802ae <pio_set_output+0xe>
	} else {
		p_pio->PIO_PUDR = ul_mask;
   802ac:	6601      	str	r1, [r0, #96]	; 0x60
{
	pio_disable_interrupt(p_pio, ul_mask);
	pio_pull_up(p_pio, ul_mask, ul_pull_up_enable);

	/* Enable multi-drive if necessary */
	if (ul_multidrive_enable) {
   802ae:	b10b      	cbz	r3, 802b4 <pio_set_output+0x14>
		p_pio->PIO_MDER = ul_mask;
   802b0:	6501      	str	r1, [r0, #80]	; 0x50
   802b2:	e000      	b.n	802b6 <pio_set_output+0x16>
	} else {
		p_pio->PIO_MDDR = ul_mask;
   802b4:	6541      	str	r1, [r0, #84]	; 0x54
	}

	/* Set default value */
	if (ul_default_level) {
   802b6:	b10a      	cbz	r2, 802bc <pio_set_output+0x1c>
		p_pio->PIO_SODR = ul_mask;
   802b8:	6301      	str	r1, [r0, #48]	; 0x30
   802ba:	e000      	b.n	802be <pio_set_output+0x1e>
	} else {
		p_pio->PIO_CODR = ul_mask;
   802bc:	6341      	str	r1, [r0, #52]	; 0x34
	}

	/* Configure pin(s) as output(s) */
	p_pio->PIO_OER = ul_mask;
   802be:	6101      	str	r1, [r0, #16]
	p_pio->PIO_PER = ul_mask;
   802c0:	6001      	str	r1, [r0, #0]
}
   802c2:	f85d 4b04 	ldr.w	r4, [sp], #4
   802c6:	4770      	bx	lr

000802c8 <pio_get_interrupt_status>:
 *
 * \return The interrupt status mask value.
 */
uint32_t pio_get_interrupt_status(const Pio *p_pio)
{
	return p_pio->PIO_ISR;
   802c8:	6cc0      	ldr	r0, [r0, #76]	; 0x4c
}
   802ca:	4770      	bx	lr

000802cc <pio_get_interrupt_mask>:
 *
 * \return The interrupt mask value.
 */
uint32_t pio_get_interrupt_mask(const Pio *p_pio)
{
	return p_pio->PIO_IMR;
   802cc:	6c80      	ldr	r0, [r0, #72]	; 0x48
}
   802ce:	4770      	bx	lr

000802d0 <pio_configure_pin>:
 * \param ul_flags Pins attributes.
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
   802d0:	b570      	push	{r4, r5, r6, lr}
   802d2:	b082      	sub	sp, #8
   802d4:	460d      	mov	r5, r1
		p_pio = PIOC;
	} else {
		p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
	}
#else
	p_pio = (Pio *)((uint32_t)PIOA + (PIO_DELTA * (ul_pin >> 5)));
   802d6:	0944      	lsrs	r4, r0, #5
   802d8:	f504 1400 	add.w	r4, r4, #2097152	; 0x200000
   802dc:	f204 7407 	addw	r4, r4, #1799	; 0x707
   802e0:	0266      	lsls	r6, r4, #9
uint32_t pio_configure_pin(uint32_t ul_pin, const uint32_t ul_flags)
{
	Pio *p_pio = pio_get_pin_group(ul_pin);

	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   802e2:	f001 44f0 	and.w	r4, r1, #2013265920	; 0x78000000
   802e6:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   802ea:	d030      	beq.n	8034e <pio_configure_pin+0x7e>
   802ec:	d806      	bhi.n	802fc <pio_configure_pin+0x2c>
   802ee:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   802f2:	d00a      	beq.n	8030a <pio_configure_pin+0x3a>
   802f4:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   802f8:	d018      	beq.n	8032c <pio_configure_pin+0x5c>
   802fa:	e049      	b.n	80390 <pio_configure_pin+0xc0>
   802fc:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   80300:	d030      	beq.n	80364 <pio_configure_pin+0x94>
   80302:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   80306:	d02d      	beq.n	80364 <pio_configure_pin+0x94>
   80308:	e042      	b.n	80390 <pio_configure_pin+0xc0>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
   8030a:	f000 001f 	and.w	r0, r0, #31
   8030e:	2401      	movs	r4, #1
   80310:	4084      	lsls	r4, r0
   80312:	4630      	mov	r0, r6
   80314:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   80318:	4622      	mov	r2, r4
   8031a:	4b1f      	ldr	r3, [pc, #124]	; (80398 <pio_configure_pin+0xc8>)
   8031c:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   8031e:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80322:	bf14      	ite	ne
   80324:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80326:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80328:	2001      	movs	r0, #1
   8032a:	e032      	b.n	80392 <pio_configure_pin+0xc2>
		pio_set_peripheral(p_pio, PIO_PERIPH_A, (1 << (ul_pin & 0x1F)));
		pio_pull_up(p_pio, (1 << (ul_pin & 0x1F)),
				(ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, (1 << (ul_pin & 0x1F)));
   8032c:	f000 001f 	and.w	r0, r0, #31
   80330:	2401      	movs	r4, #1
   80332:	4084      	lsls	r4, r0
   80334:	4630      	mov	r0, r6
   80336:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   8033a:	4622      	mov	r2, r4
   8033c:	4b16      	ldr	r3, [pc, #88]	; (80398 <pio_configure_pin+0xc8>)
   8033e:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   80340:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   80344:	bf14      	ite	ne
   80346:	6674      	strne	r4, [r6, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80348:	6634      	streq	r4, [r6, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   8034a:	2001      	movs	r0, #1
   8034c:	e021      	b.n	80392 <pio_configure_pin+0xc2>
				(ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
   8034e:	f000 011f 	and.w	r1, r0, #31
   80352:	2401      	movs	r4, #1
   80354:	4630      	mov	r0, r6
   80356:	fa04 f101 	lsl.w	r1, r4, r1
   8035a:	462a      	mov	r2, r5
   8035c:	4b0f      	ldr	r3, [pc, #60]	; (8039c <pio_configure_pin+0xcc>)
   8035e:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   80360:	4620      	mov	r0, r4
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;
   80362:	e016      	b.n	80392 <pio_configure_pin+0xc2>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   80364:	f000 011f 	and.w	r1, r0, #31
   80368:	2401      	movs	r4, #1
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8036a:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, (1 << (ul_pin & 0x1F)), ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
   8036e:	ea05 0304 	and.w	r3, r5, r4
   80372:	9300      	str	r3, [sp, #0]
   80374:	4630      	mov	r0, r6
   80376:	fa04 f101 	lsl.w	r1, r4, r1
   8037a:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   8037e:	bf14      	ite	ne
   80380:	2200      	movne	r2, #0
   80382:	2201      	moveq	r2, #1
   80384:	f3c5 0380 	ubfx	r3, r5, #2, #1
   80388:	4d05      	ldr	r5, [pc, #20]	; (803a0 <pio_configure_pin+0xd0>)
   8038a:	47a8      	blx	r5

	default:
		return 0;
	}

	return 1;
   8038c:	4620      	mov	r0, r4
		pio_set_output(p_pio, (1 << (ul_pin & 0x1F)),
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   8038e:	e000      	b.n	80392 <pio_configure_pin+0xc2>

	default:
		return 0;
   80390:	2000      	movs	r0, #0
	}

	return 1;
}
   80392:	b002      	add	sp, #8
   80394:	bd70      	pop	{r4, r5, r6, pc}
   80396:	bf00      	nop
   80398:	0008022d 	.word	0x0008022d
   8039c:	0008026d 	.word	0x0008026d
   803a0:	000802a1 	.word	0x000802a1

000803a4 <pio_configure_pin_group>:
 *
 * \return Whether the pin(s) have been configured properly.
 */
uint32_t pio_configure_pin_group(Pio *p_pio,
		uint32_t ul_mask, const uint32_t ul_flags)
{
   803a4:	b5f0      	push	{r4, r5, r6, r7, lr}
   803a6:	b083      	sub	sp, #12
   803a8:	4607      	mov	r7, r0
   803aa:	460e      	mov	r6, r1
   803ac:	4615      	mov	r5, r2
	/* Configure pins */
	switch (ul_flags & PIO_TYPE_Msk) {
   803ae:	f002 44f0 	and.w	r4, r2, #2013265920	; 0x78000000
   803b2:	f1b4 5f20 	cmp.w	r4, #671088640	; 0x28000000
   803b6:	d026      	beq.n	80406 <pio_configure_pin_group+0x62>
   803b8:	d806      	bhi.n	803c8 <pio_configure_pin_group+0x24>
   803ba:	f1b4 6f00 	cmp.w	r4, #134217728	; 0x8000000
   803be:	d00a      	beq.n	803d6 <pio_configure_pin_group+0x32>
   803c0:	f1b4 5f80 	cmp.w	r4, #268435456	; 0x10000000
   803c4:	d013      	beq.n	803ee <pio_configure_pin_group+0x4a>
   803c6:	e034      	b.n	80432 <pio_configure_pin_group+0x8e>
   803c8:	f1b4 5f40 	cmp.w	r4, #805306368	; 0x30000000
   803cc:	d01f      	beq.n	8040e <pio_configure_pin_group+0x6a>
   803ce:	f1b4 5f60 	cmp.w	r4, #939524096	; 0x38000000
   803d2:	d01c      	beq.n	8040e <pio_configure_pin_group+0x6a>
   803d4:	e02d      	b.n	80432 <pio_configure_pin_group+0x8e>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
   803d6:	f04f 6100 	mov.w	r1, #134217728	; 0x8000000
   803da:	4632      	mov	r2, r6
   803dc:	4b16      	ldr	r3, [pc, #88]	; (80438 <pio_configure_pin_group+0x94>)
   803de:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803e0:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803e4:	bf14      	ite	ne
   803e6:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   803e8:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   803ea:	2001      	movs	r0, #1
   803ec:	e022      	b.n	80434 <pio_configure_pin_group+0x90>
	case PIO_TYPE_PIO_PERIPH_A:
		pio_set_peripheral(p_pio, PIO_PERIPH_A, ul_mask);
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
	case PIO_TYPE_PIO_PERIPH_B:
		pio_set_peripheral(p_pio, PIO_PERIPH_B, ul_mask);
   803ee:	f04f 5180 	mov.w	r1, #268435456	; 0x10000000
   803f2:	4632      	mov	r2, r6
   803f4:	4b10      	ldr	r3, [pc, #64]	; (80438 <pio_configure_pin_group+0x94>)
   803f6:	4798      	blx	r3
 */
void pio_pull_up(Pio *p_pio, const uint32_t ul_mask,
		const uint32_t ul_pull_up_enable)
{
	/* Enable the pull-up(s) if necessary */
	if (ul_pull_up_enable) {
   803f8:	f015 0f01 	tst.w	r5, #1
		p_pio->PIO_PUER = ul_mask;
   803fc:	bf14      	ite	ne
   803fe:	667e      	strne	r6, [r7, #100]	; 0x64
	} else {
		p_pio->PIO_PUDR = ul_mask;
   80400:	663e      	streq	r6, [r7, #96]	; 0x60

	default:
		return 0;
	}

	return 1;
   80402:	2001      	movs	r0, #1
   80404:	e016      	b.n	80434 <pio_configure_pin_group+0x90>
		pio_pull_up(p_pio, ul_mask, (ul_flags & PIO_PULLUP));
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
   80406:	4b0d      	ldr	r3, [pc, #52]	; (8043c <pio_configure_pin_group+0x98>)
   80408:	4798      	blx	r3

	default:
		return 0;
	}

	return 1;
   8040a:	2001      	movs	r0, #1
		break;
#endif

	case PIO_TYPE_PIO_INPUT:
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;
   8040c:	e012      	b.n	80434 <pio_configure_pin_group+0x90>

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
   8040e:	f005 5260 	and.w	r2, r5, #939524096	; 0x38000000
		pio_set_input(p_pio, ul_mask, ul_flags);
		break;

	case PIO_TYPE_PIO_OUTPUT_0:
	case PIO_TYPE_PIO_OUTPUT_1:
		pio_set_output(p_pio, ul_mask,
   80412:	f005 0301 	and.w	r3, r5, #1
   80416:	9300      	str	r3, [sp, #0]
   80418:	4638      	mov	r0, r7
   8041a:	4631      	mov	r1, r6
   8041c:	f1b2 5f60 	cmp.w	r2, #939524096	; 0x38000000
   80420:	bf14      	ite	ne
   80422:	2200      	movne	r2, #0
   80424:	2201      	moveq	r2, #1
   80426:	f3c5 0380 	ubfx	r3, r5, #2, #1
   8042a:	4c05      	ldr	r4, [pc, #20]	; (80440 <pio_configure_pin_group+0x9c>)
   8042c:	47a0      	blx	r4

	default:
		return 0;
	}

	return 1;
   8042e:	2001      	movs	r0, #1
		pio_set_output(p_pio, ul_mask,
				((ul_flags & PIO_TYPE_PIO_OUTPUT_1)
				== PIO_TYPE_PIO_OUTPUT_1) ? 1 : 0,
				(ul_flags & PIO_OPENDRAIN) ? 1 : 0,
				(ul_flags & PIO_PULLUP) ? 1 : 0);
		break;
   80430:	e000      	b.n	80434 <pio_configure_pin_group+0x90>

	default:
		return 0;
   80432:	2000      	movs	r0, #0
	}

	return 1;
}
   80434:	b003      	add	sp, #12
   80436:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80438:	0008022d 	.word	0x0008022d
   8043c:	0008026d 	.word	0x0008026d
   80440:	000802a1 	.word	0x000802a1

00080444 <pio_handler_process>:
 *
 * \param p_pio PIO controller base address.
 * \param ul_id PIO controller ID.
 */
void pio_handler_process(Pio *p_pio, uint32_t ul_id)
{
   80444:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   80448:	4604      	mov	r4, r0
   8044a:	460e      	mov	r6, r1
	uint32_t status;
	uint32_t i;

	/* Read PIO controller status */
	status = pio_get_interrupt_status(p_pio);
   8044c:	4b10      	ldr	r3, [pc, #64]	; (80490 <pio_handler_process+0x4c>)
   8044e:	4798      	blx	r3
   80450:	4605      	mov	r5, r0
	status &= pio_get_interrupt_mask(p_pio);
   80452:	4620      	mov	r0, r4
   80454:	4b0f      	ldr	r3, [pc, #60]	; (80494 <pio_handler_process+0x50>)
   80456:	4798      	blx	r3

	/* Check pending events */
	if (status != 0) {
   80458:	4005      	ands	r5, r0
   8045a:	d017      	beq.n	8048c <pio_handler_process+0x48>
   8045c:	4f0e      	ldr	r7, [pc, #56]	; (80498 <pio_handler_process+0x54>)
   8045e:	f107 040c 	add.w	r4, r7, #12
   80462:	376c      	adds	r7, #108	; 0x6c
		/* Find triggering source */
		i = 0;
		while (status != 0) {
			/* Source is configured on the same controller */
			if (gs_interrupt_sources[i].id == ul_id) {
   80464:	f854 3c0c 	ldr.w	r3, [r4, #-12]
   80468:	42b3      	cmp	r3, r6
   8046a:	d10a      	bne.n	80482 <pio_handler_process+0x3e>
				/* Source has PIOs whose statuses have changed */
				if ((status & gs_interrupt_sources[i].mask) != 0) {
   8046c:	f854 1c08 	ldr.w	r1, [r4, #-8]
   80470:	4229      	tst	r1, r5
   80472:	d006      	beq.n	80482 <pio_handler_process+0x3e>
					gs_interrupt_sources[i].handler(gs_interrupt_sources[i].id,
   80474:	6823      	ldr	r3, [r4, #0]
   80476:	4630      	mov	r0, r6
   80478:	4798      	blx	r3
							gs_interrupt_sources[i].mask);
					status &= ~(gs_interrupt_sources[i].mask);
   8047a:	f854 3c08 	ldr.w	r3, [r4, #-8]
   8047e:	ea25 0503 	bic.w	r5, r5, r3
				}
			}
			i++;
			if (i >= MAX_INTERRUPT_SOURCES) {
   80482:	42bc      	cmp	r4, r7
   80484:	d002      	beq.n	8048c <pio_handler_process+0x48>
   80486:	3410      	adds	r4, #16

	/* Check pending events */
	if (status != 0) {
		/* Find triggering source */
		i = 0;
		while (status != 0) {
   80488:	2d00      	cmp	r5, #0
   8048a:	d1eb      	bne.n	80464 <pio_handler_process+0x20>
   8048c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
   80490:	000802c9 	.word	0x000802c9
   80494:	000802cd 	.word	0x000802cd
   80498:	20070574 	.word	0x20070574

0008049c <PIOA_Handler>:
/**
 * \brief Parallel IO Controller A interrupt handler.
 * Redefined PIOA interrupt handler for NVIC interrupt table.
 */
void PIOA_Handler(void)
{
   8049c:	b508      	push	{r3, lr}
	pio_handler_process(PIOA, ID_PIOA);
   8049e:	4802      	ldr	r0, [pc, #8]	; (804a8 <PIOA_Handler+0xc>)
   804a0:	210b      	movs	r1, #11
   804a2:	4b02      	ldr	r3, [pc, #8]	; (804ac <PIOA_Handler+0x10>)
   804a4:	4798      	blx	r3
   804a6:	bd08      	pop	{r3, pc}
   804a8:	400e0e00 	.word	0x400e0e00
   804ac:	00080445 	.word	0x00080445

000804b0 <PIOB_Handler>:
/**
 * \brief Parallel IO Controller B interrupt handler
 * Redefined PIOB interrupt handler for NVIC interrupt table.
 */
void PIOB_Handler(void)
{
   804b0:	b508      	push	{r3, lr}
    pio_handler_process(PIOB, ID_PIOB);
   804b2:	4802      	ldr	r0, [pc, #8]	; (804bc <PIOB_Handler+0xc>)
   804b4:	210c      	movs	r1, #12
   804b6:	4b02      	ldr	r3, [pc, #8]	; (804c0 <PIOB_Handler+0x10>)
   804b8:	4798      	blx	r3
   804ba:	bd08      	pop	{r3, pc}
   804bc:	400e1000 	.word	0x400e1000
   804c0:	00080445 	.word	0x00080445

000804c4 <PIOC_Handler>:
/**
 * \brief Parallel IO Controller C interrupt handler.
 * Redefined PIOC interrupt handler for NVIC interrupt table.
 */
void PIOC_Handler(void)
{
   804c4:	b508      	push	{r3, lr}
	pio_handler_process(PIOC, ID_PIOC);
   804c6:	4802      	ldr	r0, [pc, #8]	; (804d0 <PIOC_Handler+0xc>)
   804c8:	210d      	movs	r1, #13
   804ca:	4b02      	ldr	r3, [pc, #8]	; (804d4 <PIOC_Handler+0x10>)
   804cc:	4798      	blx	r3
   804ce:	bd08      	pop	{r3, pc}
   804d0:	400e1200 	.word	0x400e1200
   804d4:	00080445 	.word	0x00080445

000804d8 <PIOD_Handler>:
/**
 * \brief Parallel IO Controller D interrupt handler.
 * Redefined PIOD interrupt handler for NVIC interrupt table.
 */
void PIOD_Handler(void)
{
   804d8:	b508      	push	{r3, lr}
	pio_handler_process(PIOD, ID_PIOD);
   804da:	4802      	ldr	r0, [pc, #8]	; (804e4 <PIOD_Handler+0xc>)
   804dc:	210e      	movs	r1, #14
   804de:	4b02      	ldr	r3, [pc, #8]	; (804e8 <PIOD_Handler+0x10>)
   804e0:	4798      	blx	r3
   804e2:	bd08      	pop	{r3, pc}
   804e4:	400e1400 	.word	0x400e1400
   804e8:	00080445 	.word	0x00080445

000804ec <pmc_switch_mck_to_pllack>:
 */
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
   804ec:	4b17      	ldr	r3, [pc, #92]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   804ee:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   804f0:	f022 0270 	bic.w	r2, r2, #112	; 0x70
   804f4:	4310      	orrs	r0, r2
   804f6:	6318      	str	r0, [r3, #48]	; 0x30
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   804f8:	6e9b      	ldr	r3, [r3, #104]	; 0x68
   804fa:	f013 0f08 	tst.w	r3, #8
   804fe:	d109      	bne.n	80514 <pmc_switch_mck_to_pllack+0x28>
   80500:	f44f 6300 	mov.w	r3, #2048	; 0x800
   80504:	4911      	ldr	r1, [pc, #68]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   80506:	e001      	b.n	8050c <pmc_switch_mck_to_pllack+0x20>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80508:	3b01      	subs	r3, #1
   8050a:	d019      	beq.n	80540 <pmc_switch_mck_to_pllack+0x54>
uint32_t pmc_switch_mck_to_pllack(uint32_t ul_pres)
{
	uint32_t ul_timeout;

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   8050c:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   8050e:	f012 0f08 	tst.w	r2, #8
   80512:	d0f9      	beq.n	80508 <pmc_switch_mck_to_pllack+0x1c>
		if (ul_timeout == 0) {
			return 1;
		}
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
   80514:	4b0d      	ldr	r3, [pc, #52]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   80516:	6b1a      	ldr	r2, [r3, #48]	; 0x30
   80518:	f022 0203 	bic.w	r2, r2, #3
   8051c:	f042 0202 	orr.w	r2, r2, #2
   80520:	631a      	str	r2, [r3, #48]	; 0x30
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80522:	6e98      	ldr	r0, [r3, #104]	; 0x68
   80524:	f010 0008 	ands.w	r0, r0, #8
   80528:	d10c      	bne.n	80544 <pmc_switch_mck_to_pllack+0x58>
   8052a:	f44f 6300 	mov.w	r3, #2048	; 0x800
   8052e:	4907      	ldr	r1, [pc, #28]	; (8054c <pmc_switch_mck_to_pllack+0x60>)
   80530:	e001      	b.n	80536 <pmc_switch_mck_to_pllack+0x4a>
			--ul_timeout) {
		if (ul_timeout == 0) {
   80532:	3b01      	subs	r3, #1
   80534:	d008      	beq.n	80548 <pmc_switch_mck_to_pllack+0x5c>
	}

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_CSS_Msk)) |
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
   80536:	6e8a      	ldr	r2, [r1, #104]	; 0x68
   80538:	f012 0f08 	tst.w	r2, #8
   8053c:	d0f9      	beq.n	80532 <pmc_switch_mck_to_pllack+0x46>
   8053e:	4770      	bx	lr

	PMC->PMC_MCKR = (PMC->PMC_MCKR & (~PMC_MCKR_PRES_Msk)) | ul_pres;
	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80540:	2001      	movs	r0, #1
   80542:	4770      	bx	lr
		if (ul_timeout == 0) {
			return 1;
		}
	}

	return 0;
   80544:	2000      	movs	r0, #0
   80546:	4770      	bx	lr
			PMC_MCKR_CSS_PLLA_CLK;

	for (ul_timeout = PMC_TIMEOUT; !(PMC->PMC_SR & PMC_SR_MCKRDY);
			--ul_timeout) {
		if (ul_timeout == 0) {
			return 1;
   80548:	2001      	movs	r0, #1
		}
	}

	return 0;
}
   8054a:	4770      	bx	lr
   8054c:	400e0600 	.word	0x400e0600

00080550 <pmc_switch_mainck_to_xtal>:
 */
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
   80550:	b138      	cbz	r0, 80562 <pmc_switch_mainck_to_xtal+0x12>
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   80552:	4911      	ldr	r1, [pc, #68]	; (80598 <pmc_switch_mainck_to_xtal+0x48>)
   80554:	6a0b      	ldr	r3, [r1, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
   80556:	4a11      	ldr	r2, [pc, #68]	; (8059c <pmc_switch_mainck_to_xtal+0x4c>)
   80558:	401a      	ands	r2, r3
   8055a:	4b11      	ldr	r3, [pc, #68]	; (805a0 <pmc_switch_mainck_to_xtal+0x50>)
   8055c:	4313      	orrs	r3, r2
void pmc_switch_mainck_to_xtal(uint32_t ul_bypass,
		uint32_t ul_xtal_startup_time)
{
	/* Enable Main Xtal oscillator */
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
   8055e:	620b      	str	r3, [r1, #32]
   80560:	4770      	bx	lr
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   80562:	4a0d      	ldr	r2, [pc, #52]	; (80598 <pmc_switch_mainck_to_xtal+0x48>)
   80564:	6a13      	ldr	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   80566:	f423 135c 	bic.w	r3, r3, #3604480	; 0x370000
   8056a:	f023 0303 	bic.w	r3, r3, #3
   8056e:	f443 135c 	orr.w	r3, r3, #3604480	; 0x370000
   80572:	f043 0301 	orr.w	r3, r3, #1
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
   80576:	0209      	lsls	r1, r1, #8
   80578:	b289      	uxth	r1, r1
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
   8057a:	430b      	orrs	r3, r1
	if (ul_bypass) {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTEN) |
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTBY |
				CKGR_MOR_MOSCSEL;
	} else {
		PMC->CKGR_MOR = (PMC->CKGR_MOR & ~CKGR_MOR_MOSCXTBY) |
   8057c:	6213      	str	r3, [r2, #32]
				CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCXTEN |
				CKGR_MOR_MOSCXTST(ul_xtal_startup_time);
		/* Wait the Xtal to stabilize */
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS));
   8057e:	6e93      	ldr	r3, [r2, #104]	; 0x68
   80580:	f013 0f01 	tst.w	r3, #1
   80584:	d0fb      	beq.n	8057e <pmc_switch_mainck_to_xtal+0x2e>

		PMC->CKGR_MOR |= CKGR_MOR_KEY_PASSWD | CKGR_MOR_MOSCSEL;
   80586:	4a04      	ldr	r2, [pc, #16]	; (80598 <pmc_switch_mainck_to_xtal+0x48>)
   80588:	6a13      	ldr	r3, [r2, #32]
   8058a:	f043 739b 	orr.w	r3, r3, #20316160	; 0x1360000
   8058e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
   80592:	6213      	str	r3, [r2, #32]
   80594:	4770      	bx	lr
   80596:	bf00      	nop
   80598:	400e0600 	.word	0x400e0600
   8059c:	fec8fffc 	.word	0xfec8fffc
   805a0:	01370002 	.word	0x01370002

000805a4 <pmc_osc_is_ready_mainck>:
 * \retval 1 Xtal is ready.
 * \retval 0 Xtal is not ready.
 */
uint32_t pmc_osc_is_ready_mainck(void)
{
	return PMC->PMC_SR & PMC_SR_MOSCSELS;
   805a4:	4b02      	ldr	r3, [pc, #8]	; (805b0 <pmc_osc_is_ready_mainck+0xc>)
   805a6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805a8:	f400 3080 	and.w	r0, r0, #65536	; 0x10000
   805ac:	4770      	bx	lr
   805ae:	bf00      	nop
   805b0:	400e0600 	.word	0x400e0600

000805b4 <pmc_disable_pllack>:
void pmc_disable_pllack(void)
{
#if (SAM4C || SAM4CM || SAM4CP || SAMG)
	PMC->CKGR_PLLAR = CKGR_PLLAR_MULA(0);
#else
	PMC->CKGR_PLLAR = CKGR_PLLAR_ONE | CKGR_PLLAR_MULA(0);
   805b4:	f04f 5200 	mov.w	r2, #536870912	; 0x20000000
   805b8:	4b01      	ldr	r3, [pc, #4]	; (805c0 <pmc_disable_pllack+0xc>)
   805ba:	629a      	str	r2, [r3, #40]	; 0x28
   805bc:	4770      	bx	lr
   805be:	bf00      	nop
   805c0:	400e0600 	.word	0x400e0600

000805c4 <pmc_is_locked_pllack>:
 * \retval 0 Not locked.
 * \retval 1 Locked.
 */
uint32_t pmc_is_locked_pllack(void)
{
	return (PMC->PMC_SR & PMC_SR_LOCKA);
   805c4:	4b02      	ldr	r3, [pc, #8]	; (805d0 <pmc_is_locked_pllack+0xc>)
   805c6:	6e98      	ldr	r0, [r3, #104]	; 0x68
}
   805c8:	f000 0002 	and.w	r0, r0, #2
   805cc:	4770      	bx	lr
   805ce:	bf00      	nop
   805d0:	400e0600 	.word	0x400e0600

000805d4 <pmc_enable_periph_clk>:
 * \retval 0 Success.
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
   805d4:	282c      	cmp	r0, #44	; 0x2c
   805d6:	d820      	bhi.n	8061a <pmc_enable_periph_clk+0x46>
		return 1;
	}

	if (ul_id < 32) {
   805d8:	281f      	cmp	r0, #31
   805da:	d80d      	bhi.n	805f8 <pmc_enable_periph_clk+0x24>
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
   805dc:	4b12      	ldr	r3, [pc, #72]	; (80628 <pmc_enable_periph_clk+0x54>)
   805de:	699a      	ldr	r2, [r3, #24]
   805e0:	2301      	movs	r3, #1
   805e2:	4083      	lsls	r3, r0
   805e4:	401a      	ands	r2, r3
   805e6:	4293      	cmp	r3, r2
   805e8:	d019      	beq.n	8061e <pmc_enable_periph_clk+0x4a>
			PMC->PMC_PCER0 = 1 << ul_id;
   805ea:	2301      	movs	r3, #1
   805ec:	fa03 f000 	lsl.w	r0, r3, r0
   805f0:	4b0d      	ldr	r3, [pc, #52]	; (80628 <pmc_enable_periph_clk+0x54>)
   805f2:	6118      	str	r0, [r3, #16]
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   805f4:	2000      	movs	r0, #0
   805f6:	4770      	bx	lr
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   805f8:	4b0b      	ldr	r3, [pc, #44]	; (80628 <pmc_enable_periph_clk+0x54>)
   805fa:	f8d3 2108 	ldr.w	r2, [r3, #264]	; 0x108
		if ((PMC->PMC_PCSR0 & (1u << ul_id)) != (1u << ul_id)) {
			PMC->PMC_PCER0 = 1 << ul_id;
		}
#if (SAM3S || SAM3XA || SAM4S || SAM4E || SAM4C || SAM4CM || SAM4CP || SAMG55)
	} else {
		ul_id -= 32;
   805fe:	3820      	subs	r0, #32
		if ((PMC->PMC_PCSR1 & (1u << ul_id)) != (1u << ul_id)) {
   80600:	2301      	movs	r3, #1
   80602:	4083      	lsls	r3, r0
   80604:	401a      	ands	r2, r3
   80606:	4293      	cmp	r3, r2
   80608:	d00b      	beq.n	80622 <pmc_enable_periph_clk+0x4e>
			PMC->PMC_PCER1 = 1 << ul_id;
   8060a:	2301      	movs	r3, #1
   8060c:	fa03 f000 	lsl.w	r0, r3, r0
   80610:	4b05      	ldr	r3, [pc, #20]	; (80628 <pmc_enable_periph_clk+0x54>)
   80612:	f8c3 0100 	str.w	r0, [r3, #256]	; 0x100
		}
#endif
	}

	return 0;
   80616:	2000      	movs	r0, #0
   80618:	4770      	bx	lr
 * \retval 1 Invalid parameter.
 */
uint32_t pmc_enable_periph_clk(uint32_t ul_id)
{
	if (ul_id > MAX_PERIPH_ID) {
		return 1;
   8061a:	2001      	movs	r0, #1
   8061c:	4770      	bx	lr
			PMC->PMC_PCER1 = 1 << ul_id;
		}
#endif
	}

	return 0;
   8061e:	2000      	movs	r0, #0
   80620:	4770      	bx	lr
   80622:	2000      	movs	r0, #0
}
   80624:	4770      	bx	lr
   80626:	bf00      	nop
   80628:	400e0600 	.word	0x400e0600

0008062c <tc_init>:
 */
void tc_init(
		Tc *p_tc,
		uint32_t ul_channel,
		uint32_t ul_mode)
{
   8062c:	b410      	push	{r4}

	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));
	tc_channel = p_tc->TC_CHANNEL + ul_channel;
   8062e:	0189      	lsls	r1, r1, #6
   80630:	1843      	adds	r3, r0, r1

	/*  Disable TC clock. */
	tc_channel->TC_CCR = TC_CCR_CLKDIS;
   80632:	2402      	movs	r4, #2
   80634:	5044      	str	r4, [r0, r1]

	/*  Disable interrupts. */
	tc_channel->TC_IDR = 0xFFFFFFFF;
   80636:	f04f 31ff 	mov.w	r1, #4294967295
   8063a:	6299      	str	r1, [r3, #40]	; 0x28

	/*  Clear status register. */
	tc_channel->TC_SR;
   8063c:	6a19      	ldr	r1, [r3, #32]

	/*  Set mode. */
	tc_channel->TC_CMR = ul_mode;
   8063e:	605a      	str	r2, [r3, #4]
}
   80640:	f85d 4b04 	ldr.w	r4, [sp], #4
   80644:	4770      	bx	lr
   80646:	bf00      	nop

00080648 <tc_set_block_mode>:
		uint32_t ul_blockmode)
{
	/* Validate inputs. */
	Assert(p_tc);
	
	p_tc->TC_BMR = ul_blockmode;
   80648:	f8c0 10c4 	str.w	r1, [r0, #196]	; 0xc4
   8064c:	4770      	bx	lr
   8064e:	bf00      	nop

00080650 <tc_start>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKEN | TC_CCR_SWTRG;
   80650:	0189      	lsls	r1, r1, #6
   80652:	2305      	movs	r3, #5
   80654:	5043      	str	r3, [r0, r1]
   80656:	4770      	bx	lr

00080658 <tc_stop>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	p_tc->TC_CHANNEL[ul_channel].TC_CCR = TC_CCR_CLKDIS;
   80658:	0189      	lsls	r1, r1, #6
   8065a:	2302      	movs	r3, #2
   8065c:	5043      	str	r3, [r0, r1]
   8065e:	4770      	bx	lr

00080660 <tc_read_cv>:
	/* Validate inputs. */
	Assert(p_tc);
	Assert(ul_channel <
			(sizeof(p_tc->TC_CHANNEL) / sizeof(p_tc->TC_CHANNEL[0])));

	return p_tc->TC_CHANNEL[ul_channel].TC_CV;
   80660:	eb00 1181 	add.w	r1, r0, r1, lsl #6
   80664:	6908      	ldr	r0, [r1, #16]
}
   80666:	4770      	bx	lr

00080668 <Dummy_Handler>:

/**
 * \brief Default interrupt handler for unused IRQs.
 */
void Dummy_Handler(void)
{
   80668:	e7fe      	b.n	80668 <Dummy_Handler>
   8066a:	bf00      	nop

0008066c <Reset_Handler>:
/**
 * \brief This is the code that gets called on processor reset.
 * To initialize the device, and call the main() routine.
 */
void Reset_Handler(void)
{
   8066c:	b510      	push	{r4, lr}

	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
   8066e:	4b1e      	ldr	r3, [pc, #120]	; (806e8 <Reset_Handler+0x7c>)
   80670:	4a1e      	ldr	r2, [pc, #120]	; (806ec <Reset_Handler+0x80>)
   80672:	429a      	cmp	r2, r3
   80674:	d003      	beq.n	8067e <Reset_Handler+0x12>
		for (; pDest < &_erelocate;) {
   80676:	4b1e      	ldr	r3, [pc, #120]	; (806f0 <Reset_Handler+0x84>)
   80678:	4a1b      	ldr	r2, [pc, #108]	; (806e8 <Reset_Handler+0x7c>)
   8067a:	429a      	cmp	r2, r3
   8067c:	d304      	bcc.n	80688 <Reset_Handler+0x1c>
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   8067e:	4b1d      	ldr	r3, [pc, #116]	; (806f4 <Reset_Handler+0x88>)
   80680:	4a1d      	ldr	r2, [pc, #116]	; (806f8 <Reset_Handler+0x8c>)
   80682:	429a      	cmp	r2, r3
   80684:	d30f      	bcc.n	806a6 <Reset_Handler+0x3a>
   80686:	e01a      	b.n	806be <Reset_Handler+0x52>
   80688:	4b1c      	ldr	r3, [pc, #112]	; (806fc <Reset_Handler+0x90>)
   8068a:	4c1d      	ldr	r4, [pc, #116]	; (80700 <Reset_Handler+0x94>)
   8068c:	1ae4      	subs	r4, r4, r3
   8068e:	f024 0403 	bic.w	r4, r4, #3
   80692:	3404      	adds	r4, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   80694:	2300      	movs	r3, #0
			*pDest++ = *pSrc++;
   80696:	4814      	ldr	r0, [pc, #80]	; (806e8 <Reset_Handler+0x7c>)
   80698:	4914      	ldr	r1, [pc, #80]	; (806ec <Reset_Handler+0x80>)
   8069a:	585a      	ldr	r2, [r3, r1]
   8069c:	501a      	str	r2, [r3, r0]
   8069e:	3304      	adds	r3, #4
	/* Initialize the relocate segment */
	pSrc = &_etext;
	pDest = &_srelocate;

	if (pSrc != pDest) {
		for (; pDest < &_erelocate;) {
   806a0:	42a3      	cmp	r3, r4
   806a2:	d1fa      	bne.n	8069a <Reset_Handler+0x2e>
   806a4:	e7eb      	b.n	8067e <Reset_Handler+0x12>
   806a6:	4b17      	ldr	r3, [pc, #92]	; (80704 <Reset_Handler+0x98>)
   806a8:	4917      	ldr	r1, [pc, #92]	; (80708 <Reset_Handler+0x9c>)
   806aa:	1ac9      	subs	r1, r1, r3
   806ac:	f021 0103 	bic.w	r1, r1, #3
   806b0:	1d1a      	adds	r2, r3, #4
   806b2:	4411      	add	r1, r2
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
		*pDest++ = 0;
   806b4:	2200      	movs	r2, #0
   806b6:	f843 2f04 	str.w	r2, [r3, #4]!
			*pDest++ = *pSrc++;
		}
	}

	/* Clear the zero segment */
	for (pDest = &_szero; pDest < &_ezero;) {
   806ba:	428b      	cmp	r3, r1
   806bc:	d1fb      	bne.n	806b6 <Reset_Handler+0x4a>
		*pDest++ = 0;
	}

	/* Set the vector table base address */
	pSrc = (uint32_t *) & _sfixed;
	SCB->VTOR = ((uint32_t) pSrc & SCB_VTOR_TBLOFF_Msk);
   806be:	4a13      	ldr	r2, [pc, #76]	; (8070c <Reset_Handler+0xa0>)
   806c0:	f022 4360 	bic.w	r3, r2, #3758096384	; 0xe0000000
   806c4:	f023 037f 	bic.w	r3, r3, #127	; 0x7f
   806c8:	4911      	ldr	r1, [pc, #68]	; (80710 <Reset_Handler+0xa4>)
   806ca:	608b      	str	r3, [r1, #8]

	if (((uint32_t) pSrc >= IRAM0_ADDR) && ((uint32_t) pSrc < NFC_RAM_ADDR)) {
   806cc:	f102 4260 	add.w	r2, r2, #3758096384	; 0xe0000000
   806d0:	f5b2 1f80 	cmp.w	r2, #1048576	; 0x100000
   806d4:	d203      	bcs.n	806de <Reset_Handler+0x72>
		SCB->VTOR |= 1 << SCB_VTOR_TBLBASE_Pos;
   806d6:	688a      	ldr	r2, [r1, #8]
   806d8:	f042 5200 	orr.w	r2, r2, #536870912	; 0x20000000
   806dc:	608a      	str	r2, [r1, #8]
	}

	/* Initialize the C library */
	__libc_init_array();
   806de:	4b0d      	ldr	r3, [pc, #52]	; (80714 <Reset_Handler+0xa8>)
   806e0:	4798      	blx	r3

	/* Branch to main function */
	main();
   806e2:	4b0d      	ldr	r3, [pc, #52]	; (80718 <Reset_Handler+0xac>)
   806e4:	4798      	blx	r3
   806e6:	e7fe      	b.n	806e6 <Reset_Handler+0x7a>
   806e8:	20070000 	.word	0x20070000
   806ec:	00080d54 	.word	0x00080d54
   806f0:	20070558 	.word	0x20070558
   806f4:	200705e4 	.word	0x200705e4
   806f8:	20070558 	.word	0x20070558
   806fc:	20070004 	.word	0x20070004
   80700:	2007055b 	.word	0x2007055b
   80704:	20070554 	.word	0x20070554
   80708:	200705df 	.word	0x200705df
   8070c:	00080000 	.word	0x00080000
   80710:	e000ed00 	.word	0xe000ed00
   80714:	00080b89 	.word	0x00080b89
   80718:	00080a9d 	.word	0x00080a9d

0008071c <SystemCoreClockUpdate>:
}

void SystemCoreClockUpdate(void)
{
	/* Determine clock frequency according to clock register values */
	switch (PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) {
   8071c:	4b3e      	ldr	r3, [pc, #248]	; (80818 <SystemCoreClockUpdate+0xfc>)
   8071e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   80720:	f003 0303 	and.w	r3, r3, #3
   80724:	2b03      	cmp	r3, #3
   80726:	d85f      	bhi.n	807e8 <SystemCoreClockUpdate+0xcc>
   80728:	e8df f003 	tbb	[pc, r3]
   8072c:	2b2b0e02 	.word	0x2b2b0e02
	case PMC_MCKR_CSS_SLOW_CLK:	/* Slow clock */
		if (SUPC->SUPC_SR & SUPC_SR_OSCSEL) {
   80730:	4b3a      	ldr	r3, [pc, #232]	; (8081c <SystemCoreClockUpdate+0x100>)
   80732:	695b      	ldr	r3, [r3, #20]
   80734:	f013 0f80 	tst.w	r3, #128	; 0x80
			SystemCoreClock = CHIP_FREQ_XTAL_32K;
   80738:	bf14      	ite	ne
   8073a:	f44f 4200 	movne.w	r2, #32768	; 0x8000
		} else {
			SystemCoreClock = CHIP_FREQ_SLCK_RC;
   8073e:	f44f 42fa 	moveq.w	r2, #32000	; 0x7d00
   80742:	4b37      	ldr	r3, [pc, #220]	; (80820 <SystemCoreClockUpdate+0x104>)
   80744:	601a      	str	r2, [r3, #0]
   80746:	e04f      	b.n	807e8 <SystemCoreClockUpdate+0xcc>
		}
		break;
	case PMC_MCKR_CSS_MAIN_CLK:	/* Main clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80748:	4b33      	ldr	r3, [pc, #204]	; (80818 <SystemCoreClockUpdate+0xfc>)
   8074a:	6a1b      	ldr	r3, [r3, #32]
   8074c:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   80750:	d003      	beq.n	8075a <SystemCoreClockUpdate+0x3e>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   80752:	4a34      	ldr	r2, [pc, #208]	; (80824 <SystemCoreClockUpdate+0x108>)
   80754:	4b32      	ldr	r3, [pc, #200]	; (80820 <SystemCoreClockUpdate+0x104>)
   80756:	601a      	str	r2, [r3, #0]
   80758:	e046      	b.n	807e8 <SystemCoreClockUpdate+0xcc>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   8075a:	4a33      	ldr	r2, [pc, #204]	; (80828 <SystemCoreClockUpdate+0x10c>)
   8075c:	4b30      	ldr	r3, [pc, #192]	; (80820 <SystemCoreClockUpdate+0x104>)
   8075e:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   80760:	4b2d      	ldr	r3, [pc, #180]	; (80818 <SystemCoreClockUpdate+0xfc>)
   80762:	6a1b      	ldr	r3, [r3, #32]
   80764:	f003 0370 	and.w	r3, r3, #112	; 0x70
   80768:	2b10      	cmp	r3, #16
   8076a:	d002      	beq.n	80772 <SystemCoreClockUpdate+0x56>
   8076c:	2b20      	cmp	r3, #32
   8076e:	d004      	beq.n	8077a <SystemCoreClockUpdate+0x5e>
   80770:	e03a      	b.n	807e8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   80772:	4a2e      	ldr	r2, [pc, #184]	; (8082c <SystemCoreClockUpdate+0x110>)
   80774:	4b2a      	ldr	r3, [pc, #168]	; (80820 <SystemCoreClockUpdate+0x104>)
   80776:	601a      	str	r2, [r3, #0]
				break;
   80778:	e036      	b.n	807e8 <SystemCoreClockUpdate+0xcc>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   8077a:	4a2a      	ldr	r2, [pc, #168]	; (80824 <SystemCoreClockUpdate+0x108>)
   8077c:	4b28      	ldr	r3, [pc, #160]	; (80820 <SystemCoreClockUpdate+0x104>)
   8077e:	601a      	str	r2, [r3, #0]
				break;
   80780:	e032      	b.n	807e8 <SystemCoreClockUpdate+0xcc>
			}
		}
		break;
	case PMC_MCKR_CSS_PLLA_CLK:	/* PLLA clock */
	case PMC_MCKR_CSS_UPLL_CLK:	/* UPLL clock */
		if (PMC->CKGR_MOR & CKGR_MOR_MOSCSEL) {
   80782:	4b25      	ldr	r3, [pc, #148]	; (80818 <SystemCoreClockUpdate+0xfc>)
   80784:	6a1b      	ldr	r3, [r3, #32]
   80786:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
   8078a:	d003      	beq.n	80794 <SystemCoreClockUpdate+0x78>
			SystemCoreClock = CHIP_FREQ_XTAL_12M;
   8078c:	4a25      	ldr	r2, [pc, #148]	; (80824 <SystemCoreClockUpdate+0x108>)
   8078e:	4b24      	ldr	r3, [pc, #144]	; (80820 <SystemCoreClockUpdate+0x104>)
   80790:	601a      	str	r2, [r3, #0]
   80792:	e012      	b.n	807ba <SystemCoreClockUpdate+0x9e>
		} else {
			SystemCoreClock = CHIP_FREQ_MAINCK_RC_4MHZ;
   80794:	4a24      	ldr	r2, [pc, #144]	; (80828 <SystemCoreClockUpdate+0x10c>)
   80796:	4b22      	ldr	r3, [pc, #136]	; (80820 <SystemCoreClockUpdate+0x104>)
   80798:	601a      	str	r2, [r3, #0]

			switch (PMC->CKGR_MOR & CKGR_MOR_MOSCRCF_Msk) {
   8079a:	4b1f      	ldr	r3, [pc, #124]	; (80818 <SystemCoreClockUpdate+0xfc>)
   8079c:	6a1b      	ldr	r3, [r3, #32]
   8079e:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807a2:	2b10      	cmp	r3, #16
   807a4:	d002      	beq.n	807ac <SystemCoreClockUpdate+0x90>
   807a6:	2b20      	cmp	r3, #32
   807a8:	d004      	beq.n	807b4 <SystemCoreClockUpdate+0x98>
   807aa:	e006      	b.n	807ba <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_4_MHz:
				break;
			case CKGR_MOR_MOSCRCF_8_MHz:
				SystemCoreClock *= 2U;
   807ac:	4a1f      	ldr	r2, [pc, #124]	; (8082c <SystemCoreClockUpdate+0x110>)
   807ae:	4b1c      	ldr	r3, [pc, #112]	; (80820 <SystemCoreClockUpdate+0x104>)
   807b0:	601a      	str	r2, [r3, #0]
				break;
   807b2:	e002      	b.n	807ba <SystemCoreClockUpdate+0x9e>
			case CKGR_MOR_MOSCRCF_12_MHz:
				SystemCoreClock *= 3U;
   807b4:	4a1b      	ldr	r2, [pc, #108]	; (80824 <SystemCoreClockUpdate+0x108>)
   807b6:	4b1a      	ldr	r3, [pc, #104]	; (80820 <SystemCoreClockUpdate+0x104>)
   807b8:	601a      	str	r2, [r3, #0]
				break;
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
   807ba:	4b17      	ldr	r3, [pc, #92]	; (80818 <SystemCoreClockUpdate+0xfc>)
   807bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807be:	f003 0303 	and.w	r3, r3, #3
   807c2:	2b02      	cmp	r3, #2
   807c4:	d10d      	bne.n	807e2 <SystemCoreClockUpdate+0xc6>
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   807c6:	4b14      	ldr	r3, [pc, #80]	; (80818 <SystemCoreClockUpdate+0xfc>)
   807c8:	6a98      	ldr	r0, [r3, #40]	; 0x28
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   807ca:	6a99      	ldr	r1, [r3, #40]	; 0x28
   807cc:	4b14      	ldr	r3, [pc, #80]	; (80820 <SystemCoreClockUpdate+0x104>)
			default:
				break;
			}
		}
		if ((PMC->PMC_MCKR & PMC_MCKR_CSS_Msk) == PMC_MCKR_CSS_PLLA_CLK) {
			SystemCoreClock *= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_MULA_Msk) >> 
   807ce:	f3c0 400a 	ubfx	r0, r0, #16, #11
   807d2:	681a      	ldr	r2, [r3, #0]
   807d4:	fb00 2202 	mla	r2, r0, r2, r2
				                            CKGR_PLLAR_MULA_Pos) + 1U);
			SystemCoreClock /= ((((PMC->CKGR_PLLAR) & CKGR_PLLAR_DIVA_Msk) >> 
   807d8:	b2c9      	uxtb	r1, r1
   807da:	fbb2 f2f1 	udiv	r2, r2, r1
   807de:	601a      	str	r2, [r3, #0]
   807e0:	e002      	b.n	807e8 <SystemCoreClockUpdate+0xcc>
				                             CKGR_PLLAR_DIVA_Pos));
		} else {
			SystemCoreClock = SYS_UTMIPLL / 2U;
   807e2:	4a13      	ldr	r2, [pc, #76]	; (80830 <SystemCoreClockUpdate+0x114>)
   807e4:	4b0e      	ldr	r3, [pc, #56]	; (80820 <SystemCoreClockUpdate+0x104>)
   807e6:	601a      	str	r2, [r3, #0]
		}
		break;
	}

	if ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) == PMC_MCKR_PRES_CLK_3) {
   807e8:	4b0b      	ldr	r3, [pc, #44]	; (80818 <SystemCoreClockUpdate+0xfc>)
   807ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
   807ec:	f003 0370 	and.w	r3, r3, #112	; 0x70
   807f0:	2b70      	cmp	r3, #112	; 0x70
   807f2:	d107      	bne.n	80804 <SystemCoreClockUpdate+0xe8>
		SystemCoreClock /= 3U;
   807f4:	4b0a      	ldr	r3, [pc, #40]	; (80820 <SystemCoreClockUpdate+0x104>)
   807f6:	681a      	ldr	r2, [r3, #0]
   807f8:	490e      	ldr	r1, [pc, #56]	; (80834 <SystemCoreClockUpdate+0x118>)
   807fa:	fba1 0202 	umull	r0, r2, r1, r2
   807fe:	0852      	lsrs	r2, r2, #1
   80800:	601a      	str	r2, [r3, #0]
   80802:	4770      	bx	lr
	} else {
		SystemCoreClock >>= ((PMC->PMC_MCKR & PMC_MCKR_PRES_Msk) >> 
   80804:	4b04      	ldr	r3, [pc, #16]	; (80818 <SystemCoreClockUpdate+0xfc>)
   80806:	6b19      	ldr	r1, [r3, #48]	; 0x30
   80808:	4b05      	ldr	r3, [pc, #20]	; (80820 <SystemCoreClockUpdate+0x104>)
   8080a:	f3c1 1102 	ubfx	r1, r1, #4, #3
   8080e:	681a      	ldr	r2, [r3, #0]
   80810:	40ca      	lsrs	r2, r1
   80812:	601a      	str	r2, [r3, #0]
   80814:	4770      	bx	lr
   80816:	bf00      	nop
   80818:	400e0600 	.word	0x400e0600
   8081c:	400e1a10 	.word	0x400e1a10
   80820:	2007012c 	.word	0x2007012c
   80824:	00b71b00 	.word	0x00b71b00
   80828:	003d0900 	.word	0x003d0900
   8082c:	007a1200 	.word	0x007a1200
   80830:	0e4e1c00 	.word	0x0e4e1c00
   80834:	aaaaaaab 	.word	0xaaaaaaab

00080838 <delayInit>:

#include "asf.h"
#include "DelayFunctions.h"

int delayInit(void)		/* Initializes the timer used for delays */
{
   80838:	b510      	push	{r4, lr}
	pmc_enable_periph_clk(ID_TC0);	/* power on the peripheral clock for timers */
   8083a:	201b      	movs	r0, #27
   8083c:	4b08      	ldr	r3, [pc, #32]	; (80860 <delayInit+0x28>)
   8083e:	4798      	blx	r3
	tc_init(TC0,0,0);				/* TC0, channel 0, TCLK1 och capturemode */
   80840:	4c08      	ldr	r4, [pc, #32]	; (80864 <delayInit+0x2c>)
   80842:	4620      	mov	r0, r4
   80844:	2100      	movs	r1, #0
   80846:	460a      	mov	r2, r1
   80848:	4b07      	ldr	r3, [pc, #28]	; (80868 <delayInit+0x30>)
   8084a:	4798      	blx	r3
	tc_set_block_mode(TC0,0);
   8084c:	4620      	mov	r0, r4
   8084e:	2100      	movs	r1, #0
   80850:	4b06      	ldr	r3, [pc, #24]	; (8086c <delayInit+0x34>)
   80852:	4798      	blx	r3
	tc_stop(TC0,0);					/* making sure the timer does not run  */
   80854:	4620      	mov	r0, r4
   80856:	2100      	movs	r1, #0
   80858:	4b05      	ldr	r3, [pc, #20]	; (80870 <delayInit+0x38>)
   8085a:	4798      	blx	r3
	return 0;						/* evertyhing is ok, typical response */
}
   8085c:	2000      	movs	r0, #0
   8085e:	bd10      	pop	{r4, pc}
   80860:	000805d5 	.word	0x000805d5
   80864:	40080000 	.word	0x40080000
   80868:	0008062d 	.word	0x0008062d
   8086c:	00080649 	.word	0x00080649
   80870:	00080659 	.word	0x00080659

00080874 <delayMicroseconds>:


void delayMicroseconds(uint32_t us)		/* A simple implementation for a delay in us (not calibrated) */
{
   80874:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80876:	4604      	mov	r4, r0
	tc_start(TC0,0);
   80878:	4809      	ldr	r0, [pc, #36]	; (808a0 <delayMicroseconds+0x2c>)
   8087a:	2100      	movs	r1, #0
   8087c:	4b09      	ldr	r3, [pc, #36]	; (808a4 <delayMicroseconds+0x30>)
   8087e:	4798      	blx	r3
	while (tc_read_cv(TC0,0) < us*42);
   80880:	272a      	movs	r7, #42	; 0x2a
   80882:	fb07 f704 	mul.w	r7, r7, r4
   80886:	4e06      	ldr	r6, [pc, #24]	; (808a0 <delayMicroseconds+0x2c>)
   80888:	2500      	movs	r5, #0
   8088a:	4c07      	ldr	r4, [pc, #28]	; (808a8 <delayMicroseconds+0x34>)
   8088c:	4630      	mov	r0, r6
   8088e:	4629      	mov	r1, r5
   80890:	47a0      	blx	r4
   80892:	42b8      	cmp	r0, r7
   80894:	d3fa      	bcc.n	8088c <delayMicroseconds+0x18>
	tc_stop(TC0,0);
   80896:	4802      	ldr	r0, [pc, #8]	; (808a0 <delayMicroseconds+0x2c>)
   80898:	2100      	movs	r1, #0
   8089a:	4b04      	ldr	r3, [pc, #16]	; (808ac <delayMicroseconds+0x38>)
   8089c:	4798      	blx	r3
   8089e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
   808a0:	40080000 	.word	0x40080000
   808a4:	00080651 	.word	0x00080651
   808a8:	00080661 	.word	0x00080661
   808ac:	00080659 	.word	0x00080659

000808b0 <lcdWriteAsciiString>:
	return 0;	/* Assuming everything went ok */
}

int lcdWriteAsciiString(const char *string)
/* writes an ascii string up to 40 characters on the LCD display */
{	
   808b0:	b570      	push	{r4, r5, r6, lr}
   808b2:	4604      	mov	r4, r0
	while (*string != '\0')
   808b4:	7800      	ldrb	r0, [r0, #0]
   808b6:	b138      	cbz	r0, 808c8 <lcdWriteAsciiString+0x18>
	{
		lcdWrite(*string, HIGH);	/*write the char the pointer points at*/
   808b8:	2601      	movs	r6, #1
   808ba:	4d04      	ldr	r5, [pc, #16]	; (808cc <lcdWriteAsciiString+0x1c>)
   808bc:	4631      	mov	r1, r6
   808be:	47a8      	blx	r5
}

int lcdWriteAsciiString(const char *string)
/* writes an ascii string up to 40 characters on the LCD display */
{	
	while (*string != '\0')
   808c0:	f814 0f01 	ldrb.w	r0, [r4, #1]!
   808c4:	2800      	cmp	r0, #0
   808c6:	d1f9      	bne.n	808bc <lcdWriteAsciiString+0xc>
	{
		lcdWrite(*string, HIGH);	/*write the char the pointer points at*/
		string++;	/*point at the next char*/
	}	
	return 0;	/* Assuming everything went ok */
   808c8:	2000      	movs	r0, #0
   808ca:	bd70      	pop	{r4, r5, r6, pc}
   808cc:	000808d1 	.word	0x000808d1

000808d0 <lcdWrite>:
/*
 *	writes the byte (8 bits) to the LCD display as two consecutive 4 bits 
 *	type = 0 controls the display
 *	type = 1 writes the content of the byte (usually interpreted as ASCII-code) to the display
 */
{
   808d0:	b5f0      	push	{r4, r5, r6, r7, lr}
   808d2:	b085      	sub	sp, #20
   808d4:	4607      	mov	r7, r0
   808d6:	460d      	mov	r5, r1
	/* In it's infinite wisdom the shield has the data pins in mirrored order compared to the Due board */
	uint8_t mirror_pin[16]={0b0000,0b1000,0b0100,0b1100,0b0010,0b1010,0b0110,0b1110,0b0001,0b1001,0b0101,0b1101,0b0011,0b1011,0b0111,0b1111};
   808d8:	4b1e      	ldr	r3, [pc, #120]	; (80954 <lcdWrite+0x84>)
   808da:	466c      	mov	r4, sp
   808dc:	6818      	ldr	r0, [r3, #0]
   808de:	6859      	ldr	r1, [r3, #4]
   808e0:	689a      	ldr	r2, [r3, #8]
   808e2:	68db      	ldr	r3, [r3, #12]
   808e4:	c40f      	stmia	r4!, {r0, r1, r2, r3}

	byte_orig = byte;

	/* write the first 4 bits to the shield. */
	byte = byte>>4;
	byte = mirror_pin[byte];
   808e6:	eb04 1317 	add.w	r3, r4, r7, lsr #4
	byte32 = (uint32_t)byte << 23;
   808ea:	f813 3c10 	ldrb.w	r3, [r3, #-16]
   808ee:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_pin_level(ioport_pin_t pin,
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
   808f0:	b125      	cbz	r5, 808fc <lcdWrite+0x2c>
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   808f2:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   808f6:	4a18      	ldr	r2, [pc, #96]	; (80958 <lcdWrite+0x88>)
   808f8:	6311      	str	r1, [r2, #48]	; 0x30
   808fa:	e003      	b.n	80904 <lcdWrite+0x34>
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   808fc:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
   80900:	4a15      	ldr	r2, [pc, #84]	; (80958 <lcdWrite+0x88>)
   80902:	6351      	str	r1, [r2, #52]	; 0x34
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80904:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   80908:	4c13      	ldr	r4, [pc, #76]	; (80958 <lcdWrite+0x88>)
   8090a:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   8090c:	43db      	mvns	r3, r3
   8090e:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   80912:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80914:	f44f 1600 	mov.w	r6, #2097152	; 0x200000
   80918:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = byte<<4;
	
	ioport_set_pin_level(LCD_RS, type); 
	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   8091a:	2001      	movs	r0, #1
   8091c:	4d0f      	ldr	r5, [pc, #60]	; (8095c <lcdWrite+0x8c>)
   8091e:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80920:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	
	delayMicroseconds(100);
   80922:	2064      	movs	r0, #100	; 0x64
   80924:	47a8      	blx	r5
	
	/* write the second 4 bits to the shield. */
	byte = byte_orig;
	byte = byte & 0x0f;
	byte = mirror_pin[byte];
   80926:	f007 070f 	and.w	r7, r7, #15
   8092a:	ab04      	add	r3, sp, #16
   8092c:	441f      	add	r7, r3
	byte32 = (uint32_t)byte<<23;
   8092e:	f817 3c10 	ldrb.w	r3, [r7, #-16]
   80932:	05db      	lsls	r3, r3, #23
__always_inline static void arch_ioport_set_port_level(ioport_port_t port,
		ioport_port_mask_t mask, ioport_port_mask_t level)
{
	Pio *base = arch_ioport_port_to_base(port);

	base->PIO_SODR = mask & level;
   80934:	f003 62f0 	and.w	r2, r3, #125829120	; 0x7800000
   80938:	6322      	str	r2, [r4, #48]	; 0x30
	base->PIO_CODR = mask & ~level;
   8093a:	43db      	mvns	r3, r3
   8093c:	f003 63f0 	and.w	r3, r3, #125829120	; 0x7800000
   80940:	6363      	str	r3, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80942:	6326      	str	r6, [r4, #48]	; 0x30
	mirrored_output = mirrored_output + byte;

	ioport_set_port_level(IOPORT_PIOC, LCD_mask_D4_D7, byte32);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80944:	2001      	movs	r0, #1
   80946:	47a8      	blx	r5
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80948:	6366      	str	r6, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   8094a:	2064      	movs	r0, #100	; 0x64
   8094c:	47a8      	blx	r5
	
	return 0;
}
   8094e:	2000      	movs	r0, #0
   80950:	b005      	add	sp, #20
   80952:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80954:	00080cd0 	.word	0x00080cd0
   80958:	400e1200 	.word	0x400e1200
   8095c:	00080875 	.word	0x00080875

00080960 <lcdInit>:
#include <asf.h>
#include "lcdFunctions.h"
#include "delayFunctions.h"	/* The sam3x8e microcontroller can write faster than the LCD controller can handle its inputs */

int lcdInit(void)		/* Initializes the display on the LCD shield, returns 1 if everything is ok */
{
   80960:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80964:	4c34      	ldr	r4, [pc, #208]	; (80a38 <lcdInit+0xd8>)
   80966:	f44f 0780 	mov.w	r7, #4194304	; 0x400000
   8096a:	6127      	str	r7, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   8096c:	f8c4 70a0 	str.w	r7, [r4, #160]	; 0xa0
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80970:	f44f 1500 	mov.w	r5, #2097152	; 0x200000
   80974:	6125      	str	r5, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80976:	f8c4 50a0 	str.w	r5, [r4, #160]	; 0xa0
		ioport_port_mask_t mask, enum ioport_direction group_direction)
{
	Pio *base = arch_ioport_port_to_base(port);

	if (group_direction == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = mask;
   8097a:	f04f 63f0 	mov.w	r3, #125829120	; 0x7800000
   8097e:	6123      	str	r3, [r4, #16]
	} else if (group_direction == IOPORT_DIR_INPUT) {
		base->PIO_ODR = mask;
	}

	base->PIO_OWER = mask;
   80980:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80984:	6365      	str	r5, [r4, #52]	; 0x34
	/* At power on */
	ioport_set_pin_dir(LCD_RS, IOPORT_DIR_OUTPUT);
	ioport_set_pin_dir(LCD_Enable, IOPORT_DIR_OUTPUT);
	ioport_set_port_dir(IOPORT_PIOC, LCD_mask_D4_D7, IOPORT_DIR_OUTPUT);
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(30000);		/* wait > 15 ms */
   80986:	f247 5030 	movw	r0, #30000	; 0x7530
   8098a:	4e2c      	ldr	r6, [pc, #176]	; (80a3c <lcdInit+0xdc>)
   8098c:	47b0      	blx	r6
   8098e:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   80990:	f04f 6a80 	mov.w	sl, #67108864	; 0x4000000
   80994:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   80998:	f04f 7900 	mov.w	r9, #33554432	; 0x2000000
   8099c:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809a0:	f04f 7880 	mov.w	r8, #16777216	; 0x1000000
   809a4:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   809a8:	f44f 0700 	mov.w	r7, #8388608	; 0x800000
   809ac:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809ae:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);		/* wait 1 us */
   809b0:	2001      	movs	r0, #1
   809b2:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809b4:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(4100);	/* wait for more than 4,1 ms */
   809b6:	f241 0004 	movw	r0, #4100	; 0x1004
   809ba:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809bc:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   809c0:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809c4:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   809c8:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809ca:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* delay 1 us */
   809cc:	2001      	movs	r0, #1
   809ce:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809d0:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);	/* wait 100 us */
   809d2:	2064      	movs	r0, #100	; 0x64
   809d4:	47b0      	blx	r6
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809d6:	f8c4 a030 	str.w	sl, [r4, #48]	; 0x30
   809da:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809de:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   809e2:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809e4:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, HIGH);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);	/* wait 1 us */
   809e6:	2001      	movs	r0, #1
   809e8:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809ea:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);		
	delayMicroseconds(100);	/* wait 100 us */
   809ec:	2064      	movs	r0, #100	; 0x64
   809ee:	47b0      	blx	r6
   809f0:	f8c4 a034 	str.w	sl, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809f4:	f8c4 9030 	str.w	r9, [r4, #48]	; 0x30
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   809f8:	f8c4 8034 	str.w	r8, [r4, #52]	; 0x34
   809fc:	6367      	str	r7, [r4, #52]	; 0x34
		bool level)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (level) {
		base->PIO_SODR = arch_ioport_pin_to_mask(pin);
   809fe:	6325      	str	r5, [r4, #48]	; 0x30
	ioport_set_pin_level(LCD_D4, LOW);
	ioport_set_pin_level(LCD_D5, HIGH);
	ioport_set_pin_level(LCD_D6, LOW);
	ioport_set_pin_level(LCD_D7, LOW);
	ioport_set_pin_level(LCD_Enable, HIGH);
	delayMicroseconds(1);
   80a00:	2001      	movs	r0, #1
   80a02:	47b0      	blx	r6
	} else {
		base->PIO_CODR = arch_ioport_pin_to_mask(pin);
   80a04:	6365      	str	r5, [r4, #52]	; 0x34
	ioport_set_pin_level(LCD_Enable, LOW);
	delayMicroseconds(100);
   80a06:	2064      	movs	r0, #100	; 0x64
   80a08:	47b0      	blx	r6
	lcdWrite(0b00101000, LOW);		/* Two rows, small font */
   80a0a:	2028      	movs	r0, #40	; 0x28
   80a0c:	2100      	movs	r1, #0
   80a0e:	4c0c      	ldr	r4, [pc, #48]	; (80a40 <lcdInit+0xe0>)
   80a10:	47a0      	blx	r4
	lcdWrite(0b00001000, LOW);		/* Display off */
   80a12:	2008      	movs	r0, #8
   80a14:	2100      	movs	r1, #0
   80a16:	47a0      	blx	r4
	lcdWrite(0b00000001, LOW);		/* Display clear */
   80a18:	2001      	movs	r0, #1
   80a1a:	2100      	movs	r1, #0
   80a1c:	47a0      	blx	r4
	delayMicroseconds(3000);
   80a1e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80a22:	47b0      	blx	r6
	lcdWrite(0b00000110, LOW);		/* Entry mode set: move cursor right, no display shift */
   80a24:	2006      	movs	r0, #6
   80a26:	2100      	movs	r1, #0
   80a28:	47a0      	blx	r4
	lcdWrite(0b00001111 ,LOW);		/* Display on, cursor on, blinking on */
   80a2a:	200f      	movs	r0, #15
   80a2c:	2100      	movs	r1, #0
   80a2e:	47a0      	blx	r4

	all_ok = 0;					/* simple return statement showing that the initialization of the LCD has completed */
	return all_ok;
}
   80a30:	2000      	movs	r0, #0
   80a32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
   80a36:	bf00      	nop
   80a38:	400e1200 	.word	0x400e1200
   80a3c:	00080875 	.word	0x00080875
   80a40:	000808d1 	.word	0x000808d1

00080a44 <lcdClearDisplay>:
	return 0;
}

/*clears the display*/
int lcdClearDisplay(void)
{
   80a44:	b508      	push	{r3, lr}
	lcdWrite(0x01, LOW);
   80a46:	2001      	movs	r0, #1
   80a48:	2100      	movs	r1, #0
   80a4a:	4b04      	ldr	r3, [pc, #16]	; (80a5c <lcdClearDisplay+0x18>)
   80a4c:	4798      	blx	r3
	delayMicroseconds(3000);	
   80a4e:	f640 30b8 	movw	r0, #3000	; 0xbb8
   80a52:	4b03      	ldr	r3, [pc, #12]	; (80a60 <lcdClearDisplay+0x1c>)
   80a54:	4798      	blx	r3
	
	return 0;
}
   80a56:	2000      	movs	r0, #0
   80a58:	bd08      	pop	{r3, pc}
   80a5a:	bf00      	nop
   80a5c:	000808d1 	.word	0x000808d1
   80a60:	00080875 	.word	0x00080875

00080a64 <conf_master_mode>:
	READ
} data_dir;

void conf_master_mode(void)
{
	CONF_BOARD_TWI0->TWI_MMR |= (TWI_MMR_IADRSZ_NONE);
   80a64:	4b08      	ldr	r3, [pc, #32]	; (80a88 <conf_master_mode+0x24>)
   80a66:	685a      	ldr	r2, [r3, #4]
   80a68:	605a      	str	r2, [r3, #4]
	CONF_BOARD_TWI0->TWI_MMR |= (8 << TWI_MMR_DADR_Pos);
   80a6a:	685a      	ldr	r2, [r3, #4]
   80a6c:	f442 2200 	orr.w	r2, r2, #524288	; 0x80000
   80a70:	605a      	str	r2, [r3, #4]
	//CONF_BOARD_TWI0->TWI_IADR |= (0x07 << TWI_IADR_IADR_Pos);
	CONF_BOARD_TWI0->TWI_CWGR |= (10 << TWI_CWGR_CKDIV_Pos);
   80a72:	691a      	ldr	r2, [r3, #16]
   80a74:	f442 2220 	orr.w	r2, r2, #655360	; 0xa0000
   80a78:	611a      	str	r2, [r3, #16]
	CONF_BOARD_TWI0->TWI_CR |= (1 << TWI_CR_SVDIS);
   80a7a:	681a      	ldr	r2, [r3, #0]
   80a7c:	601a      	str	r2, [r3, #0]
	CONF_BOARD_TWI0->TWI_CR |= (1 << TWI_CR_MSEN);
   80a7e:	681a      	ldr	r2, [r3, #0]
   80a80:	f042 0210 	orr.w	r2, r2, #16
   80a84:	601a      	str	r2, [r3, #0]
   80a86:	4770      	bx	lr
   80a88:	40090000 	.word	0x40090000

00080a8c <write_stop_command>:
void load_data_register(Byte data) {
	CONF_BOARD_TWI0->TWI_THR = data;
}

void write_stop_command(void) {
	CONF_BOARD_TWI0->TWI_CR |= (1 << TWI_CR_STOP);
   80a8c:	4b02      	ldr	r3, [pc, #8]	; (80a98 <write_stop_command+0xc>)
   80a8e:	681a      	ldr	r2, [r3, #0]
   80a90:	f042 0204 	orr.w	r2, r2, #4
   80a94:	601a      	str	r2, [r3, #0]
   80a96:	4770      	bx	lr
   80a98:	40090000 	.word	0x40090000

00080a9c <main>:
uint8_t data_sent(void) {
	return CONF_BOARD_TWI0->TWI_SR & TWI_SR_TXCOMP;
}

int main (void)
{
   80a9c:	b508      	push	{r3, lr}
	sysclk_init();
   80a9e:	4b26      	ldr	r3, [pc, #152]	; (80b38 <main+0x9c>)
   80aa0:	4798      	blx	r3
	board_init();
   80aa2:	4b26      	ldr	r3, [pc, #152]	; (80b3c <main+0xa0>)
   80aa4:	4798      	blx	r3
	delayInit();
   80aa6:	4b26      	ldr	r3, [pc, #152]	; (80b40 <main+0xa4>)
   80aa8:	4798      	blx	r3
	lcdInit();
   80aaa:	4b26      	ldr	r3, [pc, #152]	; (80b44 <main+0xa8>)
   80aac:	4798      	blx	r3
	lcdWriteAsciiString("abc");
   80aae:	4826      	ldr	r0, [pc, #152]	; (80b48 <main+0xac>)
   80ab0:	4d26      	ldr	r5, [pc, #152]	; (80b4c <main+0xb0>)
   80ab2:	47a8      	blx	r5
	delayMicroseconds(1000000);
   80ab4:	4826      	ldr	r0, [pc, #152]	; (80b50 <main+0xb4>)
   80ab6:	4e27      	ldr	r6, [pc, #156]	; (80b54 <main+0xb8>)
   80ab8:	47b0      	blx	r6
	lcdClearDisplay();
   80aba:	4b27      	ldr	r3, [pc, #156]	; (80b58 <main+0xbc>)
   80abc:	4798      	blx	r3
   80abe:	200b      	movs	r0, #11
   80ac0:	4c26      	ldr	r4, [pc, #152]	; (80b5c <main+0xc0>)
   80ac2:	47a0      	blx	r4
   80ac4:	200c      	movs	r0, #12
   80ac6:	47a0      	blx	r4
   80ac8:	200d      	movs	r0, #13
   80aca:	47a0      	blx	r4
   80acc:	200e      	movs	r0, #14
   80ace:	47a0      	blx	r4
	ioport_init();
	pmc_enable_periph_clk(ID_TWI1);
   80ad0:	2017      	movs	r0, #23
   80ad2:	47a0      	blx	r4
   80ad4:	2017      	movs	r0, #23
   80ad6:	47a0      	blx	r4
	sysclk_enable_peripheral_clock(ID_TWI1);
	lcdWriteAsciiString("a");
   80ad8:	4821      	ldr	r0, [pc, #132]	; (80b60 <main+0xc4>)
   80ada:	47a8      	blx	r5
}

__always_inline static void arch_ioport_enable_port(ioport_port_t port,
		ioport_port_mask_t mask)
{
	arch_ioport_port_to_base(port)->PIO_PER = mask;
   80adc:	4c21      	ldr	r4, [pc, #132]	; (80b64 <main+0xc8>)
   80ade:	2301      	movs	r3, #1
   80ae0:	6023      	str	r3, [r4, #0]
	ioport_enable_port(IOPORT_PIOB, IOPORT_DIR_OUTPUT);
	lcdWriteAsciiString("b");
   80ae2:	4821      	ldr	r0, [pc, #132]	; (80b68 <main+0xcc>)
   80ae4:	47a8      	blx	r5
		enum ioport_direction dir)
{
	Pio *base = arch_ioport_pin_to_base(pin);

	if (dir == IOPORT_DIR_OUTPUT) {
		base->PIO_OER = arch_ioport_pin_to_mask(pin);
   80ae6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
   80aea:	6123      	str	r3, [r4, #16]
	} else if (dir == IOPORT_DIR_INPUT) {
		base->PIO_ODR = arch_ioport_pin_to_mask(pin);
	}

	base->PIO_OWER = arch_ioport_pin_to_mask(pin);
   80aec:	f8c4 30a0 	str.w	r3, [r4, #160]	; 0xa0
	ioport_set_pin_dir(PIO_PB13_IDX, IOPORT_DIR_OUTPUT);
	lcdWriteAsciiString("c");
   80af0:	481e      	ldr	r0, [pc, #120]	; (80b6c <main+0xd0>)
   80af2:	47a8      	blx	r5
	conf_master_mode();
   80af4:	4b1e      	ldr	r3, [pc, #120]	; (80b70 <main+0xd4>)
   80af6:	4798      	blx	r3
	{
		CONF_BOARD_TWI0->TWI_MMR |= (1 << TWI_MMR_MREAD);
	} 
	else
	{
		CONF_BOARD_TWI0->TWI_MMR &= ~(1 << TWI_MMR_MREAD);
   80af8:	4b1e      	ldr	r3, [pc, #120]	; (80b74 <main+0xd8>)
   80afa:	685a      	ldr	r2, [r3, #4]
   80afc:	605a      	str	r2, [r3, #4]
	}
	
}

void load_data_register(Byte data) {
	CONF_BOARD_TWI0->TWI_THR = data;
   80afe:	22ff      	movs	r2, #255	; 0xff
   80b00:	635a      	str	r2, [r3, #52]	; 0x34
	ioport_set_pin_dir(PIO_PB13_IDX, IOPORT_DIR_OUTPUT);
	lcdWriteAsciiString("c");
	conf_master_mode();
	set_data_dir(WRITE);
	load_data_register(0xFF);
	delayMicroseconds(10);
   80b02:	200a      	movs	r0, #10
   80b04:	47b0      	blx	r6
	write_stop_command();
   80b06:	4b1c      	ldr	r3, [pc, #112]	; (80b78 <main+0xdc>)
   80b08:	4798      	blx	r3
	lcdWriteAsciiString("Writing to register");
   80b0a:	481c      	ldr	r0, [pc, #112]	; (80b7c <main+0xe0>)
   80b0c:	47a8      	blx	r5
void write_stop_command(void) {
	CONF_BOARD_TWI0->TWI_CR |= (1 << TWI_CR_STOP);
}

uint8_t data_holding_register_is_ready(void) {
	return CONF_BOARD_TWI0->TWI_SR & TWI_SR_TXRDY;
   80b0e:	4b19      	ldr	r3, [pc, #100]	; (80b74 <main+0xd8>)
   80b10:	6a1a      	ldr	r2, [r3, #32]
	set_data_dir(WRITE);
	load_data_register(0xFF);
	delayMicroseconds(10);
	write_stop_command();
	lcdWriteAsciiString("Writing to register");
	while(!data_holding_register_is_ready());
   80b12:	f012 0f04 	tst.w	r2, #4
   80b16:	d0fb      	beq.n	80b10 <main+0x74>
	lcdClearDisplay();
   80b18:	4b0f      	ldr	r3, [pc, #60]	; (80b58 <main+0xbc>)
   80b1a:	4798      	blx	r3
	lcdWriteAsciiString("holding register ready");
   80b1c:	4818      	ldr	r0, [pc, #96]	; (80b80 <main+0xe4>)
   80b1e:	4b0b      	ldr	r3, [pc, #44]	; (80b4c <main+0xb0>)
   80b20:	4798      	blx	r3
uint8_t data_holding_register_is_ready(void) {
	return CONF_BOARD_TWI0->TWI_SR & TWI_SR_TXRDY;
}

uint8_t data_sent(void) {
	return CONF_BOARD_TWI0->TWI_SR & TWI_SR_TXCOMP;
   80b22:	4b14      	ldr	r3, [pc, #80]	; (80b74 <main+0xd8>)
   80b24:	6a1a      	ldr	r2, [r3, #32]
	write_stop_command();
	lcdWriteAsciiString("Writing to register");
	while(!data_holding_register_is_ready());
	lcdClearDisplay();
	lcdWriteAsciiString("holding register ready");
	while(!data_sent());
   80b26:	f012 0f01 	tst.w	r2, #1
   80b2a:	d0fb      	beq.n	80b24 <main+0x88>
	lcdClearDisplay();
   80b2c:	4b0a      	ldr	r3, [pc, #40]	; (80b58 <main+0xbc>)
   80b2e:	4798      	blx	r3
	lcdWriteAsciiString("data sent");
   80b30:	4814      	ldr	r0, [pc, #80]	; (80b84 <main+0xe8>)
   80b32:	4b06      	ldr	r3, [pc, #24]	; (80b4c <main+0xb0>)
   80b34:	4798      	blx	r3
   80b36:	e7fe      	b.n	80b36 <main+0x9a>
   80b38:	00080149 	.word	0x00080149
   80b3c:	000801ad 	.word	0x000801ad
   80b40:	00080839 	.word	0x00080839
   80b44:	00080961 	.word	0x00080961
   80b48:	00080ce0 	.word	0x00080ce0
   80b4c:	000808b1 	.word	0x000808b1
   80b50:	000f4240 	.word	0x000f4240
   80b54:	00080875 	.word	0x00080875
   80b58:	00080a45 	.word	0x00080a45
   80b5c:	000805d5 	.word	0x000805d5
   80b60:	00080ce4 	.word	0x00080ce4
   80b64:	400e1000 	.word	0x400e1000
   80b68:	00080ce8 	.word	0x00080ce8
   80b6c:	00080cec 	.word	0x00080cec
   80b70:	00080a65 	.word	0x00080a65
   80b74:	40090000 	.word	0x40090000
   80b78:	00080a8d 	.word	0x00080a8d
   80b7c:	00080cf0 	.word	0x00080cf0
   80b80:	00080d04 	.word	0x00080d04
   80b84:	00080d1c 	.word	0x00080d1c

00080b88 <__libc_init_array>:
   80b88:	b570      	push	{r4, r5, r6, lr}
   80b8a:	4e0f      	ldr	r6, [pc, #60]	; (80bc8 <__libc_init_array+0x40>)
   80b8c:	4d0f      	ldr	r5, [pc, #60]	; (80bcc <__libc_init_array+0x44>)
   80b8e:	1b76      	subs	r6, r6, r5
   80b90:	10b6      	asrs	r6, r6, #2
   80b92:	d007      	beq.n	80ba4 <__libc_init_array+0x1c>
   80b94:	3d04      	subs	r5, #4
   80b96:	2400      	movs	r4, #0
   80b98:	3401      	adds	r4, #1
   80b9a:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80b9e:	4798      	blx	r3
   80ba0:	42a6      	cmp	r6, r4
   80ba2:	d1f9      	bne.n	80b98 <__libc_init_array+0x10>
   80ba4:	4e0a      	ldr	r6, [pc, #40]	; (80bd0 <__libc_init_array+0x48>)
   80ba6:	4d0b      	ldr	r5, [pc, #44]	; (80bd4 <__libc_init_array+0x4c>)
   80ba8:	f000 f8c2 	bl	80d30 <_init>
   80bac:	1b76      	subs	r6, r6, r5
   80bae:	10b6      	asrs	r6, r6, #2
   80bb0:	d008      	beq.n	80bc4 <__libc_init_array+0x3c>
   80bb2:	3d04      	subs	r5, #4
   80bb4:	2400      	movs	r4, #0
   80bb6:	3401      	adds	r4, #1
   80bb8:	f855 3f04 	ldr.w	r3, [r5, #4]!
   80bbc:	4798      	blx	r3
   80bbe:	42a6      	cmp	r6, r4
   80bc0:	d1f9      	bne.n	80bb6 <__libc_init_array+0x2e>
   80bc2:	bd70      	pop	{r4, r5, r6, pc}
   80bc4:	bd70      	pop	{r4, r5, r6, pc}
   80bc6:	bf00      	nop
   80bc8:	00080d3c 	.word	0x00080d3c
   80bcc:	00080d3c 	.word	0x00080d3c
   80bd0:	00080d44 	.word	0x00080d44
   80bd4:	00080d3c 	.word	0x00080d3c

00080bd8 <register_fini>:
   80bd8:	4b02      	ldr	r3, [pc, #8]	; (80be4 <register_fini+0xc>)
   80bda:	b113      	cbz	r3, 80be2 <register_fini+0xa>
   80bdc:	4802      	ldr	r0, [pc, #8]	; (80be8 <register_fini+0x10>)
   80bde:	f000 b805 	b.w	80bec <atexit>
   80be2:	4770      	bx	lr
   80be4:	00000000 	.word	0x00000000
   80be8:	00080bf9 	.word	0x00080bf9

00080bec <atexit>:
   80bec:	4601      	mov	r1, r0
   80bee:	2000      	movs	r0, #0
   80bf0:	4602      	mov	r2, r0
   80bf2:	4603      	mov	r3, r0
   80bf4:	f000 b818 	b.w	80c28 <__register_exitproc>

00080bf8 <__libc_fini_array>:
   80bf8:	b538      	push	{r3, r4, r5, lr}
   80bfa:	4d09      	ldr	r5, [pc, #36]	; (80c20 <__libc_fini_array+0x28>)
   80bfc:	4c09      	ldr	r4, [pc, #36]	; (80c24 <__libc_fini_array+0x2c>)
   80bfe:	1b64      	subs	r4, r4, r5
   80c00:	10a4      	asrs	r4, r4, #2
   80c02:	bf18      	it	ne
   80c04:	eb05 0584 	addne.w	r5, r5, r4, lsl #2
   80c08:	d005      	beq.n	80c16 <__libc_fini_array+0x1e>
   80c0a:	3c01      	subs	r4, #1
   80c0c:	f855 3d04 	ldr.w	r3, [r5, #-4]!
   80c10:	4798      	blx	r3
   80c12:	2c00      	cmp	r4, #0
   80c14:	d1f9      	bne.n	80c0a <__libc_fini_array+0x12>
   80c16:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
   80c1a:	f000 b893 	b.w	80d44 <_fini>
   80c1e:	bf00      	nop
   80c20:	00080d50 	.word	0x00080d50
   80c24:	00080d54 	.word	0x00080d54

00080c28 <__register_exitproc>:
   80c28:	b5f0      	push	{r4, r5, r6, r7, lr}
   80c2a:	4c27      	ldr	r4, [pc, #156]	; (80cc8 <__register_exitproc+0xa0>)
   80c2c:	b085      	sub	sp, #20
   80c2e:	6826      	ldr	r6, [r4, #0]
   80c30:	4607      	mov	r7, r0
   80c32:	f8d6 4148 	ldr.w	r4, [r6, #328]	; 0x148
   80c36:	2c00      	cmp	r4, #0
   80c38:	d040      	beq.n	80cbc <__register_exitproc+0x94>
   80c3a:	6865      	ldr	r5, [r4, #4]
   80c3c:	2d1f      	cmp	r5, #31
   80c3e:	dd1e      	ble.n	80c7e <__register_exitproc+0x56>
   80c40:	4822      	ldr	r0, [pc, #136]	; (80ccc <__register_exitproc+0xa4>)
   80c42:	b918      	cbnz	r0, 80c4c <__register_exitproc+0x24>
   80c44:	f04f 30ff 	mov.w	r0, #4294967295
   80c48:	b005      	add	sp, #20
   80c4a:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c4c:	f44f 70c8 	mov.w	r0, #400	; 0x190
   80c50:	9103      	str	r1, [sp, #12]
   80c52:	9202      	str	r2, [sp, #8]
   80c54:	9301      	str	r3, [sp, #4]
   80c56:	f3af 8000 	nop.w
   80c5a:	9903      	ldr	r1, [sp, #12]
   80c5c:	4604      	mov	r4, r0
   80c5e:	9a02      	ldr	r2, [sp, #8]
   80c60:	9b01      	ldr	r3, [sp, #4]
   80c62:	2800      	cmp	r0, #0
   80c64:	d0ee      	beq.n	80c44 <__register_exitproc+0x1c>
   80c66:	f8d6 5148 	ldr.w	r5, [r6, #328]	; 0x148
   80c6a:	2000      	movs	r0, #0
   80c6c:	6025      	str	r5, [r4, #0]
   80c6e:	6060      	str	r0, [r4, #4]
   80c70:	4605      	mov	r5, r0
   80c72:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80c76:	f8c4 0188 	str.w	r0, [r4, #392]	; 0x188
   80c7a:	f8c4 018c 	str.w	r0, [r4, #396]	; 0x18c
   80c7e:	b93f      	cbnz	r7, 80c90 <__register_exitproc+0x68>
   80c80:	1c6b      	adds	r3, r5, #1
   80c82:	2000      	movs	r0, #0
   80c84:	3502      	adds	r5, #2
   80c86:	6063      	str	r3, [r4, #4]
   80c88:	f844 1025 	str.w	r1, [r4, r5, lsl #2]
   80c8c:	b005      	add	sp, #20
   80c8e:	bdf0      	pop	{r4, r5, r6, r7, pc}
   80c90:	2601      	movs	r6, #1
   80c92:	40ae      	lsls	r6, r5
   80c94:	eb04 0085 	add.w	r0, r4, r5, lsl #2
   80c98:	f8c0 2088 	str.w	r2, [r0, #136]	; 0x88
   80c9c:	f8d4 2188 	ldr.w	r2, [r4, #392]	; 0x188
   80ca0:	2f02      	cmp	r7, #2
   80ca2:	ea42 0206 	orr.w	r2, r2, r6
   80ca6:	f8c4 2188 	str.w	r2, [r4, #392]	; 0x188
   80caa:	f8c0 3108 	str.w	r3, [r0, #264]	; 0x108
   80cae:	d1e7      	bne.n	80c80 <__register_exitproc+0x58>
   80cb0:	f8d4 318c 	ldr.w	r3, [r4, #396]	; 0x18c
   80cb4:	431e      	orrs	r6, r3
   80cb6:	f8c4 618c 	str.w	r6, [r4, #396]	; 0x18c
   80cba:	e7e1      	b.n	80c80 <__register_exitproc+0x58>
   80cbc:	f506 74a6 	add.w	r4, r6, #332	; 0x14c
   80cc0:	f8c6 4148 	str.w	r4, [r6, #328]	; 0x148
   80cc4:	e7b9      	b.n	80c3a <__register_exitproc+0x12>
   80cc6:	bf00      	nop
   80cc8:	00080d2c 	.word	0x00080d2c
   80ccc:	00000000 	.word	0x00000000
   80cd0:	0c040800 	.word	0x0c040800
   80cd4:	0e060a02 	.word	0x0e060a02
   80cd8:	0d050901 	.word	0x0d050901
   80cdc:	0f070b03 	.word	0x0f070b03
   80ce0:	00636261 	.word	0x00636261
   80ce4:	00000061 	.word	0x00000061
   80ce8:	00000062 	.word	0x00000062
   80cec:	00000063 	.word	0x00000063
   80cf0:	74697257 	.word	0x74697257
   80cf4:	20676e69 	.word	0x20676e69
   80cf8:	72206f74 	.word	0x72206f74
   80cfc:	73696765 	.word	0x73696765
   80d00:	00726574 	.word	0x00726574
   80d04:	646c6f68 	.word	0x646c6f68
   80d08:	20676e69 	.word	0x20676e69
   80d0c:	69676572 	.word	0x69676572
   80d10:	72657473 	.word	0x72657473
   80d14:	61657220 	.word	0x61657220
   80d18:	00007964 	.word	0x00007964
   80d1c:	61746164 	.word	0x61746164
   80d20:	6e657320 	.word	0x6e657320
   80d24:	00000074 	.word	0x00000074
   80d28:	00000043 	.word	0x00000043

00080d2c <_global_impure_ptr>:
   80d2c:	20070130                                0.. 

00080d30 <_init>:
   80d30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d32:	bf00      	nop
   80d34:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d36:	bc08      	pop	{r3}
   80d38:	469e      	mov	lr, r3
   80d3a:	4770      	bx	lr

00080d3c <__init_array_start>:
   80d3c:	00080bd9 	.word	0x00080bd9

00080d40 <__frame_dummy_init_array_entry>:
   80d40:	00080119                                ....

00080d44 <_fini>:
   80d44:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
   80d46:	bf00      	nop
   80d48:	bcf8      	pop	{r3, r4, r5, r6, r7}
   80d4a:	bc08      	pop	{r3}
   80d4c:	469e      	mov	lr, r3
   80d4e:	4770      	bx	lr

00080d50 <__fini_array_start>:
   80d50:	000800f5 	.word	0x000800f5

Disassembly of section .relocate:

20070000 <SystemInit>:
__no_inline
RAMFUNC
void SystemInit(void)
{
	/* Set FWS according to SYS_BOARD_MCKR configuration */
	EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
20070000:	f44f 6380 	mov.w	r3, #1024	; 0x400
20070004:	4a20      	ldr	r2, [pc, #128]	; (20070088 <SystemInit+0x88>)
20070006:	6013      	str	r3, [r2, #0]
	EFC1->EEFC_FMR = EEFC_FMR_FWS(4);
20070008:	f502 7200 	add.w	r2, r2, #512	; 0x200
2007000c:	6013      	str	r3, [r2, #0]

	/* Initialize main oscillator */
	if (!(PMC->CKGR_MOR & CKGR_MOR_MOSCSEL)) {
2007000e:	4b1f      	ldr	r3, [pc, #124]	; (2007008c <SystemInit+0x8c>)
20070010:	6a1b      	ldr	r3, [r3, #32]
20070012:	f013 7f80 	tst.w	r3, #16777216	; 0x1000000
20070016:	d107      	bne.n	20070028 <SystemInit+0x28>
		PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070018:	4a1d      	ldr	r2, [pc, #116]	; (20070090 <SystemInit+0x90>)
2007001a:	4b1c      	ldr	r3, [pc, #112]	; (2007008c <SystemInit+0x8c>)
2007001c:	621a      	str	r2, [r3, #32]
			                     CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN;
		while (!(PMC->PMC_SR & PMC_SR_MOSCXTS)) {
2007001e:	461a      	mov	r2, r3
20070020:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070022:	f013 0f01 	tst.w	r3, #1
20070026:	d0fb      	beq.n	20070020 <SystemInit+0x20>
		}
	}

	/* Switch to 3-20MHz Xtal oscillator */
	PMC->CKGR_MOR = SYS_CKGR_MOR_KEY_VALUE | SYS_BOARD_OSCOUNT | 
20070028:	4a1a      	ldr	r2, [pc, #104]	; (20070094 <SystemInit+0x94>)
2007002a:	4b18      	ldr	r3, [pc, #96]	; (2007008c <SystemInit+0x8c>)
2007002c:	621a      	str	r2, [r3, #32]
	                           CKGR_MOR_MOSCRCEN | CKGR_MOR_MOSCXTEN | CKGR_MOR_MOSCSEL;

	while (!(PMC->PMC_SR & PMC_SR_MOSCSELS)) {
2007002e:	461a      	mov	r2, r3
20070030:	6e93      	ldr	r3, [r2, #104]	; 0x68
20070032:	f413 3f80 	tst.w	r3, #65536	; 0x10000
20070036:	d0fb      	beq.n	20070030 <SystemInit+0x30>
	}
 	PMC->PMC_MCKR = (PMC->PMC_MCKR & ~(uint32_t)PMC_MCKR_CSS_Msk) | 
20070038:	4b14      	ldr	r3, [pc, #80]	; (2007008c <SystemInit+0x8c>)
2007003a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
2007003c:	f022 0203 	bic.w	r2, r2, #3
20070040:	f042 0201 	orr.w	r2, r2, #1
20070044:	631a      	str	r2, [r3, #48]	; 0x30
		                     PMC_MCKR_CSS_MAIN_CLK;
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070046:	461a      	mov	r2, r3
20070048:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007004a:	f013 0f08 	tst.w	r3, #8
2007004e:	d0fb      	beq.n	20070048 <SystemInit+0x48>
	}

	/* Initialize PLLA */
	PMC->CKGR_PLLAR = SYS_BOARD_PLLAR;
20070050:	4a11      	ldr	r2, [pc, #68]	; (20070098 <SystemInit+0x98>)
20070052:	4b0e      	ldr	r3, [pc, #56]	; (2007008c <SystemInit+0x8c>)
20070054:	629a      	str	r2, [r3, #40]	; 0x28
	while (!(PMC->PMC_SR & PMC_SR_LOCKA)) {
20070056:	461a      	mov	r2, r3
20070058:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007005a:	f013 0f02 	tst.w	r3, #2
2007005e:	d0fb      	beq.n	20070058 <SystemInit+0x58>
	}

	/* Switch to main clock */
	PMC->PMC_MCKR = (SYS_BOARD_MCKR & ~PMC_MCKR_CSS_Msk) | PMC_MCKR_CSS_MAIN_CLK;
20070060:	2211      	movs	r2, #17
20070062:	4b0a      	ldr	r3, [pc, #40]	; (2007008c <SystemInit+0x8c>)
20070064:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070066:	461a      	mov	r2, r3
20070068:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007006a:	f013 0f08 	tst.w	r3, #8
2007006e:	d0fb      	beq.n	20070068 <SystemInit+0x68>
	}

	/* Switch to PLLA */
	PMC->PMC_MCKR = SYS_BOARD_MCKR;
20070070:	2212      	movs	r2, #18
20070072:	4b06      	ldr	r3, [pc, #24]	; (2007008c <SystemInit+0x8c>)
20070074:	631a      	str	r2, [r3, #48]	; 0x30
	while (!(PMC->PMC_SR & PMC_SR_MCKRDY)) {
20070076:	461a      	mov	r2, r3
20070078:	6e93      	ldr	r3, [r2, #104]	; 0x68
2007007a:	f013 0f08 	tst.w	r3, #8
2007007e:	d0fb      	beq.n	20070078 <SystemInit+0x78>
	}

	SystemCoreClock = CHIP_FREQ_CPU_MAX;
20070080:	4a06      	ldr	r2, [pc, #24]	; (2007009c <SystemInit+0x9c>)
20070082:	4b07      	ldr	r3, [pc, #28]	; (200700a0 <SystemInit+0xa0>)
20070084:	601a      	str	r2, [r3, #0]
20070086:	4770      	bx	lr
20070088:	400e0a00 	.word	0x400e0a00
2007008c:	400e0600 	.word	0x400e0600
20070090:	00370809 	.word	0x00370809
20070094:	01370809 	.word	0x01370809
20070098:	200d3f01 	.word	0x200d3f01
2007009c:	0501bd00 	.word	0x0501bd00
200700a0:	2007012c 	.word	0x2007012c

200700a4 <system_init_flash>:
__no_inline
RAMFUNC
void system_init_flash(uint32_t ul_clk)
{
	/* Set FWS for embedded Flash access according to operating frequency */
	if (ul_clk < CHIP_FREQ_FWS_0) {
200700a4:	4b1b      	ldr	r3, [pc, #108]	; (20070114 <system_init_flash+0x70>)
200700a6:	4298      	cmp	r0, r3
200700a8:	d806      	bhi.n	200700b8 <system_init_flash+0x14>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(0);
200700aa:	2300      	movs	r3, #0
200700ac:	4a1a      	ldr	r2, [pc, #104]	; (20070118 <system_init_flash+0x74>)
200700ae:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(0);
200700b0:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700b4:	6013      	str	r3, [r2, #0]
200700b6:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_1) {
200700b8:	4b18      	ldr	r3, [pc, #96]	; (2007011c <system_init_flash+0x78>)
200700ba:	4298      	cmp	r0, r3
200700bc:	d807      	bhi.n	200700ce <system_init_flash+0x2a>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(1);
200700be:	f44f 7380 	mov.w	r3, #256	; 0x100
200700c2:	4a15      	ldr	r2, [pc, #84]	; (20070118 <system_init_flash+0x74>)
200700c4:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(1);
200700c6:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700ca:	6013      	str	r3, [r2, #0]
200700cc:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_2) {
200700ce:	4b14      	ldr	r3, [pc, #80]	; (20070120 <system_init_flash+0x7c>)
200700d0:	4298      	cmp	r0, r3
200700d2:	d807      	bhi.n	200700e4 <system_init_flash+0x40>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(2);
200700d4:	f44f 7300 	mov.w	r3, #512	; 0x200
200700d8:	4a0f      	ldr	r2, [pc, #60]	; (20070118 <system_init_flash+0x74>)
200700da:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(2);
200700dc:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700e0:	6013      	str	r3, [r2, #0]
200700e2:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_3) {
200700e4:	4b0f      	ldr	r3, [pc, #60]	; (20070124 <system_init_flash+0x80>)
200700e6:	4298      	cmp	r0, r3
200700e8:	d807      	bhi.n	200700fa <system_init_flash+0x56>
		EFC0->EEFC_FMR = EEFC_FMR_FWS(3);
200700ea:	f44f 7340 	mov.w	r3, #768	; 0x300
200700ee:	4a0a      	ldr	r2, [pc, #40]	; (20070118 <system_init_flash+0x74>)
200700f0:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(3);
200700f2:	f502 7200 	add.w	r2, r2, #512	; 0x200
200700f6:	6013      	str	r3, [r2, #0]
200700f8:	4770      	bx	lr
	} else if (ul_clk < CHIP_FREQ_FWS_4) {
200700fa:	4b0b      	ldr	r3, [pc, #44]	; (20070128 <system_init_flash+0x84>)
200700fc:	4298      	cmp	r0, r3
		EFC0->EEFC_FMR = EEFC_FMR_FWS(4);
200700fe:	bf94      	ite	ls
20070100:	f44f 6380 	movls.w	r3, #1024	; 0x400
		EFC1->EEFC_FMR = EEFC_FMR_FWS(4);	
	} else {
		EFC0->EEFC_FMR = EEFC_FMR_FWS(5);
20070104:	f44f 63a0 	movhi.w	r3, #1280	; 0x500
20070108:	4a03      	ldr	r2, [pc, #12]	; (20070118 <system_init_flash+0x74>)
2007010a:	6013      	str	r3, [r2, #0]
		EFC1->EEFC_FMR = EEFC_FMR_FWS(5);
2007010c:	f502 7200 	add.w	r2, r2, #512	; 0x200
20070110:	6013      	str	r3, [r2, #0]
20070112:	4770      	bx	lr
20070114:	0121eabf 	.word	0x0121eabf
20070118:	400e0a00 	.word	0x400e0a00
2007011c:	02faf07f 	.word	0x02faf07f
20070120:	03d08fff 	.word	0x03d08fff
20070124:	04c4b3ff 	.word	0x04c4b3ff
20070128:	055d4a7f 	.word	0x055d4a7f

2007012c <SystemCoreClock>:
2007012c:	003d0900                                ..=.

20070130 <impure_data>:
20070130:	00000000 2007041c 20070484 200704ec     ....... ... ... 
	...
20070164:	00080d28 00000000 00000000 00000000     (...............
	...
200701d8:	00000001 00000000 abcd330e e66d1234     .........3..4.m.
200701e8:	0005deec 0000000b 00000000 00000000     ................
	...
